# Script de teste para verificar a corre√ß√£o do usu√°rio master no m√≥dulo Produtor

Write-Host "=== Teste da Corre√ß√£o: Usu√°rio Master - M√≥dulo Produtor ===" -ForegroundColor Green

# Verificar se as corre√ß√µes foram aplicadas nos arquivos
Write-Host "`nüîç Verificando corre√ß√µes aplicadas..." -ForegroundColor Cyan

$arquivos = @(
    @{
        Path = "FrontEndAdmin/src/app/features/produtores/components/produtor-detail.component.ts"
        Checks = @(
            "ViewChild.*usuarioMasterForm",
            "debugUsuarioMasterValidation",
            "forceValidationUpdate",
            "Object\.keys\(usuario\)\.forEach"
        )
    },
    @{
        Path = "FrontEndAdmin/src/app/features/produtores/components/produtor-detail.component.html"
        Checks = @(
            "#usuarioMasterForm"
        )
    },
    @{
        Path = "FrontEndAdmin/src/app/shared/components/usuario-master-form.component.ts"
        Checks = @(
            "forceValidationUpdate",
            "statusChanges\.subscribe",
            "usuarioFormGroup is required"
        )
    }
)

$totalChecks = 0
$passedChecks = 0

foreach ($arquivo in $arquivos) {
    Write-Host "`nüìÅ Verificando: $($arquivo.Path)" -ForegroundColor Yellow
    
    if (Test-Path $arquivo.Path) {
        $content = Get-Content $arquivo.Path -Raw
        
        foreach ($check in $arquivo.Checks) {
            $totalChecks++
            if ($content -match $check) {
                Write-Host "  ‚úÖ $check" -ForegroundColor Green
                $passedChecks++
            } else {
                Write-Host "  ‚ùå $check" -ForegroundColor Red
            }
        }
    } else {
        Write-Host "  ‚ùå Arquivo n√£o encontrado" -ForegroundColor Red
        $totalChecks += $arquivo.Checks.Count
    }
}

Write-Host "`nüìä Resultado das verifica√ß√µes: $passedChecks/$totalChecks" -ForegroundColor $(if ($passedChecks -eq $totalChecks) { "Green" } else { "Yellow" })

# Verificar se o projeto compila
Write-Host "`nüî® Verificando compila√ß√£o do frontend..." -ForegroundColor Cyan

$frontendDir = "FrontEndAdmin"
if (Test-Path $frontendDir) {
    Set-Location $frontendDir
    
    try {
        Write-Host "Executando npm run build..." -ForegroundColor Gray
        $buildResult = npm run build 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Frontend compila sem erros" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Erro na compila√ß√£o do frontend" -ForegroundColor Red
            Write-Host "Sa√≠da do build:" -ForegroundColor Gray
            Write-Host $buildResult -ForegroundColor Gray
        }
    } catch {
        Write-Host "‚ùå Erro ao executar build: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Set-Location ..
} else {
    Write-Host "‚ùå Diret√≥rio FrontEndAdmin n√£o encontrado" -ForegroundColor Red
}

# Resumo das corre√ß√µes aplicadas
Write-Host "`n=== Resumo das Corre√ß√µes Aplicadas ===" -ForegroundColor Green

Write-Host "`n‚úÖ ProdutorDetailComponent:" -ForegroundColor White
Write-Host "   - Adicionado ViewChild para UsuarioMasterFormComponent" -ForegroundColor Cyan
Write-Host "   - M√©todo onUsuarioMasterChange corrigido com sincroniza√ß√£o adequada" -ForegroundColor Cyan
Write-Host "   - M√©todo debugUsuarioMasterValidation adicionado" -ForegroundColor Cyan
Write-Host "   - M√©todo onSave atualizado com forceValidationUpdate" -ForegroundColor Cyan

Write-Host "`n‚úÖ UsuarioMasterFormComponent:" -ForegroundColor White
Write-Host "   - M√©todo forceValidationUpdate adicionado" -ForegroundColor Cyan
Write-Host "   - Valida√ß√£o de usuarioFormGroup obrigat√≥rio" -ForegroundColor Cyan
Write-Host "   - Subscribe em statusChanges para melhor sincroniza√ß√£o" -ForegroundColor Cyan

Write-Host "`n‚úÖ Template HTML:" -ForegroundColor White
Write-Host "   - Refer√™ncia de template #usuarioMasterForm adicionada" -ForegroundColor Cyan

Write-Host "`nüìã Como testar a corre√ß√£o:" -ForegroundColor Yellow
Write-Host "1. Execute o frontend: cd FrontEndAdmin && npm start" -ForegroundColor White
Write-Host "2. Acesse /produtores/novo" -ForegroundColor White
Write-Host "3. Preencha todos os campos obrigat√≥rios:" -ForegroundColor White
Write-Host "   - Dados Gerais (nome, CPF/CNPJ, telefones)" -ForegroundColor Gray
Write-Host "   - Endere√ßos (pelo menos um)" -ForegroundColor Gray
Write-Host "   - Propriedades (pelo menos uma)" -ForegroundColor Gray
Write-Host "   - Usu√°rio Master (todos os campos)" -ForegroundColor Gray
Write-Host "4. Tente salvar o formul√°rio" -ForegroundColor White
Write-Host "5. O sistema N√ÉO deve mais mostrar erro de usu√°rio master" -ForegroundColor White

Write-Host "`nüîç Debug dispon√≠vel:" -ForegroundColor Yellow
Write-Host "- Se ainda houver problemas, abra o console do navegador" -ForegroundColor White
Write-Host "- O m√©todo debugUsuarioMasterValidation ser√° executado automaticamente" -ForegroundColor White
Write-Host "- Verifique os logs para identificar problemas espec√≠ficos" -ForegroundColor White

if ($passedChecks -eq $totalChecks) {
    Write-Host "`nüéâ Todas as corre√ß√µes foram aplicadas com sucesso!" -ForegroundColor Green
    Write-Host "O problema do usu√°rio master no m√≥dulo Produtor deve estar resolvido." -ForegroundColor Green
} else {
    Write-Host "`n‚ö†Ô∏è  Algumas corre√ß√µes podem n√£o ter sido aplicadas corretamente." -ForegroundColor Yellow
    Write-Host "Verifique os arquivos manualmente se o problema persistir." -ForegroundColor Yellow
}