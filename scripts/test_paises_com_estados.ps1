#!/usr/bin/env pwsh

# Script para testar o endpoint de pa√≠ses com estados inclu√≠dos
# Verifica se a API retorna os pa√≠ses com seus respectivos estados

Write-Host "=== TESTE: Pa√≠ses com Estados Inclu√≠dos ===" -ForegroundColor Cyan
Write-Host ""

# Configura√ß√£o da API
$baseUrl = "https://localhost:7297/api"
$endpoint = "$baseUrl/enderecos/paises"

Write-Host "üîç Testando endpoint: $endpoint" -ForegroundColor Yellow
Write-Host ""

try {
    # Fazer requisi√ß√£o para obter pa√≠ses com estados
    Write-Host "üì° Fazendo requisi√ß√£o GET para obter pa√≠ses..." -ForegroundColor Blue
    
    $response = Invoke-RestMethod -Uri $endpoint -Method GET -ContentType "application/json" -SkipCertificateCheck
    
    Write-Host "‚úÖ Requisi√ß√£o bem-sucedida!" -ForegroundColor Green
    Write-Host ""
    
    # Verificar se retornou dados
    if ($response -and $response.Count -gt 0) {
        Write-Host "üìä Pa√≠ses encontrados: $($response.Count)" -ForegroundColor Green
        Write-Host ""
        
        foreach ($pais in $response) {
            Write-Host "üåç Pa√≠s: $($pais.nome) ($($pais.codigo))" -ForegroundColor Cyan
            Write-Host "   ID: $($pais.id)"
            Write-Host "   Ativo: $($pais.ativo)"
            Write-Host "   Total de Estados: $($pais.totalEstados)"
            
            if ($pais.estados -and $pais.estados.Count -gt 0) {
                Write-Host "   Estados inclu√≠dos: $($pais.estados.Count)" -ForegroundColor Green
                
                # Mostrar alguns estados como exemplo
                $estadosParaMostrar = $pais.estados | Select-Object -First 5
                foreach ($estado in $estadosParaMostrar) {
                    Write-Host "     - $($estado.nome) ($($estado.uf)) - Regi√£o: $($estado.regiao)" -ForegroundColor Gray
                }
                
                if ($pais.estados.Count -gt 5) {
                    Write-Host "     ... e mais $($pais.estados.Count - 5) estados" -ForegroundColor Gray
                }
            } else {
                Write-Host "   ‚ö†Ô∏è  Nenhum estado inclu√≠do" -ForegroundColor Yellow
            }
            Write-Host ""
        }
        
        # Verificar se o Brasil est√° inclu√≠do e tem estados
        $brasil = $response | Where-Object { $_.codigo -eq "BR" }
        if ($brasil) {
            Write-Host "üáßüá∑ Verifica√ß√£o espec√≠fica do Brasil:" -ForegroundColor Green
            Write-Host "   Estados do Brasil: $($brasil.estados.Count)" -ForegroundColor Green
            
            if ($brasil.estados.Count -gt 0) {
                Write-Host "   ‚úÖ Estados inclu√≠dos corretamente!" -ForegroundColor Green
                
                # Verificar se tem as informa√ß√µes necess√°rias
                $estadoExemplo = $brasil.estados[0]
                Write-Host "   Exemplo de estado: $($estadoExemplo.nome) ($($estadoExemplo.uf))" -ForegroundColor Gray
                Write-Host "     - ID: $($estadoExemplo.id)"
                Write-Host "     - Regi√£o: $($estadoExemplo.regiao)"
            } else {
                Write-Host "   ‚ùå Brasil sem estados - poss√≠vel problema no mapeamento" -ForegroundColor Red
            }
        } else {
            Write-Host "‚ö†Ô∏è  Brasil n√£o encontrado na resposta" -ForegroundColor Yellow
        }
        
    } else {
        Write-Host "‚ö†Ô∏è  Nenhum pa√≠s encontrado" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erro na requisi√ß√£o:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    
    if ($_.Exception.Response) {
        Write-Host "Status Code: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
        Write-Host "Status Description: $($_.Exception.Response.StatusDescription)" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "=== Teste de Pa√≠ses Ativos com Estados ===" -ForegroundColor Cyan

try {
    $endpointAtivos = "$baseUrl/enderecos/paises/ativos"
    Write-Host "üì° Testando endpoint de pa√≠ses ativos: $endpointAtivos" -ForegroundColor Blue
    
    $responseAtivos = Invoke-RestMethod -Uri $endpointAtivos -Method GET -ContentType "application/json" -SkipCertificateCheck
    
    Write-Host "‚úÖ Pa√≠ses ativos obtidos: $($responseAtivos.Count)" -ForegroundColor Green
    
    foreach ($pais in $responseAtivos) {
        Write-Host "üåç $($pais.nome): $($pais.totalEstados) estados" -ForegroundColor Cyan
    }
    
} catch {
    Write-Host "‚ùå Erro ao obter pa√≠ses ativos:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
}

Write-Host ""
Write-Host "=== Resumo do Teste ===" -ForegroundColor Cyan
Write-Host "‚úÖ Endpoint testado: /api/enderecos/paises" -ForegroundColor Green
Write-Host "‚úÖ Endpoint testado: /api/enderecos/paises/ativos" -ForegroundColor Green
Write-Host "üìã Verificar se os pa√≠ses incluem os estados corretamente" -ForegroundColor Yellow
Write-Host "üìã Verificar se o frontend pode usar esses dados sem requisi√ß√µes adicionais" -ForegroundColor Yellow
Write-Host ""