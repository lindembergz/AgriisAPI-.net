#!/usr/bin/env pwsh

# Script para testar a otimiza√ß√£o dos pa√≠ses com estados inclu√≠dos
# Verifica se a API retorna os pa√≠ses com estados sem necessidade de requisi√ß√µes adicionais

Write-Host "=== TESTE: Pa√≠ses Otimizados com Estados Inclu√≠dos ===" -ForegroundColor Cyan
Write-Host ""

# Configura√ß√£o da API
$baseUrl = "https://localhost:7297/api"
$endpoint = "$baseUrl/enderecos/paises"

Write-Host "üîç Testando endpoint otimizado: $endpoint" -ForegroundColor Yellow
Write-Host ""

try {
    # Fazer requisi√ß√£o para obter pa√≠ses com estados
    Write-Host "üì° Fazendo requisi√ß√£o GET para obter pa√≠ses..." -ForegroundColor Blue
    
    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
    $response = Invoke-RestMethod -Uri $endpoint -Method GET -ContentType "application/json" -SkipCertificateCheck
    $stopwatch.Stop()
    
    Write-Host "‚úÖ Requisi√ß√£o bem-sucedida em $($stopwatch.ElapsedMilliseconds)ms!" -ForegroundColor Green
    Write-Host ""
    
    # Verificar se retornou dados
    if ($response -and $response.Count -gt 0) {
        Write-Host "üìä Pa√≠ses encontrados: $($response.Count)" -ForegroundColor Green
        Write-Host ""
        
        $totalEstados = 0
        foreach ($pais in $response) {
            Write-Host "üåç Pa√≠s: $($pais.nome) ($($pais.codigo))" -ForegroundColor Cyan
            Write-Host "   ID: $($pais.id)"
            Write-Host "   Ativo: $($pais.ativo)"
            Write-Host "   Total de Estados: $($pais.totalEstados)" -ForegroundColor Green
            
            if ($pais.estados -and $pais.estados.Count -gt 0) {
                Write-Host "   ‚úÖ Estados inclu√≠dos: $($pais.estados.Count)" -ForegroundColor Green
                $totalEstados += $pais.estados.Count
                
                # Mostrar alguns estados como exemplo
                $estadosParaMostrar = $pais.estados | Select-Object -First 3
                foreach ($estado in $estadosParaMostrar) {
                    Write-Host "     - $($estado.nome) ($($estado.uf)) - Regi√£o: $($estado.regiao)" -ForegroundColor Gray
                }
                
                if ($pais.estados.Count -gt 3) {
                    Write-Host "     ... e mais $($pais.estados.Count - 3) estados" -ForegroundColor Gray
                }
                
                # Verificar consist√™ncia entre totalEstados e estados.Count
                if ($pais.totalEstados -eq $pais.estados.Count) {
                    Write-Host "   ‚úÖ Consist√™ncia: totalEstados = estados.Count" -ForegroundColor Green
                } else {
                    Write-Host "   ‚ö†Ô∏è  Inconsist√™ncia: totalEstados ($($pais.totalEstados)) ‚â† estados.Count ($($pais.estados.Count))" -ForegroundColor Yellow
                }
            } else {
                Write-Host "   ‚ö†Ô∏è  Nenhum estado inclu√≠do" -ForegroundColor Yellow
            }
            Write-Host ""
        }
        
        Write-Host "üìà Estat√≠sticas Gerais:" -ForegroundColor Blue
        Write-Host "   Total de Estados em todos os pa√≠ses: $totalEstados" -ForegroundColor Gray
        Write-Host "   Requisi√ß√µes necess√°rias: 1 (otimizado!)" -ForegroundColor Green
        Write-Host "   Requisi√ß√µes economizadas: $($response.Count) (uma por pa√≠s)" -ForegroundColor Green
        Write-Host ""
        
        # Verificar se o Brasil est√° inclu√≠do e tem estados
        $brasil = $response | Where-Object { $_.codigo -eq "BR" }
        if ($brasil) {
            Write-Host "üáßüá∑ Verifica√ß√£o espec√≠fica do Brasil:" -ForegroundColor Green
            Write-Host "   Estados do Brasil: $($brasil.totalEstados)" -ForegroundColor Green
            Write-Host "   Estados inclu√≠dos: $($brasil.estados.Count)" -ForegroundColor Green
            
            if ($brasil.estados.Count -gt 0) {
                Write-Host "   ‚úÖ Estados inclu√≠dos corretamente!" -ForegroundColor Green
                
                # Verificar se tem as informa√ß√µes necess√°rias
                $estadoExemplo = $brasil.estados[0]
                Write-Host "   Exemplo de estado: $($estadoExemplo.nome) ($($estadoExemplo.uf))" -ForegroundColor Gray
                Write-Host "     - ID: $($estadoExemplo.id)"
                Write-Host "     - Regi√£o: $($estadoExemplo.regiao)"
                
                # Verificar se tem todos os estados brasileiros esperados
                if ($brasil.estados.Count -ge 26) {
                    Write-Host "   ‚úÖ Quantidade de estados brasileiros parece correta (‚â•26)" -ForegroundColor Green
                } else {
                    Write-Host "   ‚ö†Ô∏è  Poucos estados brasileiros ($($brasil.estados.Count)). Esperado ‚â•26" -ForegroundColor Yellow
                }
            } else {
                Write-Host "   ‚ùå Brasil sem estados - poss√≠vel problema no mapeamento" -ForegroundColor Red
            }
        } else {
            Write-Host "‚ö†Ô∏è  Brasil n√£o encontrado na resposta" -ForegroundColor Yellow
        }
        
    } else {
        Write-Host "‚ö†Ô∏è  Nenhum pa√≠s encontrado" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erro na requisi√ß√£o:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    
    if ($_.Exception.Response) {
        Write-Host "Status Code: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
        Write-Host "Status Description: $($_.Exception.Response.StatusDescription)" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "=== Teste de Performance ===" -ForegroundColor Cyan

try {
    # Testar m√∫ltiplas requisi√ß√µes para medir performance
    Write-Host "üöÄ Testando performance com 5 requisi√ß√µes..." -ForegroundColor Blue
    
    $times = @()
    for ($i = 1; $i -le 5; $i++) {
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        $response = Invoke-RestMethod -Uri $endpoint -Method GET -ContentType "application/json" -SkipCertificateCheck
        $stopwatch.Stop()
        $times += $stopwatch.ElapsedMilliseconds
        Write-Host "   Requisi√ß√£o $i: $($stopwatch.ElapsedMilliseconds)ms" -ForegroundColor Gray
    }
    
    $avgTime = ($times | Measure-Object -Average).Average
    $minTime = ($times | Measure-Object -Minimum).Minimum
    $maxTime = ($times | Measure-Object -Maximum).Maximum
    
    Write-Host "üìä Estat√≠sticas de Performance:" -ForegroundColor Blue
    Write-Host "   Tempo m√©dio: $([math]::Round($avgTime, 2))ms" -ForegroundColor Green
    Write-Host "   Tempo m√≠nimo: $minTime ms" -ForegroundColor Green
    Write-Host "   Tempo m√°ximo: $maxTime ms" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå Erro no teste de performance:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
}

Write-Host ""
Write-Host "=== Resumo da Otimiza√ß√£o ===" -ForegroundColor Cyan
Write-Host "‚úÖ Endpoint testado: /api/enderecos/paises" -ForegroundColor Green
Write-Host "‚úÖ Estados inclu√≠dos na resposta da API" -ForegroundColor Green
Write-Host "‚úÖ Eliminadas requisi√ß√µes adicionais para obter UFs" -ForegroundColor Green
Write-Host "‚úÖ Frontend pode usar totalEstados diretamente" -ForegroundColor Green
Write-Host "‚úÖ Performance otimizada com menos round-trips" -ForegroundColor Green
Write-Host ""
Write-Host "üéØ Benef√≠cios da otimiza√ß√£o:" -ForegroundColor Yellow
Write-Host "   - Menos requisi√ß√µes HTTP (1 em vez de N+1)" -ForegroundColor Gray
Write-Host "   - Melhor performance e experi√™ncia do usu√°rio" -ForegroundColor Gray
Write-Host "   - Dados sempre consistentes e atualizados" -ForegroundColor Gray
Write-Host "   - C√≥digo mais simples no frontend" -ForegroundColor Gray
Write-Host ""