# =====================================================\n# SCRIPT DE VALIDAÇÃO DA CONVERSÃO DATETIME -> DATETIMEOFFSET\n# Executa testes e validações para confirmar a conversão\n# =====================================================\n\nWrite-Host \"=== VALIDAÇÃO DA CONVERSÃO DATETIME -> DATETIMEOFFSET ===\" -ForegroundColor Green\nWrite-Host \"Data/Hora: $(Get-Date)\" -ForegroundColor Gray\nWrite-Host \"\"\n\n# Definir diretório base\n$baseDir = Split-Path -Parent $PSScriptRoot\n\n# =====================================================\n# FASE 1: COMPILAÇÃO DO PROJETO\n# =====================================================\nWrite-Host \"=== FASE 1: COMPILAÇÃO DO PROJETO ===\" -ForegroundColor Yellow\n\ntry {\n    Write-Host \"Restaurando dependências...\" -ForegroundColor Cyan\n    dotnet restore $baseDir --verbosity quiet\n    \n    if ($LASTEXITCODE -ne 0) {\n        throw \"Falha ao restaurar dependências\"\n    }\n    \n    Write-Host \"✅ Dependências restauradas com sucesso\" -ForegroundColor Green\n    \n    Write-Host \"Compilando projeto...\" -ForegroundColor Cyan\n    dotnet build $baseDir --no-restore --verbosity quiet\n    \n    if ($LASTEXITCODE -ne 0) {\n        throw \"Falha na compilação\"\n    }\n    \n    Write-Host \"✅ Projeto compilado com sucesso\" -ForegroundColor Green\n}\ncatch {\n    Write-Host \"❌ Erro na compilação: $_\" -ForegroundColor Red\n    exit 1\n}\n\nWrite-Host \"\"\n\n# =====================================================\n# FASE 2: EXECUÇÃO DOS TESTES UNITÁRIOS\n# =====================================================\nWrite-Host \"=== FASE 2: EXECUÇÃO DOS TESTES UNITÁRIOS ===\" -ForegroundColor Yellow\n\ntry {\n    Write-Host \"Executando testes de conversão DateTimeOffset...\" -ForegroundColor Cyan\n    \n    $testResult = dotnet test \"$baseDir/tests/Agriis.Tests.Unit\" `\n        --filter \"FullyQualifiedName~DateTimeOffsetConversionTests\" `\n        --no-build `\n        --verbosity normal `\n        --logger \"console;verbosity=detailed\"\n    \n    if ($LASTEXITCODE -ne 0) {\n        throw \"Falha nos testes unitários\"\n    }\n    \n    Write-Host \"✅ Testes unitários executados com sucesso\" -ForegroundColor Green\n}\ncatch {\n    Write-Host \"❌ Erro nos testes unitários: $_\" -ForegroundColor Red\n    Write-Host \"Continuando com outras validações...\" -ForegroundColor Yellow\n}\n\nWrite-Host \"\"\n\n# =====================================================\n# FASE 3: ANÁLISE DE CÓDIGO\n# =====================================================\nWrite-Host \"=== FASE 3: ANÁLISE DE CÓDIGO ===\" -ForegroundColor Yellow\n\n# Verificar se ainda existem DateTime em campos de auditoria\nWrite-Host \"Verificando uso de DateTime em campos de auditoria...\" -ForegroundColor Cyan\n\n$dateTimeUsages = @()\n\n# Buscar DateTime em entidades base\n$entidadeBaseFiles = Get-ChildItem -Path \"$baseDir/src/Agriis.Compartilhado\" -Filter \"*.cs\" -Recurse\nforeach ($file in $entidadeBaseFiles) {\n    $content = Get-Content $file.FullName -Raw\n    if ($content -match \"public\\s+DateTime\\s+Data(Criacao|Atualizacao)\") {\n        $dateTimeUsages += \"$($file.FullName): Campo de auditoria usando DateTime\"\n    }\n}\n\n# Buscar DateTime em DTOs de auditoria\n$dtoFiles = Get-ChildItem -Path \"$baseDir/src/Modulos\" -Filter \"*Dto.cs\" -Recurse\nforeach ($file in $dtoFiles) {\n    $content = Get-Content $file.FullName -Raw\n    if ($content -match \"public\\s+DateTime\\s+Data(Criacao|Atualizacao)\") {\n        $dateTimeUsages += \"$($file.FullName): DTO com campo de auditoria usando DateTime\"\n    }\n}\n\nif ($dateTimeUsages.Count -eq 0) {\n    Write-Host \"✅ Nenhum uso de DateTime encontrado em campos de auditoria\" -ForegroundColor Green\n} else {\n    Write-Host \"⚠️  Usos de DateTime encontrados:\" -ForegroundColor Yellow\n    foreach ($usage in $dateTimeUsages) {\n        Write-Host \"   - $usage\" -ForegroundColor Red\n    }\n}\n\nWrite-Host \"\"\n\n# =====================================================\n# FASE 4: VERIFICAÇÃO DE DATETIEMOFFSET\n# =====================================================\nWrite-Host \"=== FASE 4: VERIFICAÇÃO DE DATETIMEOFFSET ===\" -ForegroundColor Yellow\n\nWrite-Host \"Verificando uso correto de DateTimeOffset...\" -ForegroundColor Cyan\n\n$dateTimeOffsetUsages = @()\n\n# Verificar EntidadeBase\n$entidadeBasePath = \"$baseDir/src/Agriis.Compartilhado/Agriis.Compartilhado.Dominio/Entidades/EntidadeBase.cs\"\nif (Test-Path $entidadeBasePath) {\n    $content = Get-Content $entidadeBasePath -Raw\n    if ($content -match \"public\\s+DateTimeOffset\\s+DataCriacao\") {\n        $dateTimeOffsetUsages += \"✅ EntidadeBase.DataCriacao usa DateTimeOffset\"\n    }\n    if ($content -match \"public\\s+DateTimeOffset\\?\\s+DataAtualizacao\") {\n        $dateTimeOffsetUsages += \"✅ EntidadeBase.DataAtualizacao usa DateTimeOffset?\"\n    }\n    if ($content -match \"DateTimeOffset\\.UtcNow\") {\n        $dateTimeOffsetUsages += \"✅ EntidadeBase usa DateTimeOffset.UtcNow\"\n    }\n}\n\n# Verificar DTOs principais\n$principaisDtos = @(\n    \"$baseDir/src/Modulos/Usuarios/Agriis.Usuarios.Aplicacao/DTOs/UsuarioDto.cs\",\n    \"$baseDir/src/Modulos/Segmentacoes/Agriis.Segmentacoes.Aplicacao/DTOs/GrupoDto.cs\",\n    \"$baseDir/src/Modulos/Segmentacoes/Agriis.Segmentacoes.Aplicacao/DTOs/SegmentacaoDto.cs\"\n)\n\nforeach ($dtoPath in $principaisDtos) {\n    if (Test-Path $dtoPath) {\n        $content = Get-Content $dtoPath -Raw\n        $fileName = Split-Path $dtoPath -Leaf\n        if ($content -match \"public\\s+DateTimeOffset\\s+DataCriacao\") {\n            $dateTimeOffsetUsages += \"✅ $fileName usa DateTimeOffset para DataCriacao\"\n        }\n        if ($content -match \"public\\s+DateTimeOffset\\?\\s+DataAtualizacao\") {\n            $dateTimeOffsetUsages += \"✅ $fileName usa DateTimeOffset? para DataAtualizacao\"\n        }\n    }\n}\n\nforeach ($usage in $dateTimeOffsetUsages) {\n    Write-Host \"   $usage\" -ForegroundColor Green\n}\n\nWrite-Host \"\"\n\n# =====================================================\n# FASE 5: VALIDAÇÃO DE TIMEZONE\n# =====================================================\nWrite-Host \"=== FASE 5: VALIDAÇÃO DE TIMEZONE ===\" -ForegroundColor Yellow\n\nWrite-Host \"Testando comportamento de timezone...\" -ForegroundColor Cyan\n\n# Criar um pequeno teste inline\n$timezoneTest = @\"\nusing System;\n\npublic class TimezoneTest \n{\n    public static void Main()\n    {\n        var utcNow = DateTimeOffset.UtcNow;\n        var localNow = DateTimeOffset.Now;\n        \n        Console.WriteLine($\"UTC Now: {utcNow:O}\");\n        Console.WriteLine($\"Local Now: {localNow:O}\");\n        Console.WriteLine($\"UTC Offset: {utcNow.Offset}\");\n        Console.WriteLine($\"Local Offset: {localNow.Offset}\");\n        Console.WriteLine($\"Same Instant: {utcNow.UtcDateTime == localNow.UtcDateTime}\");\n    }\n}\n\"@\n\n$tempFile = [System.IO.Path]::GetTempFileName() + \".cs\"\n$timezoneTest | Out-File -FilePath $tempFile -Encoding UTF8\n\ntry {\n    $output = dotnet-script $tempFile 2>&1\n    Write-Host \"Resultado do teste de timezone:\" -ForegroundColor Cyan\n    Write-Host $output -ForegroundColor White\n}\ncatch {\n    Write-Host \"⚠️  Não foi possível executar teste de timezone (dotnet-script não disponível)\" -ForegroundColor Yellow\n    Write-Host \"Teste manual: DateTimeOffset.UtcNow deve ter Offset = 00:00:00\" -ForegroundColor Cyan\n}\nfinally {\n    if (Test-Path $tempFile) {\n        Remove-Item $tempFile -Force\n    }\n}\n\nWrite-Host \"\"\n\n# =====================================================\n# FASE 6: RESUMO E RECOMENDAÇÕES\n# =====================================================\nWrite-Host \"=== FASE 6: RESUMO E RECOMENDAÇÕES ===\" -ForegroundColor Yellow\n\nWrite-Host \"RESUMO DA VALIDAÇÃO:\" -ForegroundColor Cyan\n\nif ($dateTimeUsages.Count -eq 0) {\n    Write-Host \"✅ Conversão DateTime -> DateTimeOffset concluída com sucesso\" -ForegroundColor Green\n    Write-Host \"✅ Todos os campos de auditoria usam DateTimeOffset\" -ForegroundColor Green\n} else {\n    Write-Host \"⚠️  Conversão parcialmente concluída\" -ForegroundColor Yellow\n    Write-Host \"❌ Ainda existem campos usando DateTime\" -ForegroundColor Red\n}\n\nWrite-Host \"\"\nWrite-Host \"PRÓXIMOS PASSOS RECOMENDADOS:\" -ForegroundColor Cyan\n\nif ($dateTimeUsages.Count -eq 0) {\n    Write-Host \"1. ✅ Gerar migração EF Core\" -ForegroundColor Green\n    Write-Host \"2. ✅ Testar em ambiente de desenvolvimento\" -ForegroundColor Green\n    Write-Host \"3. ✅ Executar testes de integração\" -ForegroundColor Green\n    Write-Host \"4. ✅ Preparar deploy\" -ForegroundColor Green\n} else {\n    Write-Host \"1. ❌ Corrigir campos DateTime restantes\" -ForegroundColor Red\n    Write-Host \"2. ❌ Re-executar este script\" -ForegroundColor Red\n    Write-Host \"3. ❌ Continuar com migração EF Core\" -ForegroundColor Red\n}\n\nWrite-Host \"\"\nWrite-Host \"COMANDOS ÚTEIS:\" -ForegroundColor Cyan\nWrite-Host \"- Gerar migração: dotnet ef migrations add ConvertToDateTimeOffset\" -ForegroundColor White\nWrite-Host \"- Aplicar migração: dotnet ef database update\" -ForegroundColor White\nWrite-Host \"- Executar testes: dotnet test\" -ForegroundColor White\n\nWrite-Host \"\"\nWrite-Host \"=== VALIDAÇÃO CONCLUÍDA ===\" -ForegroundColor Green\nWrite-Host \"Data/Hora: $(Get-Date)\" -ForegroundColor Gray"