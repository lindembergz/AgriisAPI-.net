#!/bin/bash

# Script Bash para atualizar o schema do Produtor
# Adiciona campos de telefone e cria tabela UsuarioProdutor se necess√°rio

# Configura√ß√µes padr√£o
CONNECTION_STRING=${1:-"host=localhost dbname=DBAgriis user=postgres password=RootPassword123 port=5432"}

echo "=== Atualizando Schema do M√≥dulo Produtor ==="

# Verificar se o psql est√° dispon√≠vel
if ! command -v psql &> /dev/null; then
    echo "‚ùå ERRO: psql n√£o encontrado. Instale o PostgreSQL client."
    echo "üìã Alternativa: Execute o script SQL manualmente no seu cliente PostgreSQL preferido."
    echo "üìÅ Arquivo SQL: scripts/add_telefones_produtor.sql"
    exit 1
fi

echo "‚úÖ PostgreSQL Client encontrado: $(psql --version)"

# Executar o script SQL
echo "üîÑ Executando script SQL..."

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SQL_FILE="$SCRIPT_DIR/add_telefones_produtor.sql"

if [ ! -f "$SQL_FILE" ]; then
    echo "‚ùå ERRO: Arquivo SQL n√£o encontrado: $SQL_FILE"
    exit 1
fi

# Executar o script SQL
if psql "$CONNECTION_STRING" -f "$SQL_FILE"; then
    echo "‚úÖ Script SQL executado com sucesso!"
else
    echo "‚ùå Erro ao executar script SQL. C√≥digo de sa√≠da: $?"
    exit 1
fi

# Navegar para o diret√≥rio do projeto
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
cd "$PROJECT_DIR" || exit 1

echo "üìÅ Diret√≥rio do projeto: $PROJECT_DIR"

# Compilar o projeto para garantir que n√£o h√° erros
echo "üî® Compilando projeto..."
if dotnet build src/Agriis.Api --no-restore; then
    echo "‚úÖ Compila√ß√£o bem-sucedida!"
else
    echo "‚ùå Erro na compila√ß√£o. Verifique os erros acima."
    exit 1
fi

# Tentar criar uma nova migra√ß√£o para sincronizar o modelo
echo "üîÑ Tentando sincronizar modelo do Entity Framework..."

MIGRATION_NAME="SincronizarTelefonesProdutorUsuarioMaster_$(date +%Y%m%d%H%M%S)"

if dotnet ef migrations add "$MIGRATION_NAME" --project src/Agriis.Api --force; then
    echo "‚úÖ Migra√ß√£o criada: $MIGRATION_NAME"
    
    # Verificar se a migra√ß√£o est√° vazia (apenas sincroniza√ß√£o)
    MIGRATION_FILE=$(find src/Agriis.Api/Migrations -name "*$MIGRATION_NAME.cs" | head -1)
    if [ -f "$MIGRATION_FILE" ]; then
        if grep -q "protected override void Up(MigrationBuilder migrationBuilder)" "$MIGRATION_FILE" && \
           grep -q "protected override void Down(MigrationBuilder migrationBuilder)" "$MIGRATION_FILE"; then
            echo "‚úÖ Migra√ß√£o vazia criada - modelo j√° est√° sincronizado!"
        else
            echo "‚ö†Ô∏è  Migra√ß√£o cont√©m altera√ß√µes. Revise o arquivo antes de aplicar."
        fi
    fi
else
    echo "‚ö†Ô∏è  N√£o foi poss√≠vel criar migra√ß√£o autom√°tica. Isso √© normal se o modelo j√° est√° sincronizado."
fi

echo ""
echo "=== Resumo das Altera√ß√µes ==="
echo "‚úÖ Campos adicionados na tabela Produtor:"
echo "   - Telefone1 (VARCHAR(20))"
echo "   - Telefone2 (VARCHAR(20))"
echo "   - Telefone3 (VARCHAR(20))"
echo "   - Email (VARCHAR(100))"
echo ""
echo "‚úÖ Tabela UsuarioProdutor verificada/criada com:"
echo "   - Relacionamento Usuario <-> Produtor"
echo "   - Campo EhProprietario para identificar propriet√°rio principal"
echo "   - √çndices otimizados para consultas"
echo ""
echo "‚úÖ Backend atualizado:"
echo "   - DTOs com novos campos de telefone"
echo "   - Servi√ßo com m√©todo CriarCompletoAsync"
echo "   - Controller com endpoint /completo"
echo "   - Reposit√≥rio UsuarioProdutorRepository"
echo ""
echo "‚úÖ Frontend atualizado:"
echo "   - Formul√°rio com 3 campos de telefone"
echo "   - Servi√ßo com m√©todo createComplete"
echo "   - Modelos TypeScript atualizados"
echo ""
echo "üéâ Atualiza√ß√£o conclu√≠da com sucesso!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Teste a cria√ß√£o de produtores no frontend"
echo "2. Verifique se o usu√°rio master √© criado corretamente"
echo "3. Confirme se o relacionamento UsuarioProdutor funciona"
echo ""
echo "üîó Endpoints dispon√≠veis:"
echo "   POST /api/produtores/completo - Criar produtor com usu√°rio master"
echo "   POST /api/produtores - Criar produtor simples"