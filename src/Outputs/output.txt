<Program.cs>
using Serilog;
using Agriis.Api.Configuration;
using Agriis.Api.Middleware;

var builder = WebApplication.CreateBuilder(args);

// Configure Serilog with structured logging
builder.Host.ConfigureSerilogLogging();

// Configure Database
builder.Services.AddDatabaseConfiguration(builder.Configuration, builder.Environment);

// Configure Authentication & Authorization
builder.Services.AddJwtAuthentication(builder.Configuration);
builder.Services.AddAuthorizationPolicies();

// Configure Modules
builder.Services.AddEnderecosModule();
builder.Services.AddUsuariosModule();
builder.Services.AddAutenticacaoServices();
builder.Services.AddCulturasModule();
builder.Services.AddProdutoresModule();
builder.Services.AddPropriedadesModule();
builder.Services.AddFornecedoresModule();
builder.Services.AddPontosDistribuicaoModule();
builder.Services.AddSafrasModule();
builder.Services.AddCatalogosModule();
builder.Services.AddPagamentosModule();
builder.Services.AddProdutosModule();
builder.Services.AddSegmentacoesModule();
builder.Services.AddPedidosModule();
builder.Services.AddCombosModule();

// Configure AutoMapper
builder.Services.AddAutoMapperConfiguration();

// Add services to the container
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();

// Configure Swagger/OpenAPI
builder.Services.AddSwaggerConfiguration();

// Configure CORS
builder.Services.AddCorsConfiguration(builder.Configuration, builder.Environment);

// Configure Health Checks
builder.Services.AddHealthChecksConfiguration(builder.Configuration);

// Configure External Integrations
builder.Services.AddExternalIntegrations(builder.Configuration);

// Configure Logging
builder.Services.AddLoggingConfiguration(builder.Configuration, builder.Environment);

var app = builder.Build();

// Configure the HTTP request pipeline

// Global Exception Handling (deve ser o primeiro middleware)
app.UseMiddleware<GlobalExceptionMiddleware>();

// Request Logging (antes de outros middlewares)
app.UseRequestLogging();

// Configure Swagger/OpenAPI
app.UseSwaggerConfiguration();

// Use Serilog for request logging (após o middleware customizado)
app.UseSerilogRequestLogging();

app.UseHttpsRedirection();

// Use CORS (deve vir antes da autenticação)
var corsPolicy = CorsConfiguration.GetPolicyName(app.Environment);
app.UseCors(corsPolicy);

// Use Authentication & Authorization
app.UseAuthentication();
app.UseMiddleware<JwtAuthenticationMiddleware>();
app.UseAuthorization();

app.MapControllers();

// Configure Health Checks
app.UseHealthChecksConfiguration();

// Configure External Integrations
app.ConfigureExternalIntegrations();

// Basic API info endpoint
app.MapGet("/", () => new
{
    Application = "Agriis API",
    Version = "1.0.0",
    Environment = app.Environment.EnvironmentName,
    Timestamp = DateTime.UtcNow
})
.WithName("GetApiInfo")
.WithOpenApi();



try
{
    Log.Information("Starting Agriis API");
    
    // Apply database migrations and seed data
    await app.ApplyDatabaseMigrationsAsync();
    await app.SeedDatabaseAsync();
    
    app.Run();
}
catch (Exception ex)
{
    Log.Fatal(ex, "Application terminated unexpectedly");
}
finally
{
    Log.CloseAndFlush();
}

// Make Program class accessible for testing
public partial class Program { }

</Program.cs>
<AutenticacaoDependencyInjection.cs>
using Agriis.Api.Contexto;
using Agriis.Autenticacao.Aplicacao.Interfaces;
using Agriis.Autenticacao.Aplicacao.Servicos;
using Agriis.Autenticacao.Dominio.Interfaces;
using Agriis.Autenticacao.Infraestrutura.Repositorios;
using Agriis.Autenticacao.Infraestrutura.Servicos;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de autenticação
/// </summary>
public static class AutenticacaoDependencyInjection
{
    /// <summary>
    /// Registra os serviços do módulo de autenticação
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços</returns>
    public static IServiceCollection AddAutenticacaoServices(this IServiceCollection services)
    {
        // Serviços de aplicação
        services.AddScoped<IAutenticacaoService, AutenticacaoService>();

        // Serviços de domínio/infraestrutura
        services.AddScoped<ITokenService, TokenService>();
        services.AddScoped<IPasswordService, PasswordService>();

        // Repositórios
        services.AddScoped<IRefreshTokenRepository, RefreshTokenRepository>();

        return services;
    }
}
</AutenticacaoDependencyInjection.cs>
<AuthenticationConfiguration.cs>
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de autenticação JWT
/// </summary>
public static class AuthenticationConfiguration
{
    /// <summary>
    /// Configura autenticação JWT
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <param name="configuration">Configuração da aplicação</param>
    /// <returns>Coleção de serviços</returns>
    public static IServiceCollection AddJwtAuthentication(this IServiceCollection services, IConfiguration configuration)
    {
        var jwtSettings = configuration.GetSection("JwtSettings");
        var secretKey = jwtSettings["SecretKey"] ?? throw new InvalidOperationException("JWT SecretKey não configurada");
        var issuer = jwtSettings["Issuer"] ?? "Agriis.Api";
        var audience = jwtSettings["Audience"] ?? "Agriis.Client";

        var key = Encoding.ASCII.GetBytes(secretKey);

        services.AddAuthentication(options =>
        {
            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
        })
        .AddJwtBearer(options =>
        {
            options.RequireHttpsMetadata = false; // Para desenvolvimento
            options.SaveToken = true;
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = issuer,
                ValidateAudience = true,
                ValidAudience = audience,
                ValidateLifetime = true,
                ClockSkew = TimeSpan.Zero, // Remove delay padrão de 5 minutos
                RequireExpirationTime = true
            };

            options.Events = new JwtBearerEvents
            {
                OnAuthenticationFailed = context =>
                {
                    var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
                    logger.LogWarning("Falha na autenticação JWT: {Exception}", context.Exception.Message);
                    return Task.CompletedTask;
                },
                OnTokenValidated = context =>
                {
                    var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
                    var userId = context.Principal?.FindFirst("user_id")?.Value;
                    logger.LogDebug("Token JWT validado para usuário: {UserId}", userId);
                    return Task.CompletedTask;
                },
                OnChallenge = context =>
                {
                    var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
                    logger.LogWarning("Desafio de autenticação JWT: {Error} - {ErrorDescription}", 
                        context.Error, context.ErrorDescription);
                    return Task.CompletedTask;
                }
            };
        });

        return services;
    }

    /// <summary>
    /// Configura políticas de autorização
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços</returns>
    public static IServiceCollection AddAuthorizationPolicies(this IServiceCollection services)
    {
        services.AddAuthorization(options =>
        {
            // Política para administradores
            options.AddPolicy("AdminOnly", policy =>
                policy.RequireRole("RoleAdmin"));

            // Política para fornecedores (admin ou representante)
            options.AddPolicy("FornecedorOnly", policy =>
                policy.RequireRole("RoleFornecedorWebAdmin", "RoleFornecedorWebRepresentante"));

            // Política para administradores de fornecedor
            options.AddPolicy("FornecedorAdminOnly", policy =>
                policy.RequireRole("RoleFornecedorWebAdmin"));

            // Política para compradores/produtores
            options.AddPolicy("CompradorOnly", policy =>
                policy.RequireRole("RoleComprador"));

            // Política para usuários autenticados (qualquer role)
            options.AddPolicy("AuthenticatedUser", policy =>
                policy.RequireAuthenticatedUser());

            // Política para administradores ou fornecedores
            options.AddPolicy("AdminOrFornecedor", policy =>
                policy.RequireRole("RoleAdmin", "RoleFornecedorWebAdmin", "RoleFornecedorWebRepresentante"));

            // Política para administradores ou compradores
            options.AddPolicy("AdminOrComprador", policy =>
                policy.RequireRole("RoleAdmin", "RoleComprador"));
        });

        return services;
    }
}
</AuthenticationConfiguration.cs>
<AutoMapperConfiguration.cs>
using AutoMapper;
using Agriis.Enderecos.Aplicacao.Mapeamentos;
using Agriis.Usuarios.Aplicacao.Mapeamentos;
using Agriis.Culturas.Aplicacao.Mapeamentos;
using Agriis.Produtores.Aplicacao.Mapeamentos;
using Agriis.Propriedades.Aplicacao.Mapeamentos;
using Agriis.Fornecedores.Aplicacao.Mapeamentos;
using Agriis.PontosDistribuicao.Aplicacao.Mapeamentos;
using Agriis.Safras.Aplicacao.Mapeamentos;
using Agriis.Catalogos.Aplicacao.Mapeamentos;
using Agriis.Pagamentos.Aplicacao.Mapeamentos;
using Agriis.Combos.Aplicacao.Mapeamentos;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração centralizada do AutoMapper
/// </summary>
public static class AutoMapperConfiguration
{
    /// <summary>
    /// Configura o AutoMapper com todos os profiles dos módulos
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços configurada</returns>
    public static IServiceCollection AddAutoMapperConfiguration(this IServiceCollection services)
    {
        // Configurar AutoMapper manualmente
        var config = new MapperConfiguration(cfg =>
        {
            cfg.AddProfile<EnderecoMappingProfile>();
            cfg.AddProfile<UsuarioMappingProfile>();
            cfg.AddProfile<CulturaMappingProfile>();
            cfg.AddProfile<ProdutorMappingProfile>();
            cfg.AddProfile<PropriedadeMappingProfile>();
            cfg.AddProfile<FornecedorMappingProfile>();
            cfg.AddProfile<PontoDistribuicaoMappingProfile>();
            cfg.AddProfile<SafraMappingProfile>();
            cfg.AddProfile<CatalogoMappingProfile>();
            cfg.AddProfile<PagamentoMappingProfile>();
            cfg.AddProfile<ComboMappingProfile>();
        });

        services.AddSingleton(config);
        services.AddSingleton<IMapper>(provider => new Mapper(config));

        return services;
    }
}
</AutoMapperConfiguration.cs>
<CatalogosDependencyInjection.cs>
using Agriis.Catalogos.Dominio.Interfaces;
using Agriis.Catalogos.Infraestrutura.Repositorios;
using Agriis.Catalogos.Aplicacao.Interfaces;
using Agriis.Catalogos.Aplicacao.Servicos;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Catálogos
/// </summary>
public static class CatalogosDependencyInjection
{
    /// <summary>
    /// Configura os serviços do módulo de Catálogos
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços configurada</returns>
    public static IServiceCollection AddCatalogosModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<ICatalogoRepository, CatalogoRepository>();
        services.AddScoped<ICatalogoItemRepository, CatalogoItemRepository>();

        // Serviços de Aplicação
        services.AddScoped<ICatalogoService, CatalogoService>();

        return services;
    }
}
</CatalogosDependencyInjection.cs>
<CombosDependencyInjection.cs>
using Agriis.Combos.Aplicacao.Interfaces;
using Agriis.Combos.Aplicacao.Servicos;
using Agriis.Combos.Dominio.Interfaces;
using Agriis.Combos.Infraestrutura.Repositorios;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Combos
/// </summary>
public static class CombosDependencyInjection
{
    /// <summary>
    /// Adiciona os serviços do módulo de Combos
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços</returns>
    public static IServiceCollection AddCombosModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<IComboRepository, ComboRepository>();
        
        // Serviços de aplicação
        services.AddScoped<IComboService, ComboService>();
        
        return services;
    }
}
</CombosDependencyInjection.cs>
<CorsConfiguration.cs>
namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de CORS (Cross-Origin Resource Sharing)
/// </summary>
public static class CorsConfiguration
{
    public const string DefaultPolicyName = "DefaultCorsPolicy";
    public const string DevelopmentPolicyName = "DevelopmentCorsPolicy";
    public const string ProductionPolicyName = "ProductionCorsPolicy";

    public static IServiceCollection AddCorsConfiguration(
        this IServiceCollection services, 
        IConfiguration configuration,
        IWebHostEnvironment environment)
    {
        var corsSettings = configuration.GetSection("CorsSettings");
        
        services.AddCors(options =>
        {
            // Política padrão baseada na configuração
            options.AddPolicy(DefaultPolicyName, policy =>
            {
                ConfigurePolicy(policy, corsSettings);
            });

            // Política específica para desenvolvimento
            options.AddPolicy(DevelopmentPolicyName, policy =>
            {
                policy.AllowAnyOrigin()
                      .AllowAnyMethod()
                      .AllowAnyHeader();
            });

            // Política específica para produção
            options.AddPolicy(ProductionPolicyName, policy =>
            {
                var allowedOrigins = corsSettings.GetSection("AllowedOrigins").Get<string[]>() 
                    ?? Array.Empty<string>();
                
                if (allowedOrigins.Length > 0)
                {
                    policy.WithOrigins(allowedOrigins);
                }

                policy.WithMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                      .WithHeaders("Content-Type", "Authorization", "X-Correlation-ID", "X-Requested-With")
                      .SetIsOriginAllowedToAllowWildcardSubdomains()
                      .SetPreflightMaxAge(TimeSpan.FromMinutes(10));

                var allowCredentials = corsSettings.GetValue<bool>("AllowCredentials");
                if (allowCredentials)
                {
                    policy.AllowCredentials();
                }
            });
        });

        return services;
    }

    private static void ConfigurePolicy(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder policy, IConfigurationSection corsSettings)
    {
        var allowedOrigins = corsSettings.GetSection("AllowedOrigins").Get<string[]>();
        var allowedMethods = corsSettings.GetSection("AllowedMethods").Get<string[]>();
        var allowedHeaders = corsSettings.GetSection("AllowedHeaders").Get<string[]>();
        var allowCredentials = corsSettings.GetValue<bool>("AllowCredentials");

        // Configurar origens
        if (allowedOrigins?.Length > 0)
        {
            if (allowedOrigins.Contains("*"))
            {
                policy.AllowAnyOrigin();
            }
            else
            {
                policy.WithOrigins(allowedOrigins)
                      .SetIsOriginAllowedToAllowWildcardSubdomains();
            }
        }
        else
        {
            policy.AllowAnyOrigin();
        }

        // Configurar métodos
        if (allowedMethods?.Length > 0)
        {
            if (allowedMethods.Contains("*"))
            {
                policy.AllowAnyMethod();
            }
            else
            {
                policy.WithMethods(allowedMethods);
            }
        }
        else
        {
            policy.AllowAnyMethod();
        }

        // Configurar headers
        if (allowedHeaders?.Length > 0)
        {
            if (allowedHeaders.Contains("*"))
            {
                policy.AllowAnyHeader();
            }
            else
            {
                policy.WithHeaders(allowedHeaders);
            }
        }
        else
        {
            policy.AllowAnyHeader();
        }

        // Configurar credenciais
        if (allowCredentials && !allowedOrigins?.Contains("*") == true)
        {
            policy.AllowCredentials();
        }

        // Configurações adicionais para produção
        policy.SetPreflightMaxAge(TimeSpan.FromMinutes(10));
    }

    public static string GetPolicyName(IWebHostEnvironment environment)
    {
        return environment.EnvironmentName switch
        {
            "Development" => DevelopmentPolicyName,
            "Production" => ProductionPolicyName,
            _ => DefaultPolicyName
        };
    }
}
</CorsConfiguration.cs>
<CulturasDependencyInjection.cs>
using Agriis.Culturas.Dominio.Interfaces;
using Agriis.Culturas.Infraestrutura.Repositorios;
using Agriis.Culturas.Aplicacao.Interfaces;
using Agriis.Culturas.Aplicacao.Servicos;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Culturas
/// </summary>
public static class CulturasDependencyInjection
{
    /// <summary>
    /// Configura os serviços do módulo de Culturas
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços configurada</returns>
    public static IServiceCollection AddCulturasModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<ICulturaRepository, CulturaRepository>();

        // Serviços de Aplicação
        services.AddScoped<ICulturaService, CulturaService>();

        return services;
    }
}
</CulturasDependencyInjection.cs>
<DatabaseConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Api.Contexto;

namespace Agriis.Api.Configuration;

public static class DatabaseConfiguration
{
    public static IServiceCollection AddDatabaseConfiguration(
        this IServiceCollection services, 
        IConfiguration configuration, 
        IWebHostEnvironment environment)
    {
        var connectionString = configuration.GetConnectionString("DefaultConnection")
            ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");

        services.AddDbContext<AgriisDbContext>(options =>
        {
            ConfigureNpgsqlOptions(options, connectionString, environment);
        });

        // Registrar DbContext genérico para repositórios
        services.AddScoped<DbContext>(provider => provider.GetRequiredService<AgriisDbContext>());

        // Registrar Unit of Work
        services.AddScoped<Agriis.Compartilhado.Dominio.Interfaces.IUnitOfWork, 
            Agriis.Compartilhado.Infraestrutura.Persistencia.UnitOfWork<AgriisDbContext>>();

        return services;
    }

    private static void ConfigureNpgsqlOptions(
        DbContextOptionsBuilder options, 
        string connectionString, 
        IWebHostEnvironment environment)
    {
        options.UseNpgsql(connectionString, npgsqlOptions =>
        {
            // Configurar retry policy
            npgsqlOptions.EnableRetryOnFailure(
                maxRetryCount: 3,
                maxRetryDelay: TimeSpan.FromSeconds(30),
                errorCodesToAdd: null);

            // Configurar timeout para comandos
            npgsqlOptions.CommandTimeout(30);

            // TODO: Habilitar NetTopologySuite para dados geoespaciais (PostGIS) quando a extensão estiver instalada
            // npgsqlOptions.UseNetTopologySuite();

            // Configurações específicas para produção
            if (environment.IsProduction())
            {
                // Em produção, usar configurações mais restritivas
                npgsqlOptions.CommandTimeout(60); // Timeout maior para produção
            }
        });

        // Configurações específicas por ambiente
        if (environment.IsDevelopment())
        {
            options.EnableSensitiveDataLogging();
            options.EnableDetailedErrors();
            options.LogTo(Console.WriteLine, LogLevel.Information);
        }
        else if (environment.IsProduction())
        {
            // Em produção, desabilitar logs sensíveis
            options.EnableServiceProviderCaching();
            options.EnableSensitiveDataLogging(false);
        }
    }

    public static IServiceCollection AddDatabaseHealthChecks(
        this IServiceCollection services, 
        IConfiguration configuration)
    {
        var connectionString = configuration.GetConnectionString("DefaultConnection")!;
        var healthCheckTimeout = configuration.GetValue<int>("HealthChecks:DatabaseTimeoutInSeconds", 30);

        services.AddHealthChecks()
            .AddNpgSql(
                connectionString,
                name: "postgresql",
                tags: new[] { "db", "sql", "postgresql" },
                timeout: TimeSpan.FromSeconds(healthCheckTimeout));

        return services;
    }

    public static async Task<WebApplication> ApplyDatabaseMigrationsAsync(this WebApplication app)
    {
        using var scope = app.Services.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AgriisDbContext>();
        var logger = scope.ServiceProvider.GetRequiredService<ILogger<AgriisDbContext>>();

        try
        {
            logger.LogInformation("Verificando se há migrações pendentes...");
            
            var pendingMigrations = await context.Database.GetPendingMigrationsAsync();
            
            if (pendingMigrations.Any())
            {
                logger.LogInformation("Aplicando {Count} migrações pendentes: {Migrations}", 
                    pendingMigrations.Count(), 
                    string.Join(", ", pendingMigrations));
                
                await context.Database.MigrateAsync();
                
                logger.LogInformation("Migrações aplicadas com sucesso");
            }
            else
            {
                logger.LogInformation("Nenhuma migração pendente encontrada");
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Erro ao aplicar migrações do banco de dados");
            
            // Em desenvolvimento, podemos continuar mesmo com erro de migração
            // Em produção, isso deve parar a aplicação
            if (app.Environment.IsProduction())
            {
                throw;
            }
        }

        return app;
    }

    public static async Task<WebApplication> SeedDatabaseAsync(this WebApplication app)
    {
        using var scope = app.Services.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AgriisDbContext>();
        var logger = scope.ServiceProvider.GetRequiredService<ILogger<AgriisDbContext>>();

        try
        {
            logger.LogInformation("Verificando se é necessário popular dados iniciais...");
            
            // Aqui será implementada a lógica de seed quando necessário
            // Por exemplo, criar dados básicos como estados, culturas padrão, etc.
            
            await SeedBasicDataIfNeeded(context, logger);
            
            logger.LogInformation("Verificação de dados iniciais concluída");
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Erro ao popular dados iniciais");
            
            // Seed não deve parar a aplicação, apenas logar o erro
        }

        return app;
    }

    private static async Task SeedBasicDataIfNeeded(AgriisDbContext context, ILogger logger)
    {
        // Esta função será implementada quando tivermos as entidades criadas
        // Por enquanto, apenas verificar se o banco está acessível
        
        var canConnect = await context.Database.CanConnectAsync();
        
        if (canConnect)
        {
            logger.LogInformation("Conexão com banco de dados estabelecida com sucesso");
        }
        else
        {
            logger.LogWarning("Não foi possível estabelecer conexão com o banco de dados");
        }
    }
}
</DatabaseConfiguration.cs>
<EnderecosDependencyInjection.cs>
using Agriis.Enderecos.Dominio.Interfaces;
using Agriis.Enderecos.Infraestrutura.Repositorios;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Endereços
/// </summary>
public static class EnderecosDependencyInjection
{
    /// <summary>
    /// Configura os serviços do módulo de Endereços
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços configurada</returns>
    public static IServiceCollection AddEnderecosModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<IEstadoRepository, EstadoRepository>();
        services.AddScoped<IMunicipioRepository, MunicipioRepository>();
        services.AddScoped<IEnderecoRepository, EnderecoRepository>();

        return services;
    }
}
</EnderecosDependencyInjection.cs>
<ExternalIntegrationsConfiguration.cs>
using Agriis.Compartilhado.Infraestrutura.Integracoes;
using Amazon.S3;
using Microsoft.AspNetCore.SignalR;

namespace Agriis.Api.Configuration;

public static class ExternalIntegrationsConfiguration
{
    public static IServiceCollection AddExternalIntegrations(this IServiceCollection services, IConfiguration configuration)
    {
        // Memory Cache (required by CurrencyConverterService)
        services.AddMemoryCache();

        // AWS Services
        services.AddAWSService<IAmazonS3>();
        services.AddScoped<IAwsService, AwsService>();

        // SignalR
        services.AddSignalR(options =>
        {
            options.EnableDetailedErrors = true;
            options.KeepAliveInterval = TimeSpan.FromSeconds(15);
            options.ClientTimeoutInterval = TimeSpan.FromSeconds(30);
        });

        // Notification Service
        services.AddScoped<INotificationService, NotificationService>();

        // Currency Converter
        services.AddHttpClient<ICurrencyConverterService, CurrencyConverterService>(client =>
        {
            client.Timeout = TimeSpan.FromSeconds(30);
            client.DefaultRequestHeaders.Add("User-Agent", "Agriis-API/1.0");
        });
        services.AddScoped<ICurrencyConverterService, CurrencyConverterService>();

        // Background Services
        services.AddHostedService<CurrencyRateUpdateService>();

        return services;
    }

    public static WebApplication ConfigureExternalIntegrations(this WebApplication app)
    {
        // SignalR Hub
        app.MapHub<NotificationHub>("/hubs/notifications");

        return app;
    }
}
</ExternalIntegrationsConfiguration.cs>
<FornecedoresDependencyInjection.cs>
using Agriis.Fornecedores.Aplicacao.Interfaces;
using Agriis.Fornecedores.Aplicacao.Servicos;
using Agriis.Fornecedores.Dominio.Interfaces;
using Agriis.Fornecedores.Dominio.Servicos;
using Agriis.Fornecedores.Infraestrutura.Repositorios;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Fornecedores
/// </summary>
public static class FornecedoresDependencyInjection
{
    /// <summary>
    /// Registra os serviços do módulo de Fornecedores
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços configurada</returns>
    public static IServiceCollection AddFornecedoresModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<IFornecedorRepository, FornecedorRepository>();
        services.AddScoped<IUsuarioFornecedorRepository, UsuarioFornecedorRepository>();
        services.AddScoped<IUsuarioFornecedorTerritorioRepository, UsuarioFornecedorTerritorioRepository>();
        
        // Serviços de domínio
        services.AddScoped<FornecedorDomainService>();
        
        // Serviços de aplicação
        services.AddScoped<IFornecedorService, FornecedorService>();
        
        return services;
    }
}
</FornecedoresDependencyInjection.cs>
<HealthChecksConfiguration.cs>
using Microsoft.Extensions.Diagnostics.HealthChecks;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de Health Checks
/// </summary>
public static class HealthChecksConfiguration
{
    public static IServiceCollection AddHealthChecksConfiguration(
        this IServiceCollection services, 
        IConfiguration configuration)
    {
        var healthChecksBuilder = services.AddHealthChecks();

        // Health check do banco de dados PostgreSQL
        AddDatabaseHealthCheck(healthChecksBuilder, configuration);

        // Health check dos serviços externos
        AddExternalServicesHealthChecks(healthChecksBuilder, configuration);

        // Health check de memória
        AddMemoryHealthCheck(healthChecksBuilder, configuration);

        // Configurar formatadores de resposta
        services.Configure<HealthCheckPublisherOptions>(options =>
        {
            options.Delay = TimeSpan.FromSeconds(2);
            options.Period = TimeSpan.FromSeconds(30);
        });

        return services;
    }

    private static void AddDatabaseHealthCheck(IHealthChecksBuilder builder, IConfiguration configuration)
    {
        var connectionString = configuration.GetConnectionString("DefaultConnection");
        var timeout = configuration.GetValue<int>("HealthChecks:DatabaseTimeoutInSeconds", 30);

        if (!string.IsNullOrEmpty(connectionString))
        {
            builder.AddNpgSql(
                connectionString,
                name: "postgresql",
                failureStatus: HealthStatus.Unhealthy,
                tags: new[] { "db", "sql", "postgresql" },
                timeout: TimeSpan.FromSeconds(timeout));
        }
    }

    private static void AddExternalServicesHealthChecks(IHealthChecksBuilder builder, IConfiguration configuration)
    {
        // Health check do SERPRO
        var serproSettings = configuration.GetSection("SerproSettings");
        var serproBaseUrl = serproSettings.GetValue<string>("BaseUrl");
        
        if (!string.IsNullOrEmpty(serproBaseUrl))
        {
            builder.AddUrlGroup(
                new Uri($"{serproBaseUrl}/health"),
                name: "serpro-api",
                failureStatus: HealthStatus.Degraded,
                tags: new[] { "external", "serpro" },
                timeout: TimeSpan.FromSeconds(10));
        }

        // Health check do AWS S3 (verificação básica)
        var awsSettings = configuration.GetSection("AwsSettings");
        var s3BucketName = awsSettings.GetValue<string>("S3BucketName");
        
        if (!string.IsNullOrEmpty(s3BucketName))
        {
            builder.AddCheck<AwsS3HealthCheck>(
                "aws-s3",
                failureStatus: HealthStatus.Degraded,
                tags: new[] { "external", "aws", "s3" },
                timeout: TimeSpan.FromSeconds(15));
        }

        // Health check do Hangfire (se configurado)
        var hangfireConnectionString = configuration.GetValue<string>("HangfireSettings:ConnectionString");
        
        if (!string.IsNullOrEmpty(hangfireConnectionString))
        {
            builder.AddHangfire(options =>
            {
                options.MinimumAvailableServers = 1;
            },
            name: "hangfire",
            failureStatus: HealthStatus.Degraded,
            tags: new[] { "hangfire", "background-jobs" });
        }
    }

    private static void AddMemoryHealthCheck(IHealthChecksBuilder builder, IConfiguration configuration)
    {
        var memoryThresholdMb = configuration.GetValue<long>("HealthChecks:MemoryThresholdMB", 1024);
        
        builder.AddPrivateMemoryHealthCheck(
            memoryThresholdMb * 1024 * 1024, // Converter MB para bytes
            name: "memory",
            failureStatus: HealthStatus.Degraded,
            tags: new[] { "memory" });
    }

    public static WebApplication UseHealthChecksConfiguration(this WebApplication app)
    {
        // Endpoint básico de health check
        app.MapHealthChecks("/health", new Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
        {
            ResponseWriter = WriteHealthCheckResponse
        });

        // Endpoint detalhado de health check
        app.MapHealthChecks("/health/detailed", new Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
        {
            ResponseWriter = WriteDetailedHealthCheckResponse,
            AllowCachingResponses = false
        });

        // Endpoint de health check apenas para serviços críticos
        app.MapHealthChecks("/health/ready", new Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
        {
            Predicate = check => check.Tags.Contains("db"),
            ResponseWriter = WriteHealthCheckResponse
        });

        // Endpoint de health check para serviços externos
        app.MapHealthChecks("/health/external", new Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
        {
            Predicate = check => check.Tags.Contains("external"),
            ResponseWriter = WriteDetailedHealthCheckResponse
        });

        return app;
    }

    private static async Task WriteHealthCheckResponse(HttpContext context, HealthReport report)
    {
        context.Response.ContentType = "application/json";

        var response = new
        {
            status = report.Status.ToString(),
            timestamp = DateTime.UtcNow,
            duration = report.TotalDuration.TotalMilliseconds
        };

        await context.Response.WriteAsync(System.Text.Json.JsonSerializer.Serialize(response, new System.Text.Json.JsonSerializerOptions
        {
            PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.SnakeCaseLower
        }));
    }

    private static async Task WriteDetailedHealthCheckResponse(HttpContext context, HealthReport report)
    {
        context.Response.ContentType = "application/json";

        var response = new
        {
            status = report.Status.ToString(),
            timestamp = DateTime.UtcNow,
            duration = report.TotalDuration.TotalMilliseconds,
            checks = report.Entries.Select(entry => new
            {
                name = entry.Key,
                status = entry.Value.Status.ToString(),
                duration = entry.Value.Duration.TotalMilliseconds,
                description = entry.Value.Description,
                data = entry.Value.Data,
                tags = entry.Value.Tags,
                exception = entry.Value.Exception?.Message
            })
        };

        await context.Response.WriteAsync(System.Text.Json.JsonSerializer.Serialize(response, new System.Text.Json.JsonSerializerOptions
        {
            PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.SnakeCaseLower,
            WriteIndented = true
        }));
    }
}

/// <summary>
/// Health check customizado para AWS S3
/// </summary>
public class AwsS3HealthCheck : IHealthCheck
{
    private readonly IConfiguration _configuration;
    private readonly ILogger<AwsS3HealthCheck> _logger;

    public AwsS3HealthCheck(IConfiguration configuration, ILogger<AwsS3HealthCheck> logger)
    {
        _configuration = configuration;
        _logger = logger;
    }

    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
    {
        try
        {
            var awsSettings = _configuration.GetSection("AwsSettings");
            var bucketName = awsSettings.GetValue<string>("S3BucketName");
            var region = awsSettings.GetValue<string>("Region");

            if (string.IsNullOrEmpty(bucketName))
            {
                return HealthCheckResult.Unhealthy("S3 bucket name not configured");
            }

            // Aqui seria implementada a verificação real do S3
            // Por enquanto, apenas simular uma verificação básica
            await Task.Delay(100, cancellationToken);

            var data = new Dictionary<string, object>
            {
                ["bucket"] = bucketName,
                ["region"] = region ?? "us-east-1"
            };

            return HealthCheckResult.Healthy("AWS S3 is accessible", data);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error checking AWS S3 health");
            return HealthCheckResult.Unhealthy("AWS S3 health check failed", ex);
        }
    }
}
</HealthChecksConfiguration.cs>
<LoggingConfiguration.cs>
using Agriis.Api.Middleware;
using Agriis.Compartilhado.Infraestrutura.Logging;
using Serilog;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração do sistema de logging
/// </summary>
public static class LoggingConfiguration
{
    /// <summary>
    /// Adiciona configuração de logging estruturado
    /// </summary>
    public static IServiceCollection AddLoggingConfiguration(
        this IServiceCollection services, 
        IConfiguration configuration, 
        IHostEnvironment environment)
    {
        // Configurar opções do middleware de logging
        services.Configure<RequestLoggingOptions>(configuration.GetSection("RequestLogging"));

        // Adicionar logging estruturado
        services.AddStructuredLogging(configuration);

        return services;
    }

    /// <summary>
    /// Configura o Serilog como provedor de logging
    /// </summary>
    public static IHostBuilder ConfigureSerilogLogging(this IHostBuilder hostBuilder)
    {
        return hostBuilder.UseSerilog((context, configuration) =>
        {
            configuration.ConfigureSerilog(context.Configuration, context.HostingEnvironment);
        });
    }

    /// <summary>
    /// Adiciona middleware de logging de requisições
    /// </summary>
    public static IApplicationBuilder UseRequestLogging(this IApplicationBuilder app)
    {
        return app.UseMiddleware<RequestLoggingMiddleware>();
    }

    /// <summary>
    /// Configura logging de requisições do Serilog
    /// </summary>
    public static IApplicationBuilder UseSerilogRequestLogging(this IApplicationBuilder app)
    {
        return app.UseSerilogRequestLogging(options =>
        {
            options.MessageTemplate = "HTTP {RequestMethod} {RequestPath} responded {StatusCode} in {Elapsed:0.0000} ms";
            options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =>
            {
                diagnosticContext.Set("RequestHost", httpContext.Request.Host.Value);
                diagnosticContext.Set("RequestScheme", httpContext.Request.Scheme);
                diagnosticContext.Set("UserAgent", httpContext.Request.Headers.UserAgent.FirstOrDefault() ?? "Unknown");
                diagnosticContext.Set("RemoteIP", httpContext.Connection.RemoteIpAddress?.ToString() ?? "Unknown");
                
                if (httpContext.User.Identity?.IsAuthenticated == true)
                {
                    diagnosticContext.Set("UserId", httpContext.User.FindFirst("user_id")?.Value ?? "Unknown");
                    diagnosticContext.Set("UserEmail", httpContext.User.FindFirst("email")?.Value ?? "Unknown");
                }

                // Adicionar correlation ID se disponível
                if (httpContext.Request.Headers.TryGetValue("X-Correlation-ID", out var correlationId))
                {
                    diagnosticContext.Set("CorrelationId", correlationId.ToString());
                }

                // Adicionar informações de performance
                diagnosticContext.Set("StatusCode", httpContext.Response.StatusCode);
                
                // Marcar requisições lentas
                if (httpContext.Items.TryGetValue("RequestStartTime", out var startTimeObj) && 
                    startTimeObj is DateTime startTime)
                {
                    var elapsed = DateTime.UtcNow - startTime;
                    if (elapsed.TotalMilliseconds > 1000)
                    {
                        diagnosticContext.Set("SlowRequest", true);
                    }
                }
            };
        });
    }
}
</LoggingConfiguration.cs>
<PagamentosDependencyInjection.cs>
using Agriis.Pagamentos.Aplicacao.Interfaces;
using Agriis.Pagamentos.Aplicacao.Servicos;
using Agriis.Pagamentos.Dominio.Interfaces;
using Agriis.Pagamentos.Infraestrutura.Repositorios;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Pagamentos
/// </summary>
public static class PagamentosDependencyInjection
{
    /// <summary>
    /// Registra os serviços do módulo de Pagamentos
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços configurada</returns>
    public static IServiceCollection AddPagamentosModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<IFormaPagamentoRepository, FormaPagamentoRepository>();
        services.AddScoped<ICulturaFormaPagamentoRepository, CulturaFormaPagamentoRepository>();

        // Serviços de Aplicação
        services.AddScoped<IFormaPagamentoService, FormaPagamentoService>();
        services.AddScoped<ICulturaFormaPagamentoService, CulturaFormaPagamentoService>();

        return services;
    }
}
</PagamentosDependencyInjection.cs>
<PedidosDependencyInjection.cs>
using Agriis.Pedidos.Aplicacao.Interfaces;
using Agriis.Pedidos.Aplicacao.Servicos;
using Agriis.Pedidos.Aplicacao.Validadores;
using Agriis.Pedidos.Aplicacao.DTOs;
using Agriis.Pedidos.Dominio.Interfaces;
using Agriis.Pedidos.Dominio.Servicos;
using Agriis.Pedidos.Infraestrutura.Repositorios;
using FluentValidation;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Pedidos
/// </summary>
public static class PedidosDependencyInjection
{
    /// <summary>
    /// Adiciona os serviços do módulo de Pedidos
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços</returns>
    public static IServiceCollection AddPedidosModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<IPedidoRepository, PedidoRepository>();
        services.AddScoped<IPedidoItemRepository, PedidoItemRepository>();
        services.AddScoped<IPedidoItemTransporteRepository, PedidoItemTransporteRepository>();
        services.AddScoped<IPropostaRepository, PropostaRepository>();
        
        // Serviços de domínio
        services.AddScoped<CarrinhoComprasService>();
        services.AddScoped<FreteCalculoService>();
        services.AddScoped<TransporteAgendamentoService>();
        
        // Serviços de aplicação
        services.AddScoped<IPedidoService, PedidoService>();
        services.AddScoped<IPropostaService, PropostaService>();
        services.AddScoped<INotificacaoService, NotificacaoService>();
        services.AddScoped<ITransporteService, TransporteService>();
        
        // Serviços em background
        services.AddHostedService<PrazoLimiteBackgroundService>();
        
        // Validadores
        services.AddScoped<IValidator<CalcularFreteDto>, CalcularFreteDtoValidator>();
        services.AddScoped<IValidator<CalcularFreteConsolidadoDto>, CalcularFreteConsolidadoDtoValidator>();
        services.AddScoped<IValidator<AgendarTransporteDto>, AgendarTransporteDtoValidator>();
        services.AddScoped<IValidator<ReagendarTransporteDto>, ReagendarTransporteDtoValidator>();
        services.AddScoped<IValidator<AtualizarValorFreteDto>, AtualizarValorFreteDtoValidator>();
        services.AddScoped<IValidator<ValidarAgendamentosDto>, ValidarAgendamentosDtoValidator>();
        
        return services;
    }
}
</PedidosDependencyInjection.cs>
<PontosDistribuicaoDependencyInjection.cs>
using Agriis.PontosDistribuicao.Dominio.Interfaces;
using Agriis.PontosDistribuicao.Infraestrutura.Repositorios;
using Agriis.PontosDistribuicao.Aplicacao.Servicos;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Pontos de Distribuição
/// </summary>
public static class PontosDistribuicaoDependencyInjection
{
    /// <summary>
    /// Configura os serviços do módulo de Pontos de Distribuição
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços configurada</returns>
    public static IServiceCollection AddPontosDistribuicaoModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<IPontoDistribuicaoRepository, PontoDistribuicaoRepository>();

        // Serviços de aplicação
        services.AddScoped<PontoDistribuicaoService>();

        return services;
    }
}
</PontosDistribuicaoDependencyInjection.cs>
<ProdutoresDependencyInjection.cs>
using Agriis.Produtores.Aplicacao.Interfaces;
using Agriis.Produtores.Aplicacao.Servicos;
using Agriis.Produtores.Dominio.Interfaces;
using Agriis.Produtores.Dominio.Servicos;
using Agriis.Produtores.Infraestrutura.Repositorios;
using Agriis.Produtores.Infraestrutura.Servicos;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Produtores
/// </summary>
public static class ProdutoresDependencyInjection
{
    /// <summary>
    /// Adiciona os serviços do módulo de Produtores
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços</returns>
    public static IServiceCollection AddProdutoresModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<IProdutorRepository, ProdutorRepository>();
        services.AddScoped<IUsuarioProdutorRepository, UsuarioProdutorRepository>();
        
        // Serviços de domínio
        services.AddScoped<ProdutorDomainService>();
        
        // Serviços de aplicação
        services.AddScoped<IProdutorService, ProdutorService>();
        
        // Serviços de infraestrutura
        services.AddScoped<ISerproService, SerproService>();
        
        // HttpClient para SERPRO
        services.AddHttpClient<ISerproService, SerproService>(client =>
        {
            client.BaseAddress = new Uri("https://gateway.apiserpro.serpro.gov.br/");
            client.Timeout = TimeSpan.FromSeconds(30);
        });
        
        return services;
    }
}
</ProdutoresDependencyInjection.cs>
<ProdutosDependencyInjection.cs>
using Agriis.Produtos.Aplicacao.Interfaces;
using Agriis.Produtos.Aplicacao.Servicos;
using Agriis.Produtos.Dominio.Interfaces;
using Agriis.Produtos.Infraestrutura.Repositorios;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Produtos
/// </summary>
public static class ProdutosDependencyInjection
{
    /// <summary>
    /// Adiciona os serviços do módulo de Produtos
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços</returns>
    public static IServiceCollection AddProdutosModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<IProdutoRepository, ProdutoRepository>();
        services.AddScoped<ICategoriaRepository, CategoriaRepository>();
        services.AddScoped<IProdutoCulturaRepository, ProdutoCulturaRepository>();
        
        // Serviços de aplicação
        services.AddScoped<IProdutoService, ProdutoService>();
        services.AddScoped<ICategoriaService, CategoriaService>();
        
        return services;
    }
}
</ProdutosDependencyInjection.cs>
<PropriedadesDependencyInjection.cs>
using Agriis.Propriedades.Aplicacao.Interfaces;
using Agriis.Propriedades.Aplicacao.Servicos;
using Agriis.Propriedades.Dominio.Interfaces;
using Agriis.Propriedades.Dominio.Servicos;
using Agriis.Propriedades.Infraestrutura.Repositorios;

namespace Agriis.Api.Configuration;

public static class PropriedadesDependencyInjection
{
    public static IServiceCollection AddPropriedadesModule(this IServiceCollection services)
    {
        // Domain Services
        services.AddScoped<PropriedadeDomainService>();

        // Application Services
        services.AddScoped<IPropriedadeService, PropriedadeService>();
        services.AddScoped<ITalhaoService, TalhaoService>();
        services.AddScoped<IPropriedadeCulturaService, PropriedadeCulturaService>();

        // Repositories
        services.AddScoped<IPropriedadeRepository, PropriedadeRepository>();
        services.AddScoped<ITalhaoRepository, TalhaoRepository>();
        services.AddScoped<IPropriedadeCulturaRepository, PropriedadeCulturaRepository>();

        return services;
    }
}
</PropriedadesDependencyInjection.cs>
<SafrasDependencyInjection.cs>
using Agriis.Safras.Dominio.Interfaces;
using Agriis.Safras.Infraestrutura.Repositorios;
using Agriis.Safras.Aplicacao.Interfaces;
using Agriis.Safras.Aplicacao.Servicos;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Safras
/// </summary>
public static class SafrasDependencyInjection
{
    /// <summary>
    /// Configura os serviços do módulo de Safras
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços configurada</returns>
    public static IServiceCollection AddSafrasModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<ISafraRepository, SafraRepository>();

        // Serviços de Aplicação
        services.AddScoped<ISafraService, SafraService>();

        return services;
    }
}
</SafrasDependencyInjection.cs>
<SegmentacoesDependencyInjection.cs>
using Agriis.Segmentacoes.Aplicacao.Interfaces;
using Agriis.Segmentacoes.Aplicacao.Servicos;
using Agriis.Segmentacoes.Dominio.Interfaces;
using Agriis.Segmentacoes.Dominio.Servicos;
using Agriis.Segmentacoes.Infraestrutura.Repositorios;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Segmentações
/// </summary>
public static class SegmentacoesDependencyInjection
{
    /// <summary>
    /// Adiciona os serviços do módulo de Segmentações
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços</returns>
    public static IServiceCollection AddSegmentacoesModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<ISegmentacaoRepository, SegmentacaoRepository>();
        services.AddScoped<IGrupoRepository, GrupoRepository>();
        services.AddScoped<IGrupoSegmentacaoRepository, GrupoSegmentacaoRepository>();
        
        // Serviços de domínio
        services.AddScoped<CalculoDescontoSegmentadoService>();
        
        // Serviços de aplicação
        services.AddScoped<ISegmentacaoService, SegmentacaoService>();
        services.AddScoped<ICalculoDescontoService, CalculoDescontoService>();
        
        return services;
    }
}
</SegmentacoesDependencyInjection.cs>
<SwaggerConfiguration.cs>
using Microsoft.OpenApi.Models;
using System.Reflection;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração do Swagger/OpenAPI
/// </summary>
public static class SwaggerConfiguration
{
    public static IServiceCollection AddSwaggerConfiguration(this IServiceCollection services)
    {
        services.AddSwaggerGen(options =>
        {
            // Informações básicas da API
            options.SwaggerDoc("v1", new OpenApiInfo
            {
                Title = "Agriis API",
                Version = "v1",
                Description = "API do sistema Agriis - Plataforma de Agronegócio",
                Contact = new OpenApiContact
                {
                    Name = "Equipe Agriis",
                    Email = "dev@agriis.com"
                },
                License = new OpenApiLicense
                {
                    Name = "Proprietary License"
                }
            });

            // Configuração de autenticação JWT
            options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
            {
                Name = "Authorization",
                Type = SecuritySchemeType.Http,
                Scheme = "Bearer",
                BearerFormat = "JWT",
                In = ParameterLocation.Header,
                Description = "Insira o token JWT no formato: Bearer {seu_token}"
            });

            options.AddSecurityRequirement(new OpenApiSecurityRequirement
            {
                {
                    new OpenApiSecurityScheme
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.SecurityScheme,
                            Id = "Bearer"
                        }
                    },
                    Array.Empty<string>()
                }
            });

            // Incluir comentários XML
            var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
            var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
            if (File.Exists(xmlPath))
            {
                options.IncludeXmlComments(xmlPath);
            }

            // Configurações adicionais
            options.UseInlineDefinitionsForEnums();
            
            // Configurar serialização de enums como strings
            options.SchemaFilter<EnumSchemaFilter>();
            
            // Configurar exemplos de resposta
            options.OperationFilter<ResponseExamplesOperationFilter>();
            
            // Configurar tags por controller
            options.TagActionsBy(api => new[] { api.GroupName ?? api.ActionDescriptor.RouteValues["controller"] });
            options.DocInclusionPredicate((name, api) => true);

            // Configurar ordenação
            options.OrderActionsBy(apiDesc => $"{apiDesc.ActionDescriptor.RouteValues["controller"]}_{apiDesc.HttpMethod}");
        });

        return services;
    }

    public static WebApplication UseSwaggerConfiguration(this WebApplication app)
    {
        if (app.Environment.IsDevelopment() || app.Environment.IsStaging())
        {
            app.UseSwagger(options =>
            {
                options.RouteTemplate = "api-docs/{documentName}/swagger.json";
            });

            app.UseSwaggerUI(options =>
            {
                options.SwaggerEndpoint("/api-docs/v1/swagger.json", "Agriis API v1");
                options.RoutePrefix = "api-docs";
                options.DocumentTitle = "Agriis API Documentation";
                
                // Configurações de UI
                options.DefaultModelsExpandDepth(-1); // Ocultar modelos por padrão
                options.DefaultModelRendering(Swashbuckle.AspNetCore.SwaggerUI.ModelRendering.Model);
                options.DisplayRequestDuration();
                options.EnableDeepLinking();
                options.EnableFilter();
                options.ShowExtensions();
                options.EnableValidator();
                
                // Configurar autenticação persistente
                options.ConfigObject.AdditionalItems.Add("persistAuthorization", "true");
                
                // CSS customizado
                options.InjectStylesheet("/swagger-ui/custom.css");
            });

            // Servir arquivos estáticos para customização do Swagger
            app.UseStaticFiles();
        }

        return app;
    }
}

/// <summary>
/// Filtro para configurar enums como strings no schema
/// </summary>
public class EnumSchemaFilter : Swashbuckle.AspNetCore.SwaggerGen.ISchemaFilter
{
    public void Apply(OpenApiSchema schema, Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext context)
    {
        if (context.Type.IsEnum)
        {
            schema.Enum.Clear();
            foreach (var enumName in Enum.GetNames(context.Type))
            {
                schema.Enum.Add(new Microsoft.OpenApi.Any.OpenApiString(enumName));
            }
            schema.Type = "string";
            schema.Format = null;
        }
    }
}

/// <summary>
/// Filtro para adicionar exemplos de resposta
/// </summary>
public class ResponseExamplesOperationFilter : Swashbuckle.AspNetCore.SwaggerGen.IOperationFilter
{
    public void Apply(OpenApiOperation operation, Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext context)
    {
        // Adicionar exemplos de resposta de erro padrão
        if (!operation.Responses.ContainsKey("400"))
        {
            operation.Responses.Add("400", new OpenApiResponse
            {
                Description = "Requisição inválida",
                Content = new Dictionary<string, OpenApiMediaType>
                {
                    ["application/json"] = new OpenApiMediaType
                    {
                        Example = new Microsoft.OpenApi.Any.OpenApiObject
                        {
                            ["error_code"] = new Microsoft.OpenApi.Any.OpenApiString("VALIDATION_ERROR"),
                            ["error_description"] = new Microsoft.OpenApi.Any.OpenApiString("Dados de entrada inválidos"),
                            ["timestamp"] = new Microsoft.OpenApi.Any.OpenApiString(DateTime.UtcNow.ToString("O"))
                        }
                    }
                }
            });
        }

        if (!operation.Responses.ContainsKey("401"))
        {
            operation.Responses.Add("401", new OpenApiResponse
            {
                Description = "Não autorizado",
                Content = new Dictionary<string, OpenApiMediaType>
                {
                    ["application/json"] = new OpenApiMediaType
                    {
                        Example = new Microsoft.OpenApi.Any.OpenApiObject
                        {
                            ["error_code"] = new Microsoft.OpenApi.Any.OpenApiString("UNAUTHORIZED"),
                            ["error_description"] = new Microsoft.OpenApi.Any.OpenApiString("Acesso não autorizado"),
                            ["timestamp"] = new Microsoft.OpenApi.Any.OpenApiString(DateTime.UtcNow.ToString("O"))
                        }
                    }
                }
            });
        }

        if (!operation.Responses.ContainsKey("500"))
        {
            operation.Responses.Add("500", new OpenApiResponse
            {
                Description = "Erro interno do servidor",
                Content = new Dictionary<string, OpenApiMediaType>
                {
                    ["application/json"] = new OpenApiMediaType
                    {
                        Example = new Microsoft.OpenApi.Any.OpenApiObject
                        {
                            ["error_code"] = new Microsoft.OpenApi.Any.OpenApiString("INTERNAL_ERROR"),
                            ["error_description"] = new Microsoft.OpenApi.Any.OpenApiString("Erro interno do servidor"),
                            ["timestamp"] = new Microsoft.OpenApi.Any.OpenApiString(DateTime.UtcNow.ToString("O"))
                        }
                    }
                }
            });
        }
    }
}
</SwaggerConfiguration.cs>
<UsuariosDependencyInjection.cs>
using Agriis.Usuarios.Dominio.Interfaces;
using Agriis.Usuarios.Infraestrutura.Repositorios;
using Agriis.Usuarios.Aplicacao.Interfaces;
using Agriis.Usuarios.Aplicacao.Servicos;
using Agriis.Usuarios.Aplicacao.Validadores;
using Agriis.Usuarios.Aplicacao.DTOs;
using FluentValidation;

namespace Agriis.Api.Configuration;

/// <summary>
/// Configuração de injeção de dependência para o módulo de Usuários
/// </summary>
public static class UsuariosDependencyInjection
{
    /// <summary>
    /// Configura os serviços do módulo de Usuários
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços configurada</returns>
    public static IServiceCollection AddUsuariosModule(this IServiceCollection services)
    {
        // Repositórios
        services.AddScoped<IUsuarioRepository, UsuarioRepository>();

        // Serviços de aplicação
        services.AddScoped<IUsuarioService, UsuarioService>();

        // Validadores
        services.AddScoped<IValidator<CriarUsuarioDto>, CriarUsuarioDtoValidator>();
        services.AddScoped<IValidator<AtualizarUsuarioDto>, AtualizarUsuarioDtoValidator>();
        services.AddScoped<IValidator<AlterarEmailDto>, AlterarEmailDtoValidator>();
        services.AddScoped<IValidator<AlterarSenhaDto>, AlterarSenhaDtoValidator>();

        return services;
    }
}
</UsuariosDependencyInjection.cs>
<AgriisDbContext.cs>
using Microsoft.EntityFrameworkCore;
using System.Text.Json;
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Enderecos.Dominio.Entidades;
using Agriis.Usuarios.Dominio.Entidades;
using Agriis.Autenticacao.Dominio.Entidades;
using Agriis.Culturas.Dominio.Entidades;
using Agriis.Produtores.Dominio.Entidades;
using Agriis.Propriedades.Dominio.Entidades;
using Agriis.Fornecedores.Dominio.Entidades;
using Agriis.PontosDistribuicao.Dominio.Entidades;
using Agriis.Safras.Dominio.Entidades;
using Agriis.Catalogos.Dominio.Entidades;
using Agriis.Pagamentos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Combos.Dominio.Entidades;

namespace Agriis.Api.Contexto;

public class AgriisDbContext : DbContext
{
    public AgriisDbContext(DbContextOptions<AgriisDbContext> options) : base(options)
    {
    }

    // DbSets dos módulos implementados
    
    // Módulo de Endereços
    public DbSet<Estado> Estados { get; set; }
    public DbSet<Municipio> Municipios { get; set; }
    public DbSet<Endereco> Enderecos { get; set; }
    
    // Módulo de Usuários
    public DbSet<Usuario> Usuarios { get; set; }
    public DbSet<UsuarioRole> UsuarioRoles { get; set; }
    
    // Módulo de Autenticação
    public DbSet<RefreshToken> RefreshTokens { get; set; }
    
    // Módulo de Culturas
    public DbSet<Cultura> Culturas { get; set; }
    
    // Módulo de Produtores
    public DbSet<Produtor> Produtores { get; set; }
    public DbSet<UsuarioProdutor> UsuariosProdutores { get; set; }
    
    // Módulo de Propriedades
    public DbSet<Propriedade> Propriedades { get; set; }
    public DbSet<Talhao> Talhoes { get; set; }
    public DbSet<PropriedadeCultura> PropriedadeCulturas { get; set; }
    
    // Módulo de Fornecedores
    public DbSet<Fornecedor> Fornecedores { get; set; }
    public DbSet<UsuarioFornecedor> UsuariosFornecedores { get; set; }
    public DbSet<UsuarioFornecedorTerritorio> UsuariosFornecedoresTerritorios { get; set; }
    
    // Módulo de Pontos de Distribuição
    public DbSet<PontoDistribuicao> PontosDistribuicao { get; set; }
    
    // Módulo de Safras
    public DbSet<Safra> Safras { get; set; }
    
    // Módulo de Catálogos
    public DbSet<Catalogo> Catalogos { get; set; }
    public DbSet<CatalogoItem> CatalogoItens { get; set; }
    
    // Módulo de Pagamentos
    public DbSet<FormaPagamento> FormasPagamento { get; set; }
    public DbSet<CulturaFormaPagamento> CulturaFormasPagamento { get; set; }
    
    // Módulo de Pedidos
    public DbSet<Pedido> Pedidos { get; set; }
    public DbSet<PedidoItem> PedidoItens { get; set; }
    public DbSet<PedidoItemTransporte> PedidoItensTransporte { get; set; }
    public DbSet<Proposta> Propostas { get; set; }
    
    // Módulo de Combos
    public DbSet<Combo> Combos { get; set; }
    public DbSet<ComboItem> ComboItens { get; set; }
    public DbSet<ComboLocalRecebimento> ComboLocaisRecebimento { get; set; }
    public DbSet<ComboCategoriaDesconto> ComboCategoriasDesconto { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // Configurar schema padrão
        modelBuilder.HasDefaultSchema("public");

        // Configurar conversores globais para JSON
        ConfigurarConversoresJson(modelBuilder);

        // Configurar auditoria automática
        ConfigurarAuditoria(modelBuilder);
        
        // Ignorar objetos de valor como entidades
        ConfigurarObjetosValor(modelBuilder);

        // Aplicar configurações de entidades de todos os módulos
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(AgriisDbContext).Assembly);
        
        // Aplicar configurações dos módulos específicos
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Usuarios.Infraestrutura.Configuracoes.UsuarioConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Enderecos.Infraestrutura.Configuracoes.EstadoConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Culturas.Infraestrutura.Configuracoes.CulturaConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Produtores.Infraestrutura.Configuracoes.ProdutorConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Propriedades.Infraestrutura.Configuracoes.PropriedadeConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Fornecedores.Infraestrutura.Configuracoes.FornecedorConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.PontosDistribuicao.Infraestrutura.Configuracoes.PontoDistribuicaoConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Safras.Infraestrutura.Configuracoes.SafraConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Catalogos.Infraestrutura.Configuracoes.CatalogoConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Pagamentos.Infraestrutura.Configuracoes.FormaPagamentoConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Pedidos.Infraestrutura.Configuracoes.PedidoConfiguration).Assembly);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(Agriis.Combos.Infraestrutura.Configuracoes.ComboConfiguration).Assembly);
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            // Configuração de fallback - normalmente será configurado via DI
            optionsBuilder.UseNpgsql("Host=localhost;Database=DBAgriis;Username=postgres;Password=RootPassword123;Port=5432");
        }

        // Configurações específicas do PostgreSQL
        optionsBuilder.UseNpgsql(options =>
        {
            options.EnableRetryOnFailure(
                maxRetryCount: 3,
                maxRetryDelay: TimeSpan.FromSeconds(30),
                errorCodesToAdd: null);
            
            // Habilitar extensão PostGIS para suporte geográfico
            options.UseNetTopologySuite();
        });

        // Configurações de desenvolvimento
        if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
        {
            optionsBuilder.EnableSensitiveDataLogging();
            optionsBuilder.EnableDetailedErrors();
        }
    }

    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        // Aplicar auditoria automática antes de salvar
        AplicarAuditoriaAutomatica();
        
        return await base.SaveChangesAsync(cancellationToken);
    }

    public override int SaveChanges()
    {
        // Aplicar auditoria automática antes de salvar
        AplicarAuditoriaAutomatica();
        
        return base.SaveChanges();
    }

    private void ConfigurarConversoresJson(ModelBuilder modelBuilder)
    {
        // Configurar conversores para tipos JSON que serão usados em múltiplas entidades
        // Exemplo: para campos que armazenam listas de IDs como JSON
        
        // Conversores JSON serão configurados nas configurações específicas de cada entidade
        // quando necessário, para evitar problemas com expression trees

        // Estes conversores serão aplicados nas configurações específicas de cada entidade
    }

    private void ConfigurarAuditoria(ModelBuilder modelBuilder)
    {
        // Configurar propriedades de auditoria para todas as entidades que herdam de EntidadeBase
        foreach (var entityType in modelBuilder.Model.GetEntityTypes())
        {
            if (typeof(EntidadeBase).IsAssignableFrom(entityType.ClrType))
            {
                // Configurar DataCriacao como obrigatória
                modelBuilder.Entity(entityType.ClrType)
                    .Property(nameof(EntidadeBase.DataCriacao))
                    .IsRequired()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                // Configurar DataAtualizacao como opcional
                modelBuilder.Entity(entityType.ClrType)
                    .Property(nameof(EntidadeBase.DataAtualizacao))
                    .IsRequired(false);

                // Configurar índices para otimizar consultas por data
                modelBuilder.Entity(entityType.ClrType)
                    .HasIndex(nameof(EntidadeBase.DataCriacao))
                    .HasDatabaseName($"IX_{entityType.GetTableName()}_DataCriacao");
            }
        }
    }

    private void ConfigurarObjetosValor(ModelBuilder modelBuilder)
    {
        // Ignorar objetos de valor para que não sejam tratados como entidades
        modelBuilder.Ignore<Agriis.Compartilhado.Dominio.ObjetosValor.Cpf>();
        modelBuilder.Ignore<Agriis.Compartilhado.Dominio.ObjetosValor.Cnpj>();
        modelBuilder.Ignore<Agriis.Compartilhado.Dominio.ObjetosValor.AreaPlantio>();
        modelBuilder.Ignore<Agriis.Produtos.Dominio.ObjetosValor.DimensoesProduto>();
    }

    private void AplicarAuditoriaAutomatica()
    {
        var entries = ChangeTracker.Entries<EntidadeBase>();

        foreach (var entry in entries)
        {
            switch (entry.State)
            {
                case EntityState.Added:
                    entry.Entity.SetDataCriacao(DateTime.UtcNow);
                    break;

                case EntityState.Modified:
                    entry.Entity.AtualizarDataModificacao();
                    break;
            }
        }
    }
}
</AgriisDbContext.cs>
<AgriisDbContextFactory.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;

namespace Agriis.Api.Contexto;

public class AgriisDbContextFactory : IDesignTimeDbContextFactory<AgriisDbContext>
{
    public AgriisDbContext CreateDbContext(string[] args)
    {
        var optionsBuilder = new DbContextOptionsBuilder<AgriisDbContext>();
        
        // Connection string para design-time (migrations)
        var connectionString = "Host=localhost;Database=DBAgriis;Username=postgres;Password=RootPassword123;Port=5432;SSL Mode=Disable";
        
        optionsBuilder.UseNpgsql(connectionString, options =>
        {
            options.EnableRetryOnFailure(
                maxRetryCount: 3,
                maxRetryDelay: TimeSpan.FromSeconds(30),
                errorCodesToAdd: null);
            
            // TODO: Habilitar extensão PostGIS para suporte geográfico quando disponível
            // options.UseNetTopologySuite();
        });

        return new AgriisDbContext(optionsBuilder.Options);
    }
}
</AgriisDbContextFactory.cs>
<AuthController.cs>
using Agriis.Autenticacao.Aplicacao.DTOs;
using Agriis.Autenticacao.Aplicacao.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para autenticação e autorização
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Produces("application/json")]
public class AuthController : ControllerBase
{
    private readonly IAutenticacaoService _autenticacaoService;
    private readonly ILogger<AuthController> _logger;

    public AuthController(IAutenticacaoService autenticacaoService, ILogger<AuthController> logger)
    {
        _autenticacaoService = autenticacaoService;
        _logger = logger;
    }

    /// <summary>
    /// Realiza o login do usuário
    /// </summary>
    /// <param name="request">Dados de login</param>
    /// <returns>Tokens de acesso e dados do usuário</returns>
    [HttpPost("login")]
    [ProducesResponseType(typeof(LoginResponseDto), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(object), StatusCodes.Status400BadRequest)]
    [ProducesResponseType(typeof(object), StatusCodes.Status500InternalServerError)]
    public async Task<IActionResult> Login([FromBody] LoginRequestDto request)
    {
        try
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(new { 
                    error_code = "VALIDATION_ERROR", 
                    error_description = "Dados inválidos",
                    errors = ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage))
                });
            }

            var enderecoIp = ObterEnderecoIp();
            var userAgent = Request.Headers.UserAgent.ToString();

            var resultado = await _autenticacaoService.LoginAsync(request, enderecoIp, userAgent);

            if (resultado.IsSuccess)
            {
                _logger.LogInformation("Login realizado com sucesso para: {Email}", request.Email);
                return Ok(resultado.Value);
            }

            _logger.LogWarning("Falha no login para: {Email} - {Error}", request.Email, resultado.Error);
            return BadRequest(new { 
                error_code = "LOGIN_FAILED", 
                error_description = resultado.Error 
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno no login para: {Email}", request.Email);
            return StatusCode(500, new { 
                error_code = "INTERNAL_ERROR", 
                error_description = "Erro interno do servidor" 
            });
        }
    }

    /// <summary>
    /// Renova o token de acesso usando refresh token
    /// </summary>
    /// <param name="request">Dados para renovação</param>
    /// <returns>Novos tokens de acesso</returns>
    [HttpPost("refresh")]
    [ProducesResponseType(typeof(LoginResponseDto), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(object), StatusCodes.Status400BadRequest)]
    [ProducesResponseType(typeof(object), StatusCodes.Status500InternalServerError)]
    public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequestDto request)
    {
        try
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(new { 
                    error_code = "VALIDATION_ERROR", 
                    error_description = "Dados inválidos",
                    errors = ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage))
                });
            }

            var enderecoIp = ObterEnderecoIp();
            var userAgent = Request.Headers.UserAgent.ToString();

            var resultado = await _autenticacaoService.RefreshTokenAsync(request, enderecoIp, userAgent);

            if (resultado.IsSuccess)
            {
                _logger.LogInformation("Token renovado com sucesso");
                return Ok(resultado.Value);
            }

            _logger.LogWarning("Falha na renovação de token: {Error}", resultado.Error);
            return BadRequest(new { 
                error_code = "REFRESH_FAILED", 
                error_description = resultado.Error 
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno na renovação de token");
            return StatusCode(500, new { 
                error_code = "INTERNAL_ERROR", 
                error_description = "Erro interno do servidor" 
            });
        }
    }

    /// <summary>
    /// Realiza o logout do usuário
    /// </summary>
    /// <param name="refreshToken">Refresh token a ser revogado (opcional)</param>
    /// <returns>Resultado da operação</returns>
    [HttpPost("logout")]
    [Authorize]
    [ProducesResponseType(typeof(object), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(object), StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(typeof(object), StatusCodes.Status500InternalServerError)]
    public async Task<IActionResult> Logout([FromBody] string? refreshToken = null)
    {
        try
        {
            var usuarioId = ObterUsuarioId();
            if (usuarioId == null)
            {
                return Unauthorized(new { 
                    error_code = "UNAUTHORIZED", 
                    error_description = "Usuário não autenticado" 
                });
            }

            var resultado = await _autenticacaoService.LogoutAsync(usuarioId.Value, refreshToken);

            if (resultado.IsSuccess)
            {
                _logger.LogInformation("Logout realizado com sucesso para usuário: {UsuarioId}", usuarioId);
                return Ok(new { message = "Logout realizado com sucesso" });
            }

            return BadRequest(new { 
                error_code = "LOGOUT_FAILED", 
                error_description = resultado.Error 
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno no logout");
            return StatusCode(500, new { 
                error_code = "INTERNAL_ERROR", 
                error_description = "Erro interno do servidor" 
            });
        }
    }

    /// <summary>
    /// Altera a senha do usuário autenticado
    /// </summary>
    /// <param name="request">Dados para alteração de senha</param>
    /// <returns>Resultado da operação</returns>
    [HttpPost("alterar-senha")]
    [Authorize]
    [ProducesResponseType(typeof(object), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(object), StatusCodes.Status400BadRequest)]
    [ProducesResponseType(typeof(object), StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(typeof(object), StatusCodes.Status500InternalServerError)]
    public async Task<IActionResult> AlterarSenha([FromBody] AlterarSenhaRequestDto request)
    {
        try
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(new { 
                    error_code = "VALIDATION_ERROR", 
                    error_description = "Dados inválidos",
                    errors = ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage))
                });
            }

            var usuarioId = ObterUsuarioId();
            if (usuarioId == null)
            {
                return Unauthorized(new { 
                    error_code = "UNAUTHORIZED", 
                    error_description = "Usuário não autenticado" 
                });
            }

            var resultado = await _autenticacaoService.AlterarSenhaAsync(usuarioId.Value, request);

            if (resultado.IsSuccess)
            {
                _logger.LogInformation("Senha alterada com sucesso para usuário: {UsuarioId}", usuarioId);
                return Ok(new { message = "Senha alterada com sucesso" });
            }

            return BadRequest(new { 
                error_code = "PASSWORD_CHANGE_FAILED", 
                error_description = resultado.Error 
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno na alteração de senha");
            return StatusCode(500, new { 
                error_code = "INTERNAL_ERROR", 
                error_description = "Erro interno do servidor" 
            });
        }
    }

    /// <summary>
    /// Obtém informações do usuário autenticado
    /// </summary>
    /// <returns>Dados do usuário</returns>
    [HttpGet("me")]
    [Authorize]
    [ProducesResponseType(typeof(object), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(object), StatusCodes.Status401Unauthorized)]
    public IActionResult ObterUsuarioAtual()
    {
        try
        {
            var usuarioId = ObterUsuarioId();
            var email = User.FindFirst("email")?.Value ?? User.FindFirst(ClaimTypes.Email)?.Value;
            var nome = User.FindFirst("name")?.Value ?? User.FindFirst(ClaimTypes.Name)?.Value;
            var roles = User.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();

            if (usuarioId == null)
            {
                return Unauthorized(new { 
                    error_code = "UNAUTHORIZED", 
                    error_description = "Usuário não autenticado" 
                });
            }

            return Ok(new
            {
                id = usuarioId,
                email,
                nome,
                roles
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter dados do usuário atual");
            return StatusCode(500, new { 
                error_code = "INTERNAL_ERROR", 
                error_description = "Erro interno do servidor" 
            });
        }
    }

    /// <summary>
    /// Revoga todos os refresh tokens do usuário
    /// </summary>
    /// <returns>Resultado da operação</returns>
    [HttpPost("revogar-tokens")]
    [Authorize]
    [ProducesResponseType(typeof(object), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(object), StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(typeof(object), StatusCodes.Status500InternalServerError)]
    public async Task<IActionResult> RevogarTodosTokens()
    {
        try
        {
            var usuarioId = ObterUsuarioId();
            if (usuarioId == null)
            {
                return Unauthorized(new { 
                    error_code = "UNAUTHORIZED", 
                    error_description = "Usuário não autenticado" 
                });
            }

            var resultado = await _autenticacaoService.RevogarTodosTokensAsync(usuarioId.Value);

            if (resultado.IsSuccess)
            {
                _logger.LogInformation("Todos os tokens revogados para usuário: {UsuarioId}", usuarioId);
                return Ok(new { message = "Todos os tokens foram revogados com sucesso" });
            }

            return BadRequest(new { 
                error_code = "REVOKE_FAILED", 
                error_description = resultado.Error 
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno ao revogar tokens");
            return StatusCode(500, new { 
                error_code = "INTERNAL_ERROR", 
                error_description = "Erro interno do servidor" 
            });
        }
    }

    /// <summary>
    /// Obtém o ID do usuário autenticado
    /// </summary>
    /// <returns>ID do usuário ou null</returns>
    private int? ObterUsuarioId()
    {
        var userIdClaim = User.FindFirst("user_id")?.Value ?? User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        
        if (int.TryParse(userIdClaim, out var userId))
        {
            return userId;
        }

        return null;
    }

    /// <summary>
    /// Obtém o endereço IP do cliente
    /// </summary>
    /// <returns>Endereço IP</returns>
    private string? ObterEnderecoIp()
    {
        return Request.Headers["X-Forwarded-For"].FirstOrDefault() ?? 
               Request.Headers["X-Real-IP"].FirstOrDefault() ?? 
               HttpContext.Connection.RemoteIpAddress?.ToString();
    }
}
</AuthController.cs>
<CarrinhoController.cs>
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Agriis.Pedidos.Aplicacao.Interfaces;
using Agriis.Pedidos.Aplicacao.DTOs;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para operações de carrinho de compras
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class CarrinhoController : ControllerBase
{
    private readonly IPedidoService _pedidoService;
    private readonly ILogger<CarrinhoController> _logger;

    public CarrinhoController(IPedidoService pedidoService, ILogger<CarrinhoController> logger)
    {
        _pedidoService = pedidoService;
        _logger = logger;
    }

    /// <summary>
    /// Adiciona um item ao carrinho de compras
    /// </summary>
    /// <param name="pedidoId">ID do pedido (carrinho)</param>
    /// <param name="dto">Dados do item a ser adicionado</param>
    /// <returns>Item adicionado</returns>
    [HttpPost("{pedidoId}/itens")]
    public async Task<ActionResult<PedidoItemDto>> AdicionarItem(int pedidoId, [FromBody] AdicionarItemCarrinhoDto dto)
    {
        try
        {
            var criarItemDto = new CriarPedidoItemDto
            {
                PedidoId = pedidoId,
                ProdutoId = dto.ProdutoId,
                Quantidade = dto.Quantidade,
                Observacoes = dto.Observacoes
            };

            var item = await _pedidoService.AdicionarItemCarrinhoAsync(pedidoId, criarItemDto, dto.CatalogoId);
            return Ok(item);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro ao adicionar item ao carrinho {PedidoId}", pedidoId);
            return BadRequest(new { error_code = "INVALID_OPERATION", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno ao adicionar item ao carrinho {PedidoId}", pedidoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Remove um item do carrinho de compras
    /// </summary>
    /// <param name="pedidoId">ID do pedido (carrinho)</param>
    /// <param name="itemId">ID do item a ser removido</param>
    /// <returns>Resultado da operação</returns>
    [HttpDelete("{pedidoId}/itens/{itemId}")]
    public async Task<ActionResult> RemoverItem(int pedidoId, int itemId)
    {
        try
        {
            await _pedidoService.RemoverItemCarrinhoAsync(pedidoId, itemId);
            return NoContent();
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro ao remover item {ItemId} do carrinho {PedidoId}", itemId, pedidoId);
            return BadRequest(new { error_code = "INVALID_OPERATION", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno ao remover item {ItemId} do carrinho {PedidoId}", itemId, pedidoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Atualiza a quantidade de um item no carrinho
    /// </summary>
    /// <param name="pedidoId">ID do pedido (carrinho)</param>
    /// <param name="itemId">ID do item</param>
    /// <param name="dto">Nova quantidade</param>
    /// <returns>Item atualizado</returns>
    [HttpPut("{pedidoId}/itens/{itemId}/quantidade")]
    public async Task<ActionResult<PedidoItemDto>> AtualizarQuantidade(int pedidoId, int itemId, [FromBody] AtualizarQuantidadeItemDto dto)
    {
        try
        {
            var item = await _pedidoService.AtualizarQuantidadeItemAsync(pedidoId, itemId, dto.Quantidade);
            return Ok(item);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro ao atualizar quantidade do item {ItemId} no carrinho {PedidoId}", itemId, pedidoId);
            return BadRequest(new { error_code = "INVALID_OPERATION", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno ao atualizar quantidade do item {ItemId} no carrinho {PedidoId}", itemId, pedidoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Recalcula os totais do carrinho
    /// </summary>
    /// <param name="pedidoId">ID do pedido (carrinho)</param>
    /// <returns>Pedido com totais atualizados</returns>
    [HttpPost("{pedidoId}/recalcular-totais")]
    public async Task<ActionResult<PedidoDto>> RecalcularTotais(int pedidoId)
    {
        try
        {
            var pedido = await _pedidoService.RecalcularTotaisAsync(pedidoId);
            return Ok(pedido);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro ao recalcular totais do carrinho {PedidoId}", pedidoId);
            return BadRequest(new { error_code = "INVALID_OPERATION", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno ao recalcular totais do carrinho {PedidoId}", pedidoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Atualiza o prazo limite de interação do carrinho
    /// </summary>
    /// <param name="pedidoId">ID do pedido (carrinho)</param>
    /// <param name="novosDias">Novos dias a partir de agora</param>
    /// <returns>Pedido com prazo atualizado</returns>
    [HttpPut("{pedidoId}/prazo-limite")]
    public async Task<ActionResult<PedidoDto>> AtualizarPrazoLimite(int pedidoId, [FromBody] int novosDias)
    {
        try
        {
            var pedido = await _pedidoService.AtualizarPrazoLimiteAsync(pedidoId, novosDias);
            return Ok(pedido);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro ao atualizar prazo limite do carrinho {PedidoId}", pedidoId);
            return BadRequest(new { error_code = "INVALID_OPERATION", error_description = ex.Message });
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Argumento inválido ao atualizar prazo limite do carrinho {PedidoId}", pedidoId);
            return BadRequest(new { error_code = "INVALID_ARGUMENT", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno ao atualizar prazo limite do carrinho {PedidoId}", pedidoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém um carrinho com todos os seus itens
    /// </summary>
    /// <param name="pedidoId">ID do pedido (carrinho)</param>
    /// <returns>Carrinho completo</returns>
    [HttpGet("{pedidoId}")]
    public async Task<ActionResult<PedidoDto>> ObterCarrinho(int pedidoId)
    {
        try
        {
            var pedido = await _pedidoService.ObterComItensAsync(pedidoId);
            if (pedido == null)
            {
                return NotFound(new { error_code = "NOT_FOUND", error_description = "Carrinho não encontrado" });
            }

            return Ok(pedido);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro interno ao obter carrinho {PedidoId}", pedidoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }
}
</CarrinhoController.cs>
<CatalogosController.cs>
using Agriis.Catalogos.Aplicacao.DTOs;
using Agriis.Catalogos.Aplicacao.Interfaces;
using Agriis.Compartilhado.Dominio.Enums;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Agriis.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
[Authorize]
public class CatalogosController : ControllerBase
{
    private readonly ICatalogoService _catalogoService;

    public CatalogosController(ICatalogoService catalogoService)
    {
        _catalogoService = catalogoService;
    }

    [HttpGet]
    public async Task<IActionResult> ObterPaginado(
        [FromQuery] int pagina = 1,
        [FromQuery] int tamanhoPagina = 10,
        [FromQuery] int? safraId = null,
        [FromQuery] int? pontoDistribuicaoId = null,
        [FromQuery] int? culturaId = null,
        [FromQuery] int? categoriaId = null,
        [FromQuery] Moeda? moeda = null,
        [FromQuery] bool? ativo = null)
    {
        var resultado = await _catalogoService.ObterPaginadoAsync(
            pagina, tamanhoPagina, safraId, pontoDistribuicaoId, culturaId, categoriaId, moeda, ativo);

        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> ObterPorId(int id)
    {
        var resultado = await _catalogoService.ObterPorIdAsync(id);

        if (!resultado.IsSuccess)
            return NotFound(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("vigentes")]
    public async Task<IActionResult> ObterVigentes([FromQuery] DateTime? data = null)
    {
        var dataConsulta = data ?? DateTime.UtcNow;
        var resultado = await _catalogoService.ObterVigentesAsync(dataConsulta);

        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("chave-unica")]
    public async Task<IActionResult> ObterPorChaveUnica(
        [FromQuery] int safraId,
        [FromQuery] int pontoDistribuicaoId,
        [FromQuery] int culturaId,
        [FromQuery] int categoriaId)
    {
        var resultado = await _catalogoService.ObterPorChaveUnicaAsync(safraId, pontoDistribuicaoId, culturaId, categoriaId);

        if (!resultado.IsSuccess)
            return NotFound(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpPost]
    public async Task<IActionResult> Criar([FromBody] CriarCatalogoDto dto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var resultado = await _catalogoService.CriarAsync(dto);

        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return CreatedAtAction(nameof(ObterPorId), new { id = resultado.Value.Id }, resultado.Value);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Atualizar(int id, [FromBody] AtualizarCatalogoDto dto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var resultado = await _catalogoService.AtualizarAsync(id, dto);

        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Remover(int id)
    {
        var resultado = await _catalogoService.RemoverAsync(id);

        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return NoContent();
    }

    // Endpoints para itens do catálogo
    [HttpPost("{catalogoId}/itens")]
    public async Task<IActionResult> AdicionarItem(int catalogoId, [FromBody] CriarCatalogoItemDto dto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var resultado = await _catalogoService.AdicionarItemAsync(catalogoId, dto);

        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return CreatedAtAction(nameof(ObterPorId), new { id = catalogoId }, resultado.Value);
    }

    [HttpPut("{catalogoId}/itens/{itemId}")]
    public async Task<IActionResult> AtualizarItem(int catalogoId, int itemId, [FromBody] AtualizarCatalogoItemDto dto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var resultado = await _catalogoService.AtualizarItemAsync(catalogoId, itemId, dto);

        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpDelete("{catalogoId}/itens/{itemId}")]
    public async Task<IActionResult> RemoverItem(int catalogoId, int itemId)
    {
        var resultado = await _catalogoService.RemoverItemAsync(catalogoId, itemId);

        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return NoContent();
    }

    [HttpPost("{catalogoId}/produtos/{produtoId}/preco")]
    public async Task<IActionResult> ConsultarPreco(int catalogoId, int produtoId, [FromBody] ConsultarPrecoDto dto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var resultado = await _catalogoService.ConsultarPrecoAsync(catalogoId, produtoId, dto);

        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(new { preco = resultado.Value });
    }
}
</CatalogosController.cs>
<CategoriasController.cs>
using Agriis.Produtos.Aplicacao.DTOs;
using Agriis.Produtos.Aplicacao.Interfaces;
using Agriis.Produtos.Dominio.Enums;
using Microsoft.AspNetCore.Mvc;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de categorias de produtos
/// </summary>
[ApiController]
[Route("api/[controller]")]
public class CategoriasController : ControllerBase
{
    private readonly ICategoriaService _categoriaService;
    private readonly ILogger<CategoriasController> _logger;

    public CategoriasController(ICategoriaService categoriaService, ILogger<CategoriasController> logger)
    {
        _categoriaService = categoriaService;
        _logger = logger;
    }

    /// <summary>
    /// Obtém todas as categorias
    /// </summary>
    [HttpGet]
    public async Task<ActionResult<IEnumerable<CategoriaDto>>> ObterTodos(CancellationToken cancellationToken = default)
    {
        try
        {
            var categorias = await _categoriaService.ObterTodosAsync(cancellationToken);
            return Ok(categorias);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter categorias");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém categorias ativas
    /// </summary>
    [HttpGet("ativas")]
    public async Task<ActionResult<IEnumerable<CategoriaDto>>> ObterAtivas(CancellationToken cancellationToken = default)
    {
        try
        {
            var categorias = await _categoriaService.ObterAtivasAsync(cancellationToken);
            return Ok(categorias);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter categorias ativas");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém uma categoria por ID
    /// </summary>
    [HttpGet("{id:int}")]
    public async Task<ActionResult<CategoriaDto>> ObterPorId(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            var categoria = await _categoriaService.ObterPorIdAsync(id, cancellationToken);
            
            if (categoria == null)
                return NotFound($"Categoria com ID {id} não encontrada");

            return Ok(categoria);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter categoria {CategoriaId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém uma categoria por nome
    /// </summary>
    [HttpGet("nome/{nome}")]
    public async Task<ActionResult<CategoriaDto>> ObterPorNome(string nome, CancellationToken cancellationToken = default)
    {
        try
        {
            var categoria = await _categoriaService.ObterPorNomeAsync(nome, cancellationToken);
            
            if (categoria == null)
                return NotFound($"Categoria com nome {nome} não encontrada");

            return Ok(categoria);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter categoria por nome {Nome}", nome);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém categorias por tipo
    /// </summary>
    [HttpGet("tipo/{tipo}")]
    public async Task<ActionResult<IEnumerable<CategoriaDto>>> ObterPorTipo(CategoriaProduto tipo, CancellationToken cancellationToken = default)
    {
        try
        {
            var categorias = await _categoriaService.ObterPorTipoAsync(tipo, cancellationToken);
            return Ok(categorias);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter categorias do tipo {Tipo}", tipo);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém categorias raiz (sem categoria pai)
    /// </summary>
    [HttpGet("raiz")]
    public async Task<ActionResult<IEnumerable<CategoriaDto>>> ObterCategoriasRaiz(CancellationToken cancellationToken = default)
    {
        try
        {
            var categorias = await _categoriaService.ObterCategoriasRaizAsync(cancellationToken);
            return Ok(categorias);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter categorias raiz");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém subcategorias de uma categoria pai
    /// </summary>
    [HttpGet("{categoriaPaiId:int}/subcategorias")]
    public async Task<ActionResult<IEnumerable<CategoriaDto>>> ObterSubCategorias(int categoriaPaiId, CancellationToken cancellationToken = default)
    {
        try
        {
            var categorias = await _categoriaService.ObterSubCategoriasAsync(categoriaPaiId, cancellationToken);
            return Ok(categorias);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter subcategorias da categoria {CategoriaPaiId}", categoriaPaiId);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém categorias com hierarquia completa
    /// </summary>
    [HttpGet("hierarquia")]
    public async Task<ActionResult<IEnumerable<CategoriaDto>>> ObterComHierarquia(CancellationToken cancellationToken = default)
    {
        try
        {
            var categorias = await _categoriaService.ObterComHierarquiaAsync(cancellationToken);
            return Ok(categorias);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter categorias com hierarquia");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém categorias ordenadas
    /// </summary>
    [HttpGet("ordenadas")]
    public async Task<ActionResult<IEnumerable<CategoriaDto>>> ObterOrdenadas(CancellationToken cancellationToken = default)
    {
        try
        {
            var categorias = await _categoriaService.ObterOrdenadasAsync(cancellationToken);
            return Ok(categorias);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter categorias ordenadas");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Cria uma nova categoria
    /// </summary>
    [HttpPost]
    public async Task<ActionResult<CategoriaDto>> Criar([FromBody] CriarCategoriaDto dto, CancellationToken cancellationToken = default)
    {
        try
        {
            var categoria = await _categoriaService.CriarAsync(dto, cancellationToken);
            return CreatedAtAction(nameof(ObterPorId), new { id = categoria.Id }, categoria);
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Erro de validação ao criar categoria");
            return BadRequest(ex.Message);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro de operação ao criar categoria");
            return BadRequest(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar categoria");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Atualiza uma categoria existente
    /// </summary>
    [HttpPut("{id:int}")]
    public async Task<ActionResult<CategoriaDto>> Atualizar(int id, [FromBody] AtualizarCategoriaDto dto, CancellationToken cancellationToken = default)
    {
        try
        {
            var categoria = await _categoriaService.AtualizarAsync(id, dto, cancellationToken);
            return Ok(categoria);
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Erro de validação ao atualizar categoria {CategoriaId}", id);
            return BadRequest(ex.Message);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro de operação ao atualizar categoria {CategoriaId}", id);
            return BadRequest(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar categoria {CategoriaId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Ativa uma categoria
    /// </summary>
    [HttpPatch("{id:int}/ativar")]
    public async Task<ActionResult> Ativar(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            await _categoriaService.AtivarAsync(id, cancellationToken);
            return NoContent();
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Categoria {CategoriaId} não encontrada para ativação", id);
            return NotFound(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao ativar categoria {CategoriaId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Desativa uma categoria
    /// </summary>
    [HttpPatch("{id:int}/desativar")]
    public async Task<ActionResult> Desativar(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            await _categoriaService.DesativarAsync(id, cancellationToken);
            return NoContent();
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Categoria {CategoriaId} não encontrada para desativação", id);
            return NotFound(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao desativar categoria {CategoriaId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Remove uma categoria
    /// </summary>
    [HttpDelete("{id:int}")]
    public async Task<ActionResult> Remover(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            await _categoriaService.RemoverAsync(id, cancellationToken);
            return NoContent();
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Categoria {CategoriaId} não encontrada para remoção", id);
            return NotFound(ex.Message);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro de operação ao remover categoria {CategoriaId}", id);
            return BadRequest(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover categoria {CategoriaId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Verifica se uma categoria pode ser removida
    /// </summary>
    [HttpGet("{id:int}/pode-remover")]
    public async Task<ActionResult<bool>> PodeRemover(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            var podeRemover = await _categoriaService.PodeRemoverAsync(id, cancellationToken);
            return Ok(podeRemover);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao verificar se categoria {CategoriaId} pode ser removida", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }
}
</CategoriasController.cs>
<CombosController.cs>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Agriis.Combos.Aplicacao.DTOs;
using Agriis.Combos.Aplicacao.Interfaces;
using Agriis.Combos.Dominio.Enums;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de combos promocionais
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class CombosController : ControllerBase
{
    private readonly IComboService _comboService;

    public CombosController(IComboService comboService)
    {
        _comboService = comboService;
    }

    /// <summary>
    /// Cria um novo combo
    /// </summary>
    [HttpPost]
    public async Task<IActionResult> Criar([FromBody] CriarComboDto dto)
    {
        var resultado = await _comboService.CriarAsync(dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return CreatedAtAction(nameof(ObterPorId), new { id = resultado.Value.Id }, resultado.Value);
    }

    /// <summary>
    /// Obtém um combo por ID
    /// </summary>
    [HttpGet("{id}")]
    public async Task<IActionResult> ObterPorId(int id)
    {
        var resultado = await _comboService.ObterPorIdAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return NotFound(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Atualiza um combo existente
    /// </summary>
    [HttpPut("{id}")]
    public async Task<IActionResult> Atualizar(int id, [FromBody] AtualizarComboDto dto)
    {
        var resultado = await _comboService.AtualizarAsync(id, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém combos por fornecedor
    /// </summary>
    [HttpGet("fornecedor/{fornecedorId}")]
    public async Task<IActionResult> ObterPorFornecedor(int fornecedorId)
    {
        var resultado = await _comboService.ObterPorFornecedorAsync(fornecedorId);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém combos vigentes
    /// </summary>
    [HttpGet("vigentes")]
    public async Task<IActionResult> ObterCombosVigentes()
    {
        var resultado = await _comboService.ObterCombosVigentesAsync();
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém combos válidos para um produtor
    /// </summary>
    [HttpGet("produtor/{produtorId}")]
    public async Task<IActionResult> ObterCombosValidosParaProdutor(
        int produtorId, 
        [FromQuery] decimal hectareProdutor, 
        [FromQuery] int municipioId)
    {
        var resultado = await _comboService.ObterCombosValidosParaProdutorAsync(
            produtorId, 
            hectareProdutor, 
            municipioId);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Atualiza o status de um combo
    /// </summary>
    [HttpPatch("{id}/status")]
    public async Task<IActionResult> AtualizarStatus(int id, [FromBody] StatusCombo status)
    {
        var resultado = await _comboService.AtualizarStatusAsync(id, status);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return NoContent();
    }

    /// <summary>
    /// Remove um combo
    /// </summary>
    [HttpDelete("{id}")]
    public async Task<IActionResult> Remover(int id)
    {
        var resultado = await _comboService.RemoverAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return NoContent();
    }

    /// <summary>
    /// Adiciona um item ao combo
    /// </summary>
    [HttpPost("{comboId}/itens")]
    public async Task<IActionResult> AdicionarItem(int comboId, [FromBody] CriarComboItemDto dto)
    {
        var resultado = await _comboService.AdicionarItemAsync(comboId, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return CreatedAtAction(nameof(ObterPorId), new { id = comboId }, resultado.Value);
    }

    /// <summary>
    /// Atualiza um item do combo
    /// </summary>
    [HttpPut("{comboId}/itens/{itemId}")]
    public async Task<IActionResult> AtualizarItem(
        int comboId, 
        int itemId, 
        [FromBody] AtualizarComboItemDto dto)
    {
        var resultado = await _comboService.AtualizarItemAsync(comboId, itemId, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Remove um item do combo
    /// </summary>
    [HttpDelete("{comboId}/itens/{itemId}")]
    public async Task<IActionResult> RemoverItem(int comboId, int itemId)
    {
        var resultado = await _comboService.RemoverItemAsync(comboId, itemId);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return NoContent();
    }

    /// <summary>
    /// Adiciona um local de recebimento ao combo
    /// </summary>
    [HttpPost("{comboId}/locais-recebimento")]
    public async Task<IActionResult> AdicionarLocalRecebimento(
        int comboId, 
        [FromBody] CriarComboLocalRecebimentoDto dto)
    {
        var resultado = await _comboService.AdicionarLocalRecebimentoAsync(comboId, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return CreatedAtAction(nameof(ObterPorId), new { id = comboId }, resultado.Value);
    }

    /// <summary>
    /// Adiciona uma categoria de desconto ao combo
    /// </summary>
    [HttpPost("{comboId}/categorias-desconto")]
    public async Task<IActionResult> AdicionarCategoriaDesconto(
        int comboId, 
        [FromBody] CriarComboCategoriaDescontoDto dto)
    {
        var resultado = await _comboService.AdicionarCategoriaDescontoAsync(comboId, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return CreatedAtAction(nameof(ObterPorId), new { id = comboId }, resultado.Value);
    }

    /// <summary>
    /// Valida se um combo é aplicável para um produtor
    /// </summary>
    [HttpGet("{comboId}/validar-produtor/{produtorId}")]
    public async Task<IActionResult> ValidarComboParaProdutor(
        int comboId, 
        int produtorId, 
        [FromQuery] decimal hectareProdutor, 
        [FromQuery] int municipioId)
    {
        var resultado = await _comboService.ValidarComboParaProdutorAsync(
            comboId, 
            produtorId, 
            hectareProdutor, 
            municipioId);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(new { valido = resultado.Value });
    }
}
</CombosController.cs>
<CulturasController.cs>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Agriis.Culturas.Aplicacao.DTOs;
using Agriis.Culturas.Aplicacao.Interfaces;

namespace Agriis.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
[Authorize]
public class CulturasController : ControllerBase
{
    private readonly ICulturaService _culturaService;
    private readonly ILogger<CulturasController> _logger;

    public CulturasController(ICulturaService culturaService, ILogger<CulturasController> logger)
    {
        _culturaService = culturaService;
        _logger = logger;
    }

    /// <summary>
    /// Obtém todas as culturas
    /// </summary>
    [HttpGet]
    public async Task<IActionResult> ObterTodas()
    {
        var resultado = await _culturaService.ObterTodasAsync();
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém apenas as culturas ativas
    /// </summary>
    [HttpGet("ativas")]
    public async Task<IActionResult> ObterAtivas()
    {
        var resultado = await _culturaService.ObterAtivasAsync();
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém uma cultura por ID
    /// </summary>
    [HttpGet("{id:int}")]
    public async Task<IActionResult> ObterPorId(int id)
    {
        var resultado = await _culturaService.ObterPorIdAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return NotFound(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém uma cultura por nome
    /// </summary>
    [HttpGet("nome/{nome}")]
    public async Task<IActionResult> ObterPorNome(string nome)
    {
        var resultado = await _culturaService.ObterPorNomeAsync(nome);
        
        if (!resultado.IsSuccess)
        {
            return NotFound(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Cria uma nova cultura
    /// </summary>
    [HttpPost]
    public async Task<IActionResult> Criar([FromBody] CriarCulturaDto dto)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var resultado = await _culturaService.CriarAsync(dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return CreatedAtAction(
            nameof(ObterPorId), 
            new { id = resultado.Value!.Id }, 
            resultado.Value);
    }

    /// <summary>
    /// Atualiza uma cultura existente
    /// </summary>
    [HttpPut("{id:int}")]
    public async Task<IActionResult> Atualizar(int id, [FromBody] AtualizarCulturaDto dto)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var resultado = await _culturaService.AtualizarAsync(id, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Remove uma cultura
    /// </summary>
    [HttpDelete("{id:int}")]
    public async Task<IActionResult> Remover(int id)
    {
        var resultado = await _culturaService.RemoverAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return NoContent();
    }
}
</CulturasController.cs>
<EnderecosController.cs>
using Microsoft.AspNetCore.Mvc;
using AutoMapper;
using Agriis.Enderecos.Dominio.Interfaces;
using Agriis.Enderecos.Aplicacao.DTOs;
using Agriis.Enderecos.Dominio.Entidades;
using Agriis.Compartilhado.Aplicacao.Resultados;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de endereços, estados e municípios
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Produces("application/json")]
public class EnderecosController : ControllerBase
{
    private readonly IEstadoRepository _estadoRepository;
    private readonly IMunicipioRepository _municipioRepository;
    private readonly IEnderecoRepository _enderecoRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<EnderecosController> _logger;

    public EnderecosController(
        IEstadoRepository estadoRepository,
        IMunicipioRepository municipioRepository,
        IEnderecoRepository enderecoRepository,
        IMapper mapper,
        ILogger<EnderecosController> logger)
    {
        _estadoRepository = estadoRepository;
        _municipioRepository = municipioRepository;
        _enderecoRepository = enderecoRepository;
        _mapper = mapper;
        _logger = logger;
    }

    #region Estados

    /// <summary>
    /// Obtém todos os estados
    /// </summary>
    [HttpGet("estados")]
    public async Task<ActionResult<IEnumerable<EstadoDto>>> ObterEstados()
    {
        try
        {
            var estados = await _estadoRepository.ObterTodosAsync();
            var estadosDto = _mapper.Map<IEnumerable<EstadoDto>>(estados);
            return Ok(estadosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter estados");
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém um estado por ID
    /// </summary>
    [HttpGet("estados/{id:int}")]
    public async Task<ActionResult<EstadoDto>> ObterEstadoPorId(int id)
    {
        try
        {
            var estado = await _estadoRepository.ObterPorIdAsync(id);
            if (estado == null)
                return NotFound(new { error_code = "ESTADO_NAO_ENCONTRADO", error_description = "Estado não encontrado" });

            var estadoDto = _mapper.Map<EstadoDto>(estado);
            return Ok(estadoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter estado por ID: {Id}", id);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém um estado por UF
    /// </summary>
    [HttpGet("estados/uf/{uf}")]
    public async Task<ActionResult<EstadoDto>> ObterEstadoPorUf(string uf)
    {
        try
        {
            var estado = await _estadoRepository.ObterPorUfAsync(uf);
            if (estado == null)
                return NotFound(new { error_code = "ESTADO_NAO_ENCONTRADO", error_description = "Estado não encontrado" });

            var estadoDto = _mapper.Map<EstadoDto>(estado);
            return Ok(estadoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter estado por UF: {Uf}", uf);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    #endregion

    #region Municípios

    /// <summary>
    /// Obtém municípios por estado
    /// </summary>
    [HttpGet("municipios/estado/{estadoId:int}")]
    public async Task<ActionResult<IEnumerable<MunicipioDto>>> ObterMunicipiosPorEstado(int estadoId)
    {
        try
        {
            var municipios = await _municipioRepository.ObterPorEstadoAsync(estadoId);
            var municipiosDto = _mapper.Map<IEnumerable<MunicipioDto>>(municipios);
            return Ok(municipiosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter municípios por estado: {EstadoId}", estadoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém municípios por UF
    /// </summary>
    [HttpGet("municipios/uf/{uf}")]
    public async Task<ActionResult<IEnumerable<MunicipioDto>>> ObterMunicipiosPorUf(string uf)
    {
        try
        {
            var municipios = await _municipioRepository.ObterPorUfAsync(uf);
            var municipiosDto = _mapper.Map<IEnumerable<MunicipioDto>>(municipios);
            return Ok(municipiosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter municípios por UF: {Uf}", uf);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Busca municípios por nome
    /// </summary>
    [HttpGet("municipios/buscar")]
    public async Task<ActionResult<IEnumerable<MunicipioDto>>> BuscarMunicipios(
        [FromQuery] string nome, 
        [FromQuery] int? estadoId = null)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(nome))
                return BadRequest(new { error_code = "NOME_OBRIGATORIO", error_description = "Nome é obrigatório para busca" });

            var municipios = await _municipioRepository.BuscarPorNomeAsync(nome, estadoId);
            var municipiosDto = _mapper.Map<IEnumerable<MunicipioDto>>(municipios);
            return Ok(municipiosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao buscar municípios por nome: {Nome}", nome);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém municípios próximos a uma localização
    /// </summary>
    [HttpGet("municipios/proximos")]
    public async Task<ActionResult<IEnumerable<MunicipioProximoDto>>> ObterMunicipiosProximos(
        [FromQuery] double latitude,
        [FromQuery] double longitude,
        [FromQuery] double raioKm = 50,
        [FromQuery] int limite = 10)
    {
        try
        {
            if (latitude < -90 || latitude > 90)
                return BadRequest(new { error_code = "LATITUDE_INVALIDA", error_description = "Latitude deve estar entre -90 e 90" });

            if (longitude < -180 || longitude > 180)
                return BadRequest(new { error_code = "LONGITUDE_INVALIDA", error_description = "Longitude deve estar entre -180 e 180" });

            var municipios = await _municipioRepository.ObterProximosAsync(latitude, longitude, raioKm, limite);
            var municipiosDto = _mapper.Map<IEnumerable<MunicipioProximoDto>>(municipios);
            
            return Ok(municipiosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter municípios próximos: Lat={Latitude}, Lng={Longitude}", latitude, longitude);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém um município por ID
    /// </summary>
    [HttpGet("municipios/{id:int}")]
    public async Task<ActionResult<MunicipioDto>> ObterMunicipioPorId(int id)
    {
        try
        {
            var municipio = await _municipioRepository.ObterPorIdAsync(id);
            if (municipio == null)
                return NotFound(new { error_code = "MUNICIPIO_NAO_ENCONTRADO", error_description = "Município não encontrado" });

            var municipioDto = _mapper.Map<MunicipioDto>(municipio);
            return Ok(municipioDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter município por ID: {Id}", id);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    #endregion

    #region Endereços

    /// <summary>
    /// Obtém endereços por CEP
    /// </summary>
    [HttpGet("enderecos/cep/{cep}")]
    public async Task<ActionResult<IEnumerable<EnderecoDto>>> ObterEnderecosPorCep(string cep)
    {
        try
        {
            var enderecos = await _enderecoRepository.ObterPorCepAsync(cep);
            var enderecosDto = _mapper.Map<IEnumerable<EnderecoDto>>(enderecos);
            return Ok(enderecosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter endereços por CEP: {Cep}", cep);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém endereços por município
    /// </summary>
    [HttpGet("enderecos/municipio/{municipioId:int}")]
    public async Task<ActionResult<IEnumerable<EnderecoDto>>> ObterEnderecosPorMunicipio(int municipioId)
    {
        try
        {
            var enderecos = await _enderecoRepository.ObterPorMunicipioAsync(municipioId);
            var enderecosDto = _mapper.Map<IEnumerable<EnderecoDto>>(enderecos);
            return Ok(enderecosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter endereços por município: {MunicipioId}", municipioId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Busca endereços por logradouro
    /// </summary>
    [HttpGet("enderecos/buscar")]
    public async Task<ActionResult<IEnumerable<EnderecoDto>>> BuscarEnderecos(
        [FromQuery] string? logradouro = null,
        [FromQuery] string? bairro = null,
        [FromQuery] int? municipioId = null)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(logradouro) && string.IsNullOrWhiteSpace(bairro))
                return BadRequest(new { error_code = "PARAMETRO_OBRIGATORIO", error_description = "Logradouro ou bairro é obrigatório para busca" });

            IEnumerable<Endereco> enderecos;

            if (!string.IsNullOrWhiteSpace(logradouro))
                enderecos = await _enderecoRepository.BuscarPorLogradouroAsync(logradouro, municipioId);
            else
                enderecos = await _enderecoRepository.BuscarPorBairroAsync(bairro!, municipioId);

            var enderecosDto = _mapper.Map<IEnumerable<EnderecoDto>>(enderecos);
            return Ok(enderecosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao buscar endereços: Logradouro={Logradouro}, Bairro={Bairro}", logradouro, bairro);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém endereços próximos a uma localização
    /// </summary>
    [HttpGet("enderecos/proximos")]
    public async Task<ActionResult<IEnumerable<EnderecoProximoDto>>> ObterEnderecosProximos(
        [FromQuery] double latitude,
        [FromQuery] double longitude,
        [FromQuery] double raioKm = 10,
        [FromQuery] int limite = 10)
    {
        try
        {
            if (latitude < -90 || latitude > 90)
                return BadRequest(new { error_code = "LATITUDE_INVALIDA", error_description = "Latitude deve estar entre -90 e 90" });

            if (longitude < -180 || longitude > 180)
                return BadRequest(new { error_code = "LONGITUDE_INVALIDA", error_description = "Longitude deve estar entre -180 e 180" });

            var enderecos = await _enderecoRepository.ObterProximosAsync(latitude, longitude, raioKm, limite);
            var enderecosDto = _mapper.Map<IEnumerable<EnderecoProximoDto>>(enderecos);
            
            return Ok(enderecosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter endereços próximos: Lat={Latitude}, Lng={Longitude}", latitude, longitude);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Calcula distância entre dois endereços
    /// </summary>
    [HttpGet("enderecos/distancia")]
    public async Task<ActionResult<object>> CalcularDistancia(
        [FromQuery] int enderecoOrigemId,
        [FromQuery] int enderecoDestinoId)
    {
        try
        {
            var distancia = await _enderecoRepository.CalcularDistanciaAsync(enderecoOrigemId, enderecoDestinoId);
            
            if (!distancia.HasValue)
                return BadRequest(new { error_code = "CALCULO_IMPOSSIVEL", error_description = "Não foi possível calcular a distância. Verifique se os endereços possuem localização definida." });

            return Ok(new { distancia_km = Math.Round(distancia.Value, 2) });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao calcular distância entre endereços: {OrigemId} -> {DestinoId}", enderecoOrigemId, enderecoDestinoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Calcula distância entre dois municípios
    /// </summary>
    [HttpGet("municipios/distancia")]
    public async Task<ActionResult<object>> CalcularDistanciaMunicipios(
        [FromQuery] int municipioOrigemId,
        [FromQuery] int municipioDestinoId)
    {
        try
        {
            var distancia = await _municipioRepository.CalcularDistanciaAsync(municipioOrigemId, municipioDestinoId);
            
            if (!distancia.HasValue)
                return BadRequest(new { error_code = "CALCULO_IMPOSSIVEL", error_description = "Não foi possível calcular a distância. Verifique se os municípios possuem localização definida." });

            return Ok(new { distancia_km = Math.Round(distancia.Value, 2) });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao calcular distância entre municípios: {OrigemId} -> {DestinoId}", municipioOrigemId, municipioDestinoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }

    #endregion
}
</EnderecosController.cs>
<FornecedoresController.cs>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Agriis.Fornecedores.Aplicacao.DTOs;
using Agriis.Fornecedores.Aplicacao.Interfaces;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de fornecedores
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class FornecedoresController : ControllerBase
{
    private readonly IFornecedorService _fornecedorService;
    private readonly ILogger<FornecedoresController> _logger;

    public FornecedoresController(
        IFornecedorService fornecedorService,
        ILogger<FornecedoresController> logger)
    {
        _fornecedorService = fornecedorService ?? throw new ArgumentNullException(nameof(fornecedorService));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Obtém todos os fornecedores
    /// </summary>
    /// <returns>Lista de fornecedores</returns>
    [HttpGet]
    public async Task<ActionResult<IEnumerable<FornecedorDto>>> ObterTodos()
    {
        try
        {
            var fornecedores = await _fornecedorService.ObterTodosAsync();
            return Ok(fornecedores);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter todos os fornecedores");
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém um fornecedor por ID
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <returns>Dados do fornecedor</returns>
    [HttpGet("{id:int}")]
    public async Task<ActionResult<FornecedorDto>> ObterPorId(int id)
    {
        try
        {
            var fornecedor = await _fornecedorService.ObterPorIdAsync(id);
            
            if (fornecedor == null)
                return NotFound(new { error_code = "FORNECEDOR_NAO_ENCONTRADO", error_description = "Fornecedor não encontrado" });

            return Ok(fornecedor);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter fornecedor por ID: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }   
 /// <summary>
    /// Obtém um fornecedor por CNPJ
    /// </summary>
    /// <param name="cnpj">CNPJ do fornecedor</param>
    /// <returns>Dados do fornecedor</returns>
    [HttpGet("cnpj/{cnpj}")]
    public async Task<ActionResult<FornecedorDto>> ObterPorCnpj(string cnpj)
    {
        try
        {
            var fornecedor = await _fornecedorService.ObterPorCnpjAsync(cnpj);
            
            if (fornecedor == null)
                return NotFound(new { error_code = "FORNECEDOR_NAO_ENCONTRADO", error_description = "Fornecedor não encontrado" });

            return Ok(fornecedor);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter fornecedor por CNPJ: {Cnpj}", cnpj);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém fornecedores ativos
    /// </summary>
    /// <returns>Lista de fornecedores ativos</returns>
    [HttpGet("ativos")]
    public async Task<ActionResult<IEnumerable<FornecedorDto>>> ObterAtivos()
    {
        try
        {
            var fornecedores = await _fornecedorService.ObterAtivosAsync();
            return Ok(fornecedores);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter fornecedores ativos");
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém fornecedores por território
    /// </summary>
    /// <param name="uf">UF do estado</param>
    /// <param name="municipio">Nome do município (opcional)</param>
    /// <returns>Lista de fornecedores que atendem o território</returns>
    [HttpGet("territorio")]
    public async Task<ActionResult<IEnumerable<FornecedorDto>>> ObterPorTerritorio([FromQuery] string uf, [FromQuery] string? municipio = null)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(uf))
                return BadRequest(new { error_code = "UF_OBRIGATORIA", error_description = "UF é obrigatória" });

            var fornecedores = await _fornecedorService.ObterPorTerritorioAsync(uf, municipio);
            return Ok(fornecedores);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter fornecedores por território: UF={Uf}, Município={Municipio}", uf, municipio);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém fornecedores com filtros avançados
    /// </summary>
    /// <param name="nome">Filtro por nome (opcional)</param>
    /// <param name="cnpj">Filtro por CNPJ (opcional)</param>
    /// <param name="ativo">Filtro por status ativo (opcional)</param>
    /// <param name="moedaPadrao">Filtro por moeda padrão (opcional)</param>
    /// <returns>Lista de fornecedores filtrados</returns>
    [HttpGet("filtros")]
    public async Task<ActionResult<IEnumerable<FornecedorDto>>> ObterComFiltros(
        [FromQuery] string? nome = null,
        [FromQuery] string? cnpj = null,
        [FromQuery] bool? ativo = null,
        [FromQuery] int? moedaPadrao = null)
    {
        try
        {
            var fornecedores = await _fornecedorService.ObterComFiltrosAsync(nome, cnpj, ativo, moedaPadrao);
            return Ok(fornecedores);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter fornecedores com filtros");
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Cria um novo fornecedor
    /// </summary>
    /// <param name="request">Dados do fornecedor</param>
    /// <returns>Fornecedor criado</returns>
    [HttpPost]
    public async Task<ActionResult<FornecedorDto>> Criar([FromBody] CriarFornecedorRequest request)
    {
        try
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var fornecedor = await _fornecedorService.CriarAsync(request);
            return CreatedAtAction(nameof(ObterPorId), new { id = fornecedor.Id }, fornecedor);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro de validação ao criar fornecedor");
            return BadRequest(new { error_code = "VALIDACAO_ERRO", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar fornecedor");
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Atualiza um fornecedor existente
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <param name="request">Novos dados do fornecedor</param>
    /// <returns>Fornecedor atualizado</returns>
    [HttpPut("{id:int}")]
    public async Task<ActionResult<FornecedorDto>> Atualizar(int id, [FromBody] AtualizarFornecedorRequest request)
    {
        try
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var fornecedor = await _fornecedorService.AtualizarAsync(id, request);
            return Ok(fornecedor);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro de validação ao atualizar fornecedor: {Id}", id);
            return BadRequest(new { error_code = "VALIDACAO_ERRO", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar fornecedor: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }    
/// <summary>
    /// Ativa um fornecedor
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <returns>Resultado da operação</returns>
    [HttpPatch("{id:int}/ativar")]
    public async Task<ActionResult> Ativar(int id)
    {
        try
        {
            await _fornecedorService.AtivarAsync(id);
            return Ok(new { message = "Fornecedor ativado com sucesso" });
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro ao ativar fornecedor: {Id}", id);
            return NotFound(new { error_code = "FORNECEDOR_NAO_ENCONTRADO", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao ativar fornecedor: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Desativa um fornecedor
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <returns>Resultado da operação</returns>
    [HttpPatch("{id:int}/desativar")]
    public async Task<ActionResult> Desativar(int id)
    {
        try
        {
            await _fornecedorService.DesativarAsync(id);
            return Ok(new { message = "Fornecedor desativado com sucesso" });
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro ao desativar fornecedor: {Id}", id);
            return NotFound(new { error_code = "FORNECEDOR_NAO_ENCONTRADO", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao desativar fornecedor: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Define a logo do fornecedor
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <param name="request">URL da logo</param>
    /// <returns>Resultado da operação</returns>
    [HttpPatch("{id:int}/logo")]
    public async Task<ActionResult> DefinirLogo(int id, [FromBody] DefinirLogoRequest request)
    {
        try
        {
            await _fornecedorService.DefinirLogoAsync(id, request.LogoUrl);
            return Ok(new { message = "Logo definida com sucesso" });
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro ao definir logo do fornecedor: {Id}", id);
            return NotFound(new { error_code = "FORNECEDOR_NAO_ENCONTRADO", error_description = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao definir logo do fornecedor: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Verifica se um CNPJ está disponível
    /// </summary>
    /// <param name="cnpj">CNPJ a verificar</param>
    /// <param name="fornecedorIdExcluir">ID do fornecedor a excluir da verificação</param>
    /// <returns>Resultado da verificação</returns>
    [HttpGet("cnpj/{cnpj}/disponivel")]
    public async Task<ActionResult<bool>> VerificarCnpjDisponivel(string cnpj, [FromQuery] int? fornecedorIdExcluir = null)
    {
        try
        {
            var disponivel = await _fornecedorService.VerificarCnpjDisponivelAsync(cnpj, fornecedorIdExcluir);
            return Ok(new { disponivel });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao verificar disponibilidade do CNPJ: {Cnpj}", cnpj);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }
}

/// <summary>
/// Request para definir logo do fornecedor
/// </summary>
public class DefinirLogoRequest
{
    /// <summary>
    /// URL da logo
    /// </summary>
    public string? LogoUrl { get; set; }
}
</FornecedoresController.cs>
<IntegrationsController.cs>
using Agriis.Compartilhado.Infraestrutura.Integracoes;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Agriis.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
[Authorize]
public class IntegrationsController : ControllerBase
{
    private readonly IAwsService _awsService;
    private readonly INotificationService _notificationService;
    private readonly ICurrencyConverterService _currencyService;
    private readonly ILogger<IntegrationsController> _logger;

    public IntegrationsController(
        IAwsService awsService,
        INotificationService notificationService,
        ICurrencyConverterService currencyService,
        ILogger<IntegrationsController> logger)
    {
        _awsService = awsService ?? throw new ArgumentNullException(nameof(awsService));
        _notificationService = notificationService ?? throw new ArgumentNullException(nameof(notificationService));
        _currencyService = currencyService ?? throw new ArgumentNullException(nameof(currencyService));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Upload de arquivo para S3
    /// </summary>
    [HttpPost("aws/upload")]
    public async Task<IActionResult> UploadFile(IFormFile file, [FromQuery] string? key = null)
    {
        if (file == null || file.Length == 0)
        {
            return BadRequest(new { error_code = "INVALID_FILE", error_description = "Arquivo não fornecido ou vazio" });
        }

        try
        {
            var fileKey = key ?? $"uploads/{Guid.NewGuid()}/{file.FileName}";
            
            using var stream = file.OpenReadStream();
            var url = await _awsService.UploadFileAsync(fileKey, stream, file.ContentType);

            return Ok(new
            {
                success = true,
                file_key = fileKey,
                file_url = url,
                file_size = file.Length,
                content_type = file.ContentType
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao fazer upload do arquivo {FileName}", file.FileName);
            return StatusCode(500, new { error_code = "UPLOAD_ERROR", error_description = "Erro interno ao fazer upload" });
        }
    }

    /// <summary>
    /// Verificar se arquivo existe no S3
    /// </summary>
    [HttpGet("aws/exists/{*key}")]
    public async Task<IActionResult> FileExists(string key)
    {
        try
        {
            var exists = await _awsService.FileExistsAsync(key);
            return Ok(new { exists, key });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao verificar existência do arquivo {Key}", key);
            return StatusCode(500, new { error_code = "CHECK_ERROR", error_description = "Erro interno ao verificar arquivo" });
        }
    }

    /// <summary>
    /// Gerar URL pré-assinada para download
    /// </summary>
    [HttpGet("aws/presigned-url/{*key}")]
    public async Task<IActionResult> GetPreSignedUrl(string key, [FromQuery] int expirationMinutes = 60)
    {
        try
        {
            var expiration = TimeSpan.FromMinutes(expirationMinutes);
            var url = await _awsService.GetPreSignedUrlAsync(key, expiration);
            
            return Ok(new
            {
                presigned_url = url,
                key,
                expires_in_minutes = expirationMinutes,
                expires_at = DateTime.UtcNow.Add(expiration)
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao gerar URL pré-assinada para {Key}", key);
            return StatusCode(500, new { error_code = "PRESIGNED_URL_ERROR", error_description = "Erro interno ao gerar URL" });
        }
    }

    /// <summary>
    /// Listar arquivos no S3
    /// </summary>
    [HttpGet("aws/files")]
    public async Task<IActionResult> ListFiles([FromQuery] string prefix = "")
    {
        try
        {
            var files = await _awsService.ListFilesAsync(prefix);
            return Ok(new { files = files.ToList(), prefix, count = files.Count() });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao listar arquivos com prefixo {Prefix}", prefix);
            return StatusCode(500, new { error_code = "LIST_ERROR", error_description = "Erro interno ao listar arquivos" });
        }
    }

    /// <summary>
    /// Enviar notificação para usuário específico
    /// </summary>
    [HttpPost("notifications/user/{userId}")]
    public async Task<IActionResult> SendUserNotification(string userId, [FromBody] NotificationRequest request)
    {
        try
        {
            await _notificationService.SendNotificationToUserAsync(userId, request.Message, request.Data);
            return Ok(new { success = true, message = "Notificação enviada com sucesso" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar notificação para usuário {UserId}", userId);
            return StatusCode(500, new { error_code = "NOTIFICATION_ERROR", error_description = "Erro interno ao enviar notificação" });
        }
    }

    /// <summary>
    /// Enviar notificação para grupo
    /// </summary>
    [HttpPost("notifications/group/{groupName}")]
    public async Task<IActionResult> SendGroupNotification(string groupName, [FromBody] NotificationRequest request)
    {
        try
        {
            await _notificationService.SendNotificationToGroupAsync(groupName, request.Message, request.Data);
            return Ok(new { success = true, message = "Notificação enviada para o grupo com sucesso" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar notificação para grupo {GroupName}", groupName);
            return StatusCode(500, new { error_code = "NOTIFICATION_ERROR", error_description = "Erro interno ao enviar notificação" });
        }
    }

    /// <summary>
    /// Enviar notificação broadcast
    /// </summary>
    [HttpPost("notifications/broadcast")]
    public async Task<IActionResult> SendBroadcastNotification([FromBody] NotificationRequest request)
    {
        try
        {
            await _notificationService.SendNotificationToAllAsync(request.Message, request.Data);
            return Ok(new { success = true, message = "Notificação broadcast enviada com sucesso" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar notificação broadcast");
            return StatusCode(500, new { error_code = "NOTIFICATION_ERROR", error_description = "Erro interno ao enviar notificação" });
        }
    }

    /// <summary>
    /// Converter moeda
    /// </summary>
    [HttpGet("currency/convert")]
    public async Task<IActionResult> ConvertCurrency(
        [FromQuery] decimal amount,
        [FromQuery] string fromCurrency,
        [FromQuery] string toCurrency)
    {
        try
        {
            var convertedAmount = await _currencyService.ConvertAsync(amount, fromCurrency, toCurrency);
            var exchangeRate = await _currencyService.GetExchangeRateAsync(fromCurrency, toCurrency);

            return Ok(new
            {
                original_amount = amount,
                from_currency = fromCurrency.ToUpper(),
                to_currency = toCurrency.ToUpper(),
                converted_amount = convertedAmount,
                exchange_rate = exchangeRate,
                conversion_date = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao converter {Amount} de {FromCurrency} para {ToCurrency}",
                amount, fromCurrency, toCurrency);
            return StatusCode(500, new { error_code = "CONVERSION_ERROR", error_description = "Erro interno na conversão de moeda" });
        }
    }

    /// <summary>
    /// Obter taxa de câmbio
    /// </summary>
    [HttpGet("currency/rate")]
    public async Task<IActionResult> GetExchangeRate(
        [FromQuery] string fromCurrency,
        [FromQuery] string toCurrency)
    {
        try
        {
            var rate = await _currencyService.GetExchangeRateAsync(fromCurrency, toCurrency);

            return Ok(new
            {
                from_currency = fromCurrency.ToUpper(),
                to_currency = toCurrency.ToUpper(),
                exchange_rate = rate,
                rate_date = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter taxa de câmbio {FromCurrency}/{ToCurrency}",
                fromCurrency, toCurrency);
            return StatusCode(500, new { error_code = "RATE_ERROR", error_description = "Erro interno ao obter taxa de câmbio" });
        }
    }

    /// <summary>
    /// Obter todas as taxas de câmbio para uma moeda base
    /// </summary>
    [HttpGet("currency/rates/{baseCurrency}")]
    public async Task<IActionResult> GetAllRates(string baseCurrency)
    {
        try
        {
            var rates = await _currencyService.GetAllRatesAsync(baseCurrency);

            return Ok(new
            {
                base_currency = baseCurrency.ToUpper(),
                rates,
                rate_count = rates.Count,
                rate_date = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter todas as taxas para moeda base {BaseCurrency}", baseCurrency);
            return StatusCode(500, new { error_code = "RATES_ERROR", error_description = "Erro interno ao obter taxas de câmbio" });
        }
    }

    /// <summary>
    /// Atualizar taxas de câmbio manualmente
    /// </summary>
    [HttpPost("currency/refresh")]
    public async Task<IActionResult> RefreshRates()
    {
        try
        {
            await _currencyService.RefreshRatesAsync();
            return Ok(new { success = true, message = "Taxas de câmbio atualizadas com sucesso" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar taxas de câmbio manualmente");
            return StatusCode(500, new { error_code = "REFRESH_ERROR", error_description = "Erro interno ao atualizar taxas" });
        }
    }
}

public class NotificationRequest
{
    public string Message { get; set; } = string.Empty;
    public object? Data { get; set; }
}
</IntegrationsController.cs>
<PagamentosController.cs>
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Agriis.Pagamentos.Aplicacao.Interfaces;
using Agriis.Pagamentos.Aplicacao.DTOs;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de formas de pagamento
/// </summary>
[ApiController]
[Route("api/v1/pagamentos")]
[Authorize]
public class PagamentosController : ControllerBase
{
    private readonly IFormaPagamentoService _formaPagamentoService;
    private readonly ICulturaFormaPagamentoService _culturaFormaPagamentoService;

    public PagamentosController(
        IFormaPagamentoService formaPagamentoService,
        ICulturaFormaPagamentoService culturaFormaPagamentoService)
    {
        _formaPagamentoService = formaPagamentoService;
        _culturaFormaPagamentoService = culturaFormaPagamentoService;
    }

    /// <summary>
    /// Lista todas as formas de pagamento ativas
    /// </summary>
    /// <returns>Lista de formas de pagamento</returns>
    [HttpGet("formas")]
    public async Task<IActionResult> ListarFormasPagamento()
    {
        var resultado = await _formaPagamentoService.ObterAtivasAsync();
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });
            
        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém formas de pagamento disponíveis para um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Lista de formas de pagamento disponíveis</returns>
    [HttpGet("pedido/{pedidoId}/formas")]
    public async Task<IActionResult> ListarFormasPagamentoPorPedido(int pedidoId)
    {
        var resultado = await _formaPagamentoService.ObterPorPedidoAsync(pedidoId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });
            
        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém uma forma de pagamento por ID
    /// </summary>
    /// <param name="id">ID da forma de pagamento</param>
    /// <returns>Forma de pagamento</returns>
    [HttpGet("formas/{id}")]
    public async Task<IActionResult> ObterFormaPagamento(int id)
    {
        var resultado = await _formaPagamentoService.ObterPorIdAsync(id);
        
        if (!resultado.IsSuccess)
            return NotFound(new { error_description = resultado.Error });
            
        return Ok(resultado.Value);
    }

    /// <summary>
    /// Cria uma nova forma de pagamento
    /// </summary>
    /// <param name="dto">Dados da forma de pagamento</param>
    /// <returns>Forma de pagamento criada</returns>
    [HttpPost("formas")]
    [Authorize(Roles = "ADMIN")]
    public async Task<IActionResult> CriarFormaPagamento([FromBody] CriarFormaPagamentoDto dto)
    {
        var resultado = await _formaPagamentoService.CriarAsync(dto);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });
            
        return CreatedAtAction(
            nameof(ObterFormaPagamento), 
            new { id = resultado.Value!.Id }, 
            resultado.Value);
    }

    /// <summary>
    /// Atualiza uma forma de pagamento
    /// </summary>
    /// <param name="id">ID da forma de pagamento</param>
    /// <param name="dto">Dados atualizados</param>
    /// <returns>Forma de pagamento atualizada</returns>
    [HttpPut("formas/{id}")]
    [Authorize(Roles = "ADMIN")]
    public async Task<IActionResult> AtualizarFormaPagamento(int id, [FromBody] AtualizarFormaPagamentoDto dto)
    {
        var resultado = await _formaPagamentoService.AtualizarAsync(id, dto);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });
            
        return Ok(resultado.Value);
    }

    /// <summary>
    /// Remove uma forma de pagamento
    /// </summary>
    /// <param name="id">ID da forma de pagamento</param>
    /// <returns>Resultado da operação</returns>
    [HttpDelete("formas/{id}")]
    [Authorize(Roles = "ADMIN")]
    public async Task<IActionResult> RemoverFormaPagamento(int id)
    {
        var resultado = await _formaPagamentoService.RemoverAsync(id);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });
            
        return NoContent();
    }

    /// <summary>
    /// Cria associação entre cultura, fornecedor e forma de pagamento
    /// </summary>
    /// <param name="dto">Dados da associação</param>
    /// <returns>Associação criada</returns>
    [HttpPost("cultura_forma_pagamento")]
    [Authorize(Roles = "FORNECEDOR_WEB_ADMIN,FORNECEDOR_WEB_REPRESENTANTE")]
    public async Task<IActionResult> CriarCulturaFormaPagamento([FromBody] CriarCulturaFormaPagamentoDto dto)
    {
        var resultado = await _culturaFormaPagamentoService.CriarAsync(dto);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });
            
        return Created($"/api/v1/pagamentos/cultura_forma_pagamento/{resultado.Value!.Id}", resultado.Value);
    }

    /// <summary>
    /// Remove associação entre cultura, fornecedor e forma de pagamento
    /// </summary>
    /// <param name="culturaFormaPagamentoId">ID da associação</param>
    /// <returns>Resultado da operação</returns>
    [HttpDelete("cultura_forma_pagamento/{culturaFormaPagamentoId}")]
    [Authorize(Roles = "FORNECEDOR_WEB_ADMIN,FORNECEDOR_WEB_REPRESENTANTE")]
    public async Task<IActionResult> RemoverCulturaFormaPagamento(int culturaFormaPagamentoId)
    {
        var resultado = await _culturaFormaPagamentoService.RemoverAsync(culturaFormaPagamentoId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });
            
        return NoContent();
    }

    /// <summary>
    /// Obtém formas de pagamento disponíveis para fornecedor e cultura
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="culturaId">ID da cultura</param>
    /// <returns>Lista de formas de pagamento disponíveis</returns>
    [HttpGet("fornecedor/{fornecedorId}/cultura/{culturaId}/formas")]
    public async Task<IActionResult> ObterFormasPagamentoPorFornecedorCultura(int fornecedorId, int culturaId)
    {
        var resultado = await _culturaFormaPagamentoService
            .ObterFormasPagamentoPorFornecedorCulturaAsync(fornecedorId, culturaId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });
            
        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém associações de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de associações do fornecedor</returns>
    [HttpGet("fornecedor/{fornecedorId}/associacoes")]
    [Authorize(Roles = "FORNECEDOR_WEB_ADMIN,FORNECEDOR_WEB_REPRESENTANTE")]
    public async Task<IActionResult> ObterAssociacoesPorFornecedor(int fornecedorId)
    {
        var resultado = await _culturaFormaPagamentoService.ObterPorFornecedorAsync(fornecedorId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });
            
        return Ok(resultado.Value);
    }
}
</PagamentosController.cs>
<PontosDistribuicaoController.cs>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Agriis.PontosDistribuicao.Aplicacao.DTOs;
using Agriis.PontosDistribuicao.Aplicacao.Servicos;

namespace Agriis.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
[Authorize]
public class PontosDistribuicaoController : ControllerBase
{
    private readonly PontoDistribuicaoService _pontoDistribuicaoService;
    private readonly ILogger<PontosDistribuicaoController> _logger;

    public PontosDistribuicaoController(
        PontoDistribuicaoService pontoDistribuicaoService, 
        ILogger<PontosDistribuicaoController> logger)
    {
        _pontoDistribuicaoService = pontoDistribuicaoService;
        _logger = logger;
    }

    /// <summary>
    /// Obtém um ponto de distribuição por ID
    /// </summary>
    [HttpGet("{id:int}")]
    public async Task<IActionResult> ObterPorId(int id)
    {
        var resultado = await _pontoDistribuicaoService.ObterPorIdAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return NotFound(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém pontos de distribuição por fornecedor
    /// </summary>
    [HttpGet("fornecedor/{fornecedorId:int}")]
    public async Task<IActionResult> ObterPorFornecedor(int fornecedorId, [FromQuery] bool apenasAtivos = true)
    {
        var resultado = await _pontoDistribuicaoService.ObterPorFornecedorAsync(fornecedorId, apenasAtivos);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Busca pontos de distribuição por localização
    /// </summary>
    [HttpPost("buscar-por-localizacao")]
    public async Task<IActionResult> BuscarPorLocalizacao([FromBody] ConsultaPontosPorLocalizacaoDto consulta)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var resultado = await _pontoDistribuicaoService.BuscarPorLocalizacaoAsync(consulta);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Busca pontos de distribuição próximos por coordenadas (GET alternativo)
    /// </summary>
    [HttpGet("proximos")]
    public async Task<IActionResult> BuscarProximos(
        [FromQuery] double latitude,
        [FromQuery] double longitude,
        [FromQuery] double raioKm = 50,
        [FromQuery] int? fornecedorId = null,
        [FromQuery] bool apenasAtivos = true)
    {
        var consulta = new ConsultaPontosPorLocalizacaoDto
        {
            Latitude = latitude,
            Longitude = longitude,
            RaioKm = raioKm,
            FornecedorId = fornecedorId,
            ApenasAtivos = apenasAtivos
        };

        var resultado = await _pontoDistribuicaoService.BuscarPorLocalizacaoAsync(consulta);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Busca pontos de distribuição por estado
    /// </summary>
    [HttpGet("estado/{estadoId:int}")]
    public async Task<IActionResult> BuscarPorEstado(
        int estadoId,
        [FromQuery] int? fornecedorId = null,
        [FromQuery] bool apenasAtivos = true)
    {
        var consulta = new ConsultaPontosPorLocalizacaoDto
        {
            EstadoId = estadoId,
            FornecedorId = fornecedorId,
            ApenasAtivos = apenasAtivos
        };

        var resultado = await _pontoDistribuicaoService.BuscarPorLocalizacaoAsync(consulta);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Busca pontos de distribuição por município
    /// </summary>
    [HttpGet("municipio/{municipioId:int}")]
    public async Task<IActionResult> BuscarPorMunicipio(
        int municipioId,
        [FromQuery] int? fornecedorId = null,
        [FromQuery] bool apenasAtivos = true)
    {
        var consulta = new ConsultaPontosPorLocalizacaoDto
        {
            MunicipioId = municipioId,
            FornecedorId = fornecedorId,
            ApenasAtivos = apenasAtivos
        };

        var resultado = await _pontoDistribuicaoService.BuscarPorLocalizacaoAsync(consulta);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Cria um novo ponto de distribuição
    /// </summary>
    [HttpPost]
    public async Task<IActionResult> Criar([FromBody] CriarPontoDistribuicaoDto dto)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var resultado = await _pontoDistribuicaoService.CriarAsync(dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return CreatedAtAction(
            nameof(ObterPorId), 
            new { id = resultado.Value!.Id }, 
            resultado.Value);
    }

    /// <summary>
    /// Atualiza um ponto de distribuição existente
    /// </summary>
    [HttpPut("{id:int}")]
    public async Task<IActionResult> Atualizar(int id, [FromBody] AtualizarPontoDistribuicaoDto dto)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var resultado = await _pontoDistribuicaoService.AtualizarAsync(id, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Ativa um ponto de distribuição
    /// </summary>
    [HttpPatch("{id:int}/ativar")]
    public async Task<IActionResult> Ativar(int id)
    {
        var resultado = await _pontoDistribuicaoService.AtivarAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(new { message = "Ponto de distribuição ativado com sucesso" });
    }

    /// <summary>
    /// Desativa um ponto de distribuição
    /// </summary>
    [HttpPatch("{id:int}/desativar")]
    public async Task<IActionResult> Desativar(int id)
    {
        var resultado = await _pontoDistribuicaoService.DesativarAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(new { message = "Ponto de distribuição desativado com sucesso" });
    }

    /// <summary>
    /// Remove um ponto de distribuição
    /// </summary>
    [HttpDelete("{id:int}")]
    public async Task<IActionResult> Remover(int id)
    {
        var resultado = await _pontoDistribuicaoService.RemoverAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return NoContent();
    }

    /// <summary>
    /// Obtém estatísticas de pontos de distribuição por fornecedor
    /// </summary>
    [HttpGet("fornecedor/{fornecedorId:int}/estatisticas")]
    public async Task<IActionResult> ObterEstatisticas(int fornecedorId)
    {
        var resultado = await _pontoDistribuicaoService.ObterEstatisticasAsync(fornecedorId);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }
}
</PontosDistribuicaoController.cs>
<ProdutoresController.cs>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Agriis.Produtores.Aplicacao.DTOs;
using Agriis.Produtores.Aplicacao.Interfaces;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de produtores
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class ProdutoresController : ControllerBase
{
    private readonly IProdutorService _produtorService;
    private readonly ILogger<ProdutoresController> _logger;

    public ProdutoresController(
        IProdutorService produtorService,
        ILogger<ProdutoresController> logger)
    {
        _produtorService = produtorService ?? throw new ArgumentNullException(nameof(produtorService));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Obtém um produtor por ID
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <returns>Dados do produtor</returns>
    [HttpGet("{id:int}")]
    public async Task<ActionResult<ProdutorDto>> ObterPorId(int id)
    {
        try
        {
            var produtor = await _produtorService.ObterPorIdAsync(id);
            
            if (produtor == null)
                return NotFound(new { error_code = "PRODUTOR_NAO_ENCONTRADO", error_description = "Produtor não encontrado" });

            return Ok(produtor);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtor por ID: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém um produtor por CPF
    /// </summary>
    /// <param name="cpf">CPF do produtor</param>
    /// <returns>Dados do produtor</returns>
    [HttpGet("cpf/{cpf}")]
    public async Task<ActionResult<ProdutorDto>> ObterPorCpf(string cpf)
    {
        try
        {
            var produtor = await _produtorService.ObterPorCpfAsync(cpf);
            
            if (produtor == null)
                return NotFound(new { error_code = "PRODUTOR_NAO_ENCONTRADO", error_description = "Produtor não encontrado" });

            return Ok(produtor);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtor por CPF: {Cpf}", cpf);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém um produtor por CNPJ
    /// </summary>
    /// <param name="cnpj">CNPJ do produtor</param>
    /// <returns>Dados do produtor</returns>
    [HttpGet("cnpj/{cnpj}")]
    public async Task<ActionResult<ProdutorDto>> ObterPorCnpj(string cnpj)
    {
        try
        {
            var produtor = await _produtorService.ObterPorCnpjAsync(cnpj);
            
            if (produtor == null)
                return NotFound(new { error_code = "PRODUTOR_NAO_ENCONTRADO", error_description = "Produtor não encontrado" });

            return Ok(produtor);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtor por CNPJ: {Cnpj}", cnpj);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém produtores paginados com filtros
    /// </summary>
    /// <param name="filtros">Filtros de busca</param>
    /// <returns>Lista paginada de produtores</returns>
    [HttpGet]
    public async Task<ActionResult<object>> ObterPaginado([FromQuery] FiltrosProdutorDto filtros)
    {
        try
        {
            var resultado = await _produtorService.ObterPaginadoAsync(filtros);
            
            return Ok(new
            {
                items = resultado.Items,
                total_items = resultado.TotalCount,
                page = resultado.PageNumber,
                page_size = resultado.PageSize,
                total_pages = resultado.TotalPages
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtores paginados");
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Cria um novo produtor
    /// </summary>
    /// <param name="dto">Dados do produtor</param>
    /// <returns>Produtor criado</returns>
    [HttpPost]
    public async Task<ActionResult<ProdutorDto>> Criar([FromBody] CriarProdutorDto dto)
    {
        try
        {
            var resultado = await _produtorService.CriarAsync(dto);
            
            if (!resultado.IsSuccess)
                return BadRequest(new { error_code = "ERRO_VALIDACAO", error_description = resultado.Error });

            return CreatedAtAction(nameof(ObterPorId), new { id = resultado.Value!.Id }, resultado.Value);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar produtor");
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Atualiza um produtor existente
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <param name="dto">Dados atualizados</param>
    /// <returns>Produtor atualizado</returns>
    [HttpPut("{id:int}")]
    public async Task<ActionResult<ProdutorDto>> Atualizar(int id, [FromBody] AtualizarProdutorDto dto)
    {
        try
        {
            var resultado = await _produtorService.AtualizarAsync(id, dto);
            
            if (!resultado.IsSuccess)
            {
                if (resultado.Error!.Contains("não encontrado"))
                    return NotFound(new { error_code = "PRODUTOR_NAO_ENCONTRADO", error_description = resultado.Error });
                
                return BadRequest(new { error_code = "ERRO_VALIDACAO", error_description = resultado.Error });
            }

            return Ok(resultado.Value);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar produtor: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Remove um produtor
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <returns>Resultado da operação</returns>
    [HttpDelete("{id:int}")]
    [Authorize(Roles = "RoleAdmin")]
    public async Task<ActionResult> Remover(int id)
    {
        try
        {
            var resultado = await _produtorService.RemoverAsync(id);
            
            if (!resultado.IsSuccess)
            {
                if (resultado.Error!.Contains("não encontrado"))
                    return NotFound(new { error_code = "PRODUTOR_NAO_ENCONTRADO", error_description = resultado.Error });
                
                return BadRequest(new { error_code = "ERRO_VALIDACAO", error_description = resultado.Error });
            }

            return NoContent();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover produtor: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Valida um produtor automaticamente via SERPRO
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <returns>Resultado da validação</returns>
    [HttpPost("{id:int}/validar-automaticamente")]
    [Authorize(Roles = "RoleAdmin,RoleFornecedorWebAdmin")]
    public async Task<ActionResult<ProdutorDto>> ValidarAutomaticamente(int id)
    {
        try
        {
            var resultado = await _produtorService.ValidarAutomaticamenteAsync(id);
            
            if (!resultado.IsSuccess)
            {
                if (resultado.Error!.Contains("não encontrado"))
                    return NotFound(new { error_code = "PRODUTOR_NAO_ENCONTRADO", error_description = resultado.Error });
                
                return BadRequest(new { error_code = "ERRO_VALIDACAO", error_description = resultado.Error });
            }

            return Ok(resultado.Value);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao validar produtor automaticamente: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Autoriza um produtor manualmente
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <returns>Resultado da operação</returns>
    [HttpPost("{id:int}/autorizar")]
    [Authorize(Roles = "RoleAdmin")]
    public async Task<ActionResult<ProdutorDto>> AutorizarManualmente(int id)
    {
        try
        {
            // Obtém o ID do usuário atual do token JWT
            var usuarioIdClaim = User.FindFirst("user_id")?.Value;
            if (!int.TryParse(usuarioIdClaim, out var usuarioId))
                return Unauthorized(new { error_code = "TOKEN_INVALIDO", error_description = "Token inválido" });

            var resultado = await _produtorService.AutorizarManualmenteAsync(id, usuarioId);
            
            if (!resultado.IsSuccess)
            {
                if (resultado.Error!.Contains("não encontrado"))
                    return NotFound(new { error_code = "PRODUTOR_NAO_ENCONTRADO", error_description = resultado.Error });
                
                return BadRequest(new { error_code = "ERRO_VALIDACAO", error_description = resultado.Error });
            }

            return Ok(resultado.Value);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao autorizar produtor manualmente: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Nega um produtor
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <returns>Resultado da operação</returns>
    [HttpPost("{id:int}/negar")]
    [Authorize(Roles = "RoleAdmin")]
    public async Task<ActionResult<ProdutorDto>> Negar(int id)
    {
        try
        {
            // Obtém o ID do usuário atual do token JWT
            var usuarioIdClaim = User.FindFirst("user_id")?.Value;
            if (!int.TryParse(usuarioIdClaim, out var usuarioId))
                return Unauthorized(new { error_code = "TOKEN_INVALIDO", error_description = "Token inválido" });

            var resultado = await _produtorService.NegarAsync(id, usuarioId);
            
            if (!resultado.IsSuccess)
            {
                if (resultado.Error!.Contains("não encontrado"))
                    return NotFound(new { error_code = "PRODUTOR_NAO_ENCONTRADO", error_description = resultado.Error });
                
                return BadRequest(new { error_code = "ERRO_VALIDACAO", error_description = resultado.Error });
            }

            return Ok(resultado.Value);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao negar produtor: {Id}", id);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém estatísticas dos produtores
    /// </summary>
    /// <returns>Estatísticas</returns>
    [HttpGet("estatisticas")]
    [Authorize(Roles = "RoleAdmin,RoleFornecedorWebAdmin")]
    public async Task<ActionResult<ProdutorEstatisticasDto>> ObterEstatisticas()
    {
        try
        {
            var estatisticas = await _produtorService.ObterEstatisticasAsync();
            return Ok(estatisticas);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter estatísticas de produtores");
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }

    /// <summary>
    /// Obtém produtores por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de produtores</returns>
    [HttpGet("fornecedor/{fornecedorId:int}")]
    public async Task<ActionResult<IEnumerable<ProdutorDto>>> ObterPorFornecedor(int fornecedorId)
    {
        try
        {
            var produtores = await _produtorService.ObterPorFornecedorAsync(fornecedorId);
            return Ok(produtores);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtores por fornecedor: {FornecedorId}", fornecedorId);
            return StatusCode(500, new { error_code = "ERRO_INTERNO", error_description = "Erro interno do servidor" });
        }
    }
}
</ProdutoresController.cs>
<ProdutosController.cs>
using Agriis.Produtos.Aplicacao.DTOs;
using Agriis.Produtos.Aplicacao.Interfaces;
using Agriis.Produtos.Dominio.Enums;
using Microsoft.AspNetCore.Mvc;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de produtos
/// </summary>
[ApiController]
[Route("api/[controller]")]
public class ProdutosController : ControllerBase
{
    private readonly IProdutoService _produtoService;
    private readonly ILogger<ProdutosController> _logger;

    public ProdutosController(IProdutoService produtoService, ILogger<ProdutosController> logger)
    {
        _produtoService = produtoService;
        _logger = logger;
    }

    /// <summary>
    /// Obtém todos os produtos
    /// </summary>
    [HttpGet]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> ObterTodos(CancellationToken cancellationToken = default)
    {
        try
        {
            var produtos = await _produtoService.ObterTodosAsync(cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtos");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém produtos ativos
    /// </summary>
    [HttpGet("ativos")]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> ObterAtivos(CancellationToken cancellationToken = default)
    {
        try
        {
            var produtos = await _produtoService.ObterAtivosAsync(cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtos ativos");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém um produto por ID
    /// </summary>
    [HttpGet("{id:int}")]
    public async Task<ActionResult<ProdutoDto>> ObterPorId(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            var produto = await _produtoService.ObterPorIdAsync(id, cancellationToken);
            
            if (produto == null)
                return NotFound($"Produto com ID {id} não encontrado");

            return Ok(produto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produto {ProdutoId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém um produto por código
    /// </summary>
    [HttpGet("codigo/{codigo}")]
    public async Task<ActionResult<ProdutoDto>> ObterPorCodigo(string codigo, CancellationToken cancellationToken = default)
    {
        try
        {
            var produto = await _produtoService.ObterPorCodigoAsync(codigo, cancellationToken);
            
            if (produto == null)
                return NotFound($"Produto com código {codigo} não encontrado");

            return Ok(produto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produto por código {Codigo}", codigo);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém produtos por fornecedor
    /// </summary>
    [HttpGet("fornecedor/{fornecedorId:int}")]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> ObterPorFornecedor(int fornecedorId, CancellationToken cancellationToken = default)
    {
        try
        {
            var produtos = await _produtoService.ObterPorFornecedorAsync(fornecedorId, cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtos do fornecedor {FornecedorId}", fornecedorId);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém produtos por categoria
    /// </summary>
    [HttpGet("categoria/{categoriaId:int}")]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> ObterPorCategoria(int categoriaId, CancellationToken cancellationToken = default)
    {
        try
        {
            var produtos = await _produtoService.ObterPorCategoriaAsync(categoriaId, cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtos da categoria {CategoriaId}", categoriaId);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém produtos por cultura
    /// </summary>
    [HttpGet("cultura/{culturaId:int}")]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> ObterPorCultura(int culturaId, CancellationToken cancellationToken = default)
    {
        try
        {
            var produtos = await _produtoService.ObterPorCulturaAsync(culturaId, cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtos da cultura {CulturaId}", culturaId);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém produtos por tipo
    /// </summary>
    [HttpGet("tipo/{tipo}")]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> ObterPorTipo(TipoProduto tipo, CancellationToken cancellationToken = default)
    {
        try
        {
            var produtos = await _produtoService.ObterPorTipoAsync(tipo, cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtos do tipo {Tipo}", tipo);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém produtos fabricantes
    /// </summary>
    [HttpGet("fabricantes")]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> ObterFabricantes(CancellationToken cancellationToken = default)
    {
        try
        {
            var produtos = await _produtoService.ObterFabricantesAsync(cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtos fabricantes");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém produtos filhos de um produto pai
    /// </summary>
    [HttpGet("{produtoPaiId:int}/filhos")]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> ObterProdutosFilhos(int produtoPaiId, CancellationToken cancellationToken = default)
    {
        try
        {
            var produtos = await _produtoService.ObterProdutosFilhosAsync(produtoPaiId, cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtos filhos do produto {ProdutoPaiId}", produtoPaiId);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Obtém produtos restritos
    /// </summary>
    [HttpGet("restritos")]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> ObterRestritos(CancellationToken cancellationToken = default)
    {
        try
        {
            var produtos = await _produtoService.ObterRestritosAsync(cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter produtos restritos");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Busca produtos por nome ou código
    /// </summary>
    [HttpGet("buscar")]
    public async Task<ActionResult<IEnumerable<ProdutoDto>>> Buscar([FromQuery] string termo, CancellationToken cancellationToken = default)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(termo))
                return BadRequest("Termo de busca é obrigatório");

            var produtos = await _produtoService.BuscarAsync(termo, cancellationToken);
            return Ok(produtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao buscar produtos com termo {Termo}", termo);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Cria um novo produto
    /// </summary>
    [HttpPost]
    public async Task<ActionResult<ProdutoDto>> Criar([FromBody] CriarProdutoDto dto, CancellationToken cancellationToken = default)
    {
        try
        {
            var produto = await _produtoService.CriarAsync(dto, cancellationToken);
            return CreatedAtAction(nameof(ObterPorId), new { id = produto.Id }, produto);
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Erro de validação ao criar produto");
            return BadRequest(ex.Message);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro de operação ao criar produto");
            return BadRequest(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar produto");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Atualiza um produto existente
    /// </summary>
    [HttpPut("{id:int}")]
    public async Task<ActionResult<ProdutoDto>> Atualizar(int id, [FromBody] AtualizarProdutoDto dto, CancellationToken cancellationToken = default)
    {
        try
        {
            var produto = await _produtoService.AtualizarAsync(id, dto, cancellationToken);
            return Ok(produto);
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Erro de validação ao atualizar produto {ProdutoId}", id);
            return BadRequest(ex.Message);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro de operação ao atualizar produto {ProdutoId}", id);
            return BadRequest(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar produto {ProdutoId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Ativa um produto
    /// </summary>
    [HttpPatch("{id:int}/ativar")]
    public async Task<ActionResult> Ativar(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            await _produtoService.AtivarAsync(id, cancellationToken);
            return NoContent();
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Produto {ProdutoId} não encontrado para ativação", id);
            return NotFound(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao ativar produto {ProdutoId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Inativa um produto
    /// </summary>
    [HttpPatch("{id:int}/inativar")]
    public async Task<ActionResult> Inativar(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            await _produtoService.InativarAsync(id, cancellationToken);
            return NoContent();
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Produto {ProdutoId} não encontrado para inativação", id);
            return NotFound(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao inativar produto {ProdutoId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Descontinua um produto
    /// </summary>
    [HttpPatch("{id:int}/descontinuar")]
    public async Task<ActionResult> Descontinuar(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            await _produtoService.DescontinuarAsync(id, cancellationToken);
            return NoContent();
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Produto {ProdutoId} não encontrado para descontinuação", id);
            return NotFound(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao descontinuar produto {ProdutoId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Remove um produto
    /// </summary>
    [HttpDelete("{id:int}")]
    public async Task<ActionResult> Remover(int id, CancellationToken cancellationToken = default)
    {
        try
        {
            await _produtoService.RemoverAsync(id, cancellationToken);
            return NoContent();
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Produto {ProdutoId} não encontrado para remoção", id);
            return NotFound(ex.Message);
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Erro de operação ao remover produto {ProdutoId}", id);
            return BadRequest(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover produto {ProdutoId}", id);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Adiciona uma cultura ao produto
    /// </summary>
    [HttpPost("{produtoId:int}/culturas/{culturaId:int}")]
    public async Task<ActionResult> AdicionarCultura(int produtoId, int culturaId, CancellationToken cancellationToken = default)
    {
        try
        {
            await _produtoService.AdicionarCulturaAsync(produtoId, culturaId, cancellationToken);
            return NoContent();
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Erro ao adicionar cultura {CulturaId} ao produto {ProdutoId}", culturaId, produtoId);
            return NotFound(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao adicionar cultura {CulturaId} ao produto {ProdutoId}", culturaId, produtoId);
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    /// <summary>
    /// Remove uma cultura do produto
    /// </summary>
    [HttpDelete("{produtoId:int}/culturas/{culturaId:int}")]
    public async Task<ActionResult> RemoverCultura(int produtoId, int culturaId, CancellationToken cancellationToken = default)
    {
        try
        {
            await _produtoService.RemoverCulturaAsync(produtoId, culturaId, cancellationToken);
            return NoContent();
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Erro ao remover cultura {CulturaId} do produto {ProdutoId}", culturaId, produtoId);
            return NotFound(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover cultura {CulturaId} do produto {ProdutoId}", culturaId, produtoId);
            return StatusCode(500, "Erro interno do servidor");
        }
    }
}
</ProdutosController.cs>
<PropostasController.cs>
using Agriis.Pedidos.Aplicacao.DTOs;
using Agriis.Pedidos.Aplicacao.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de propostas
/// </summary>
[ApiController]
[Route("api/pedidos/{pedidoId}/propostas")]
[Authorize]
public class PropostasController : ControllerBase
{
    private readonly IPropostaService _propostaService;
    private readonly ILogger<PropostasController> _logger;
    
    /// <summary>
    /// Construtor do controller de propostas
    /// </summary>
    public PropostasController(IPropostaService propostaService, ILogger<PropostasController> logger)
    {
        _propostaService = propostaService;
        _logger = logger;
    }
    
    /// <summary>
    /// Cria uma nova proposta para um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="dto">Dados da proposta</param>
    /// <returns>Resultado da operação</returns>
    [HttpPost]
    public async Task<IActionResult> CriarProposta(int pedidoId, [FromBody] CriarPropostaDto dto)
    {
        try
        {
            var usuarioId = ObterUsuarioId();
            var clientId = ObterClientId();
            
            if (usuarioId == 0)
            {
                return Unauthorized(new { error_code = "UNAUTHORIZED", error_description = "Usuário não autenticado" });
            }
            
            if (string.IsNullOrEmpty(clientId))
            {
                return BadRequest(new { error_code = "INVALID_CLIENT", error_description = "Tipo de cliente não identificado" });
            }
            
            var resultado = await _propostaService.CriarPropostaAsync(pedidoId, usuarioId, clientId, dto);
            
            if (!resultado.IsSuccess)
            {
                return BadRequest(new { error_code = "BUSINESS_ERROR", error_description = resultado.Error });
            }
            
            return Ok(new { message = "Proposta criada com sucesso" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar proposta para pedido {PedidoId}", pedidoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }
    
    /// <summary>
    /// Lista todas as propostas de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="dto">Parâmetros de listagem</param>
    /// <returns>Lista paginada de propostas</returns>
    [HttpPost("all")]
    public async Task<IActionResult> ListarPropostas(int pedidoId, [FromBody] ListarPropostasDto dto)
    {
        try
        {
            var resultado = await _propostaService.ListarPropostasAsync(pedidoId, dto);
            
            if (!resultado.IsSuccess)
            {
                return BadRequest(new { error_code = "BUSINESS_ERROR", error_description = resultado.Error });
            }
            
            return Ok(resultado.Value);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao listar propostas do pedido {PedidoId}", pedidoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }
    
    /// <summary>
    /// Obtém a última proposta de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Última proposta</returns>
    [HttpGet("ultima")]
    public async Task<IActionResult> ObterUltimaProposta(int pedidoId)
    {
        try
        {
            var resultado = await _propostaService.ObterUltimaPropostaAsync(pedidoId);
            
            if (!resultado.IsSuccess)
            {
                return BadRequest(new { error_code = "BUSINESS_ERROR", error_description = resultado.Error });
            }
            
            return Ok(resultado.Value);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter última proposta do pedido {PedidoId}", pedidoId);
            return StatusCode(500, new { error_code = "INTERNAL_ERROR", error_description = "Erro interno do servidor" });
        }
    }
    
    /// <summary>
    /// Obtém o ID do usuário do token JWT
    /// </summary>
    /// <returns>ID do usuário</returns>
    private int ObterUsuarioId()
    {
        var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return int.TryParse(userIdClaim, out var userId) ? userId : 0;
    }
    
    /// <summary>
    /// Obtém o ID do cliente do token JWT
    /// </summary>
    /// <returns>ID do cliente</returns>
    private string? ObterClientId()
    {
        return User.FindFirst("client_id")?.Value;
    }
}
</PropostasController.cs>
<PropriedadesController.cs>
using Agriis.Propriedades.Aplicacao.DTOs;
using Agriis.Propriedades.Aplicacao.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Agriis.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
[Authorize]
public class PropriedadesController : ControllerBase
{
    private readonly IPropriedadeService _propriedadeService;
    private readonly ITalhaoService _talhaoService;
    private readonly IPropriedadeCulturaService _propriedadeCulturaService;

    public PropriedadesController(
        IPropriedadeService propriedadeService,
        ITalhaoService talhaoService,
        IPropriedadeCulturaService propriedadeCulturaService)
    {
        _propriedadeService = propriedadeService;
        _talhaoService = talhaoService;
        _propriedadeCulturaService = propriedadeCulturaService;
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> ObterPorId(int id)
    {
        var resultado = await _propriedadeService.ObterPorIdAsync(id);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("completa/{id}")]
    public async Task<IActionResult> ObterCompleta(int id)
    {
        var resultado = await _propriedadeService.ObterCompletaAsync(id);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("produtor/{produtorId}")]
    public async Task<IActionResult> ObterPorProdutor(int produtorId)
    {
        var resultado = await _propriedadeService.ObterPorProdutorAsync(produtorId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("cultura/{culturaId}")]
    public async Task<IActionResult> ObterPorCultura(int culturaId)
    {
        var resultado = await _propriedadeService.ObterPorCulturaAsync(culturaId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("proximas")]
    public async Task<IActionResult> BuscarPropriedadesProximas(
        [FromQuery] double latitude,
        [FromQuery] double longitude,
        [FromQuery] double raioKm = 50)
    {
        var resultado = await _propriedadeService.BuscarPropriedadesProximasAsync(latitude, longitude, raioKm);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("area-total/produtor/{produtorId}")]
    public async Task<IActionResult> CalcularAreaTotalPorProdutor(int produtorId)
    {
        var resultado = await _propriedadeService.CalcularAreaTotalPorProdutorAsync(produtorId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(new { area_total = resultado.Value });
    }

    [HttpGet("estatisticas-culturas/produtor/{produtorId}")]
    public async Task<IActionResult> ObterEstatisticasCulturasPorProdutor(int produtorId)
    {
        var resultado = await _propriedadeService.ObterEstatisticasCulturasPorProdutorAsync(produtorId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpPost]
    public async Task<IActionResult> Criar([FromBody] PropriedadeCreateDto dto)
    {
        var resultado = await _propriedadeService.CriarAsync(dto);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return CreatedAtAction(nameof(ObterPorId), new { id = resultado.Value.Id }, resultado.Value);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Atualizar(int id, [FromBody] PropriedadeUpdateDto dto)
    {
        var resultado = await _propriedadeService.AtualizarAsync(id, dto);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Remover(int id)
    {
        var resultado = await _propriedadeService.RemoverAsync(id);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return NoContent();
    }

    // Endpoints para Talhões
    [HttpGet("{propriedadeId}/talhoes")]
    public async Task<IActionResult> ObterTalhoesPorPropriedade(int propriedadeId)
    {
        var resultado = await _talhaoService.ObterPorPropriedadeAsync(propriedadeId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("talhoes/{id}")]
    public async Task<IActionResult> ObterTalhaoPorId(int id)
    {
        var resultado = await _talhaoService.ObterPorIdAsync(id);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("talhoes/proximos")]
    public async Task<IActionResult> BuscarTalhoesProximos(
        [FromQuery] double latitude,
        [FromQuery] double longitude,
        [FromQuery] double raioKm = 50)
    {
        var resultado = await _talhaoService.BuscarTalhoesProximosAsync(latitude, longitude, raioKm);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpPost("talhoes")]
    public async Task<IActionResult> CriarTalhao([FromBody] TalhaoCreateDto dto)
    {
        var resultado = await _talhaoService.CriarAsync(dto);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return CreatedAtAction(nameof(ObterTalhaoPorId), new { id = resultado.Value.Id }, resultado.Value);
    }

    [HttpPut("talhoes/{id}")]
    public async Task<IActionResult> AtualizarTalhao(int id, [FromBody] TalhaoUpdateDto dto)
    {
        var resultado = await _talhaoService.AtualizarAsync(id, dto);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpDelete("talhoes/{id}")]
    public async Task<IActionResult> RemoverTalhao(int id)
    {
        var resultado = await _talhaoService.RemoverAsync(id);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return NoContent();
    }

    // Endpoints para Culturas da Propriedade
    [HttpGet("{propriedadeId}/culturas")]
    public async Task<IActionResult> ObterCulturasPorPropriedade(int propriedadeId)
    {
        var resultado = await _propriedadeCulturaService.ObterPorPropriedadeAsync(propriedadeId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("culturas/{id}")]
    public async Task<IActionResult> ObterPropriedadeCulturaPorId(int id)
    {
        var resultado = await _propriedadeCulturaService.ObterPorIdAsync(id);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("culturas/cultura/{culturaId}")]
    public async Task<IActionResult> ObterPropriedadesPorCultura(int culturaId)
    {
        var resultado = await _propriedadeCulturaService.ObterPorCulturaAsync(culturaId);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpGet("culturas/periodo-plantio")]
    public async Task<IActionResult> ObterCulturasEmPeriodoPlantio()
    {
        var resultado = await _propriedadeCulturaService.ObterEmPeriodoPlantioAsync();
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpPost("culturas")]
    public async Task<IActionResult> CriarPropriedadeCultura([FromBody] PropriedadeCulturaCreateDto dto)
    {
        var resultado = await _propriedadeCulturaService.CriarAsync(dto);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return CreatedAtAction(nameof(ObterPropriedadeCulturaPorId), new { id = resultado.Value.Id }, resultado.Value);
    }

    [HttpPut("culturas/{id}")]
    public async Task<IActionResult> AtualizarPropriedadeCultura(int id, [FromBody] PropriedadeCulturaUpdateDto dto)
    {
        var resultado = await _propriedadeCulturaService.AtualizarAsync(id, dto);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return Ok(resultado.Value);
    }

    [HttpDelete("culturas/{id}")]
    public async Task<IActionResult> RemoverPropriedadeCultura(int id)
    {
        var resultado = await _propriedadeCulturaService.RemoverAsync(id);
        
        if (!resultado.IsSuccess)
            return BadRequest(new { error_description = resultado.Error });

        return NoContent();
    }
}
</PropriedadesController.cs>
<SafrasController.cs>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Agriis.Safras.Aplicacao.DTOs;
using Agriis.Safras.Aplicacao.Interfaces;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de Safras
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class SafrasController : ControllerBase
{
    private readonly ISafraService _safraService;
    private readonly ILogger<SafrasController> _logger;

    public SafrasController(ISafraService safraService, ILogger<SafrasController> logger)
    {
        _safraService = safraService;
        _logger = logger;
    }

    /// <summary>
    /// Obtém todas as safras ordenadas por data de plantio
    /// </summary>
    [HttpGet]
    public async Task<IActionResult> ObterTodas()
    {
        var resultado = await _safraService.ObterTodasAsync();
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém a safra atual (ativa)
    /// </summary>
    [HttpGet("atual")]
    [AllowAnonymous] // Permitir acesso sem autenticação como no sistema Python
    public async Task<IActionResult> ObterSafraAtual()
    {
        var resultado = await _safraService.ObterSafraAtualAsync();
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        if (resultado.Value == null)
        {
            return NotFound(new { error_description = "Nenhuma safra ativa encontrada" });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém uma safra por ID
    /// </summary>
    [HttpGet("{id:int}")]
    public async Task<IActionResult> ObterPorId(int id)
    {
        var resultado = await _safraService.ObterPorIdAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return NotFound(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém safras por ano de colheita
    /// </summary>
    [HttpGet("ano-colheita/{anoColheita:int}")]
    public async Task<IActionResult> ObterPorAnoColheita(int anoColheita)
    {
        var resultado = await _safraService.ObterPorAnoColheitaAsync(anoColheita);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Cria uma nova safra
    /// </summary>
    [HttpPost]
    public async Task<IActionResult> Criar([FromBody] CriarSafraDto dto)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var resultado = await _safraService.CriarAsync(dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return CreatedAtAction(
            nameof(ObterPorId), 
            new { id = resultado.Value!.Id }, 
            resultado.Value);
    }

    /// <summary>
    /// Atualiza uma safra existente
    /// </summary>
    [HttpPut("{id:int}")]
    public async Task<IActionResult> Atualizar(int id, [FromBody] AtualizarSafraDto dto)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var resultado = await _safraService.AtualizarAsync(id, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Remove uma safra
    /// </summary>
    [HttpDelete("{id:int}")]
    public async Task<IActionResult> Remover(int id)
    {
        var resultado = await _safraService.RemoverAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { error_description = resultado.Error });
        }

        return NoContent();
    }
}
</SafrasController.cs>
<TransportesController.cs>
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Agriis.Pedidos.Aplicacao.Interfaces;
using Agriis.Pedidos.Aplicacao.DTOs;
using FluentValidation;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para operações de transporte
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class TransportesController : ControllerBase
{
    private readonly ITransporteService _transporteService;
    private readonly IValidator<CalcularFreteDto> _calcularFreteValidator;
    private readonly IValidator<CalcularFreteConsolidadoDto> _calcularFreteConsolidadoValidator;
    private readonly IValidator<AgendarTransporteDto> _agendarTransporteValidator;
    private readonly IValidator<ReagendarTransporteDto> _reagendarTransporteValidator;
    private readonly IValidator<AtualizarValorFreteDto> _atualizarValorFreteValidator;
    private readonly IValidator<ValidarAgendamentosDto> _validarAgendamentosValidator;
    private readonly ILogger<TransportesController> _logger;

    public TransportesController(
        ITransporteService transporteService,
        IValidator<CalcularFreteDto> calcularFreteValidator,
        IValidator<CalcularFreteConsolidadoDto> calcularFreteConsolidadoValidator,
        IValidator<AgendarTransporteDto> agendarTransporteValidator,
        IValidator<ReagendarTransporteDto> reagendarTransporteValidator,
        IValidator<AtualizarValorFreteDto> atualizarValorFreteValidator,
        IValidator<ValidarAgendamentosDto> validarAgendamentosValidator,
        ILogger<TransportesController> logger)
    {
        _transporteService = transporteService ?? throw new ArgumentNullException(nameof(transporteService));
        _calcularFreteValidator = calcularFreteValidator ?? throw new ArgumentNullException(nameof(calcularFreteValidator));
        _calcularFreteConsolidadoValidator = calcularFreteConsolidadoValidator ?? throw new ArgumentNullException(nameof(calcularFreteConsolidadoValidator));
        _agendarTransporteValidator = agendarTransporteValidator ?? throw new ArgumentNullException(nameof(agendarTransporteValidator));
        _reagendarTransporteValidator = reagendarTransporteValidator ?? throw new ArgumentNullException(nameof(reagendarTransporteValidator));
        _atualizarValorFreteValidator = atualizarValorFreteValidator ?? throw new ArgumentNullException(nameof(atualizarValorFreteValidator));
        _validarAgendamentosValidator = validarAgendamentosValidator ?? throw new ArgumentNullException(nameof(validarAgendamentosValidator));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Calcula o frete para um produto
    /// </summary>
    /// <param name="dto">Dados para cálculo do frete</param>
    /// <returns>Resultado do cálculo de frete</returns>
    [HttpPost("calcular-frete")]
    public async Task<IActionResult> CalcularFrete([FromBody] CalcularFreteDto dto)
    {
        var validationResult = await _calcularFreteValidator.ValidateAsync(dto);
        if (!validationResult.IsValid)
        {
            return BadRequest(new { 
                error_code = "VALIDATION_ERROR", 
                error_description = "Dados inválidos",
                errors = validationResult.Errors.Select(e => e.ErrorMessage)
            });
        }

        var resultado = await _transporteService.CalcularFreteAsync(dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { 
                error_code = "CALCULATION_ERROR", 
                error_description = resultado.Error 
            });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Calcula o frete consolidado para múltiplos produtos
    /// </summary>
    /// <param name="dto">Dados para cálculo consolidado</param>
    /// <returns>Resultado do cálculo consolidado</returns>
    [HttpPost("calcular-frete-consolidado")]
    public async Task<IActionResult> CalcularFreteConsolidado([FromBody] CalcularFreteConsolidadoDto dto)
    {
        var validationResult = await _calcularFreteConsolidadoValidator.ValidateAsync(dto);
        if (!validationResult.IsValid)
        {
            return BadRequest(new { 
                error_code = "VALIDATION_ERROR", 
                error_description = "Dados inválidos",
                errors = validationResult.Errors.Select(e => e.ErrorMessage)
            });
        }

        var resultado = await _transporteService.CalcularFreteConsolidadoAsync(dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { 
                error_code = "CALCULATION_ERROR", 
                error_description = resultado.Error 
            });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Agenda um transporte para um item de pedido
    /// </summary>
    /// <param name="dto">Dados do agendamento</param>
    /// <returns>Transporte agendado</returns>
    [HttpPost("agendar")]
    public async Task<IActionResult> AgendarTransporte([FromBody] AgendarTransporteDto dto)
    {
        var validationResult = await _agendarTransporteValidator.ValidateAsync(dto);
        if (!validationResult.IsValid)
        {
            return BadRequest(new { 
                error_code = "VALIDATION_ERROR", 
                error_description = "Dados inválidos",
                errors = validationResult.Errors.Select(e => e.ErrorMessage)
            });
        }

        var resultado = await _transporteService.AgendarTransporteAsync(dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { 
                error_code = "SCHEDULING_ERROR", 
                error_description = resultado.Error 
            });
        }

        return CreatedAtAction(nameof(ObterTransporte), new { id = resultado.Value.Id }, resultado.Value);
    }

    /// <summary>
    /// Reagenda um transporte existente
    /// </summary>
    /// <param name="id">ID do transporte</param>
    /// <param name="dto">Dados do reagendamento</param>
    /// <returns>Transporte reagendado</returns>
    [HttpPut("{id}/reagendar")]
    public async Task<IActionResult> ReagendarTransporte(int id, [FromBody] ReagendarTransporteDto dto)
    {
        var validationResult = await _reagendarTransporteValidator.ValidateAsync(dto);
        if (!validationResult.IsValid)
        {
            return BadRequest(new { 
                error_code = "VALIDATION_ERROR", 
                error_description = "Dados inválidos",
                errors = validationResult.Errors.Select(e => e.ErrorMessage)
            });
        }

        var resultado = await _transporteService.ReagendarTransporteAsync(id, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { 
                error_code = "RESCHEDULING_ERROR", 
                error_description = resultado.Error 
            });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Atualiza o valor do frete de um transporte
    /// </summary>
    /// <param name="id">ID do transporte</param>
    /// <param name="dto">Dados da atualização</param>
    /// <returns>Transporte atualizado</returns>
    [HttpPut("{id}/valor-frete")]
    public async Task<IActionResult> AtualizarValorFrete(int id, [FromBody] AtualizarValorFreteDto dto)
    {
        var validationResult = await _atualizarValorFreteValidator.ValidateAsync(dto);
        if (!validationResult.IsValid)
        {
            return BadRequest(new { 
                error_code = "VALIDATION_ERROR", 
                error_description = "Dados inválidos",
                errors = validationResult.Errors.Select(e => e.ErrorMessage)
            });
        }

        var resultado = await _transporteService.AtualizarValorFreteAsync(id, dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { 
                error_code = "UPDATE_ERROR", 
                error_description = resultado.Error 
            });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém um transporte por ID
    /// </summary>
    /// <param name="id">ID do transporte</param>
    /// <returns>Dados do transporte</returns>
    [HttpGet("{id}")]
    public async Task<IActionResult> ObterTransporte(int id)
    {
        var resultado = await _transporteService.ObterTransportePorIdAsync(id);
        
        if (!resultado.IsSuccess)
        {
            return NotFound(new { 
                error_code = "TRANSPORT_NOT_FOUND", 
                error_description = resultado.Error 
            });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Lista os transportes de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Lista de transportes</returns>
    [HttpGet("pedido/{pedidoId}")]
    public async Task<IActionResult> ListarTransportesPedido(int pedidoId)
    {
        var resultado = await _transporteService.ListarTransportesPedidoAsync(pedidoId);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { 
                error_code = "LIST_ERROR", 
                error_description = resultado.Error 
            });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Valida múltiplos agendamentos
    /// </summary>
    /// <param name="dto">Dados dos agendamentos</param>
    /// <returns>Resultado da validação</returns>
    [HttpPost("validar-agendamentos")]
    public async Task<IActionResult> ValidarMultiplosAgendamentos([FromBody] ValidarAgendamentosDto dto)
    {
        var validationResult = await _validarAgendamentosValidator.ValidateAsync(dto);
        if (!validationResult.IsValid)
        {
            return BadRequest(new { 
                error_code = "VALIDATION_ERROR", 
                error_description = "Dados inválidos",
                errors = validationResult.Errors.Select(e => e.ErrorMessage)
            });
        }

        var resultado = await _transporteService.ValidarMultiplosAgendamentosAsync(dto);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { 
                error_code = "VALIDATION_ERROR", 
                error_description = resultado.Error 
            });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Obtém o resumo de transporte de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Resumo do transporte</returns>
    [HttpGet("pedido/{pedidoId}/resumo")]
    public async Task<IActionResult> ObterResumoTransporte(int pedidoId)
    {
        var resultado = await _transporteService.ObterResumoTransporteAsync(pedidoId);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { 
                error_code = "SUMMARY_ERROR", 
                error_description = resultado.Error 
            });
        }

        return Ok(resultado.Value);
    }

    /// <summary>
    /// Cancela um transporte agendado
    /// </summary>
    /// <param name="id">ID do transporte</param>
    /// <param name="motivo">Motivo do cancelamento</param>
    /// <returns>Resultado da operação</returns>
    [HttpDelete("{id}")]
    public async Task<IActionResult> CancelarTransporte(int id, [FromQuery] string? motivo = null)
    {
        var resultado = await _transporteService.CancelarTransporteAsync(id, motivo);
        
        if (!resultado.IsSuccess)
        {
            return BadRequest(new { 
                error_code = "CANCELLATION_ERROR", 
                error_description = resultado.Error 
            });
        }

        return NoContent();
    }
}
</TransportesController.cs>
<UsuariosController.cs>
using Microsoft.AspNetCore.Mvc;
using Agriis.Usuarios.Aplicacao.Interfaces;
using Agriis.Usuarios.Aplicacao.DTOs;
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Api.Controllers;

/// <summary>
/// Controller para gerenciamento de usuários
/// </summary>
[ApiController]
[Route("api/[controller]")]
public class UsuariosController : ControllerBase
{
    private readonly IUsuarioService _usuarioService;
    
    public UsuariosController(IUsuarioService usuarioService)
    {
        _usuarioService = usuarioService;
    }
    
    /// <summary>
    /// Obtém um usuário por ID
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Dados do usuário</returns>
    [HttpGet("{id:int}")]
    public async Task<ActionResult<UsuarioDto>> ObterPorId(int id, CancellationToken cancellationToken)
    {
        var usuario = await _usuarioService.ObterPorIdAsync(id, cancellationToken);
        
        if (usuario == null)
        {
            return NotFound(new { error_code = "USUARIO_NAO_ENCONTRADO", error_description = "Usuário não encontrado" });
        }
        
        return Ok(usuario);
    }
    
    /// <summary>
    /// Obtém um usuário por email
    /// </summary>
    /// <param name="email">Email do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Dados do usuário</returns>
    [HttpGet("email/{email}")]
    public async Task<ActionResult<UsuarioDto>> ObterPorEmail(string email, CancellationToken cancellationToken)
    {
        var usuario = await _usuarioService.ObterPorEmailAsync(email, cancellationToken);
        
        if (usuario == null)
        {
            return NotFound(new { error_code = "USUARIO_NAO_ENCONTRADO", error_description = "Usuário não encontrado" });
        }
        
        return Ok(usuario);
    }
    
    /// <summary>
    /// Obtém usuários com paginação
    /// </summary>
    /// <param name="pagina">Número da página (padrão: 1)</param>
    /// <param name="tamanhoPagina">Tamanho da página (padrão: 20)</param>
    /// <param name="filtro">Filtro de busca por nome ou email</param>
    /// <param name="apenasAtivos">Se deve filtrar apenas usuários ativos (padrão: true)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista paginada de usuários</returns>
    [HttpGet]
    public async Task<ActionResult<UsuariosPaginadosDto>> ObterPaginado(
        [FromQuery] int pagina = 1,
        [FromQuery] int tamanhoPagina = 20,
        [FromQuery] string? filtro = null,
        [FromQuery] bool apenasAtivos = true,
        CancellationToken cancellationToken = default)
    {
        if (pagina < 1) pagina = 1;
        if (tamanhoPagina < 1 || tamanhoPagina > 100) tamanhoPagina = 20;
        
        var resultado = await _usuarioService.ObterPaginadoAsync(pagina, tamanhoPagina, filtro, apenasAtivos, cancellationToken);
        return Ok(resultado);
    }
    
    /// <summary>
    /// Obtém usuários por role
    /// </summary>
    /// <param name="role">Role a ser filtrada</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de usuários</returns>
    [HttpGet("role/{role}")]
    public async Task<ActionResult<IEnumerable<UsuarioDto>>> ObterPorRole(Roles role, CancellationToken cancellationToken)
    {
        var usuarios = await _usuarioService.ObterPorRoleAsync(role, cancellationToken);
        return Ok(usuarios);
    }
    
    /// <summary>
    /// Cria um novo usuário
    /// </summary>
    /// <param name="criarUsuarioDto">Dados do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Dados do usuário criado</returns>
    [HttpPost]
    public async Task<ActionResult<UsuarioDto>> Criar([FromBody] CriarUsuarioDto criarUsuarioDto, CancellationToken cancellationToken)
    {
        try
        {
            var usuario = await _usuarioService.CriarAsync(criarUsuarioDto, cancellationToken);
            return CreatedAtAction(nameof(ObterPorId), new { id = usuario.Id }, usuario);
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new { error_code = "DADOS_INVALIDOS", error_description = ex.Message });
        }
    }
    
    /// <summary>
    /// Atualiza um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="atualizarUsuarioDto">Dados de atualização</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Dados do usuário atualizado</returns>
    [HttpPut("{id:int}")]
    public async Task<ActionResult<UsuarioDto>> Atualizar(int id, [FromBody] AtualizarUsuarioDto atualizarUsuarioDto, CancellationToken cancellationToken)
    {
        try
        {
            var usuario = await _usuarioService.AtualizarAsync(id, atualizarUsuarioDto, cancellationToken);
            return Ok(usuario);
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new { error_code = "DADOS_INVALIDOS", error_description = ex.Message });
        }
    }
    
    /// <summary>
    /// Altera o email de um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="alterarEmailDto">Dados do novo email</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Dados do usuário atualizado</returns>
    [HttpPut("{id:int}/email")]
    public async Task<ActionResult<UsuarioDto>> AlterarEmail(int id, [FromBody] AlterarEmailDto alterarEmailDto, CancellationToken cancellationToken)
    {
        try
        {
            var usuario = await _usuarioService.AlterarEmailAsync(id, alterarEmailDto, cancellationToken);
            return Ok(usuario);
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new { error_code = "DADOS_INVALIDOS", error_description = ex.Message });
        }
    }
    
    /// <summary>
    /// Altera a senha de um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="alterarSenhaDto">Dados da nova senha</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Confirmação da alteração</returns>
    [HttpPut("{id:int}/senha")]
    public async Task<ActionResult> AlterarSenha(int id, [FromBody] AlterarSenhaDto alterarSenhaDto, CancellationToken cancellationToken)
    {
        try
        {
            await _usuarioService.AlterarSenhaAsync(id, alterarSenhaDto, cancellationToken);
            return Ok(new { message = "Senha alterada com sucesso" });
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new { error_code = "DADOS_INVALIDOS", error_description = ex.Message });
        }
    }
    
    /// <summary>
    /// Gerencia as roles de um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="gerenciarRolesDto">Roles a serem atribuídas</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Dados do usuário atualizado</returns>
    [HttpPut("{id:int}/roles")]
    public async Task<ActionResult<UsuarioDto>> GerenciarRoles(int id, [FromBody] GerenciarRolesDto gerenciarRolesDto, CancellationToken cancellationToken)
    {
        try
        {
            var usuario = await _usuarioService.GerenciarRolesAsync(id, gerenciarRolesDto, cancellationToken);
            return Ok(usuario);
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new { error_code = "DADOS_INVALIDOS", error_description = ex.Message });
        }
    }
    
    /// <summary>
    /// Ativa um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Dados do usuário atualizado</returns>
    [HttpPut("{id:int}/ativar")]
    public async Task<ActionResult<UsuarioDto>> Ativar(int id, CancellationToken cancellationToken)
    {
        try
        {
            var usuario = await _usuarioService.AtivarAsync(id, cancellationToken);
            return Ok(usuario);
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new { error_code = "DADOS_INVALIDOS", error_description = ex.Message });
        }
    }
    
    /// <summary>
    /// Desativa um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Dados do usuário atualizado</returns>
    [HttpPut("{id:int}/desativar")]
    public async Task<ActionResult<UsuarioDto>> Desativar(int id, CancellationToken cancellationToken)
    {
        try
        {
            var usuario = await _usuarioService.DesativarAsync(id, cancellationToken);
            return Ok(usuario);
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new { error_code = "DADOS_INVALIDOS", error_description = ex.Message });
        }
    }
    
    /// <summary>
    /// Remove um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Confirmação da remoção</returns>
    [HttpDelete("{id:int}")]
    public async Task<ActionResult> Remover(int id, CancellationToken cancellationToken)
    {
        try
        {
            await _usuarioService.RemoverAsync(id, cancellationToken);
            return Ok(new { message = "Usuário removido com sucesso" });
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new { error_code = "DADOS_INVALIDOS", error_description = ex.Message });
        }
    }
    
    /// <summary>
    /// Registra o login de um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Confirmação do registro</returns>
    [HttpPost("{id:int}/login")]
    public async Task<ActionResult> RegistrarLogin(int id, CancellationToken cancellationToken)
    {
        try
        {
            await _usuarioService.RegistrarLoginAsync(id, cancellationToken);
            return Ok(new { message = "Login registrado com sucesso" });
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new { error_code = "DADOS_INVALIDOS", error_description = ex.Message });
        }
    }
    
    /// <summary>
    /// Verifica se um email já está em uso
    /// </summary>
    /// <param name="email">Email a ser verificado</param>
    /// <param name="usuarioIdExcluir">ID do usuário a ser excluído da verificação</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Resultado da verificação</returns>
    [HttpGet("verificar-email")]
    public async Task<ActionResult<bool>> VerificarEmail(
        [FromQuery] string email,
        [FromQuery] int? usuarioIdExcluir = null,
        CancellationToken cancellationToken = default)
    {
        var existe = await _usuarioService.EmailJaExisteAsync(email, usuarioIdExcluir, cancellationToken);
        return Ok(new { existe });
    }
    
    /// <summary>
    /// Verifica se um CPF já está em uso
    /// </summary>
    /// <param name="cpf">CPF a ser verificado</param>
    /// <param name="usuarioIdExcluir">ID do usuário a ser excluído da verificação</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Resultado da verificação</returns>
    [HttpGet("verificar-cpf")]
    public async Task<ActionResult<bool>> VerificarCpf(
        [FromQuery] string cpf,
        [FromQuery] int? usuarioIdExcluir = null,
        CancellationToken cancellationToken = default)
    {
        var existe = await _usuarioService.CpfJaExisteAsync(cpf, usuarioIdExcluir, cancellationToken);
        return Ok(new { existe });
    }
}
</UsuariosController.cs>
<GlobalExceptionMiddleware.cs>
using System.Net;
using System.Text.Json;
using FluentValidation;
using Agriis.Compartilhado.Dominio.Exceptions;

namespace Agriis.Api.Middleware;

/// <summary>
/// Middleware global para tratamento de exceções
/// </summary>
public class GlobalExceptionMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<GlobalExceptionMiddleware> _logger;
    private readonly IWebHostEnvironment _environment;

    public GlobalExceptionMiddleware(
        RequestDelegate next, 
        ILogger<GlobalExceptionMiddleware> logger,
        IWebHostEnvironment environment)
    {
        _next = next;
        _logger = logger;
        _environment = environment;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        try
        {
            await _next(context);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro não tratado: {Message} - Path: {Path} - Method: {Method}", 
                ex.Message, context.Request.Path, context.Request.Method);
            
            await HandleExceptionAsync(context, ex);
        }
    }

    private async Task HandleExceptionAsync(HttpContext context, Exception exception)
    {
        var response = context.Response;
        response.ContentType = "application/json";

        var errorResponse = CreateErrorResponse(exception);
        response.StatusCode = GetStatusCode(exception);

        var jsonOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower,
            WriteIndented = _environment.IsDevelopment()
        };

        var jsonResponse = JsonSerializer.Serialize(errorResponse, jsonOptions);
        await response.WriteAsync(jsonResponse);
    }

    private object CreateErrorResponse(Exception exception)
    {
        return exception switch
        {
            DomainException domainEx => new
            {
                error_code = domainEx.ErrorCode,
                error_description = domainEx.Message,
                timestamp = DateTime.UtcNow
            },
            ValidationException validationEx => new
            {
                error_code = "VALIDATION_ERROR",
                error_description = "Dados de entrada inválidos",
                errors = validationEx.Errors.Select(e => new
                {
                    field = e.PropertyName,
                    message = e.ErrorMessage
                }),
                timestamp = DateTime.UtcNow
            },
            UnauthorizedAccessException => new
            {
                error_code = "UNAUTHORIZED",
                error_description = "Acesso não autorizado",
                timestamp = DateTime.UtcNow
            },
            ArgumentException argEx => new
            {
                error_code = "INVALID_ARGUMENT",
                error_description = argEx.Message,
                parameter = argEx.ParamName,
                timestamp = DateTime.UtcNow
            },
            InvalidOperationException invalidOpEx => new
            {
                error_code = "INVALID_OPERATION",
                error_description = invalidOpEx.Message,
                timestamp = DateTime.UtcNow
            },
            _ => CreateGenericErrorResponse(exception)
        };
    }

    private object CreateGenericErrorResponse(Exception exception)
    {
        if (_environment.IsDevelopment())
        {
            return new
            {
                error_code = "INTERNAL_ERROR",
                error_description = exception.Message,
                stack_trace = exception.StackTrace,
                inner_exception = exception.InnerException?.Message,
                timestamp = DateTime.UtcNow
            };
        }

        return new
        {
            error_code = "INTERNAL_ERROR",
            error_description = "Erro interno do servidor",
            timestamp = DateTime.UtcNow
        };
    }

    private static int GetStatusCode(Exception exception)
    {
        return exception switch
        {
            DomainException => (int)HttpStatusCode.BadRequest,
            ValidationException => (int)HttpStatusCode.UnprocessableEntity,
            UnauthorizedAccessException => (int)HttpStatusCode.Unauthorized,
            ArgumentException => (int)HttpStatusCode.BadRequest,
            InvalidOperationException => (int)HttpStatusCode.BadRequest,
            KeyNotFoundException => (int)HttpStatusCode.NotFound,
            _ => (int)HttpStatusCode.InternalServerError
        };
    }
}
</GlobalExceptionMiddleware.cs>
<JwtAuthenticationMiddleware.cs>
using Agriis.Autenticacao.Dominio.Interfaces;
using System.Security.Claims;

namespace Agriis.Api.Middleware;

/// <summary>
/// Middleware para autenticação JWT
/// </summary>
public class JwtAuthenticationMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<JwtAuthenticationMiddleware> _logger;

    public JwtAuthenticationMiddleware(RequestDelegate next, ILogger<JwtAuthenticationMiddleware> logger)
    {
        _next = next;
        _logger = logger;
    }

    public async Task InvokeAsync(HttpContext context, ITokenService tokenService)
    {
        try
        {
            var token = ExtractTokenFromHeader(context);
            
            if (!string.IsNullOrEmpty(token))
            {
                var principal = tokenService.ValidarToken(token);
                
                if (principal != null)
                {
                    context.User = principal;
                    
                    // Log do usuário autenticado
                    var userId = principal.FindFirst("user_id")?.Value;
                    var email = principal.FindFirst("email")?.Value;
                    
                    _logger.LogDebug("Usuário autenticado: {UserId} - {Email}", userId, email);
                }
                else
                {
                    _logger.LogWarning("Token JWT inválido recebido");
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao processar token JWT");
        }

        await _next(context);
    }

    private static string? ExtractTokenFromHeader(HttpContext context)
    {
        var authorizationHeader = context.Request.Headers.Authorization.FirstOrDefault();
        
        if (string.IsNullOrEmpty(authorizationHeader))
            return null;

        if (authorizationHeader.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
        {
            return authorizationHeader["Bearer ".Length..].Trim();
        }

        return null;
    }
}
</JwtAuthenticationMiddleware.cs>
<RequestLoggingMiddleware.cs>
using System.Diagnostics;
using System.Text;
using Agriis.Compartilhado.Infraestrutura.Logging;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;

namespace Agriis.Api.Middleware;

/// <summary>
/// Configurações para o middleware de logging de requisições
/// </summary>
public class RequestLoggingOptions
{
    public bool Enabled { get; set; } = true;
    public bool LogRequestBody { get; set; } = false;
    public bool LogResponseBody { get; set; } = false;
    public int MaxBodySizeKB { get; set; } = 10;
    public List<string> SensitiveHeaders { get; set; } = new();
    public List<string> SensitiveFields { get; set; } = new();
}

/// <summary>
/// Middleware para logging detalhado de requisições com contexto estruturado
/// </summary>
public class RequestLoggingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<RequestLoggingMiddleware> _logger;
    private readonly RequestLoggingOptions _options;

    public RequestLoggingMiddleware(
        RequestDelegate next, 
        ILogger<RequestLoggingMiddleware> logger,
        IOptions<RequestLoggingOptions> options)
    {
        _next = next;
        _logger = logger;
        _options = options.Value;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        if (!_options.Enabled)
        {
            await _next(context);
            return;
        }

        var correlationId = GetOrCreateCorrelationId(context);
        var stopwatch = Stopwatch.StartNew();

        // Configurar contexto de logging
        var loggingContext = context.RequestServices.GetService<ILoggingContext>();
        if (loggingContext != null)
        {
            SetupLoggingContext(context, correlationId, loggingContext);
        }

        // Log da requisição de entrada
        await LogRequestAsync(context, correlationId);

        // Capturar a resposta original
        var originalResponseBodyStream = context.Response.Body;
        using var responseBodyStream = new MemoryStream();
        context.Response.Body = responseBodyStream;

        try
        {
            await _next(context);
        }
        catch (Exception ex)
        {
            // Log da exceção com contexto
            _logger.LogStructuredError(ex, "Unhandled exception during request processing", new
            {
                CorrelationId = correlationId,
                RequestPath = context.Request.Path.Value,
                RequestMethod = context.Request.Method,
                UserId = context.User?.FindFirst("user_id")?.Value,
                ElapsedMilliseconds = stopwatch.ElapsedMilliseconds
            });
            throw;
        }
        finally
        {
            stopwatch.Stop();

            // Log da resposta
            await LogResponseAsync(context, correlationId, stopwatch.ElapsedMilliseconds);

            // Restaurar o stream original e copiar o conteúdo
            await responseBodyStream.CopyToAsync(originalResponseBodyStream);
            context.Response.Body = originalResponseBodyStream;

            // Limpar contexto de logging
            var loggingContextForCleanup = context.RequestServices.GetService<ILoggingContext>();
            loggingContextForCleanup?.Clear();
        }
    }

    private static string GetOrCreateCorrelationId(HttpContext context)
    {
        const string correlationIdHeader = "X-Correlation-ID";
        
        if (context.Request.Headers.TryGetValue(correlationIdHeader, out var correlationId))
        {
            return correlationId.ToString();
        }

        var newCorrelationId = Guid.NewGuid().ToString();
        context.Request.Headers[correlationIdHeader] = newCorrelationId;
        context.Response.Headers[correlationIdHeader] = newCorrelationId;
        
        return newCorrelationId;
    }

    private void SetupLoggingContext(HttpContext context, string correlationId, ILoggingContext loggingContext)
    {
        loggingContext.CorrelationId = correlationId;
        loggingContext.RequestPath = context.Request.Path.Value;
        loggingContext.RequestMethod = context.Request.Method;
        loggingContext.RemoteIpAddress = context.Connection.RemoteIpAddress?.ToString();
        loggingContext.UserAgent = context.Request.Headers.UserAgent.ToString();

        if (context.User?.Identity?.IsAuthenticated == true)
        {
            loggingContext.UserId = context.User.FindFirst("user_id")?.Value;
            loggingContext.UserEmail = context.User.FindFirst("email")?.Value;
        }
    }

    private async Task LogRequestAsync(HttpContext context, string correlationId)
    {
        var request = context.Request;
        
        var requestInfo = new
        {
            CorrelationId = correlationId,
            Method = request.Method,
            Path = request.Path.Value,
            QueryString = request.QueryString.Value,
            Headers = GetSafeHeaders(request.Headers.Select(h => new KeyValuePair<string, IEnumerable<string>>(h.Key, h.Value.AsEnumerable()))),
            UserAgent = request.Headers.UserAgent.ToString(),
            RemoteIpAddress = context.Connection.RemoteIpAddress?.ToString(),
            UserId = context.User?.FindFirst("user_id")?.Value,
            UserEmail = context.User?.FindFirst("email")?.Value,
            ContentType = request.ContentType,
            ContentLength = request.ContentLength
        };

        _logger.LogInformation("Incoming Request: {@RequestInfo}", requestInfo);

        // Log do body apenas para métodos que podem ter conteúdo e se habilitado
        if (_options.LogRequestBody && 
            (HttpMethods.IsPost(request.Method) || 
             HttpMethods.IsPut(request.Method) || 
             HttpMethods.IsPatch(request.Method)))
        {
            await LogRequestBodyAsync(request, correlationId);
        }
    }

    private async Task LogRequestBodyAsync(HttpRequest request, string correlationId)
    {
        var maxSizeBytes = _options.MaxBodySizeKB * 1024;
        
        if (request.ContentLength > 0 && request.ContentLength < maxSizeBytes)
        {
            request.EnableBuffering();
            
            using var reader = new StreamReader(request.Body, Encoding.UTF8, leaveOpen: true);
            var body = await reader.ReadToEndAsync();
            request.Body.Position = 0;

            if (!string.IsNullOrWhiteSpace(body))
            {
                // Mascarar dados sensíveis
                var sanitizedBody = SanitizeSensitiveData(body);
                
                _logger.LogDebug("Request Body [{CorrelationId}]: {Body}", correlationId, sanitizedBody);
            }
        }
        else if (request.ContentLength >= maxSizeBytes)
        {
            _logger.LogDebug("Request Body [{CorrelationId}]: Body too large ({ContentLength} bytes), skipping log", 
                correlationId, request.ContentLength);
        }
    }

    private async Task LogResponseAsync(HttpContext context, string correlationId, long elapsedMilliseconds)
    {
        var response = context.Response;
        
        var responseInfo = new
        {
            CorrelationId = correlationId,
            StatusCode = response.StatusCode,
            ContentType = response.ContentType,
            ContentLength = response.ContentLength,
            ElapsedMilliseconds = elapsedMilliseconds,
            Headers = GetSafeHeaders(response.Headers.Select(h => new KeyValuePair<string, IEnumerable<string>>(h.Key, h.Value.AsEnumerable())))
        };

        var logLevel = GetLogLevelForStatusCode(response.StatusCode);
        _logger.Log(logLevel, "Outgoing Response: {@ResponseInfo}", responseInfo);

        // Log de performance se a requisição demorou muito
        if (elapsedMilliseconds > 1000) // > 1 segundo
        {
            _logger.LogPerformance("HTTP Request", TimeSpan.FromMilliseconds(elapsedMilliseconds), new
            {
                Path = context.Request.Path.Value,
                Method = context.Request.Method,
                StatusCode = response.StatusCode
            });
        }

        // Log do body da resposta se habilitado e necessário
        if (_options.LogResponseBody && ShouldLogResponseBody(response.StatusCode, response.ContentType))
        {
            await LogResponseBodyAsync(context, correlationId);
        }
    }

    private async Task LogResponseBodyAsync(HttpContext context, string correlationId)
    {
        context.Response.Body.Seek(0, SeekOrigin.Begin);
        
        using var reader = new StreamReader(context.Response.Body, Encoding.UTF8, leaveOpen: true);
        var body = await reader.ReadToEndAsync();
        context.Response.Body.Seek(0, SeekOrigin.Begin);

        var maxSizeBytes = _options.MaxBodySizeKB * 1024;
        
        if (!string.IsNullOrWhiteSpace(body) && body.Length < maxSizeBytes)
        {
            var sanitizedBody = SanitizeSensitiveData(body);
            _logger.LogDebug("Response Body [{CorrelationId}]: {Body}", correlationId, sanitizedBody);
        }
        else if (body.Length >= maxSizeBytes)
        {
            _logger.LogDebug("Response Body [{CorrelationId}]: Body too large ({BodyLength} bytes), skipping log", 
                correlationId, body.Length);
        }
    }

    private Dictionary<string, string> GetSafeHeaders(IEnumerable<KeyValuePair<string, IEnumerable<string>>> headers)
    {
        var sensitiveHeaders = new HashSet<string>(_options.SensitiveHeaders, StringComparer.OrdinalIgnoreCase);
        
        // Adicionar headers sensíveis padrão se não estiverem na configuração
        var defaultSensitiveHeaders = new[] { "Authorization", "Cookie", "Set-Cookie", "X-API-Key", "X-Auth-Token" };
        foreach (var header in defaultSensitiveHeaders)
        {
            sensitiveHeaders.Add(header);
        }

        return headers
            .Where(h => !sensitiveHeaders.Contains(h.Key))
            .ToDictionary(
                h => h.Key, 
                h => string.Join(", ", h.Value),
                StringComparer.OrdinalIgnoreCase);
    }

    private string SanitizeSensitiveData(string body)
    {
        var sensitiveFields = _options.SensitiveFields.Any() 
            ? _options.SensitiveFields 
            : new List<string> { "password", "senha", "token", "secret", "key", "cpf", "cnpj" };
        
        var sanitized = body;
        
        foreach (var field in sensitiveFields)
        {
            // Regex para mascarar valores de campos sensíveis em JSON
            var pattern = $@"""({field}"":\s*"")[^""]*("")";
            sanitized = System.Text.RegularExpressions.Regex.Replace(
                sanitized, 
                pattern, 
                $"$1***$2", 
                System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        }
        
        return sanitized;
    }

    private static LogLevel GetLogLevelForStatusCode(int statusCode)
    {
        return statusCode switch
        {
            >= 500 => LogLevel.Error,
            >= 400 => LogLevel.Warning,
            _ => LogLevel.Information
        };
    }

    private static bool ShouldLogResponseBody(int statusCode, string? contentType)
    {
        // Log response body apenas para erros ou em desenvolvimento
        return statusCode >= 400 && 
               contentType?.Contains("application/json", StringComparison.OrdinalIgnoreCase) == true;
    }
}
</RequestLoggingMiddleware.cs>
<20250923095215_InitialCreate.cs>
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agriis.Api.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.EnsureSchema(
                name: "public");

            migrationBuilder.CreateTable(
                name: "Cultura",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Descricao = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cultura", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "estados",
                schema: "public",
                columns: table => new
                {
                    id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    uf = table.Column<string>(type: "character varying(2)", maxLength: 2, nullable: false),
                    codigo_ibge = table.Column<int>(type: "integer", nullable: false),
                    regiao = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    data_criacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    data_atualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_estados", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "refresh_tokens",
                schema: "public",
                columns: table => new
                {
                    id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    token = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false),
                    usuario_id = table.Column<int>(type: "integer", nullable: false),
                    data_expiracao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    revogado = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false),
                    data_revogacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    endereco_ip = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    user_agent = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    data_criacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    data_atualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_refresh_tokens", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "usuarios",
                schema: "public",
                columns: table => new
                {
                    id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    nome = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    email = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    celular = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    cpf = table.Column<string>(type: "character varying(11)", maxLength: 11, nullable: true),
                    senha_hash = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    ativo = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    ultimo_login = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    logo_url = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    data_criacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    data_atualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_usuarios", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "municipios",
                schema: "public",
                columns: table => new
                {
                    id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    nome = table.Column<string>(type: "character varying(150)", maxLength: 150, nullable: false),
                    codigo_ibge = table.Column<int>(type: "integer", nullable: false),
                    cep_principal = table.Column<string>(type: "character varying(8)", maxLength: 8, nullable: true),
                    latitude = table.Column<double>(type: "double precision", precision: 10, scale: 8, nullable: true),
                    longitude = table.Column<double>(type: "double precision", precision: 11, scale: 8, nullable: true),
                    estado_id = table.Column<int>(type: "integer", nullable: false),
                    data_criacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    data_atualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_municipios", x => x.id);
                    table.ForeignKey(
                        name: "FK_municipios_estados_estado_id",
                        column: x => x.estado_id,
                        principalSchema: "public",
                        principalTable: "estados",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Produtor",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    Cpf = table.Column<string>(type: "character varying(11)", maxLength: 11, nullable: true),
                    Cnpj = table.Column<string>(type: "character varying(14)", maxLength: 14, nullable: true),
                    InscricaoEstadual = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: true),
                    TipoAtividade = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    AreaPlantio = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    DataAutorizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Status = table.Column<int>(type: "integer", nullable: false),
                    RetornosApiCheckProdutor = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    UsuarioAutorizacaoId = table.Column<int>(type: "integer", nullable: true),
                    Culturas = table.Column<string>(type: "jsonb", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Produtor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Produtor_usuarios_UsuarioAutorizacaoId",
                        column: x => x.UsuarioAutorizacaoId,
                        principalSchema: "public",
                        principalTable: "usuarios",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "usuario_roles",
                schema: "public",
                columns: table => new
                {
                    id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    usuario_id = table.Column<int>(type: "integer", nullable: false),
                    role = table.Column<int>(type: "integer", nullable: false),
                    data_atribuicao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    data_criacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    data_atualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_usuario_roles", x => x.id);
                    table.ForeignKey(
                        name: "FK_usuario_roles_usuarios_usuario_id",
                        column: x => x.usuario_id,
                        principalSchema: "public",
                        principalTable: "usuarios",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "enderecos",
                schema: "public",
                columns: table => new
                {
                    id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    cep = table.Column<string>(type: "character varying(8)", maxLength: 8, nullable: false),
                    logradouro = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    numero = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    complemento = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    bairro = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    latitude = table.Column<double>(type: "double precision", precision: 10, scale: 8, nullable: true),
                    longitude = table.Column<double>(type: "double precision", precision: 11, scale: 8, nullable: true),
                    municipio_id = table.Column<int>(type: "integer", nullable: false),
                    estado_id = table.Column<int>(type: "integer", nullable: false),
                    data_criacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    data_atualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_enderecos", x => x.id);
                    table.ForeignKey(
                        name: "FK_enderecos_estados_estado_id",
                        column: x => x.estado_id,
                        principalSchema: "public",
                        principalTable: "estados",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_enderecos_municipios_municipio_id",
                        column: x => x.municipio_id,
                        principalSchema: "public",
                        principalTable: "municipios",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UsuarioProdutor",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UsuarioId = table.Column<int>(type: "integer", nullable: false),
                    ProdutorId = table.Column<int>(type: "integer", nullable: false),
                    EhProprietario = table.Column<bool>(type: "boolean", nullable: false),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UsuarioProdutor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UsuarioProdutor_Produtor_ProdutorId",
                        column: x => x.ProdutorId,
                        principalSchema: "public",
                        principalTable: "Produtor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UsuarioProdutor_usuarios_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "public",
                        principalTable: "usuarios",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Cultura_Ativo",
                schema: "public",
                table: "Cultura",
                column: "Ativo");

            migrationBuilder.CreateIndex(
                name: "IX_Cultura_Nome",
                schema: "public",
                table: "Cultura",
                column: "Nome",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Culturas_DataCriacao",
                schema: "public",
                table: "Cultura",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_enderecos_bairro",
                schema: "public",
                table: "enderecos",
                column: "bairro");

            migrationBuilder.CreateIndex(
                name: "IX_enderecos_cep",
                schema: "public",
                table: "enderecos",
                column: "cep");

            migrationBuilder.CreateIndex(
                name: "IX_Enderecos_DataCriacao",
                schema: "public",
                table: "enderecos",
                column: "data_criacao");

            migrationBuilder.CreateIndex(
                name: "IX_enderecos_estado_id",
                schema: "public",
                table: "enderecos",
                column: "estado_id");

            migrationBuilder.CreateIndex(
                name: "IX_enderecos_logradouro",
                schema: "public",
                table: "enderecos",
                column: "logradouro");

            migrationBuilder.CreateIndex(
                name: "IX_enderecos_municipio_id",
                schema: "public",
                table: "enderecos",
                column: "municipio_id");

            migrationBuilder.CreateIndex(
                name: "IX_enderecos_unique_address",
                schema: "public",
                table: "enderecos",
                columns: new[] { "cep", "logradouro", "numero", "municipio_id" });

            migrationBuilder.CreateIndex(
                name: "IX_estados_codigo_ibge",
                schema: "public",
                table: "estados",
                column: "codigo_ibge",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Estados_DataCriacao",
                schema: "public",
                table: "estados",
                column: "data_criacao");

            migrationBuilder.CreateIndex(
                name: "IX_estados_nome",
                schema: "public",
                table: "estados",
                column: "nome");

            migrationBuilder.CreateIndex(
                name: "IX_estados_regiao",
                schema: "public",
                table: "estados",
                column: "regiao");

            migrationBuilder.CreateIndex(
                name: "IX_estados_uf",
                schema: "public",
                table: "estados",
                column: "uf",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_municipios_cep_principal",
                schema: "public",
                table: "municipios",
                column: "cep_principal");

            migrationBuilder.CreateIndex(
                name: "IX_municipios_codigo_ibge",
                schema: "public",
                table: "municipios",
                column: "codigo_ibge",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Municipios_DataCriacao",
                schema: "public",
                table: "municipios",
                column: "data_criacao");

            migrationBuilder.CreateIndex(
                name: "IX_municipios_estado_id",
                schema: "public",
                table: "municipios",
                column: "estado_id");

            migrationBuilder.CreateIndex(
                name: "IX_municipios_nome",
                schema: "public",
                table: "municipios",
                column: "nome");

            migrationBuilder.CreateIndex(
                name: "IX_Produtor_AreaPlantio",
                schema: "public",
                table: "Produtor",
                column: "AreaPlantio");

            migrationBuilder.CreateIndex(
                name: "IX_Produtor_Cnpj",
                schema: "public",
                table: "Produtor",
                column: "Cnpj",
                unique: true,
                filter: "\"Cnpj\" IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Produtor_Cpf",
                schema: "public",
                table: "Produtor",
                column: "Cpf",
                unique: true,
                filter: "\"Cpf\" IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Produtor_DataCriacao",
                schema: "public",
                table: "Produtor",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_Produtor_Status",
                schema: "public",
                table: "Produtor",
                column: "Status");

            migrationBuilder.CreateIndex(
                name: "IX_Produtor_UsuarioAutorizacaoId",
                schema: "public",
                table: "Produtor",
                column: "UsuarioAutorizacaoId");

            migrationBuilder.CreateIndex(
                name: "ix_refresh_tokens_data_expiracao",
                schema: "public",
                table: "refresh_tokens",
                column: "data_expiracao");

            migrationBuilder.CreateIndex(
                name: "ix_refresh_tokens_token",
                schema: "public",
                table: "refresh_tokens",
                column: "token",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "ix_refresh_tokens_usuario_id",
                schema: "public",
                table: "refresh_tokens",
                column: "usuario_id");

            migrationBuilder.CreateIndex(
                name: "ix_refresh_tokens_usuario_valido",
                schema: "public",
                table: "refresh_tokens",
                columns: new[] { "usuario_id", "revogado", "data_expiracao" });

            migrationBuilder.CreateIndex(
                name: "IX_RefreshTokens_DataCriacao",
                schema: "public",
                table: "refresh_tokens",
                column: "data_criacao");

            migrationBuilder.CreateIndex(
                name: "ix_usuario_roles_role",
                schema: "public",
                table: "usuario_roles",
                column: "role");

            migrationBuilder.CreateIndex(
                name: "ix_usuario_roles_usuario_id",
                schema: "public",
                table: "usuario_roles",
                column: "usuario_id");

            migrationBuilder.CreateIndex(
                name: "ix_usuario_roles_usuario_role_unique",
                schema: "public",
                table: "usuario_roles",
                columns: new[] { "usuario_id", "role" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioRoles_DataCriacao",
                schema: "public",
                table: "usuario_roles",
                column: "data_criacao");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioProdutor_Ativo",
                schema: "public",
                table: "UsuarioProdutor",
                column: "Ativo");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioProdutor_EhProprietario",
                schema: "public",
                table: "UsuarioProdutor",
                column: "EhProprietario");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioProdutor_ProdutorId",
                schema: "public",
                table: "UsuarioProdutor",
                column: "ProdutorId");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioProdutor_UsuarioId",
                schema: "public",
                table: "UsuarioProdutor",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioProdutor_UsuarioId_ProdutorId",
                schema: "public",
                table: "UsuarioProdutor",
                columns: new[] { "UsuarioId", "ProdutorId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UsuariosProdutores_DataCriacao",
                schema: "public",
                table: "UsuarioProdutor",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "ix_usuarios_ativo",
                schema: "public",
                table: "usuarios",
                column: "ativo");

            migrationBuilder.CreateIndex(
                name: "ix_usuarios_cpf",
                schema: "public",
                table: "usuarios",
                column: "cpf",
                unique: true,
                filter: "cpf IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Usuarios_DataCriacao",
                schema: "public",
                table: "usuarios",
                column: "data_criacao");

            migrationBuilder.CreateIndex(
                name: "ix_usuarios_email",
                schema: "public",
                table: "usuarios",
                column: "email",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Cultura",
                schema: "public");

            migrationBuilder.DropTable(
                name: "enderecos",
                schema: "public");

            migrationBuilder.DropTable(
                name: "refresh_tokens",
                schema: "public");

            migrationBuilder.DropTable(
                name: "usuario_roles",
                schema: "public");

            migrationBuilder.DropTable(
                name: "UsuarioProdutor",
                schema: "public");

            migrationBuilder.DropTable(
                name: "municipios",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Produtor",
                schema: "public");

            migrationBuilder.DropTable(
                name: "estados",
                schema: "public");

            migrationBuilder.DropTable(
                name: "usuarios",
                schema: "public");
        }
    }
}

</20250923095215_InitialCreate.cs>
<20250923095215_InitialCreate.Designer.cs>
// <auto-generated />
using System;
using System.Text.Json;
using Agriis.Api.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agriis.Api.Migrations
{
    [DbContext(typeof(AgriisDbContext))]
    [Migration("20250923095215_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agriis.Autenticacao.Dominio.Entidades.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_expiracao");

                    b.Property<DateTime?>("DataRevogacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_revogacao");

                    b.Property<string>("EnderecoIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("endereco_ip");

                    b.Property<bool>("Revogado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("revogado");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("user_agent");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_RefreshTokens_DataCriacao");

                    b.HasIndex("DataExpiracao")
                        .HasDatabaseName("ix_refresh_tokens_data_expiracao");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_refresh_tokens_usuario_id");

                    b.HasIndex("UsuarioId", "Revogado", "DataExpiracao")
                        .HasDatabaseName("ix_refresh_tokens_usuario_valido");

                    b.ToTable("refresh_tokens", "public");
                });

            modelBuilder.Entity("Agriis.Culturas.Dominio.Entidades.Cultura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_Cultura_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Culturas_DataCriacao");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_Cultura_Nome");

                    b.ToTable("Cultura", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complemento");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("logradouro");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("integer")
                        .HasColumnName("municipio_id");

                    b.Property<string>("Numero")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero");

                    b.HasKey("Id");

                    b.HasIndex("Bairro")
                        .HasDatabaseName("IX_enderecos_bairro");

                    b.HasIndex("Cep")
                        .HasDatabaseName("IX_enderecos_cep");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Enderecos_DataCriacao");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("IX_enderecos_estado_id");

                    b.HasIndex("Logradouro")
                        .HasDatabaseName("IX_enderecos_logradouro");

                    b.HasIndex("MunicipioId")
                        .HasDatabaseName("IX_enderecos_municipio_id");

                    b.HasIndex("Cep", "Logradouro", "Numero", "MunicipioId")
                        .HasDatabaseName("IX_enderecos_unique_address");

                    b.ToTable("enderecos", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoIbge")
                        .HasColumnType("integer")
                        .HasColumnName("codigo_ibge");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Regiao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("regiao");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.HasIndex("CodigoIbge")
                        .IsUnique()
                        .HasDatabaseName("IX_estados_codigo_ibge");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Estados_DataCriacao");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_estados_nome");

                    b.HasIndex("Regiao")
                        .HasDatabaseName("IX_estados_regiao");

                    b.HasIndex("Uf")
                        .IsUnique()
                        .HasDatabaseName("IX_estados_uf");

                    b.ToTable("estados", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CepPrincipal")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep_principal");

                    b.Property<int>("CodigoIbge")
                        .HasColumnType("integer")
                        .HasColumnName("codigo_ibge");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("CepPrincipal")
                        .HasDatabaseName("IX_municipios_cep_principal");

                    b.HasIndex("CodigoIbge")
                        .IsUnique()
                        .HasDatabaseName("IX_municipios_codigo_ibge");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Municipios_DataCriacao");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("IX_municipios_estado_id");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_municipios_nome");

                    b.ToTable("municipios", "public");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.Produtor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AreaPlantio")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("AreaPlantio");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("Cpf");

                    b.Property<string>("Culturas")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("Culturas");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataAutorizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAutorizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("InscricaoEstadual");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<JsonDocument>("RetornosApiCheckProdutor")
                        .HasColumnType("jsonb")
                        .HasColumnName("RetornosApiCheckProdutor");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<string>("TipoAtividade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TipoAtividade");

                    b.Property<int?>("UsuarioAutorizacaoId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioAutorizacaoId");

                    b.HasKey("Id");

                    b.HasIndex("AreaPlantio")
                        .HasDatabaseName("IX_Produtor_AreaPlantio");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("IX_Produtor_Cnpj")
                        .HasFilter("\"Cnpj\" IS NOT NULL");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("IX_Produtor_Cpf")
                        .HasFilter("\"Cpf\" IS NOT NULL");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Produtor_DataCriacao");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Produtor_Status");

                    b.HasIndex("UsuarioAutorizacaoId");

                    b.ToTable("Produtor", "public");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.UsuarioProdutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("EhProprietario")
                        .HasColumnType("boolean")
                        .HasColumnName("EhProprietario");

                    b.Property<int>("ProdutorId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutorId");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_UsuarioProdutor_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuariosProdutores_DataCriacao");

                    b.HasIndex("EhProprietario")
                        .HasDatabaseName("IX_UsuarioProdutor_EhProprietario");

                    b.HasIndex("ProdutorId")
                        .HasDatabaseName("IX_UsuarioProdutor_ProdutorId");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_UsuarioProdutor_UsuarioId");

                    b.HasIndex("UsuarioId", "ProdutorId")
                        .IsUnique()
                        .HasDatabaseName("IX_UsuarioProdutor_UsuarioId_ProdutorId");

                    b.ToTable("UsuarioProdutor", "public");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("celular");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("SenhaHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("senha_hash");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultimo_login");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("ix_usuarios_ativo");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_cpf")
                        .HasFilter("cpf IS NOT NULL");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Usuarios_DataCriacao");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_email");

                    b.ToTable("usuarios", "public");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.UsuarioRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtribuicao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atribuicao");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuarioRoles_DataCriacao");

                    b.HasIndex("Role")
                        .HasDatabaseName("ix_usuario_roles_role");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_usuario_roles_usuario_id");

                    b.HasIndex("UsuarioId", "Role")
                        .IsUnique()
                        .HasDatabaseName("ix_usuario_roles_usuario_role_unique");

                    b.ToTable("usuario_roles", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Endereco", b =>
                {
                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Estado", "Estado")
                        .WithMany("Enderecos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Municipio", "Municipio")
                        .WithMany("Enderecos")
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Municipio", b =>
                {
                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Estado", "Estado")
                        .WithMany("Municipios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.Produtor", b =>
                {
                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "UsuarioAutorizacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAutorizacaoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UsuarioAutorizacao");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.UsuarioProdutor", b =>
                {
                    b.HasOne("Agriis.Produtores.Dominio.Entidades.Produtor", "Produtor")
                        .WithMany("UsuariosProdutores")
                        .HasForeignKey("ProdutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produtor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.UsuarioRole", b =>
                {
                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Estado", b =>
                {
                    b.Navigation("Enderecos");

                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Municipio", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.Produtor", b =>
                {
                    b.Navigation("UsuariosProdutores");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("UsuarioRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

</20250923095215_InitialCreate.Designer.cs>
<20250923095748_AddRemainingTables.cs>
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore.Migrations;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agriis.Api.Migrations
{
    /// <inheritdoc />
    public partial class AddRemainingTables : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Catalogo",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    SafraId = table.Column<int>(type: "integer", nullable: false),
                    PontoDistribuicaoId = table.Column<int>(type: "integer", nullable: false),
                    CulturaId = table.Column<int>(type: "integer", nullable: false),
                    CategoriaId = table.Column<int>(type: "integer", nullable: false),
                    Moeda = table.Column<string>(type: "text", nullable: false),
                    DataInicio = table.Column<DateTime>(type: "timestamp without time zone", nullable: false),
                    DataFim = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp without time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Catalogo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Categoria",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Tipo = table.Column<int>(type: "integer", nullable: false),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false),
                    CategoriaPaiId = table.Column<int>(type: "integer", nullable: true),
                    Ordem = table.Column<int>(type: "integer", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Categoria", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Categoria_Categoria_CategoriaPaiId",
                        column: x => x.CategoriaPaiId,
                        principalSchema: "public",
                        principalTable: "Categoria",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Combo",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    Descricao = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    HectareMinimo = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    HectareMaximo = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    DataInicio = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataFim = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    ModalidadePagamento = table.Column<int>(type: "integer", nullable: false),
                    Status = table.Column<int>(type: "integer", nullable: false),
                    RestricoesMunicipios = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    PermiteAlteracaoItem = table.Column<bool>(type: "boolean", nullable: false),
                    PermiteExclusaoItem = table.Column<bool>(type: "boolean", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    SafraId = table.Column<int>(type: "integer", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Combo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "forma_pagamento",
                schema: "public",
                columns: table => new
                {
                    id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    descricao = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: false),
                    ativo = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    data_criacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    data_atualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_forma_pagamento", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Fornecedor",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    Cnpj = table.Column<string>(type: "character varying(14)", maxLength: 14, nullable: false),
                    InscricaoEstadual = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: true),
                    Endereco = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    Telefone = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Email = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    LogoUrl = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    MoedaPadrao = table.Column<int>(type: "integer", nullable: false),
                    PedidoMinimo = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    TokenLincros = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false),
                    DadosAdicionais = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fornecedor", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Pedido",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Status = table.Column<int>(type: "integer", nullable: false),
                    StatusCarrinho = table.Column<int>(type: "integer", nullable: false),
                    QuantidadeItens = table.Column<int>(type: "integer", nullable: false),
                    Totais = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    PermiteContato = table.Column<bool>(type: "boolean", nullable: false),
                    NegociarPedido = table.Column<bool>(type: "boolean", nullable: false),
                    DataLimiteInteracao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    ProdutorId = table.Column<int>(type: "integer", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Pedido", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PontoDistribuicao",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false, collation: "pt_BR"),
                    Descricao = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true, collation: "pt_BR"),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    EnderecoId = table.Column<int>(type: "integer", nullable: false),
                    CoberturaTerritorios = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    RaioCobertura = table.Column<double>(type: "double precision", precision: 10, scale: 2, nullable: true),
                    CapacidadeMaxima = table.Column<decimal>(type: "numeric(18,4)", precision: 18, scale: 4, nullable: true),
                    UnidadeCapacidade = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: true),
                    HorarioFuncionamento = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    Observacoes = table.Column<string>(type: "character varying(2000)", maxLength: 2000, nullable: true, collation: "pt_BR"),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PontoDistribuicao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PontoDistribuicao_enderecos_EnderecoId",
                        column: x => x.EnderecoId,
                        principalSchema: "public",
                        principalTable: "enderecos",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Propriedade",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    Nirf = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: true),
                    InscricaoEstadual = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: true),
                    AreaTotal = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    ProdutorId = table.Column<int>(type: "integer", nullable: false),
                    EnderecoId = table.Column<int>(type: "integer", nullable: true),
                    DadosAdicionais = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Propriedade", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Safra",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PlantioInicial = table.Column<DateTime>(type: "date", nullable: false),
                    PlantioFinal = table.Column<DateTime>(type: "date", nullable: false),
                    PlantioNome = table.Column<string>(type: "character varying(256)", maxLength: 256, nullable: false),
                    Descricao = table.Column<string>(type: "character varying(64)", maxLength: 64, nullable: false),
                    AnoColheita = table.Column<int>(type: "integer", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Safra", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CatalogoItem",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    CatalogoId = table.Column<int>(type: "integer", nullable: false),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    EstruturaPrecosJson = table.Column<JsonDocument>(type: "jsonb", nullable: false),
                    PrecoBase = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp without time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CatalogoItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CatalogoItem_Catalogo_CatalogoId",
                        column: x => x.CatalogoId,
                        principalSchema: "public",
                        principalTable: "Catalogo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Produto",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Codigo = table.Column<string>(type: "text", nullable: false),
                    Marca = table.Column<string>(type: "text", nullable: true),
                    Tipo = table.Column<int>(type: "integer", nullable: false),
                    Status = table.Column<int>(type: "integer", nullable: false),
                    Unidade = table.Column<int>(type: "integer", nullable: false),
                    TipoCalculoPeso = table.Column<int>(type: "integer", nullable: false),
                    ProdutoRestrito = table.Column<bool>(type: "boolean", nullable: false),
                    ObservacoesRestricao = table.Column<string>(type: "text", nullable: true),
                    CategoriaId = table.Column<int>(type: "integer", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    ProdutoPaiId = table.Column<int>(type: "integer", nullable: true),
                    DadosAdicionais = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Produto", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Produto_Categoria_CategoriaId",
                        column: x => x.CategoriaId,
                        principalSchema: "public",
                        principalTable: "Categoria",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Produto_Produto_ProdutoPaiId",
                        column: x => x.ProdutoPaiId,
                        principalSchema: "public",
                        principalTable: "Produto",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ComboCategoriaDesconto",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ComboId = table.Column<int>(type: "integer", nullable: false),
                    CategoriaId = table.Column<int>(type: "integer", nullable: false),
                    PercentualDesconto = table.Column<decimal>(type: "numeric(5,2)", nullable: false),
                    ValorDescontoFixo = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    DescontoPorHectare = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    TipoDesconto = table.Column<int>(type: "integer", nullable: false),
                    HectareMinimo = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    HectareMaximo = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComboCategoriaDesconto", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComboCategoriaDesconto_Combo_ComboId",
                        column: x => x.ComboId,
                        principalSchema: "public",
                        principalTable: "Combo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComboItem",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ComboId = table.Column<int>(type: "integer", nullable: false),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    PrecoUnitario = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    PercentualDesconto = table.Column<decimal>(type: "numeric(5,2)", nullable: false),
                    ProdutoObrigatorio = table.Column<bool>(type: "boolean", nullable: false),
                    Ordem = table.Column<int>(type: "integer", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComboItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComboItem_Combo_ComboId",
                        column: x => x.ComboId,
                        principalSchema: "public",
                        principalTable: "Combo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComboLocalRecebimento",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ComboId = table.Column<int>(type: "integer", nullable: false),
                    PontoDistribuicaoId = table.Column<int>(type: "integer", nullable: false),
                    PrecoAdicional = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    PercentualDesconto = table.Column<decimal>(type: "numeric(5,2)", nullable: false),
                    LocalPadrao = table.Column<bool>(type: "boolean", nullable: false),
                    Observacoes = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComboLocalRecebimento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComboLocalRecebimento_Combo_ComboId",
                        column: x => x.ComboId,
                        principalSchema: "public",
                        principalTable: "Combo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "cultura_forma_pagamento",
                schema: "public",
                columns: table => new
                {
                    id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    fornecedor_id = table.Column<int>(type: "integer", nullable: false),
                    cultura_id = table.Column<int>(type: "integer", nullable: false),
                    forma_pagamento_id = table.Column<int>(type: "integer", nullable: false),
                    ativo = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    data_criacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    data_atualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_cultura_forma_pagamento", x => x.id);
                    table.ForeignKey(
                        name: "FK_cultura_forma_pagamento_forma_pagamento_forma_pagamento_id",
                        column: x => x.forma_pagamento_id,
                        principalSchema: "public",
                        principalTable: "forma_pagamento",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UsuarioFornecedor",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UsuarioId = table.Column<int>(type: "integer", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    Role = table.Column<int>(type: "integer", nullable: false),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false),
                    DataInicio = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataFim = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UsuarioFornecedor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UsuarioFornecedor_Fornecedor_FornecedorId",
                        column: x => x.FornecedorId,
                        principalSchema: "public",
                        principalTable: "Fornecedor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UsuarioFornecedor_usuarios_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "public",
                        principalTable: "usuarios",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Proposta",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PedidoId = table.Column<int>(type: "integer", nullable: false),
                    AcaoComprador = table.Column<int>(type: "integer", nullable: true),
                    Observacao = table.Column<string>(type: "character varying(1024)", maxLength: 1024, nullable: true),
                    UsuarioProdutorId = table.Column<int>(type: "integer", nullable: true),
                    UsuarioFornecedorId = table.Column<int>(type: "integer", nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proposta", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Proposta_Pedido_PedidoId",
                        column: x => x.PedidoId,
                        principalSchema: "public",
                        principalTable: "Pedido",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PropriedadeCultura",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PropriedadeId = table.Column<int>(type: "integer", nullable: false),
                    CulturaId = table.Column<int>(type: "integer", nullable: false),
                    Area = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    SafraId = table.Column<int>(type: "integer", nullable: true),
                    DataPlantio = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataColheitaPrevista = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Observacoes = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PropriedadeCultura", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PropriedadeCultura_Propriedade_PropriedadeId",
                        column: x => x.PropriedadeId,
                        principalSchema: "public",
                        principalTable: "Propriedade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Talhao",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    Area = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    Descricao = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    Localizacao = table.Column<Point>(type: "geography(POINT, 4326)", nullable: true),
                    Geometria = table.Column<Polygon>(type: "geography(POLYGON, 4326)", nullable: true),
                    PropriedadeId = table.Column<int>(type: "integer", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Talhao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Talhao_Propriedade_PropriedadeId",
                        column: x => x.PropriedadeId,
                        principalSchema: "public",
                        principalTable: "Propriedade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PedidoItem",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PedidoId = table.Column<int>(type: "integer", nullable: false),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    PrecoUnitario = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    ValorTotal = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    PercentualDesconto = table.Column<decimal>(type: "numeric(5,2)", nullable: false),
                    ValorDesconto = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    ValorFinal = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    DadosAdicionais = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    Observacoes = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidoItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PedidoItem_Pedido_PedidoId",
                        column: x => x.PedidoId,
                        principalSchema: "public",
                        principalTable: "Pedido",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PedidoItem_Produto_ProdutoId",
                        column: x => x.ProdutoId,
                        principalSchema: "public",
                        principalTable: "Produto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProdutoCultura",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    CulturaId = table.Column<int>(type: "integer", nullable: false),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false),
                    Observacoes = table.Column<string>(type: "text", nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProdutoCultura", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProdutoCultura_Produto_ProdutoId",
                        column: x => x.ProdutoId,
                        principalSchema: "public",
                        principalTable: "Produto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UsuarioFornecedorTerritorio",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UsuarioFornecedorId = table.Column<int>(type: "integer", nullable: false),
                    Estados = table.Column<JsonDocument>(type: "jsonb", nullable: false),
                    Municipios = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    TerritorioPadrao = table.Column<bool>(type: "boolean", nullable: false),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UsuarioFornecedorTerritorio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UsuarioFornecedorTerritorio_UsuarioFornecedor_UsuarioFornec~",
                        column: x => x.UsuarioFornecedorId,
                        principalSchema: "public",
                        principalTable: "UsuarioFornecedor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PedidoItemTransporte",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PedidoItemId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    DataAgendamento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    ValorFrete = table.Column<decimal>(type: "numeric(18,4)", nullable: false),
                    PesoTotal = table.Column<decimal>(type: "numeric(18,4)", nullable: true),
                    VolumeTotal = table.Column<decimal>(type: "numeric(18,4)", nullable: true),
                    EnderecoOrigem = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    EnderecoDestino = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    InformacoesTransporte = table.Column<JsonDocument>(type: "jsonb", nullable: true),
                    Observacoes = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    PedidoItemId1 = table.Column<int>(type: "integer", nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    DataAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidoItemTransporte", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PedidoItemTransporte_PedidoItem_PedidoItemId",
                        column: x => x.PedidoItemId,
                        principalSchema: "public",
                        principalTable: "PedidoItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PedidoItemTransporte_PedidoItem_PedidoItemId1",
                        column: x => x.PedidoItemId1,
                        principalSchema: "public",
                        principalTable: "PedidoItem",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateIndex(
                name: "IX_Catalogo_CategoriaId",
                schema: "public",
                table: "Catalogo",
                column: "CategoriaId");

            migrationBuilder.CreateIndex(
                name: "IX_Catalogo_ChaveUnica",
                schema: "public",
                table: "Catalogo",
                columns: new[] { "SafraId", "PontoDistribuicaoId", "CulturaId", "CategoriaId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Catalogo_CulturaId",
                schema: "public",
                table: "Catalogo",
                column: "CulturaId");

            migrationBuilder.CreateIndex(
                name: "IX_Catalogo_PontoDistribuicaoId",
                schema: "public",
                table: "Catalogo",
                column: "PontoDistribuicaoId");

            migrationBuilder.CreateIndex(
                name: "IX_Catalogo_SafraId",
                schema: "public",
                table: "Catalogo",
                column: "SafraId");

            migrationBuilder.CreateIndex(
                name: "IX_Catalogo_Vigencia",
                schema: "public",
                table: "Catalogo",
                columns: new[] { "DataInicio", "DataFim", "Ativo" });

            migrationBuilder.CreateIndex(
                name: "IX_Catalogos_DataCriacao",
                schema: "public",
                table: "Catalogo",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_CatalogoItem_Ativo",
                schema: "public",
                table: "CatalogoItem",
                column: "Ativo");

            migrationBuilder.CreateIndex(
                name: "IX_CatalogoItem_CatalogoId",
                schema: "public",
                table: "CatalogoItem",
                column: "CatalogoId");

            migrationBuilder.CreateIndex(
                name: "IX_CatalogoItem_CatalogoProduto",
                schema: "public",
                table: "CatalogoItem",
                columns: new[] { "CatalogoId", "ProdutoId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CatalogoItem_ProdutoId",
                schema: "public",
                table: "CatalogoItem",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_CatalogoItens_DataCriacao",
                schema: "public",
                table: "CatalogoItem",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_Categoria_CategoriaPaiId",
                schema: "public",
                table: "Categoria",
                column: "CategoriaPaiId");

            migrationBuilder.CreateIndex(
                name: "IX_Categoria_DataCriacao",
                schema: "public",
                table: "Categoria",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_Combo_FornecedorId",
                schema: "public",
                table: "Combo",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_Combo_FornecedorSafraNome",
                schema: "public",
                table: "Combo",
                columns: new[] { "FornecedorId", "SafraId", "Nome" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Combo_Periodo",
                schema: "public",
                table: "Combo",
                columns: new[] { "DataInicio", "DataFim" });

            migrationBuilder.CreateIndex(
                name: "IX_Combo_SafraId",
                schema: "public",
                table: "Combo",
                column: "SafraId");

            migrationBuilder.CreateIndex(
                name: "IX_Combo_Status",
                schema: "public",
                table: "Combo",
                column: "Status");

            migrationBuilder.CreateIndex(
                name: "IX_Combos_DataCriacao",
                schema: "public",
                table: "Combo",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_ComboCategoriaDesconto_Ativo",
                schema: "public",
                table: "ComboCategoriaDesconto",
                column: "Ativo");

            migrationBuilder.CreateIndex(
                name: "IX_ComboCategoriaDesconto_CategoriaId",
                schema: "public",
                table: "ComboCategoriaDesconto",
                column: "CategoriaId");

            migrationBuilder.CreateIndex(
                name: "IX_ComboCategoriaDesconto_ComboCategoria",
                schema: "public",
                table: "ComboCategoriaDesconto",
                columns: new[] { "ComboId", "CategoriaId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComboCategoriaDesconto_ComboId",
                schema: "public",
                table: "ComboCategoriaDesconto",
                column: "ComboId");

            migrationBuilder.CreateIndex(
                name: "IX_ComboCategoriasDesconto_DataCriacao",
                schema: "public",
                table: "ComboCategoriaDesconto",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_ComboItem_ComboId",
                schema: "public",
                table: "ComboItem",
                column: "ComboId");

            migrationBuilder.CreateIndex(
                name: "IX_ComboItem_ComboOrdem",
                schema: "public",
                table: "ComboItem",
                columns: new[] { "ComboId", "Ordem" });

            migrationBuilder.CreateIndex(
                name: "IX_ComboItem_ProdutoId",
                schema: "public",
                table: "ComboItem",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_ComboItens_DataCriacao",
                schema: "public",
                table: "ComboItem",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_ComboLocaisRecebimento_DataCriacao",
                schema: "public",
                table: "ComboLocalRecebimento",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_ComboLocalRecebimento_ComboId",
                schema: "public",
                table: "ComboLocalRecebimento",
                column: "ComboId");

            migrationBuilder.CreateIndex(
                name: "IX_ComboLocalRecebimento_ComboPonto",
                schema: "public",
                table: "ComboLocalRecebimento",
                columns: new[] { "ComboId", "PontoDistribuicaoId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComboLocalRecebimento_PontoDistribuicaoId",
                schema: "public",
                table: "ComboLocalRecebimento",
                column: "PontoDistribuicaoId");

            migrationBuilder.CreateIndex(
                name: "ix_cultura_forma_pagamento_ativo",
                schema: "public",
                table: "cultura_forma_pagamento",
                column: "ativo");

            migrationBuilder.CreateIndex(
                name: "ix_cultura_forma_pagamento_cultura_id",
                schema: "public",
                table: "cultura_forma_pagamento",
                column: "cultura_id");

            migrationBuilder.CreateIndex(
                name: "ix_cultura_forma_pagamento_forma_pagamento_id",
                schema: "public",
                table: "cultura_forma_pagamento",
                column: "forma_pagamento_id");

            migrationBuilder.CreateIndex(
                name: "ix_cultura_forma_pagamento_fornecedor_id",
                schema: "public",
                table: "cultura_forma_pagamento",
                column: "fornecedor_id");

            migrationBuilder.CreateIndex(
                name: "ix_cultura_forma_pagamento_unique",
                schema: "public",
                table: "cultura_forma_pagamento",
                columns: new[] { "fornecedor_id", "cultura_id", "forma_pagamento_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CulturaFormasPagamento_DataCriacao",
                schema: "public",
                table: "cultura_forma_pagamento",
                column: "data_criacao");

            migrationBuilder.CreateIndex(
                name: "ix_forma_pagamento_ativo",
                schema: "public",
                table: "forma_pagamento",
                column: "ativo");

            migrationBuilder.CreateIndex(
                name: "ix_forma_pagamento_descricao",
                schema: "public",
                table: "forma_pagamento",
                column: "descricao");

            migrationBuilder.CreateIndex(
                name: "IX_FormasPagamento_DataCriacao",
                schema: "public",
                table: "forma_pagamento",
                column: "data_criacao");

            migrationBuilder.CreateIndex(
                name: "IX_Fornecedor_Ativo",
                schema: "public",
                table: "Fornecedor",
                column: "Ativo");

            migrationBuilder.CreateIndex(
                name: "IX_Fornecedor_Cnpj",
                schema: "public",
                table: "Fornecedor",
                column: "Cnpj",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Fornecedor_DataCriacao",
                schema: "public",
                table: "Fornecedor",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_Fornecedor_Email",
                schema: "public",
                table: "Fornecedor",
                column: "Email",
                filter: "\"Email\" IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Fornecedor_MoedaPadrao",
                schema: "public",
                table: "Fornecedor",
                column: "MoedaPadrao");

            migrationBuilder.CreateIndex(
                name: "IX_Fornecedor_Nome",
                schema: "public",
                table: "Fornecedor",
                column: "Nome");

            migrationBuilder.CreateIndex(
                name: "IX_Pedido_DataLimiteInteracao",
                schema: "public",
                table: "Pedido",
                column: "DataLimiteInteracao");

            migrationBuilder.CreateIndex(
                name: "IX_Pedido_FornecedorId",
                schema: "public",
                table: "Pedido",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_Pedido_ProdutorId",
                schema: "public",
                table: "Pedido",
                column: "ProdutorId");

            migrationBuilder.CreateIndex(
                name: "IX_Pedido_ProdutorId_FornecedorId",
                schema: "public",
                table: "Pedido",
                columns: new[] { "ProdutorId", "FornecedorId" });

            migrationBuilder.CreateIndex(
                name: "IX_Pedido_Status",
                schema: "public",
                table: "Pedido",
                column: "Status");

            migrationBuilder.CreateIndex(
                name: "IX_Pedidos_DataCriacao",
                schema: "public",
                table: "Pedido",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_PedidoItem_PedidoId",
                schema: "public",
                table: "PedidoItem",
                column: "PedidoId");

            migrationBuilder.CreateIndex(
                name: "IX_PedidoItem_ProdutoId",
                schema: "public",
                table: "PedidoItem",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_PedidoItem_ValorFinal",
                schema: "public",
                table: "PedidoItem",
                column: "ValorFinal");

            migrationBuilder.CreateIndex(
                name: "IX_PedidoItens_DataCriacao",
                schema: "public",
                table: "PedidoItem",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_PedidoItemTransporte_DataAgendamento",
                schema: "public",
                table: "PedidoItemTransporte",
                column: "DataAgendamento");

            migrationBuilder.CreateIndex(
                name: "IX_PedidoItemTransporte_PedidoItemId",
                schema: "public",
                table: "PedidoItemTransporte",
                column: "PedidoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_PedidoItemTransporte_PedidoItemId1",
                schema: "public",
                table: "PedidoItemTransporte",
                column: "PedidoItemId1");

            migrationBuilder.CreateIndex(
                name: "IX_PedidoItemTransporte_ValorFrete",
                schema: "public",
                table: "PedidoItemTransporte",
                column: "ValorFrete");

            migrationBuilder.CreateIndex(
                name: "IX_PedidoItensTransporte_DataCriacao",
                schema: "public",
                table: "PedidoItemTransporte",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_PontoDistribuicao_Ativo",
                schema: "public",
                table: "PontoDistribuicao",
                column: "Ativo");

            migrationBuilder.CreateIndex(
                name: "IX_PontoDistribuicao_CoberturaTerritorios",
                schema: "public",
                table: "PontoDistribuicao",
                column: "CoberturaTerritorios")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "IX_PontoDistribuicao_EnderecoId",
                schema: "public",
                table: "PontoDistribuicao",
                column: "EnderecoId");

            migrationBuilder.CreateIndex(
                name: "IX_PontoDistribuicao_FornecedorId",
                schema: "public",
                table: "PontoDistribuicao",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_PontoDistribuicao_FornecedorId_Nome",
                schema: "public",
                table: "PontoDistribuicao",
                columns: new[] { "FornecedorId", "Nome" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PontosDistribuicao_DataCriacao",
                schema: "public",
                table: "PontoDistribuicao",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_Produto_CategoriaId",
                schema: "public",
                table: "Produto",
                column: "CategoriaId");

            migrationBuilder.CreateIndex(
                name: "IX_Produto_DataCriacao",
                schema: "public",
                table: "Produto",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_Produto_ProdutoPaiId",
                schema: "public",
                table: "Produto",
                column: "ProdutoPaiId");

            migrationBuilder.CreateIndex(
                name: "IX_ProdutoCultura_DataCriacao",
                schema: "public",
                table: "ProdutoCultura",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_ProdutoCultura_ProdutoId",
                schema: "public",
                table: "ProdutoCultura",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_Proposta_DataCriacao",
                schema: "public",
                table: "Proposta",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_Proposta_PedidoId",
                schema: "public",
                table: "Proposta",
                column: "PedidoId");

            migrationBuilder.CreateIndex(
                name: "IX_Proposta_UsuarioFornecedorId",
                schema: "public",
                table: "Proposta",
                column: "UsuarioFornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_Proposta_UsuarioProdutorId",
                schema: "public",
                table: "Proposta",
                column: "UsuarioProdutorId");

            migrationBuilder.CreateIndex(
                name: "IX_Propriedade_EnderecoId",
                schema: "public",
                table: "Propriedade",
                column: "EnderecoId");

            migrationBuilder.CreateIndex(
                name: "IX_Propriedade_Nome",
                schema: "public",
                table: "Propriedade",
                column: "Nome");

            migrationBuilder.CreateIndex(
                name: "IX_Propriedade_ProdutorId",
                schema: "public",
                table: "Propriedade",
                column: "ProdutorId");

            migrationBuilder.CreateIndex(
                name: "IX_Propriedades_DataCriacao",
                schema: "public",
                table: "Propriedade",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_PropriedadeCultura_CulturaId",
                schema: "public",
                table: "PropriedadeCultura",
                column: "CulturaId");

            migrationBuilder.CreateIndex(
                name: "IX_PropriedadeCultura_PeriodoPlantio",
                schema: "public",
                table: "PropriedadeCultura",
                columns: new[] { "DataPlantio", "DataColheitaPrevista" });

            migrationBuilder.CreateIndex(
                name: "IX_PropriedadeCultura_PropriedadeId",
                schema: "public",
                table: "PropriedadeCultura",
                column: "PropriedadeId");

            migrationBuilder.CreateIndex(
                name: "IX_PropriedadeCultura_PropriedadeId_CulturaId",
                schema: "public",
                table: "PropriedadeCultura",
                columns: new[] { "PropriedadeId", "CulturaId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PropriedadeCultura_SafraId",
                schema: "public",
                table: "PropriedadeCultura",
                column: "SafraId");

            migrationBuilder.CreateIndex(
                name: "IX_PropriedadeCulturas_DataCriacao",
                schema: "public",
                table: "PropriedadeCultura",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_Safra_AnoColheita",
                schema: "public",
                table: "Safra",
                column: "AnoColheita");

            migrationBuilder.CreateIndex(
                name: "IX_Safra_Atual",
                schema: "public",
                table: "Safra",
                columns: new[] { "PlantioNome", "PlantioInicial", "PlantioFinal" },
                unique: true,
                filter: "PlantioNome = 'S1'");

            migrationBuilder.CreateIndex(
                name: "IX_Safra_PlantioFinal",
                schema: "public",
                table: "Safra",
                column: "PlantioFinal");

            migrationBuilder.CreateIndex(
                name: "IX_Safra_PlantioInicial",
                schema: "public",
                table: "Safra",
                column: "PlantioInicial");

            migrationBuilder.CreateIndex(
                name: "IX_Safras_DataCriacao",
                schema: "public",
                table: "Safra",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_Talhao_Geometria",
                schema: "public",
                table: "Talhao",
                column: "Geometria")
                .Annotation("Npgsql:IndexMethod", "gist");

            migrationBuilder.CreateIndex(
                name: "IX_Talhao_Localizacao",
                schema: "public",
                table: "Talhao",
                column: "Localizacao")
                .Annotation("Npgsql:IndexMethod", "gist");

            migrationBuilder.CreateIndex(
                name: "IX_Talhao_Nome",
                schema: "public",
                table: "Talhao",
                column: "Nome");

            migrationBuilder.CreateIndex(
                name: "IX_Talhao_PropriedadeId",
                schema: "public",
                table: "Talhao",
                column: "PropriedadeId");

            migrationBuilder.CreateIndex(
                name: "IX_Talhoes_DataCriacao",
                schema: "public",
                table: "Talhao",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedor_Ativo",
                schema: "public",
                table: "UsuarioFornecedor",
                column: "Ativo");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedor_DataCriacao",
                schema: "public",
                table: "UsuarioFornecedor",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedor_DataInicio",
                schema: "public",
                table: "UsuarioFornecedor",
                column: "DataInicio");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedor_FornecedorId",
                schema: "public",
                table: "UsuarioFornecedor",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedor_Role",
                schema: "public",
                table: "UsuarioFornecedor",
                column: "Role");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedor_Usuario_Fornecedor",
                schema: "public",
                table: "UsuarioFornecedor",
                columns: new[] { "UsuarioId", "FornecedorId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedor_UsuarioId",
                schema: "public",
                table: "UsuarioFornecedor",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedorTerritorio_Ativo",
                schema: "public",
                table: "UsuarioFornecedorTerritorio",
                column: "Ativo");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedorTerritorio_DataCriacao",
                schema: "public",
                table: "UsuarioFornecedorTerritorio",
                column: "DataCriacao");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedorTerritorio_Estados_GIN",
                schema: "public",
                table: "UsuarioFornecedorTerritorio",
                column: "Estados")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedorTerritorio_Municipios_GIN",
                schema: "public",
                table: "UsuarioFornecedorTerritorio",
                column: "Municipios",
                filter: "\"Municipios\" IS NOT NULL")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedorTerritorio_TerritorioPadrao",
                schema: "public",
                table: "UsuarioFornecedorTerritorio",
                column: "TerritorioPadrao");

            migrationBuilder.CreateIndex(
                name: "IX_UsuarioFornecedorTerritorio_UsuarioFornecedorId",
                schema: "public",
                table: "UsuarioFornecedorTerritorio",
                column: "UsuarioFornecedorId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "CatalogoItem",
                schema: "public");

            migrationBuilder.DropTable(
                name: "ComboCategoriaDesconto",
                schema: "public");

            migrationBuilder.DropTable(
                name: "ComboItem",
                schema: "public");

            migrationBuilder.DropTable(
                name: "ComboLocalRecebimento",
                schema: "public");

            migrationBuilder.DropTable(
                name: "cultura_forma_pagamento",
                schema: "public");

            migrationBuilder.DropTable(
                name: "PedidoItemTransporte",
                schema: "public");

            migrationBuilder.DropTable(
                name: "PontoDistribuicao",
                schema: "public");

            migrationBuilder.DropTable(
                name: "ProdutoCultura",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Proposta",
                schema: "public");

            migrationBuilder.DropTable(
                name: "PropriedadeCultura",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Safra",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Talhao",
                schema: "public");

            migrationBuilder.DropTable(
                name: "UsuarioFornecedorTerritorio",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Catalogo",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Combo",
                schema: "public");

            migrationBuilder.DropTable(
                name: "forma_pagamento",
                schema: "public");

            migrationBuilder.DropTable(
                name: "PedidoItem",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Propriedade",
                schema: "public");

            migrationBuilder.DropTable(
                name: "UsuarioFornecedor",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Pedido",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Produto",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Fornecedor",
                schema: "public");

            migrationBuilder.DropTable(
                name: "Categoria",
                schema: "public");
        }
    }
}

</20250923095748_AddRemainingTables.cs>
<20250923095748_AddRemainingTables.Designer.cs>
// <auto-generated />
using System;
using System.Text.Json;
using Agriis.Api.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agriis.Api.Migrations
{
    [DbContext(typeof(AgriisDbContext))]
    [Migration("20250923095748_AddRemainingTables")]
    partial class AddRemainingTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agriis.Autenticacao.Dominio.Entidades.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_expiracao");

                    b.Property<DateTime?>("DataRevogacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_revogacao");

                    b.Property<string>("EnderecoIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("endereco_ip");

                    b.Property<bool>("Revogado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("revogado");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("user_agent");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_RefreshTokens_DataCriacao");

                    b.HasIndex("DataExpiracao")
                        .HasDatabaseName("ix_refresh_tokens_data_expiracao");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_refresh_tokens_usuario_id");

                    b.HasIndex("UsuarioId", "Revogado", "DataExpiracao")
                        .HasDatabaseName("ix_refresh_tokens_usuario_valido");

                    b.ToTable("refresh_tokens", "public");
                });

            modelBuilder.Entity("Agriis.Catalogos.Dominio.Entidades.Catalogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Ativo");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoriaId");

                    b.Property<int>("CulturaId")
                        .HasColumnType("integer")
                        .HasColumnName("CulturaId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataInicio");

                    b.Property<string>("Moeda")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Moeda");

                    b.Property<int>("PontoDistribuicaoId")
                        .HasColumnType("integer")
                        .HasColumnName("PontoDistribuicaoId");

                    b.Property<int>("SafraId")
                        .HasColumnType("integer")
                        .HasColumnName("SafraId");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("IX_Catalogo_CategoriaId");

                    b.HasIndex("CulturaId")
                        .HasDatabaseName("IX_Catalogo_CulturaId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Catalogos_DataCriacao");

                    b.HasIndex("PontoDistribuicaoId")
                        .HasDatabaseName("IX_Catalogo_PontoDistribuicaoId");

                    b.HasIndex("SafraId")
                        .HasDatabaseName("IX_Catalogo_SafraId");

                    b.HasIndex("DataInicio", "DataFim", "Ativo")
                        .HasDatabaseName("IX_Catalogo_Vigencia");

                    b.HasIndex("SafraId", "PontoDistribuicaoId", "CulturaId", "CategoriaId")
                        .IsUnique()
                        .HasDatabaseName("IX_Catalogo_ChaveUnica");

                    b.ToTable("Catalogo", "public");
                });

            modelBuilder.Entity("Agriis.Catalogos.Dominio.Entidades.CatalogoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Ativo");

                    b.Property<int>("CatalogoId")
                        .HasColumnType("integer")
                        .HasColumnName("CatalogoId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<JsonDocument>("EstruturaPrecosJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("EstruturaPrecosJson");

                    b.Property<decimal?>("PrecoBase")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PrecoBase");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoId");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_CatalogoItem_Ativo");

                    b.HasIndex("CatalogoId")
                        .HasDatabaseName("IX_CatalogoItem_CatalogoId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_CatalogoItens_DataCriacao");

                    b.HasIndex("ProdutoId")
                        .HasDatabaseName("IX_CatalogoItem_ProdutoId");

                    b.HasIndex("CatalogoId", "ProdutoId")
                        .IsUnique()
                        .HasDatabaseName("IX_CatalogoItem_CatalogoProduto");

                    b.ToTable("CatalogoItem", "public");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataInicio");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Descricao");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("FornecedorId");

                    b.Property<decimal>("HectareMaximo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("HectareMaximo");

                    b.Property<decimal>("HectareMinimo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("HectareMinimo");

                    b.Property<int>("ModalidadePagamento")
                        .HasColumnType("integer")
                        .HasColumnName("ModalidadePagamento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<bool>("PermiteAlteracaoItem")
                        .HasColumnType("boolean")
                        .HasColumnName("PermiteAlteracaoItem");

                    b.Property<bool>("PermiteExclusaoItem")
                        .HasColumnType("boolean")
                        .HasColumnName("PermiteExclusaoItem");

                    b.Property<JsonDocument>("RestricoesMunicipios")
                        .HasColumnType("jsonb")
                        .HasColumnName("RestricoesMunicipios");

                    b.Property<int>("SafraId")
                        .HasColumnType("integer")
                        .HasColumnName("SafraId");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Combos_DataCriacao");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("IX_Combo_FornecedorId");

                    b.HasIndex("SafraId")
                        .HasDatabaseName("IX_Combo_SafraId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Combo_Status");

                    b.HasIndex("DataInicio", "DataFim")
                        .HasDatabaseName("IX_Combo_Periodo");

                    b.HasIndex("FornecedorId", "SafraId", "Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_Combo_FornecedorSafraNome");

                    b.ToTable("Combo", "public");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboCategoriaDesconto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoriaId");

                    b.Property<int>("ComboId")
                        .HasColumnType("integer")
                        .HasColumnName("ComboId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("DescontoPorHectare")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("DescontoPorHectare");

                    b.Property<decimal>("HectareMaximo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("HectareMaximo");

                    b.Property<decimal>("HectareMinimo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("HectareMinimo");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("PercentualDesconto");

                    b.Property<int>("TipoDesconto")
                        .HasColumnType("integer")
                        .HasColumnName("TipoDesconto");

                    b.Property<decimal>("ValorDescontoFixo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorDescontoFixo");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_ComboCategoriaDesconto_Ativo");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("IX_ComboCategoriaDesconto_CategoriaId");

                    b.HasIndex("ComboId")
                        .HasDatabaseName("IX_ComboCategoriaDesconto_ComboId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_ComboCategoriasDesconto_DataCriacao");

                    b.HasIndex("ComboId", "CategoriaId")
                        .IsUnique()
                        .HasDatabaseName("IX_ComboCategoriaDesconto_ComboCategoria");

                    b.ToTable("ComboCategoriaDesconto", "public");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboId")
                        .HasColumnType("integer")
                        .HasColumnName("ComboId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer")
                        .HasColumnName("Ordem");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("PercentualDesconto");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PrecoUnitario");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoId");

                    b.Property<bool>("ProdutoObrigatorio")
                        .HasColumnType("boolean")
                        .HasColumnName("ProdutoObrigatorio");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("ComboId")
                        .HasDatabaseName("IX_ComboItem_ComboId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_ComboItens_DataCriacao");

                    b.HasIndex("ProdutoId")
                        .HasDatabaseName("IX_ComboItem_ProdutoId");

                    b.HasIndex("ComboId", "Ordem")
                        .HasDatabaseName("IX_ComboItem_ComboOrdem");

                    b.ToTable("ComboItem", "public");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboLocalRecebimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboId")
                        .HasColumnType("integer")
                        .HasColumnName("ComboId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("LocalPadrao")
                        .HasColumnType("boolean")
                        .HasColumnName("LocalPadrao");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Observacoes");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("PercentualDesconto");

                    b.Property<int>("PontoDistribuicaoId")
                        .HasColumnType("integer")
                        .HasColumnName("PontoDistribuicaoId");

                    b.Property<decimal>("PrecoAdicional")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PrecoAdicional");

                    b.HasKey("Id");

                    b.HasIndex("ComboId")
                        .HasDatabaseName("IX_ComboLocalRecebimento_ComboId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_ComboLocaisRecebimento_DataCriacao");

                    b.HasIndex("PontoDistribuicaoId")
                        .HasDatabaseName("IX_ComboLocalRecebimento_PontoDistribuicaoId");

                    b.HasIndex("ComboId", "PontoDistribuicaoId")
                        .IsUnique()
                        .HasDatabaseName("IX_ComboLocalRecebimento_ComboPonto");

                    b.ToTable("ComboLocalRecebimento", "public");
                });

            modelBuilder.Entity("Agriis.Culturas.Dominio.Entidades.Cultura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_Cultura_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Culturas_DataCriacao");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_Cultura_Nome");

                    b.ToTable("Cultura", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complemento");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("logradouro");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("integer")
                        .HasColumnName("municipio_id");

                    b.Property<string>("Numero")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero");

                    b.HasKey("Id");

                    b.HasIndex("Bairro")
                        .HasDatabaseName("IX_enderecos_bairro");

                    b.HasIndex("Cep")
                        .HasDatabaseName("IX_enderecos_cep");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Enderecos_DataCriacao");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("IX_enderecos_estado_id");

                    b.HasIndex("Logradouro")
                        .HasDatabaseName("IX_enderecos_logradouro");

                    b.HasIndex("MunicipioId")
                        .HasDatabaseName("IX_enderecos_municipio_id");

                    b.HasIndex("Cep", "Logradouro", "Numero", "MunicipioId")
                        .HasDatabaseName("IX_enderecos_unique_address");

                    b.ToTable("enderecos", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoIbge")
                        .HasColumnType("integer")
                        .HasColumnName("codigo_ibge");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Regiao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("regiao");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.HasIndex("CodigoIbge")
                        .IsUnique()
                        .HasDatabaseName("IX_estados_codigo_ibge");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Estados_DataCriacao");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_estados_nome");

                    b.HasIndex("Regiao")
                        .HasDatabaseName("IX_estados_regiao");

                    b.HasIndex("Uf")
                        .IsUnique()
                        .HasDatabaseName("IX_estados_uf");

                    b.ToTable("estados", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CepPrincipal")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep_principal");

                    b.Property<int>("CodigoIbge")
                        .HasColumnType("integer")
                        .HasColumnName("codigo_ibge");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("CepPrincipal")
                        .HasDatabaseName("IX_municipios_cep_principal");

                    b.HasIndex("CodigoIbge")
                        .IsUnique()
                        .HasDatabaseName("IX_municipios_codigo_ibge");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Municipios_DataCriacao");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("IX_municipios_estado_id");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_municipios_nome");

                    b.ToTable("municipios", "public");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<JsonDocument>("DadosAdicionais")
                        .HasColumnType("jsonb")
                        .HasColumnName("DadosAdicionais");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Endereco")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Endereco");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("InscricaoEstadual");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("LogoUrl");

                    b.Property<int>("MoedaPadrao")
                        .HasColumnType("integer")
                        .HasColumnName("MoedaPadrao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<decimal?>("PedidoMinimo")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PedidoMinimo");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Telefone");

                    b.Property<string>("TokenLincros")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TokenLincros");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_Fornecedor_Ativo");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("IX_Fornecedor_Cnpj");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Fornecedor_DataCriacao");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Fornecedor_Email")
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.HasIndex("MoedaPadrao")
                        .HasDatabaseName("IX_Fornecedor_MoedaPadrao");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Fornecedor_Nome");

                    b.ToTable("Fornecedor", "public");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataInicio");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("FornecedorId");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("Role");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_UsuarioFornecedor_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuarioFornecedor_DataCriacao");

                    b.HasIndex("DataInicio")
                        .HasDatabaseName("IX_UsuarioFornecedor_DataInicio");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("IX_UsuarioFornecedor_FornecedorId");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_UsuarioFornecedor_Role");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_UsuarioFornecedor_UsuarioId");

                    b.HasIndex("UsuarioId", "FornecedorId")
                        .IsUnique()
                        .HasDatabaseName("IX_UsuarioFornecedor_Usuario_Fornecedor");

                    b.ToTable("UsuarioFornecedor", "public");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedorTerritorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<JsonDocument>("Estados")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("Estados");

                    b.Property<JsonDocument>("Municipios")
                        .HasColumnType("jsonb")
                        .HasColumnName("Municipios");

                    b.Property<bool>("TerritorioPadrao")
                        .HasColumnType("boolean")
                        .HasColumnName("TerritorioPadrao");

                    b.Property<int>("UsuarioFornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioFornecedorId");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_DataCriacao");

                    b.HasIndex("Estados")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_Estados_GIN");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Estados"), "gin");

                    b.HasIndex("Municipios")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_Municipios_GIN")
                        .HasFilter("\"Municipios\" IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Municipios"), "gin");

                    b.HasIndex("TerritorioPadrao")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_TerritorioPadrao");

                    b.HasIndex("UsuarioFornecedorId")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_UsuarioFornecedorId");

                    b.ToTable("UsuarioFornecedorTerritorio", "public");
                });

            modelBuilder.Entity("Agriis.Pagamentos.Dominio.Entidades.CulturaFormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<int>("CulturaId")
                        .HasColumnType("integer")
                        .HasColumnName("cultura_id");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FormaPagamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("forma_pagamento_id");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("fornecedor_id");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("ix_cultura_forma_pagamento_ativo");

                    b.HasIndex("CulturaId")
                        .HasDatabaseName("ix_cultura_forma_pagamento_cultura_id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_CulturaFormasPagamento_DataCriacao");

                    b.HasIndex("FormaPagamentoId")
                        .HasDatabaseName("ix_cultura_forma_pagamento_forma_pagamento_id");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("ix_cultura_forma_pagamento_fornecedor_id");

                    b.HasIndex("FornecedorId", "CulturaId", "FormaPagamentoId")
                        .IsUnique()
                        .HasDatabaseName("ix_cultura_forma_pagamento_unique");

                    b.ToTable("cultura_forma_pagamento", "public");
                });

            modelBuilder.Entity("Agriis.Pagamentos.Dominio.Entidades.FormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("descricao");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("ix_forma_pagamento_ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_FormasPagamento_DataCriacao");

                    b.HasIndex("Descricao")
                        .HasDatabaseName("ix_forma_pagamento_descricao");

                    b.ToTable("forma_pagamento", "public");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataLimiteInteracao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataLimiteInteracao");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("FornecedorId");

                    b.Property<bool>("NegociarPedido")
                        .HasColumnType("boolean")
                        .HasColumnName("NegociarPedido");

                    b.Property<bool>("PermiteContato")
                        .HasColumnType("boolean")
                        .HasColumnName("PermiteContato");

                    b.Property<int>("ProdutorId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutorId");

                    b.Property<int>("QuantidadeItens")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeItens");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<int>("StatusCarrinho")
                        .HasColumnType("integer")
                        .HasColumnName("StatusCarrinho");

                    b.Property<JsonDocument>("Totais")
                        .HasColumnType("jsonb")
                        .HasColumnName("Totais");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Pedidos_DataCriacao");

                    b.HasIndex("DataLimiteInteracao")
                        .HasDatabaseName("IX_Pedido_DataLimiteInteracao");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("IX_Pedido_FornecedorId");

                    b.HasIndex("ProdutorId")
                        .HasDatabaseName("IX_Pedido_ProdutorId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Pedido_Status");

                    b.HasIndex("ProdutorId", "FornecedorId")
                        .HasDatabaseName("IX_Pedido_ProdutorId_FornecedorId");

                    b.ToTable("Pedido", "public");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<JsonDocument>("DadosAdicionais")
                        .HasColumnType("jsonb")
                        .HasColumnName("DadosAdicionais");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Observacoes");

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer")
                        .HasColumnName("PedidoId");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("PercentualDesconto");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PrecoUnitario");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoId");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Quantidade");

                    b.Property<decimal>("ValorDesconto")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorDesconto");

                    b.Property<decimal>("ValorFinal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorFinal");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorTotal");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_PedidoItens_DataCriacao");

                    b.HasIndex("PedidoId")
                        .HasDatabaseName("IX_PedidoItem_PedidoId");

                    b.HasIndex("ProdutoId")
                        .HasDatabaseName("IX_PedidoItem_ProdutoId");

                    b.HasIndex("ValorFinal")
                        .HasDatabaseName("IX_PedidoItem_ValorFinal");

                    b.ToTable("PedidoItem", "public");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItemTransporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAgendamento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAgendamento");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnderecoDestino")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("EnderecoDestino");

                    b.Property<string>("EnderecoOrigem")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("EnderecoOrigem");

                    b.Property<JsonDocument>("InformacoesTransporte")
                        .HasColumnType("jsonb")
                        .HasColumnName("InformacoesTransporte");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Observacoes");

                    b.Property<int>("PedidoItemId")
                        .HasColumnType("integer")
                        .HasColumnName("PedidoItemId");

                    b.Property<int?>("PedidoItemId1")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PesoTotal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PesoTotal");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Quantidade");

                    b.Property<decimal>("ValorFrete")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorFrete");

                    b.Property<decimal?>("VolumeTotal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("VolumeTotal");

                    b.HasKey("Id");

                    b.HasIndex("DataAgendamento")
                        .HasDatabaseName("IX_PedidoItemTransporte_DataAgendamento");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_PedidoItensTransporte_DataCriacao");

                    b.HasIndex("PedidoItemId")
                        .HasDatabaseName("IX_PedidoItemTransporte_PedidoItemId");

                    b.HasIndex("PedidoItemId1");

                    b.HasIndex("ValorFrete")
                        .HasDatabaseName("IX_PedidoItemTransporte_ValorFrete");

                    b.ToTable("PedidoItemTransporte", "public");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.Proposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcaoComprador")
                        .HasColumnType("integer")
                        .HasColumnName("AcaoComprador");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Observacao")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Observacao");

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer")
                        .HasColumnName("PedidoId");

                    b.Property<int?>("UsuarioFornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioFornecedorId");

                    b.Property<int?>("UsuarioProdutorId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioProdutorId");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Proposta_DataCriacao");

                    b.HasIndex("PedidoId")
                        .HasDatabaseName("IX_Proposta_PedidoId");

                    b.HasIndex("UsuarioFornecedorId")
                        .HasDatabaseName("IX_Proposta_UsuarioFornecedorId");

                    b.HasIndex("UsuarioProdutorId")
                        .HasDatabaseName("IX_Proposta_UsuarioProdutorId");

                    b.ToTable("Proposta", "public");
                });

            modelBuilder.Entity("Agriis.PontosDistribuicao.Dominio.Entidades.PontoDistribuicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("CapacidadeMaxima")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<JsonDocument>("CoberturaTerritorios")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .UseCollation("pt_BR");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("integer");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("HorarioFuncionamento")
                        .HasColumnType("jsonb");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .UseCollation("pt_BR");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .UseCollation("pt_BR");

                    b.Property<double?>("RaioCobertura")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("UnidadeCapacidade")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_PontoDistribuicao_Ativo");

                    b.HasIndex("CoberturaTerritorios")
                        .HasDatabaseName("IX_PontoDistribuicao_CoberturaTerritorios");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CoberturaTerritorios"), "gin");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_PontosDistribuicao_DataCriacao");

                    b.HasIndex("EnderecoId")
                        .HasDatabaseName("IX_PontoDistribuicao_EnderecoId");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("IX_PontoDistribuicao_FornecedorId");

                    b.HasIndex("FornecedorId", "Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_PontoDistribuicao_FornecedorId_Nome");

                    b.ToTable("PontoDistribuicao", "public");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.Produtor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AreaPlantio")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("AreaPlantio");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("Cpf");

                    b.Property<string>("Culturas")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("Culturas");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataAutorizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAutorizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("InscricaoEstadual");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<JsonDocument>("RetornosApiCheckProdutor")
                        .HasColumnType("jsonb")
                        .HasColumnName("RetornosApiCheckProdutor");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<string>("TipoAtividade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TipoAtividade");

                    b.Property<int?>("UsuarioAutorizacaoId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioAutorizacaoId");

                    b.HasKey("Id");

                    b.HasIndex("AreaPlantio")
                        .HasDatabaseName("IX_Produtor_AreaPlantio");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("IX_Produtor_Cnpj")
                        .HasFilter("\"Cnpj\" IS NOT NULL");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("IX_Produtor_Cpf")
                        .HasFilter("\"Cpf\" IS NOT NULL");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Produtor_DataCriacao");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Produtor_Status");

                    b.HasIndex("UsuarioAutorizacaoId");

                    b.ToTable("Produtor", "public");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.UsuarioProdutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("EhProprietario")
                        .HasColumnType("boolean")
                        .HasColumnName("EhProprietario");

                    b.Property<int>("ProdutorId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutorId");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_UsuarioProdutor_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuariosProdutores_DataCriacao");

                    b.HasIndex("EhProprietario")
                        .HasDatabaseName("IX_UsuarioProdutor_EhProprietario");

                    b.HasIndex("ProdutorId")
                        .HasDatabaseName("IX_UsuarioProdutor_ProdutorId");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_UsuarioProdutor_UsuarioId");

                    b.HasIndex("UsuarioId", "ProdutorId")
                        .IsUnique()
                        .HasDatabaseName("IX_UsuarioProdutor_UsuarioId_ProdutorId");

                    b.ToTable("UsuarioProdutor", "public");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<int?>("CategoriaPaiId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Categoria_DataCriacao");

                    b.ToTable("Categoria", "public");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("DadosAdicionais")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<string>("Marca")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObservacoesRestricao")
                        .HasColumnType("text");

                    b.Property<int?>("ProdutoPaiId")
                        .HasColumnType("integer");

                    b.Property<bool>("ProdutoRestrito")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<int>("TipoCalculoPeso")
                        .HasColumnType("integer");

                    b.Property<int>("Unidade")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Produto_DataCriacao");

                    b.HasIndex("ProdutoPaiId");

                    b.ToTable("Produto", "public");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.ProdutoCultura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<int>("CulturaId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_ProdutoCultura_DataCriacao");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoCultura", "public");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.Propriedade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AreaTotal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("AreaTotal");

                    b.Property<JsonDocument>("DadosAdicionais")
                        .HasColumnType("jsonb")
                        .HasColumnName("DadosAdicionais");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EnderecoId")
                        .HasColumnType("integer")
                        .HasColumnName("EnderecoId");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("InscricaoEstadual");

                    b.Property<string>("Nirf")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nirf");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<int>("ProdutorId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutorId");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Propriedades_DataCriacao");

                    b.HasIndex("EnderecoId")
                        .HasDatabaseName("IX_Propriedade_EnderecoId");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Propriedade_Nome");

                    b.HasIndex("ProdutorId")
                        .HasDatabaseName("IX_Propriedade_ProdutorId");

                    b.ToTable("Propriedade", "public");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.PropriedadeCultura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Area");

                    b.Property<int>("CulturaId")
                        .HasColumnType("integer")
                        .HasColumnName("CulturaId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime?>("DataColheitaPrevista")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataColheitaPrevista");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DataPlantio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataPlantio");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Observacoes");

                    b.Property<int>("PropriedadeId")
                        .HasColumnType("integer")
                        .HasColumnName("PropriedadeId");

                    b.Property<int?>("SafraId")
                        .HasColumnType("integer")
                        .HasColumnName("SafraId");

                    b.HasKey("Id");

                    b.HasIndex("CulturaId")
                        .HasDatabaseName("IX_PropriedadeCultura_CulturaId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_PropriedadeCulturas_DataCriacao");

                    b.HasIndex("PropriedadeId")
                        .HasDatabaseName("IX_PropriedadeCultura_PropriedadeId");

                    b.HasIndex("SafraId")
                        .HasDatabaseName("IX_PropriedadeCultura_SafraId");

                    b.HasIndex("DataPlantio", "DataColheitaPrevista")
                        .HasDatabaseName("IX_PropriedadeCultura_PeriodoPlantio");

                    b.HasIndex("PropriedadeId", "CulturaId")
                        .IsUnique()
                        .HasDatabaseName("IX_PropriedadeCultura_PropriedadeId_CulturaId");

                    b.ToTable("PropriedadeCultura", "public");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.Talhao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Area");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Descricao");

                    b.Property<Polygon>("Geometria")
                        .HasColumnType("geography(POLYGON, 4326)")
                        .HasColumnName("Geometria");

                    b.Property<Point>("Localizacao")
                        .HasColumnType("geography(POINT, 4326)")
                        .HasColumnName("Localizacao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<int>("PropriedadeId")
                        .HasColumnType("integer")
                        .HasColumnName("PropriedadeId");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Talhoes_DataCriacao");

                    b.HasIndex("Geometria")
                        .HasDatabaseName("IX_Talhao_Geometria");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometria"), "gist");

                    b.HasIndex("Localizacao")
                        .HasDatabaseName("IX_Talhao_Localizacao");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Localizacao"), "gist");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Talhao_Nome");

                    b.HasIndex("PropriedadeId")
                        .HasDatabaseName("IX_Talhao_PropriedadeId");

                    b.ToTable("Talhao", "public");
                });

            modelBuilder.Entity("Agriis.Safras.Dominio.Entidades.Safra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnoColheita")
                        .HasColumnType("integer")
                        .HasColumnName("AnoColheita");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("Descricao");

                    b.Property<DateTime>("PlantioFinal")
                        .HasColumnType("date")
                        .HasColumnName("PlantioFinal");

                    b.Property<DateTime>("PlantioInicial")
                        .HasColumnType("date")
                        .HasColumnName("PlantioInicial");

                    b.Property<string>("PlantioNome")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("PlantioNome");

                    b.HasKey("Id");

                    b.HasIndex("AnoColheita")
                        .HasDatabaseName("IX_Safra_AnoColheita");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Safras_DataCriacao");

                    b.HasIndex("PlantioFinal")
                        .HasDatabaseName("IX_Safra_PlantioFinal");

                    b.HasIndex("PlantioInicial")
                        .HasDatabaseName("IX_Safra_PlantioInicial");

                    b.HasIndex("PlantioNome", "PlantioInicial", "PlantioFinal")
                        .IsUnique()
                        .HasDatabaseName("IX_Safra_Atual")
                        .HasFilter("PlantioNome = 'S1'");

                    b.ToTable("Safra", "public");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("celular");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("SenhaHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("senha_hash");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultimo_login");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("ix_usuarios_ativo");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_cpf")
                        .HasFilter("cpf IS NOT NULL");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Usuarios_DataCriacao");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_email");

                    b.ToTable("usuarios", "public");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.UsuarioRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtribuicao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atribuicao");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuarioRoles_DataCriacao");

                    b.HasIndex("Role")
                        .HasDatabaseName("ix_usuario_roles_role");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_usuario_roles_usuario_id");

                    b.HasIndex("UsuarioId", "Role")
                        .IsUnique()
                        .HasDatabaseName("ix_usuario_roles_usuario_role_unique");

                    b.ToTable("usuario_roles", "public");
                });

            modelBuilder.Entity("Agriis.Catalogos.Dominio.Entidades.CatalogoItem", b =>
                {
                    b.HasOne("Agriis.Catalogos.Dominio.Entidades.Catalogo", "Catalogo")
                        .WithMany("Itens")
                        .HasForeignKey("CatalogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogo");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboCategoriaDesconto", b =>
                {
                    b.HasOne("Agriis.Combos.Dominio.Entidades.Combo", "Combo")
                        .WithMany("CategoriasDesconto")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboItem", b =>
                {
                    b.HasOne("Agriis.Combos.Dominio.Entidades.Combo", "Combo")
                        .WithMany("Itens")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboLocalRecebimento", b =>
                {
                    b.HasOne("Agriis.Combos.Dominio.Entidades.Combo", "Combo")
                        .WithMany("LocaisRecebimento")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Endereco", b =>
                {
                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Estado", "Estado")
                        .WithMany("Enderecos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Municipio", "Municipio")
                        .WithMany("Enderecos")
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Municipio", b =>
                {
                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Estado", "Estado")
                        .WithMany("Municipios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedor", b =>
                {
                    b.HasOne("Agriis.Fornecedores.Dominio.Entidades.Fornecedor", "Fornecedor")
                        .WithMany("UsuariosFornecedores")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedorTerritorio", b =>
                {
                    b.HasOne("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedor", "UsuarioFornecedor")
                        .WithMany("Territorios")
                        .HasForeignKey("UsuarioFornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioFornecedor");
                });

            modelBuilder.Entity("Agriis.Pagamentos.Dominio.Entidades.CulturaFormaPagamento", b =>
                {
                    b.HasOne("Agriis.Pagamentos.Dominio.Entidades.FormaPagamento", "FormaPagamento")
                        .WithMany("CulturaFormasPagamento")
                        .HasForeignKey("FormaPagamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormaPagamento");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItem", b =>
                {
                    b.HasOne("Agriis.Pedidos.Dominio.Entidades.Pedido", "Pedido")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItemTransporte", b =>
                {
                    b.HasOne("Agriis.Pedidos.Dominio.Entidades.PedidoItem", "PedidoItem")
                        .WithMany("ItensTransporte")
                        .HasForeignKey("PedidoItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Pedidos.Dominio.Entidades.PedidoItem", null)
                        .WithMany("Transportes")
                        .HasForeignKey("PedidoItemId1");

                    b.Navigation("PedidoItem");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.Proposta", b =>
                {
                    b.HasOne("Agriis.Pedidos.Dominio.Entidades.Pedido", "Pedido")
                        .WithMany("Propostas")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Agriis.PontosDistribuicao.Dominio.Entidades.PontoDistribuicao", b =>
                {
                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.Produtor", b =>
                {
                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "UsuarioAutorizacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAutorizacaoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UsuarioAutorizacao");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.UsuarioProdutor", b =>
                {
                    b.HasOne("Agriis.Produtores.Dominio.Entidades.Produtor", "Produtor")
                        .WithMany("UsuariosProdutores")
                        .HasForeignKey("ProdutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produtor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Categoria", b =>
                {
                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Categoria", "CategoriaPai")
                        .WithMany("SubCategorias")
                        .HasForeignKey("CategoriaPaiId");

                    b.Navigation("CategoriaPai");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Produto", b =>
                {
                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Produto", "ProdutoPai")
                        .WithMany("ProdutosFilhos")
                        .HasForeignKey("ProdutoPaiId");

                    b.Navigation("Categoria");

                    b.Navigation("ProdutoPai");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.ProdutoCultura", b =>
                {
                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Produto", "Produto")
                        .WithMany("ProdutosCulturas")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.PropriedadeCultura", b =>
                {
                    b.HasOne("Agriis.Propriedades.Dominio.Entidades.Propriedade", "Propriedade")
                        .WithMany("PropriedadeCulturas")
                        .HasForeignKey("PropriedadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propriedade");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.Talhao", b =>
                {
                    b.HasOne("Agriis.Propriedades.Dominio.Entidades.Propriedade", "Propriedade")
                        .WithMany("Talhoes")
                        .HasForeignKey("PropriedadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propriedade");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.UsuarioRole", b =>
                {
                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agriis.Catalogos.Dominio.Entidades.Catalogo", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.Combo", b =>
                {
                    b.Navigation("CategoriasDesconto");

                    b.Navigation("Itens");

                    b.Navigation("LocaisRecebimento");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Estado", b =>
                {
                    b.Navigation("Enderecos");

                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Municipio", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.Fornecedor", b =>
                {
                    b.Navigation("UsuariosFornecedores");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedor", b =>
                {
                    b.Navigation("Territorios");
                });

            modelBuilder.Entity("Agriis.Pagamentos.Dominio.Entidades.FormaPagamento", b =>
                {
                    b.Navigation("CulturaFormasPagamento");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.Pedido", b =>
                {
                    b.Navigation("Itens");

                    b.Navigation("Propostas");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItem", b =>
                {
                    b.Navigation("ItensTransporte");

                    b.Navigation("Transportes");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.Produtor", b =>
                {
                    b.Navigation("UsuariosProdutores");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Categoria", b =>
                {
                    b.Navigation("Produtos");

                    b.Navigation("SubCategorias");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Produto", b =>
                {
                    b.Navigation("ProdutosCulturas");

                    b.Navigation("ProdutosFilhos");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.Propriedade", b =>
                {
                    b.Navigation("PropriedadeCulturas");

                    b.Navigation("Talhoes");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("UsuarioRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

</20250923095748_AddRemainingTables.Designer.cs>
<AgriisDbContextModelSnapshot.cs>
// <auto-generated />
using System;
using System.Text.Json;
using Agriis.Api.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agriis.Api.Migrations
{
    [DbContext(typeof(AgriisDbContext))]
    partial class AgriisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agriis.Autenticacao.Dominio.Entidades.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_expiracao");

                    b.Property<DateTime?>("DataRevogacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_revogacao");

                    b.Property<string>("EnderecoIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("endereco_ip");

                    b.Property<bool>("Revogado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("revogado");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("user_agent");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_RefreshTokens_DataCriacao");

                    b.HasIndex("DataExpiracao")
                        .HasDatabaseName("ix_refresh_tokens_data_expiracao");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_refresh_tokens_usuario_id");

                    b.HasIndex("UsuarioId", "Revogado", "DataExpiracao")
                        .HasDatabaseName("ix_refresh_tokens_usuario_valido");

                    b.ToTable("refresh_tokens", "public");
                });

            modelBuilder.Entity("Agriis.Catalogos.Dominio.Entidades.Catalogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Ativo");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoriaId");

                    b.Property<int>("CulturaId")
                        .HasColumnType("integer")
                        .HasColumnName("CulturaId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataInicio");

                    b.Property<string>("Moeda")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Moeda");

                    b.Property<int>("PontoDistribuicaoId")
                        .HasColumnType("integer")
                        .HasColumnName("PontoDistribuicaoId");

                    b.Property<int>("SafraId")
                        .HasColumnType("integer")
                        .HasColumnName("SafraId");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("IX_Catalogo_CategoriaId");

                    b.HasIndex("CulturaId")
                        .HasDatabaseName("IX_Catalogo_CulturaId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Catalogos_DataCriacao");

                    b.HasIndex("PontoDistribuicaoId")
                        .HasDatabaseName("IX_Catalogo_PontoDistribuicaoId");

                    b.HasIndex("SafraId")
                        .HasDatabaseName("IX_Catalogo_SafraId");

                    b.HasIndex("DataInicio", "DataFim", "Ativo")
                        .HasDatabaseName("IX_Catalogo_Vigencia");

                    b.HasIndex("SafraId", "PontoDistribuicaoId", "CulturaId", "CategoriaId")
                        .IsUnique()
                        .HasDatabaseName("IX_Catalogo_ChaveUnica");

                    b.ToTable("Catalogo", "public");
                });

            modelBuilder.Entity("Agriis.Catalogos.Dominio.Entidades.CatalogoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Ativo");

                    b.Property<int>("CatalogoId")
                        .HasColumnType("integer")
                        .HasColumnName("CatalogoId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<JsonDocument>("EstruturaPrecosJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("EstruturaPrecosJson");

                    b.Property<decimal?>("PrecoBase")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PrecoBase");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoId");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_CatalogoItem_Ativo");

                    b.HasIndex("CatalogoId")
                        .HasDatabaseName("IX_CatalogoItem_CatalogoId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_CatalogoItens_DataCriacao");

                    b.HasIndex("ProdutoId")
                        .HasDatabaseName("IX_CatalogoItem_ProdutoId");

                    b.HasIndex("CatalogoId", "ProdutoId")
                        .IsUnique()
                        .HasDatabaseName("IX_CatalogoItem_CatalogoProduto");

                    b.ToTable("CatalogoItem", "public");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataInicio");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Descricao");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("FornecedorId");

                    b.Property<decimal>("HectareMaximo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("HectareMaximo");

                    b.Property<decimal>("HectareMinimo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("HectareMinimo");

                    b.Property<int>("ModalidadePagamento")
                        .HasColumnType("integer")
                        .HasColumnName("ModalidadePagamento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<bool>("PermiteAlteracaoItem")
                        .HasColumnType("boolean")
                        .HasColumnName("PermiteAlteracaoItem");

                    b.Property<bool>("PermiteExclusaoItem")
                        .HasColumnType("boolean")
                        .HasColumnName("PermiteExclusaoItem");

                    b.Property<JsonDocument>("RestricoesMunicipios")
                        .HasColumnType("jsonb")
                        .HasColumnName("RestricoesMunicipios");

                    b.Property<int>("SafraId")
                        .HasColumnType("integer")
                        .HasColumnName("SafraId");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Combos_DataCriacao");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("IX_Combo_FornecedorId");

                    b.HasIndex("SafraId")
                        .HasDatabaseName("IX_Combo_SafraId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Combo_Status");

                    b.HasIndex("DataInicio", "DataFim")
                        .HasDatabaseName("IX_Combo_Periodo");

                    b.HasIndex("FornecedorId", "SafraId", "Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_Combo_FornecedorSafraNome");

                    b.ToTable("Combo", "public");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboCategoriaDesconto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoriaId");

                    b.Property<int>("ComboId")
                        .HasColumnType("integer")
                        .HasColumnName("ComboId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("DescontoPorHectare")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("DescontoPorHectare");

                    b.Property<decimal>("HectareMaximo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("HectareMaximo");

                    b.Property<decimal>("HectareMinimo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("HectareMinimo");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("PercentualDesconto");

                    b.Property<int>("TipoDesconto")
                        .HasColumnType("integer")
                        .HasColumnName("TipoDesconto");

                    b.Property<decimal>("ValorDescontoFixo")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorDescontoFixo");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_ComboCategoriaDesconto_Ativo");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("IX_ComboCategoriaDesconto_CategoriaId");

                    b.HasIndex("ComboId")
                        .HasDatabaseName("IX_ComboCategoriaDesconto_ComboId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_ComboCategoriasDesconto_DataCriacao");

                    b.HasIndex("ComboId", "CategoriaId")
                        .IsUnique()
                        .HasDatabaseName("IX_ComboCategoriaDesconto_ComboCategoria");

                    b.ToTable("ComboCategoriaDesconto", "public");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboId")
                        .HasColumnType("integer")
                        .HasColumnName("ComboId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer")
                        .HasColumnName("Ordem");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("PercentualDesconto");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PrecoUnitario");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoId");

                    b.Property<bool>("ProdutoObrigatorio")
                        .HasColumnType("boolean")
                        .HasColumnName("ProdutoObrigatorio");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("ComboId")
                        .HasDatabaseName("IX_ComboItem_ComboId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_ComboItens_DataCriacao");

                    b.HasIndex("ProdutoId")
                        .HasDatabaseName("IX_ComboItem_ProdutoId");

                    b.HasIndex("ComboId", "Ordem")
                        .HasDatabaseName("IX_ComboItem_ComboOrdem");

                    b.ToTable("ComboItem", "public");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboLocalRecebimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboId")
                        .HasColumnType("integer")
                        .HasColumnName("ComboId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("LocalPadrao")
                        .HasColumnType("boolean")
                        .HasColumnName("LocalPadrao");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Observacoes");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("PercentualDesconto");

                    b.Property<int>("PontoDistribuicaoId")
                        .HasColumnType("integer")
                        .HasColumnName("PontoDistribuicaoId");

                    b.Property<decimal>("PrecoAdicional")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PrecoAdicional");

                    b.HasKey("Id");

                    b.HasIndex("ComboId")
                        .HasDatabaseName("IX_ComboLocalRecebimento_ComboId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_ComboLocaisRecebimento_DataCriacao");

                    b.HasIndex("PontoDistribuicaoId")
                        .HasDatabaseName("IX_ComboLocalRecebimento_PontoDistribuicaoId");

                    b.HasIndex("ComboId", "PontoDistribuicaoId")
                        .IsUnique()
                        .HasDatabaseName("IX_ComboLocalRecebimento_ComboPonto");

                    b.ToTable("ComboLocalRecebimento", "public");
                });

            modelBuilder.Entity("Agriis.Culturas.Dominio.Entidades.Cultura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_Cultura_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Culturas_DataCriacao");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_Cultura_Nome");

                    b.ToTable("Cultura", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complemento");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("logradouro");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("integer")
                        .HasColumnName("municipio_id");

                    b.Property<string>("Numero")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero");

                    b.HasKey("Id");

                    b.HasIndex("Bairro")
                        .HasDatabaseName("IX_enderecos_bairro");

                    b.HasIndex("Cep")
                        .HasDatabaseName("IX_enderecos_cep");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Enderecos_DataCriacao");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("IX_enderecos_estado_id");

                    b.HasIndex("Logradouro")
                        .HasDatabaseName("IX_enderecos_logradouro");

                    b.HasIndex("MunicipioId")
                        .HasDatabaseName("IX_enderecos_municipio_id");

                    b.HasIndex("Cep", "Logradouro", "Numero", "MunicipioId")
                        .HasDatabaseName("IX_enderecos_unique_address");

                    b.ToTable("enderecos", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoIbge")
                        .HasColumnType("integer")
                        .HasColumnName("codigo_ibge");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Regiao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("regiao");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.HasIndex("CodigoIbge")
                        .IsUnique()
                        .HasDatabaseName("IX_estados_codigo_ibge");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Estados_DataCriacao");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_estados_nome");

                    b.HasIndex("Regiao")
                        .HasDatabaseName("IX_estados_regiao");

                    b.HasIndex("Uf")
                        .IsUnique()
                        .HasDatabaseName("IX_estados_uf");

                    b.ToTable("estados", "public");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CepPrincipal")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep_principal");

                    b.Property<int>("CodigoIbge")
                        .HasColumnType("integer")
                        .HasColumnName("codigo_ibge");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("CepPrincipal")
                        .HasDatabaseName("IX_municipios_cep_principal");

                    b.HasIndex("CodigoIbge")
                        .IsUnique()
                        .HasDatabaseName("IX_municipios_codigo_ibge");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Municipios_DataCriacao");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("IX_municipios_estado_id");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_municipios_nome");

                    b.ToTable("municipios", "public");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<JsonDocument>("DadosAdicionais")
                        .HasColumnType("jsonb")
                        .HasColumnName("DadosAdicionais");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Endereco")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Endereco");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("InscricaoEstadual");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("LogoUrl");

                    b.Property<int>("MoedaPadrao")
                        .HasColumnType("integer")
                        .HasColumnName("MoedaPadrao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<decimal?>("PedidoMinimo")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PedidoMinimo");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Telefone");

                    b.Property<string>("TokenLincros")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TokenLincros");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_Fornecedor_Ativo");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("IX_Fornecedor_Cnpj");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Fornecedor_DataCriacao");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Fornecedor_Email")
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.HasIndex("MoedaPadrao")
                        .HasDatabaseName("IX_Fornecedor_MoedaPadrao");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Fornecedor_Nome");

                    b.ToTable("Fornecedor", "public");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataInicio");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("FornecedorId");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("Role");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_UsuarioFornecedor_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuarioFornecedor_DataCriacao");

                    b.HasIndex("DataInicio")
                        .HasDatabaseName("IX_UsuarioFornecedor_DataInicio");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("IX_UsuarioFornecedor_FornecedorId");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_UsuarioFornecedor_Role");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_UsuarioFornecedor_UsuarioId");

                    b.HasIndex("UsuarioId", "FornecedorId")
                        .IsUnique()
                        .HasDatabaseName("IX_UsuarioFornecedor_Usuario_Fornecedor");

                    b.ToTable("UsuarioFornecedor", "public");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedorTerritorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<JsonDocument>("Estados")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("Estados");

                    b.Property<JsonDocument>("Municipios")
                        .HasColumnType("jsonb")
                        .HasColumnName("Municipios");

                    b.Property<bool>("TerritorioPadrao")
                        .HasColumnType("boolean")
                        .HasColumnName("TerritorioPadrao");

                    b.Property<int>("UsuarioFornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioFornecedorId");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_DataCriacao");

                    b.HasIndex("Estados")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_Estados_GIN");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Estados"), "gin");

                    b.HasIndex("Municipios")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_Municipios_GIN")
                        .HasFilter("\"Municipios\" IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Municipios"), "gin");

                    b.HasIndex("TerritorioPadrao")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_TerritorioPadrao");

                    b.HasIndex("UsuarioFornecedorId")
                        .HasDatabaseName("IX_UsuarioFornecedorTerritorio_UsuarioFornecedorId");

                    b.ToTable("UsuarioFornecedorTerritorio", "public");
                });

            modelBuilder.Entity("Agriis.Pagamentos.Dominio.Entidades.CulturaFormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<int>("CulturaId")
                        .HasColumnType("integer")
                        .HasColumnName("cultura_id");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FormaPagamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("forma_pagamento_id");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("fornecedor_id");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("ix_cultura_forma_pagamento_ativo");

                    b.HasIndex("CulturaId")
                        .HasDatabaseName("ix_cultura_forma_pagamento_cultura_id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_CulturaFormasPagamento_DataCriacao");

                    b.HasIndex("FormaPagamentoId")
                        .HasDatabaseName("ix_cultura_forma_pagamento_forma_pagamento_id");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("ix_cultura_forma_pagamento_fornecedor_id");

                    b.HasIndex("FornecedorId", "CulturaId", "FormaPagamentoId")
                        .IsUnique()
                        .HasDatabaseName("ix_cultura_forma_pagamento_unique");

                    b.ToTable("cultura_forma_pagamento", "public");
                });

            modelBuilder.Entity("Agriis.Pagamentos.Dominio.Entidades.FormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("descricao");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("ix_forma_pagamento_ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_FormasPagamento_DataCriacao");

                    b.HasIndex("Descricao")
                        .HasDatabaseName("ix_forma_pagamento_descricao");

                    b.ToTable("forma_pagamento", "public");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataLimiteInteracao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataLimiteInteracao");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("FornecedorId");

                    b.Property<bool>("NegociarPedido")
                        .HasColumnType("boolean")
                        .HasColumnName("NegociarPedido");

                    b.Property<bool>("PermiteContato")
                        .HasColumnType("boolean")
                        .HasColumnName("PermiteContato");

                    b.Property<int>("ProdutorId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutorId");

                    b.Property<int>("QuantidadeItens")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeItens");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<int>("StatusCarrinho")
                        .HasColumnType("integer")
                        .HasColumnName("StatusCarrinho");

                    b.Property<JsonDocument>("Totais")
                        .HasColumnType("jsonb")
                        .HasColumnName("Totais");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Pedidos_DataCriacao");

                    b.HasIndex("DataLimiteInteracao")
                        .HasDatabaseName("IX_Pedido_DataLimiteInteracao");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("IX_Pedido_FornecedorId");

                    b.HasIndex("ProdutorId")
                        .HasDatabaseName("IX_Pedido_ProdutorId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Pedido_Status");

                    b.HasIndex("ProdutorId", "FornecedorId")
                        .HasDatabaseName("IX_Pedido_ProdutorId_FornecedorId");

                    b.ToTable("Pedido", "public");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<JsonDocument>("DadosAdicionais")
                        .HasColumnType("jsonb")
                        .HasColumnName("DadosAdicionais");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Observacoes");

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer")
                        .HasColumnName("PedidoId");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("PercentualDesconto");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PrecoUnitario");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoId");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Quantidade");

                    b.Property<decimal>("ValorDesconto")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorDesconto");

                    b.Property<decimal>("ValorFinal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorFinal");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorTotal");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_PedidoItens_DataCriacao");

                    b.HasIndex("PedidoId")
                        .HasDatabaseName("IX_PedidoItem_PedidoId");

                    b.HasIndex("ProdutoId")
                        .HasDatabaseName("IX_PedidoItem_ProdutoId");

                    b.HasIndex("ValorFinal")
                        .HasDatabaseName("IX_PedidoItem_ValorFinal");

                    b.ToTable("PedidoItem", "public");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItemTransporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAgendamento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAgendamento");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnderecoDestino")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("EnderecoDestino");

                    b.Property<string>("EnderecoOrigem")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("EnderecoOrigem");

                    b.Property<JsonDocument>("InformacoesTransporte")
                        .HasColumnType("jsonb")
                        .HasColumnName("InformacoesTransporte");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Observacoes");

                    b.Property<int>("PedidoItemId")
                        .HasColumnType("integer")
                        .HasColumnName("PedidoItemId");

                    b.Property<int?>("PedidoItemId1")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PesoTotal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PesoTotal");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Quantidade");

                    b.Property<decimal>("ValorFrete")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("ValorFrete");

                    b.Property<decimal?>("VolumeTotal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("VolumeTotal");

                    b.HasKey("Id");

                    b.HasIndex("DataAgendamento")
                        .HasDatabaseName("IX_PedidoItemTransporte_DataAgendamento");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_PedidoItensTransporte_DataCriacao");

                    b.HasIndex("PedidoItemId")
                        .HasDatabaseName("IX_PedidoItemTransporte_PedidoItemId");

                    b.HasIndex("PedidoItemId1");

                    b.HasIndex("ValorFrete")
                        .HasDatabaseName("IX_PedidoItemTransporte_ValorFrete");

                    b.ToTable("PedidoItemTransporte", "public");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.Proposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcaoComprador")
                        .HasColumnType("integer")
                        .HasColumnName("AcaoComprador");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Observacao")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Observacao");

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer")
                        .HasColumnName("PedidoId");

                    b.Property<int?>("UsuarioFornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioFornecedorId");

                    b.Property<int?>("UsuarioProdutorId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioProdutorId");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Proposta_DataCriacao");

                    b.HasIndex("PedidoId")
                        .HasDatabaseName("IX_Proposta_PedidoId");

                    b.HasIndex("UsuarioFornecedorId")
                        .HasDatabaseName("IX_Proposta_UsuarioFornecedorId");

                    b.HasIndex("UsuarioProdutorId")
                        .HasDatabaseName("IX_Proposta_UsuarioProdutorId");

                    b.ToTable("Proposta", "public");
                });

            modelBuilder.Entity("Agriis.PontosDistribuicao.Dominio.Entidades.PontoDistribuicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("CapacidadeMaxima")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<JsonDocument>("CoberturaTerritorios")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .UseCollation("pt_BR");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("integer");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("HorarioFuncionamento")
                        .HasColumnType("jsonb");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .UseCollation("pt_BR");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .UseCollation("pt_BR");

                    b.Property<double?>("RaioCobertura")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("UnidadeCapacidade")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_PontoDistribuicao_Ativo");

                    b.HasIndex("CoberturaTerritorios")
                        .HasDatabaseName("IX_PontoDistribuicao_CoberturaTerritorios");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CoberturaTerritorios"), "gin");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_PontosDistribuicao_DataCriacao");

                    b.HasIndex("EnderecoId")
                        .HasDatabaseName("IX_PontoDistribuicao_EnderecoId");

                    b.HasIndex("FornecedorId")
                        .HasDatabaseName("IX_PontoDistribuicao_FornecedorId");

                    b.HasIndex("FornecedorId", "Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_PontoDistribuicao_FornecedorId_Nome");

                    b.ToTable("PontoDistribuicao", "public");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.Produtor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AreaPlantio")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("AreaPlantio");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("Cpf");

                    b.Property<string>("Culturas")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("Culturas");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataAutorizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAutorizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("InscricaoEstadual");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<JsonDocument>("RetornosApiCheckProdutor")
                        .HasColumnType("jsonb")
                        .HasColumnName("RetornosApiCheckProdutor");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<string>("TipoAtividade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TipoAtividade");

                    b.Property<int?>("UsuarioAutorizacaoId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioAutorizacaoId");

                    b.HasKey("Id");

                    b.HasIndex("AreaPlantio")
                        .HasDatabaseName("IX_Produtor_AreaPlantio");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("IX_Produtor_Cnpj")
                        .HasFilter("\"Cnpj\" IS NOT NULL");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("IX_Produtor_Cpf")
                        .HasFilter("\"Cpf\" IS NOT NULL");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Produtor_DataCriacao");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Produtor_Status");

                    b.HasIndex("UsuarioAutorizacaoId");

                    b.ToTable("Produtor", "public");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.UsuarioProdutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("EhProprietario")
                        .HasColumnType("boolean")
                        .HasColumnName("EhProprietario");

                    b.Property<int>("ProdutorId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutorId");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_UsuarioProdutor_Ativo");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuariosProdutores_DataCriacao");

                    b.HasIndex("EhProprietario")
                        .HasDatabaseName("IX_UsuarioProdutor_EhProprietario");

                    b.HasIndex("ProdutorId")
                        .HasDatabaseName("IX_UsuarioProdutor_ProdutorId");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_UsuarioProdutor_UsuarioId");

                    b.HasIndex("UsuarioId", "ProdutorId")
                        .IsUnique()
                        .HasDatabaseName("IX_UsuarioProdutor_UsuarioId_ProdutorId");

                    b.ToTable("UsuarioProdutor", "public");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<int?>("CategoriaPaiId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Categoria_DataCriacao");

                    b.ToTable("Categoria", "public");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("DadosAdicionais")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<string>("Marca")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObservacoesRestricao")
                        .HasColumnType("text");

                    b.Property<int?>("ProdutoPaiId")
                        .HasColumnType("integer");

                    b.Property<bool>("ProdutoRestrito")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<int>("TipoCalculoPeso")
                        .HasColumnType("integer");

                    b.Property<int>("Unidade")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Produto_DataCriacao");

                    b.HasIndex("ProdutoPaiId");

                    b.ToTable("Produto", "public");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.ProdutoCultura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<int>("CulturaId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_ProdutoCultura_DataCriacao");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoCultura", "public");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.Propriedade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AreaTotal")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("AreaTotal");

                    b.Property<JsonDocument>("DadosAdicionais")
                        .HasColumnType("jsonb")
                        .HasColumnName("DadosAdicionais");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EnderecoId")
                        .HasColumnType("integer")
                        .HasColumnName("EnderecoId");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("InscricaoEstadual");

                    b.Property<string>("Nirf")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nirf");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<int>("ProdutorId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutorId");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Propriedades_DataCriacao");

                    b.HasIndex("EnderecoId")
                        .HasDatabaseName("IX_Propriedade_EnderecoId");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Propriedade_Nome");

                    b.HasIndex("ProdutorId")
                        .HasDatabaseName("IX_Propriedade_ProdutorId");

                    b.ToTable("Propriedade", "public");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.PropriedadeCultura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Area");

                    b.Property<int>("CulturaId")
                        .HasColumnType("integer")
                        .HasColumnName("CulturaId");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime?>("DataColheitaPrevista")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataColheitaPrevista");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DataPlantio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataPlantio");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Observacoes");

                    b.Property<int>("PropriedadeId")
                        .HasColumnType("integer")
                        .HasColumnName("PropriedadeId");

                    b.Property<int?>("SafraId")
                        .HasColumnType("integer")
                        .HasColumnName("SafraId");

                    b.HasKey("Id");

                    b.HasIndex("CulturaId")
                        .HasDatabaseName("IX_PropriedadeCultura_CulturaId");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_PropriedadeCulturas_DataCriacao");

                    b.HasIndex("PropriedadeId")
                        .HasDatabaseName("IX_PropriedadeCultura_PropriedadeId");

                    b.HasIndex("SafraId")
                        .HasDatabaseName("IX_PropriedadeCultura_SafraId");

                    b.HasIndex("DataPlantio", "DataColheitaPrevista")
                        .HasDatabaseName("IX_PropriedadeCultura_PeriodoPlantio");

                    b.HasIndex("PropriedadeId", "CulturaId")
                        .IsUnique()
                        .HasDatabaseName("IX_PropriedadeCultura_PropriedadeId_CulturaId");

                    b.ToTable("PropriedadeCultura", "public");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.Talhao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Area");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Descricao");

                    b.Property<Polygon>("Geometria")
                        .HasColumnType("geography(POLYGON, 4326)")
                        .HasColumnName("Geometria");

                    b.Property<Point>("Localizacao")
                        .HasColumnType("geography(POINT, 4326)")
                        .HasColumnName("Localizacao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<int>("PropriedadeId")
                        .HasColumnType("integer")
                        .HasColumnName("PropriedadeId");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Talhoes_DataCriacao");

                    b.HasIndex("Geometria")
                        .HasDatabaseName("IX_Talhao_Geometria");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometria"), "gist");

                    b.HasIndex("Localizacao")
                        .HasDatabaseName("IX_Talhao_Localizacao");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Localizacao"), "gist");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Talhao_Nome");

                    b.HasIndex("PropriedadeId")
                        .HasDatabaseName("IX_Talhao_PropriedadeId");

                    b.ToTable("Talhao", "public");
                });

            modelBuilder.Entity("Agriis.Safras.Dominio.Entidades.Safra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnoColheita")
                        .HasColumnType("integer")
                        .HasColumnName("AnoColheita");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("Descricao");

                    b.Property<DateTime>("PlantioFinal")
                        .HasColumnType("date")
                        .HasColumnName("PlantioFinal");

                    b.Property<DateTime>("PlantioInicial")
                        .HasColumnType("date")
                        .HasColumnName("PlantioInicial");

                    b.Property<string>("PlantioNome")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("PlantioNome");

                    b.HasKey("Id");

                    b.HasIndex("AnoColheita")
                        .HasDatabaseName("IX_Safra_AnoColheita");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Safras_DataCriacao");

                    b.HasIndex("PlantioFinal")
                        .HasDatabaseName("IX_Safra_PlantioFinal");

                    b.HasIndex("PlantioInicial")
                        .HasDatabaseName("IX_Safra_PlantioInicial");

                    b.HasIndex("PlantioNome", "PlantioInicial", "PlantioFinal")
                        .IsUnique()
                        .HasDatabaseName("IX_Safra_Atual")
                        .HasFilter("PlantioNome = 'S1'");

                    b.ToTable("Safra", "public");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("celular");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("SenhaHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("senha_hash");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultimo_login");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("ix_usuarios_ativo");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_cpf")
                        .HasFilter("cpf IS NOT NULL");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_Usuarios_DataCriacao");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_email");

                    b.ToTable("usuarios", "public");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.UsuarioRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtribuicao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atribuicao");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_UsuarioRoles_DataCriacao");

                    b.HasIndex("Role")
                        .HasDatabaseName("ix_usuario_roles_role");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_usuario_roles_usuario_id");

                    b.HasIndex("UsuarioId", "Role")
                        .IsUnique()
                        .HasDatabaseName("ix_usuario_roles_usuario_role_unique");

                    b.ToTable("usuario_roles", "public");
                });

            modelBuilder.Entity("Agriis.Catalogos.Dominio.Entidades.CatalogoItem", b =>
                {
                    b.HasOne("Agriis.Catalogos.Dominio.Entidades.Catalogo", "Catalogo")
                        .WithMany("Itens")
                        .HasForeignKey("CatalogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogo");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboCategoriaDesconto", b =>
                {
                    b.HasOne("Agriis.Combos.Dominio.Entidades.Combo", "Combo")
                        .WithMany("CategoriasDesconto")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboItem", b =>
                {
                    b.HasOne("Agriis.Combos.Dominio.Entidades.Combo", "Combo")
                        .WithMany("Itens")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.ComboLocalRecebimento", b =>
                {
                    b.HasOne("Agriis.Combos.Dominio.Entidades.Combo", "Combo")
                        .WithMany("LocaisRecebimento")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Endereco", b =>
                {
                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Estado", "Estado")
                        .WithMany("Enderecos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Municipio", "Municipio")
                        .WithMany("Enderecos")
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Municipio", b =>
                {
                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Estado", "Estado")
                        .WithMany("Municipios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedor", b =>
                {
                    b.HasOne("Agriis.Fornecedores.Dominio.Entidades.Fornecedor", "Fornecedor")
                        .WithMany("UsuariosFornecedores")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedorTerritorio", b =>
                {
                    b.HasOne("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedor", "UsuarioFornecedor")
                        .WithMany("Territorios")
                        .HasForeignKey("UsuarioFornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioFornecedor");
                });

            modelBuilder.Entity("Agriis.Pagamentos.Dominio.Entidades.CulturaFormaPagamento", b =>
                {
                    b.HasOne("Agriis.Pagamentos.Dominio.Entidades.FormaPagamento", "FormaPagamento")
                        .WithMany("CulturaFormasPagamento")
                        .HasForeignKey("FormaPagamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormaPagamento");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItem", b =>
                {
                    b.HasOne("Agriis.Pedidos.Dominio.Entidades.Pedido", "Pedido")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItemTransporte", b =>
                {
                    b.HasOne("Agriis.Pedidos.Dominio.Entidades.PedidoItem", "PedidoItem")
                        .WithMany("ItensTransporte")
                        .HasForeignKey("PedidoItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Pedidos.Dominio.Entidades.PedidoItem", null)
                        .WithMany("Transportes")
                        .HasForeignKey("PedidoItemId1");

                    b.Navigation("PedidoItem");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.Proposta", b =>
                {
                    b.HasOne("Agriis.Pedidos.Dominio.Entidades.Pedido", "Pedido")
                        .WithMany("Propostas")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Agriis.PontosDistribuicao.Dominio.Entidades.PontoDistribuicao", b =>
                {
                    b.HasOne("Agriis.Enderecos.Dominio.Entidades.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.Produtor", b =>
                {
                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "UsuarioAutorizacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAutorizacaoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UsuarioAutorizacao");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.UsuarioProdutor", b =>
                {
                    b.HasOne("Agriis.Produtores.Dominio.Entidades.Produtor", "Produtor")
                        .WithMany("UsuariosProdutores")
                        .HasForeignKey("ProdutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produtor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Categoria", b =>
                {
                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Categoria", "CategoriaPai")
                        .WithMany("SubCategorias")
                        .HasForeignKey("CategoriaPaiId");

                    b.Navigation("CategoriaPai");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Produto", b =>
                {
                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Produto", "ProdutoPai")
                        .WithMany("ProdutosFilhos")
                        .HasForeignKey("ProdutoPaiId");

                    b.Navigation("Categoria");

                    b.Navigation("ProdutoPai");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.ProdutoCultura", b =>
                {
                    b.HasOne("Agriis.Produtos.Dominio.Entidades.Produto", "Produto")
                        .WithMany("ProdutosCulturas")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.PropriedadeCultura", b =>
                {
                    b.HasOne("Agriis.Propriedades.Dominio.Entidades.Propriedade", "Propriedade")
                        .WithMany("PropriedadeCulturas")
                        .HasForeignKey("PropriedadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propriedade");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.Talhao", b =>
                {
                    b.HasOne("Agriis.Propriedades.Dominio.Entidades.Propriedade", "Propriedade")
                        .WithMany("Talhoes")
                        .HasForeignKey("PropriedadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propriedade");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.UsuarioRole", b =>
                {
                    b.HasOne("Agriis.Usuarios.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agriis.Catalogos.Dominio.Entidades.Catalogo", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Agriis.Combos.Dominio.Entidades.Combo", b =>
                {
                    b.Navigation("CategoriasDesconto");

                    b.Navigation("Itens");

                    b.Navigation("LocaisRecebimento");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Estado", b =>
                {
                    b.Navigation("Enderecos");

                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Agriis.Enderecos.Dominio.Entidades.Municipio", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.Fornecedor", b =>
                {
                    b.Navigation("UsuariosFornecedores");
                });

            modelBuilder.Entity("Agriis.Fornecedores.Dominio.Entidades.UsuarioFornecedor", b =>
                {
                    b.Navigation("Territorios");
                });

            modelBuilder.Entity("Agriis.Pagamentos.Dominio.Entidades.FormaPagamento", b =>
                {
                    b.Navigation("CulturaFormasPagamento");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.Pedido", b =>
                {
                    b.Navigation("Itens");

                    b.Navigation("Propostas");
                });

            modelBuilder.Entity("Agriis.Pedidos.Dominio.Entidades.PedidoItem", b =>
                {
                    b.Navigation("ItensTransporte");

                    b.Navigation("Transportes");
                });

            modelBuilder.Entity("Agriis.Produtores.Dominio.Entidades.Produtor", b =>
                {
                    b.Navigation("UsuariosProdutores");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Categoria", b =>
                {
                    b.Navigation("Produtos");

                    b.Navigation("SubCategorias");
                });

            modelBuilder.Entity("Agriis.Produtos.Dominio.Entidades.Produto", b =>
                {
                    b.Navigation("ProdutosCulturas");

                    b.Navigation("ProdutosFilhos");
                });

            modelBuilder.Entity("Agriis.Propriedades.Dominio.Entidades.Propriedade", b =>
                {
                    b.Navigation("PropriedadeCulturas");

                    b.Navigation("Talhoes");
                });

            modelBuilder.Entity("Agriis.Usuarios.Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("UsuarioRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

</AgriisDbContextModelSnapshot.cs>
<Class1.cs>
namespace Agriis.Compartilhado.Aplicacao;

public class Class1
{

}

</Class1.cs>
<Class1.cs>
namespace Agriis.Compartilhado.Dominio;

public class Class1
{

}

</Class1.cs>
<Class1.cs>
namespace Agriis.Compartilhado.Infraestrutura;

public class Class1
{

}

</Class1.cs>
<EntidadeBaseConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Compartilhado.Dominio.Entidades;
using System.Text.Json;

namespace Agriis.Api.Contexto.Configuracoes;

public abstract class EntidadeBaseConfiguration<T> : IEntityTypeConfiguration<T> where T : EntidadeBase
{
    public virtual void Configure(EntityTypeBuilder<T> builder)
    {
        // Configurar chave primária
        builder.HasKey(e => e.Id);
        builder.Property(e => e.Id)
            .ValueGeneratedOnAdd()
            .IsRequired();

        // Configurar propriedades de auditoria
        builder.Property(e => e.DataCriacao)
            .IsRequired()
            .HasDefaultValueSql("CURRENT_TIMESTAMP")
            .HasColumnType("timestamp with time zone");

        builder.Property(e => e.DataAtualizacao)
            .IsRequired(false)
            .HasColumnType("timestamp with time zone");

        // Configurar índices para otimizar consultas por data
        builder.HasIndex(e => e.DataCriacao)
            .HasDatabaseName($"IX_{GetTableName()}_DataCriacao");

        // Configurar nome da tabela
        builder.ToTable(GetTableName());

        // Permitir configurações específicas da entidade
        ConfigureEntity(builder);
    }

    protected abstract void ConfigureEntity(EntityTypeBuilder<T> builder);
    protected abstract string GetTableName();

    // Métodos auxiliares para configurações comuns
    protected static void ConfigurarCampoJson<TProperty>(
        EntityTypeBuilder<T> builder,
        System.Linq.Expressions.Expression<Func<T, TProperty>> propertyExpression,
        string columnName)
    {
        builder.Property(propertyExpression)
            .HasColumnName(columnName)
            .HasColumnType("jsonb");
    }

    protected static void ConfigurarCampoJsonDocument(
        EntityTypeBuilder<T> builder,
        System.Linq.Expressions.Expression<Func<T, JsonDocument?>> propertyExpression,
        string columnName)
    {
        builder.Property(propertyExpression)
            .HasColumnName(columnName)
            .HasColumnType("jsonb");
    }

    protected static void ConfigurarListaIntComoJson(
        EntityTypeBuilder<T> builder,
        System.Linq.Expressions.Expression<Func<T, List<int>>> propertyExpression,
        string columnName)
    {
        builder.Property(propertyExpression)
            .HasColumnName(columnName)
            .HasColumnType("jsonb");
    }

    protected static void ConfigurarCampoTexto(
        EntityTypeBuilder<T> builder,
        System.Linq.Expressions.Expression<Func<T, string>> propertyExpression,
        string columnName,
        int? maxLength = null,
        bool isRequired = true)
    {
        var propertyBuilder = builder.Property(propertyExpression)
            .HasColumnName(columnName);

        if (maxLength.HasValue)
        {
            propertyBuilder.HasMaxLength(maxLength.Value);
        }

        propertyBuilder.IsRequired(isRequired);
    }

    protected static void ConfigurarCampoDecimal(
        EntityTypeBuilder<T> builder,
        System.Linq.Expressions.Expression<Func<T, decimal>> propertyExpression,
        string columnName,
        int precision = 18,
        int scale = 2)
    {
        builder.Property(propertyExpression)
            .HasColumnName(columnName)
            .HasPrecision(precision, scale)
            .IsRequired();
    }

    protected static void ConfigurarCampoDecimalOpcional(
        EntityTypeBuilder<T> builder,
        System.Linq.Expressions.Expression<Func<T, decimal?>> propertyExpression,
        string columnName,
        int precision = 18,
        int scale = 2)
    {
        builder.Property(propertyExpression)
            .HasColumnName(columnName)
            .HasPrecision(precision, scale)
            .IsRequired(false);
    }

    protected static void ConfigurarEnum<TEnum>(
        EntityTypeBuilder<T> builder,
        System.Linq.Expressions.Expression<Func<T, TEnum>> propertyExpression,
        string columnName) where TEnum : struct, Enum
    {
        builder.Property(propertyExpression)
            .HasColumnName(columnName)
            .HasConversion<string>()
            .IsRequired();
    }

    protected static void ConfigurarEnumOpcional<TEnum>(
        EntityTypeBuilder<T> builder,
        System.Linq.Expressions.Expression<Func<T, TEnum?>> propertyExpression,
        string columnName) where TEnum : struct, Enum
    {
        builder.Property(propertyExpression)
            .HasColumnName(columnName)
            .HasConversion<string>()
            .IsRequired(false);
    }
}
</EntidadeBaseConfiguration.cs>
<RefreshTokenConfiguration.cs>
using Agriis.Autenticacao.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Api.Contexto.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para RefreshToken
/// </summary>
public class RefreshTokenConfiguration : IEntityTypeConfiguration<RefreshToken>
{
    public void Configure(EntityTypeBuilder<RefreshToken> builder)
    {
        builder.ToTable("refresh_tokens");

        // Chave primária
        builder.HasKey(rt => rt.Id);
        builder.Property(rt => rt.Id)
            .HasColumnName("id")
            .ValueGeneratedOnAdd();

        // Token
        builder.Property(rt => rt.Token)
            .HasColumnName("token")
            .HasMaxLength(500)
            .IsRequired();

        builder.HasIndex(rt => rt.Token)
            .IsUnique()
            .HasDatabaseName("ix_refresh_tokens_token");

        // UsuarioId
        builder.Property(rt => rt.UsuarioId)
            .HasColumnName("usuario_id")
            .IsRequired();

        builder.HasIndex(rt => rt.UsuarioId)
            .HasDatabaseName("ix_refresh_tokens_usuario_id");

        // DataExpiracao
        builder.Property(rt => rt.DataExpiracao)
            .HasColumnName("data_expiracao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        // Revogado
        builder.Property(rt => rt.Revogado)
            .HasColumnName("revogado")
            .HasDefaultValue(false)
            .IsRequired();

        // DataRevogacao
        builder.Property(rt => rt.DataRevogacao)
            .HasColumnName("data_revogacao")
            .HasColumnType("timestamp with time zone");

        // EnderecoIp
        builder.Property(rt => rt.EnderecoIp)
            .HasColumnName("endereco_ip")
            .HasMaxLength(45); // IPv6 máximo

        // UserAgent
        builder.Property(rt => rt.UserAgent)
            .HasColumnName("user_agent")
            .HasMaxLength(1000);

        // Campos de auditoria herdados de EntidadeBase
        builder.Property(rt => rt.DataCriacao)
            .HasColumnName("data_criacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(rt => rt.DataAtualizacao)
            .HasColumnName("data_atualizacao")
            .HasColumnType("timestamp with time zone");

        // Índices para performance
        builder.HasIndex(rt => new { rt.UsuarioId, rt.Revogado, rt.DataExpiracao })
            .HasDatabaseName("ix_refresh_tokens_usuario_valido");

        builder.HasIndex(rt => rt.DataExpiracao)
            .HasDatabaseName("ix_refresh_tokens_data_expiracao");
    }
}
</RefreshTokenConfiguration.cs>
<LoggingBehavior.cs>
using MediatR;
using Microsoft.Extensions.Logging;
using System.Diagnostics;

namespace Agriis.Compartilhado.Aplicacao.Behaviors;

/// <summary>
/// Behavior para logging automático de requisições
/// </summary>
/// <typeparam name="TRequest">Tipo da requisição</typeparam>
/// <typeparam name="TResponse">Tipo da resposta</typeparam>
public class LoggingBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>
    where TRequest : IRequest<TResponse>
{
    private readonly ILogger<LoggingBehavior<TRequest, TResponse>> _logger;
    
    /// <summary>
    /// Construtor
    /// </summary>
    /// <param name="logger">Logger</param>
    public LoggingBehavior(ILogger<LoggingBehavior<TRequest, TResponse>> logger)
    {
        _logger = logger;
    }
    
    /// <summary>
    /// Executa o logging antes e depois do handler
    /// </summary>
    public async Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken)
    {
        var requestName = typeof(TRequest).Name;
        var requestId = Guid.NewGuid();
        
        _logger.LogInformation(
            "Iniciando requisição {RequestName} com ID {RequestId}",
            requestName, requestId);
        
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            var response = await next();
            
            stopwatch.Stop();
            
            _logger.LogInformation(
                "Requisição {RequestName} com ID {RequestId} concluída em {ElapsedMilliseconds}ms",
                requestName, requestId, stopwatch.ElapsedMilliseconds);
            
            return response;
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            
            _logger.LogError(ex,
                "Erro na requisição {RequestName} com ID {RequestId} após {ElapsedMilliseconds}ms",
                requestName, requestId, stopwatch.ElapsedMilliseconds);
            
            throw;
        }
    }
}
</LoggingBehavior.cs>
<ValidationBehavior.cs>
using FluentValidation;
using MediatR;
using Agriis.Compartilhado.Aplicacao.Resultados;

namespace Agriis.Compartilhado.Aplicacao.Behaviors;

/// <summary>
/// Behavior para validação automática usando FluentValidation
/// </summary>
/// <typeparam name="TRequest">Tipo da requisição</typeparam>
/// <typeparam name="TResponse">Tipo da resposta</typeparam>
public class ValidationBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>
    where TRequest : IRequest<TResponse>
{
    private readonly IEnumerable<IValidator<TRequest>> _validators;
    
    /// <summary>
    /// Construtor
    /// </summary>
    /// <param name="validators">Lista de validadores</param>
    public ValidationBehavior(IEnumerable<IValidator<TRequest>> validators)
    {
        _validators = validators;
    }
    
    /// <summary>
    /// Executa a validação antes do handler
    /// </summary>
    public async Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken)
    {
        if (!_validators.Any())
        {
            return await next();
        }
        
        var context = new ValidationContext<TRequest>(request);
        
        var validationResults = await Task.WhenAll(
            _validators.Select(v => v.ValidateAsync(context, cancellationToken))
        );
        
        var failures = validationResults
            .SelectMany(r => r.Errors)
            .Where(f => f != null)
            .ToList();
        
        if (failures.Any())
        {
            var errorMessages = failures.Select(f => f.ErrorMessage).ToList();
            
            // Se TResponse é um Result, retorna um resultado de falha
            if (typeof(TResponse).IsGenericType && typeof(TResponse).GetGenericTypeDefinition() == typeof(Result<>))
            {
                var resultType = typeof(TResponse).GetGenericArguments()[0];
                var failureMethod = typeof(Result<>).MakeGenericType(resultType)
                    .GetMethod(nameof(Result<object>.ValidationFailure), new[] { typeof(IEnumerable<string>) });
                
                return (TResponse)failureMethod!.Invoke(null, new object[] { errorMessages })!;
            }
            
            // Se TResponse é um Result simples
            if (typeof(TResponse) == typeof(Result))
            {
                return (TResponse)(object)Result.ValidationFailure(errorMessages);
            }
            
            // Para outros tipos, lança exceção
            throw new ValidationException(failures);
        }
        
        return await next();
    }
}
</ValidationBehavior.cs>
<IApplicationService.cs>
namespace Agriis.Compartilhado.Aplicacao.Interfaces;

/// <summary>
/// Interface base para serviços de aplicação
/// Define o contrato básico para serviços que coordenam operações de domínio
/// </summary>
public interface IApplicationService
{
    // Marker interface - serviços específicos herdarão desta interface
    // e definirão seus próprios métodos conforme necessário
}

/// <summary>
/// Interface genérica para serviços de aplicação com operações CRUD básicas
/// </summary>
/// <typeparam name="TDto">Tipo do DTO</typeparam>
/// <typeparam name="TKey">Tipo da chave primária</typeparam>
public interface IApplicationService<TDto, TKey> : IApplicationService
    where TDto : class
    where TKey : struct
{
    /// <summary>
    /// Obtém um item por ID
    /// </summary>
    /// <param name="id">ID do item</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do item ou null se não encontrado</returns>
    Task<TDto?> ObterPorIdAsync(TKey id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém todos os itens
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de DTOs</returns>
    Task<IEnumerable<TDto>> ObterTodosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Cria um novo item
    /// </summary>
    /// <param name="dto">DTO com os dados do item</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do item criado</returns>
    Task<TDto> CriarAsync(TDto dto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Atualiza um item existente
    /// </summary>
    /// <param name="id">ID do item</param>
    /// <param name="dto">DTO com os novos dados</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do item atualizado</returns>
    Task<TDto> AtualizarAsync(TKey id, TDto dto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove um item
    /// </summary>
    /// <param name="id">ID do item</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task RemoverAsync(TKey id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se um item existe
    /// </summary>
    /// <param name="id">ID do item</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se existe</returns>
    Task<bool> ExisteAsync(TKey id, CancellationToken cancellationToken = default);
}
</IApplicationService.cs>
<PagedResult.cs>
namespace Agriis.Compartilhado.Aplicacao.Resultados;

/// <summary>
/// Representa um resultado paginado de uma consulta
/// </summary>
/// <typeparam name="T">Tipo dos itens na página</typeparam>
public class PagedResult<T>
{
    /// <summary>
    /// Itens da página atual
    /// </summary>
    public IReadOnlyList<T> Items { get; private set; }
    
    /// <summary>
    /// Número da página atual (baseado em 1)
    /// </summary>
    public int PageNumber { get; private set; }
    
    /// <summary>
    /// Tamanho da página (número de itens por página)
    /// </summary>
    public int PageSize { get; private set; }
    
    /// <summary>
    /// Total de itens em todas as páginas
    /// </summary>
    public int TotalCount { get; private set; }
    
    /// <summary>
    /// Total de páginas
    /// </summary>
    public int TotalPages { get; private set; }
    
    /// <summary>
    /// Indica se existe uma página anterior
    /// </summary>
    public bool HasPreviousPage => PageNumber > 1;
    
    /// <summary>
    /// Indica se existe uma próxima página
    /// </summary>
    public bool HasNextPage => PageNumber < TotalPages;
    
    /// <summary>
    /// Indica se é a primeira página
    /// </summary>
    public bool IsFirstPage => PageNumber == 1;
    
    /// <summary>
    /// Indica se é a última página
    /// </summary>
    public bool IsLastPage => PageNumber == TotalPages;
    
    /// <summary>
    /// Número da primeira página
    /// </summary>
    public int FirstPage => 1;
    
    /// <summary>
    /// Número da última página
    /// </summary>
    public int LastPage => TotalPages;
    
    /// <summary>
    /// Número da página anterior (se existir)
    /// </summary>
    public int? PreviousPage => HasPreviousPage ? PageNumber - 1 : null;
    
    /// <summary>
    /// Número da próxima página (se existir)
    /// </summary>
    public int? NextPage => HasNextPage ? PageNumber + 1 : null;
    
    /// <summary>
    /// Índice do primeiro item da página atual (baseado em 0)
    /// </summary>
    public int FirstItemIndex => (PageNumber - 1) * PageSize;
    
    /// <summary>
    /// Índice do último item da página atual (baseado em 0)
    /// </summary>
    public int LastItemIndex => Math.Min(FirstItemIndex + PageSize - 1, TotalCount - 1);
    
    /// <summary>
    /// Número do primeiro item da página atual (baseado em 1)
    /// </summary>
    public int FirstItemNumber => TotalCount == 0 ? 0 : FirstItemIndex + 1;
    
    /// <summary>
    /// Número do último item da página atual (baseado em 1)
    /// </summary>
    public int LastItemNumber => TotalCount == 0 ? 0 : LastItemIndex + 1;
    
    /// <summary>
    /// Construtor
    /// </summary>
    /// <param name="items">Itens da página</param>
    /// <param name="pageNumber">Número da página</param>
    /// <param name="pageSize">Tamanho da página</param>
    /// <param name="totalCount">Total de itens</param>
    public PagedResult(IEnumerable<T> items, int pageNumber, int pageSize, int totalCount)
    {
        if (pageNumber < 1)
            throw new ArgumentException("Número da página deve ser maior que zero", nameof(pageNumber));
            
        if (pageSize < 1)
            throw new ArgumentException("Tamanho da página deve ser maior que zero", nameof(pageSize));
            
        if (totalCount < 0)
            throw new ArgumentException("Total de itens não pode ser negativo", nameof(totalCount));
        
        Items = items.ToList().AsReadOnly();
        PageNumber = pageNumber;
        PageSize = pageSize;
        TotalCount = totalCount;
        TotalPages = (int)Math.Ceiling((double)totalCount / pageSize);
    }
    
    /// <summary>
    /// Cria um resultado paginado vazio
    /// </summary>
    /// <param name="pageNumber">Número da página</param>
    /// <param name="pageSize">Tamanho da página</param>
    public static PagedResult<T> Empty(int pageNumber = 1, int pageSize = 10)
    {
        return new PagedResult<T>(Enumerable.Empty<T>(), pageNumber, pageSize, 0);
    }
    
    /// <summary>
    /// Cria um resultado paginado a partir de uma lista completa
    /// </summary>
    /// <param name="source">Lista completa de itens</param>
    /// <param name="pageNumber">Número da página</param>
    /// <param name="pageSize">Tamanho da página</param>
    public static PagedResult<T> FromList(IEnumerable<T> source, int pageNumber, int pageSize)
    {
        var sourceList = source.ToList();
        var totalCount = sourceList.Count;
        var items = sourceList.Skip((pageNumber - 1) * pageSize).Take(pageSize);
        
        return new PagedResult<T>(items, pageNumber, pageSize, totalCount);
    }
    
    /// <summary>
    /// Mapeia os itens da página para outro tipo
    /// </summary>
    /// <typeparam name="TNew">Novo tipo</typeparam>
    /// <param name="mapper">Função de mapeamento</param>
    public PagedResult<TNew> Map<TNew>(Func<T, TNew> mapper)
    {
        var mappedItems = Items.Select(mapper);
        return new PagedResult<TNew>(mappedItems, PageNumber, PageSize, TotalCount);
    }
    
    /// <summary>
    /// Mapeia os itens da página para outro tipo de forma assíncrona
    /// </summary>
    /// <typeparam name="TNew">Novo tipo</typeparam>
    /// <param name="mapper">Função de mapeamento assíncrona</param>
    public async Task<PagedResult<TNew>> MapAsync<TNew>(Func<T, Task<TNew>> mapper)
    {
        var mappedItems = await Task.WhenAll(Items.Select(mapper));
        return new PagedResult<TNew>(mappedItems, PageNumber, PageSize, TotalCount);
    }
    
    /// <summary>
    /// Obtém informações de metadados da paginação
    /// </summary>
    public PaginationMetadata GetMetadata()
    {
        return new PaginationMetadata
        {
            PageNumber = PageNumber,
            PageSize = PageSize,
            TotalCount = TotalCount,
            TotalPages = TotalPages,
            HasPreviousPage = HasPreviousPage,
            HasNextPage = HasNextPage,
            FirstItemNumber = FirstItemNumber,
            LastItemNumber = LastItemNumber
        };
    }
}

/// <summary>
/// Metadados de paginação
/// </summary>
public class PaginationMetadata
{
    public int PageNumber { get; set; }
    public int PageSize { get; set; }
    public int TotalCount { get; set; }
    public int TotalPages { get; set; }
    public bool HasPreviousPage { get; set; }
    public bool HasNextPage { get; set; }
    public int FirstItemNumber { get; set; }
    public int LastItemNumber { get; set; }
}

/// <summary>
/// Parâmetros para paginação
/// </summary>
public class PaginationParameters
{
    private int _pageNumber = 1;
    private int _pageSize = 10;
    
    /// <summary>
    /// Número da página (mínimo 1)
    /// </summary>
    public int PageNumber
    {
        get => _pageNumber;
        set => _pageNumber = value < 1 ? 1 : value;
    }
    
    /// <summary>
    /// Tamanho da página (mínimo 1, máximo 100)
    /// </summary>
    public int PageSize
    {
        get => _pageSize;
        set => _pageSize = value switch
        {
            < 1 => 1,
            > 100 => 100,
            _ => value
        };
    }
    
    /// <summary>
    /// Termo de busca (opcional)
    /// </summary>
    public string? SearchTerm { get; set; }
    
    /// <summary>
    /// Campo para ordenação (opcional)
    /// </summary>
    public string? SortBy { get; set; }
    
    /// <summary>
    /// Direção da ordenação (asc/desc)
    /// </summary>
    public string SortDirection { get; set; } = "asc";
    
    /// <summary>
    /// Indica se a ordenação é descendente
    /// </summary>
    public bool IsDescending => SortDirection.ToLower() == "desc";
}
</PagedResult.cs>
<Result.cs>
namespace Agriis.Compartilhado.Aplicacao.Resultados;

/// <summary>
/// Representa o resultado de uma operação que pode falhar
/// </summary>
public class Result
{
    /// <summary>
    /// Indica se a operação foi bem-sucedida
    /// </summary>
    public bool IsSuccess { get; protected set; }
    
    /// <summary>
    /// Indica se a operação falhou
    /// </summary>
    public bool IsFailure => !IsSuccess;
    
    /// <summary>
    /// Mensagem de erro (se houver)
    /// </summary>
    public string? Error { get; protected set; }
    
    /// <summary>
    /// Código do erro (se houver)
    /// </summary>
    public string? ErrorCode { get; protected set; }
    
    /// <summary>
    /// Lista de erros de validação (se houver)
    /// </summary>
    public IReadOnlyList<string> ValidationErrors { get; protected set; } = new List<string>();
    
    /// <summary>
    /// Construtor protegido
    /// </summary>
    protected Result(bool isSuccess, string? error, string? errorCode = null, IEnumerable<string>? validationErrors = null)
    {
        IsSuccess = isSuccess;
        Error = error;
        ErrorCode = errorCode;
        ValidationErrors = validationErrors?.ToList() ?? new List<string>();
    }
    
    /// <summary>
    /// Cria um resultado de sucesso
    /// </summary>
    public static Result Success() => new(true, null);
    
    /// <summary>
    /// Cria um resultado de falha
    /// </summary>
    /// <param name="error">Mensagem de erro</param>
    /// <param name="errorCode">Código do erro</param>
    public static Result Failure(string error, string? errorCode = null) => new(false, error, errorCode);
    
    /// <summary>
    /// Cria um resultado de falha com erros de validação
    /// </summary>
    /// <param name="validationErrors">Lista de erros de validação</param>
    public static Result ValidationFailure(IEnumerable<string> validationErrors) => 
        new(false, "Erro de validação", "VALIDATION_ERROR", validationErrors);
    
    /// <summary>
    /// Cria um resultado de falha com um único erro de validação
    /// </summary>
    /// <param name="validationError">Erro de validação</param>
    public static Result ValidationFailure(string validationError) => 
        ValidationFailure(new[] { validationError });
    
    /// <summary>
    /// Combina múltiplos resultados em um único resultado
    /// </summary>
    /// <param name="results">Resultados a serem combinados</param>
    public static Result Combine(params Result[] results)
    {
        var failures = results.Where(r => r.IsFailure).ToList();
        
        if (!failures.Any())
            return Success();
            
        var errors = failures.SelectMany(f => f.ValidationErrors).ToList();
        if (errors.Any())
            return ValidationFailure(errors);
            
        var firstFailure = failures.First();
        return Failure(firstFailure.Error!, firstFailure.ErrorCode);
    }
    
    /// <summary>
    /// Executa uma ação se o resultado for bem-sucedido
    /// </summary>
    /// <param name="action">Ação a ser executada</param>
    public Result OnSuccess(Action action)
    {
        if (IsSuccess)
            action();
        return this;
    }
    
    /// <summary>
    /// Executa uma ação se o resultado falhou
    /// </summary>
    /// <param name="action">Ação a ser executada</param>
    public Result OnFailure(Action<string?> action)
    {
        if (IsFailure)
            action(Error);
        return this;
    }
}

/// <summary>
/// Representa o resultado de uma operação que pode falhar e retorna um valor
/// </summary>
/// <typeparam name="T">Tipo do valor retornado</typeparam>
public class Result<T> : Result
{
    /// <summary>
    /// Valor retornado pela operação (se bem-sucedida)
    /// </summary>
    public T? Value { get; private set; }
    
    /// <summary>
    /// Construtor protegido
    /// </summary>
    protected Result(bool isSuccess, T? value, string? error, string? errorCode = null, IEnumerable<string>? validationErrors = null)
        : base(isSuccess, error, errorCode, validationErrors)
    {
        Value = value;
    }
    
    /// <summary>
    /// Cria um resultado de sucesso com valor
    /// </summary>
    /// <param name="value">Valor a ser retornado</param>
    public static Result<T> Success(T value) => new(true, value, null);
    
    /// <summary>
    /// Cria um resultado de falha
    /// </summary>
    /// <param name="error">Mensagem de erro</param>
    /// <param name="errorCode">Código do erro</param>
    public static new Result<T> Failure(string error, string? errorCode = null) => new(false, default, error, errorCode);
    
    /// <summary>
    /// Cria um resultado de falha com erros de validação
    /// </summary>
    /// <param name="validationErrors">Lista de erros de validação</param>
    public static new Result<T> ValidationFailure(IEnumerable<string> validationErrors) => 
        new(false, default, "Erro de validação", "VALIDATION_ERROR", validationErrors);
    
    /// <summary>
    /// Cria um resultado de falha com um único erro de validação
    /// </summary>
    /// <param name="validationError">Erro de validação</param>
    public static new Result<T> ValidationFailure(string validationError) => 
        ValidationFailure(new[] { validationError });
    
    /// <summary>
    /// Converte um Result simples para Result<T>
    /// </summary>
    /// <param name="result">Result a ser convertido</param>
    public static Result<T> FromResult(Result result)
    {
        if (result.IsSuccess)
            throw new InvalidOperationException("Não é possível converter um Result de sucesso sem valor para Result<T>");
            
        return new Result<T>(false, default, result.Error, result.ErrorCode, result.ValidationErrors);
    }
    
    /// <summary>
    /// Mapeia o valor do resultado para outro tipo
    /// </summary>
    /// <typeparam name="TNew">Novo tipo</typeparam>
    /// <param name="mapper">Função de mapeamento</param>
    public Result<TNew> Map<TNew>(Func<T, TNew> mapper)
    {
        if (IsFailure)
            return Result<TNew>.Failure(Error!, ErrorCode);
            
        try
        {
            var mappedValue = mapper(Value!);
            return Result<TNew>.Success(mappedValue);
        }
        catch (Exception ex)
        {
            return Result<TNew>.Failure($"Erro no mapeamento: {ex.Message}", "MAPPING_ERROR");
        }
    }
    
    /// <summary>
    /// Executa uma ação se o resultado for bem-sucedido
    /// </summary>
    /// <param name="action">Ação a ser executada</param>
    public Result<T> OnSuccess(Action<T> action)
    {
        if (IsSuccess && Value != null)
            action(Value);
        return this;
    }
    
    /// <summary>
    /// Executa uma função se o resultado for bem-sucedido
    /// </summary>
    /// <param name="func">Função a ser executada</param>
    public Result<TNew> OnSuccess<TNew>(Func<T, Result<TNew>> func)
    {
        if (IsFailure)
            return Result<TNew>.Failure(Error!, ErrorCode);
            
        return func(Value!);
    }
    
    /// <summary>
    /// Operador implícito para converter valor em Result<T>
    /// </summary>
    public static implicit operator Result<T>(T value) => Success(value);
}
</Result.cs>
<EntidadeBase.cs>
namespace Agriis.Compartilhado.Dominio.Entidades;

/// <summary>
/// Classe base para todas as entidades do sistema com auditoria
/// </summary>
public abstract class EntidadeBase
{
    /// <summary>
    /// Identificador único da entidade
    /// </summary>
    public int Id { get; protected set; }
    
    /// <summary>
    /// Data de criação da entidade
    /// </summary>
    public DateTime DataCriacao { get; protected set; }
    
    /// <summary>
    /// Data da última atualização da entidade
    /// </summary>
    public DateTime? DataAtualizacao { get; protected set; }
    
    /// <summary>
    /// Construtor protegido para uso pelas classes filhas
    /// </summary>
    protected EntidadeBase()
    {
        DataCriacao = DateTime.UtcNow;
    }
    
    /// <summary>
    /// Atualiza a data de modificação da entidade
    /// </summary>
    public void AtualizarDataModificacao()
    {
        DataAtualizacao = DateTime.UtcNow;
    }

    public void SetDataCriacao(DateTime dataCriacao)
    {
        DataCriacao = dataCriacao;
    }
    
    /// <summary>
    /// Verifica se a entidade é transitória (não foi persistida ainda)
    /// </summary>
    /// <returns>True se a entidade é transitória</returns>
    public bool EhTransitoria()
    {
        return Id == default;
    }
    
    /// <summary>
    /// Implementação de igualdade baseada no Id
    /// </summary>
    public override bool Equals(object? obj)
    {
        if (obj is not EntidadeBase other)
            return false;
            
        if (ReferenceEquals(this, other))
            return true;
            
        if (GetType() != other.GetType())
            return false;
            
        if (EhTransitoria() || other.EhTransitoria())
            return false;
            
        return Id == other.Id;
    }
    
    /// <summary>
    /// Implementação de GetHashCode baseada no Id
    /// </summary>
    public override int GetHashCode()
    {
        if (EhTransitoria())
            return base.GetHashCode();
            
        return Id.GetHashCode();
    }
    
    /// <summary>
    /// Operador de igualdade
    /// </summary>
    public static bool operator ==(EntidadeBase? left, EntidadeBase? right)
    {
        return Equals(left, right);
    }
    
    /// <summary>
    /// Operador de desigualdade
    /// </summary>
    public static bool operator !=(EntidadeBase? left, EntidadeBase? right)
    {
        return !Equals(left, right);
    }
}
</EntidadeBase.cs>
<EntidadeRaizAgregada.cs>
using MediatR;

namespace Agriis.Compartilhado.Dominio.Entidades;

/// <summary>
/// Classe base para entidades que são raízes de agregado no DDD
/// Suporta eventos de domínio através do MediatR
/// </summary>
public abstract class EntidadeRaizAgregada : EntidadeBase
{
    private readonly List<INotification> _eventosdominio = new();
    
    /// <summary>
    /// Lista de eventos de domínio pendentes
    /// </summary>
    public IReadOnlyCollection<INotification> EventosDominio => _eventosdominio.AsReadOnly();
    
    /// <summary>
    /// Adiciona um evento de domínio à lista de eventos pendentes
    /// </summary>
    /// <param name="eventoDominio">Evento a ser adicionado</param>
    protected void AdicionarEventoDominio(INotification eventoDominio)
    {
        _eventosdominio.Add(eventoDominio);
    }
    
    /// <summary>
    /// Remove um evento de domínio específico da lista
    /// </summary>
    /// <param name="eventoDominio">Evento a ser removido</param>
    protected void RemoverEventoDominio(INotification eventoDominio)
    {
        _eventosdominio.Remove(eventoDominio);
    }
    
    /// <summary>
    /// Limpa todos os eventos de domínio pendentes
    /// </summary>
    public void LimparEventosDominio()
    {
        _eventosdominio.Clear();
    }
    
    /// <summary>
    /// Verifica se existem eventos de domínio pendentes
    /// </summary>
    /// <returns>True se existem eventos pendentes</returns>
    public bool TemEventosPendentes()
    {
        return _eventosdominio.Count > 0;
    }
}
</EntidadeRaizAgregada.cs>
<EnumsCompartilhados.cs>
namespace Agriis.Compartilhado.Dominio.Enums;

/// <summary>
/// Tipos de unidade de medida
/// </summary>
public enum TipoUnidade
{
    Quilo = 0,
    Tonelada = 1,
    Litro = 2,
    Dose = 3,
    Frasco = 4,
    Sementes = 5,
    Ovos = 6,
    Parasitoide = 7,
    Hectare = 8
}

/// <summary>
/// Tipos de moeda
/// </summary>
public enum Moeda
{
    Real = 0,
    Dolar = 1
}

/// <summary>
/// Status genérico para entidades
/// </summary>
public enum StatusGenerico
{
    Ativo = 1,
    Inativo = 2,
    Pendente = 3,
    Aprovado = 4,
    Rejeitado = 5,
    Cancelado = 6
}

/// <summary>
/// Tipos de operação para auditoria
/// </summary>
public enum TipoOperacao
{
    Criacao = 1,
    Atualizacao = 2,
    Exclusao = 3,
    Consulta = 4
}

/// <summary>
/// Níveis de log
/// </summary>
public enum NivelLog
{
    Trace = 0,
    Debug = 1,
    Information = 2,
    Warning = 3,
    Error = 4,
    Critical = 5
}

/// <summary>
/// Tipos de documento brasileiro
/// </summary>
public enum TipoDocumento
{
    CPF = 1,
    CNPJ = 2,
    RG = 3,
    InscricaoEstadual = 4,
    InscricaoMunicipal = 5
}

/// <summary>
/// Estados brasileiros
/// </summary>
public enum EstadoBrasil
{
    AC = 1,  // Acre
    AL = 2,  // Alagoas
    AP = 3,  // Amapá
    AM = 4,  // Amazonas
    BA = 5,  // Bahia
    CE = 6,  // Ceará
    DF = 7,  // Distrito Federal
    ES = 8,  // Espírito Santo
    GO = 9,  // Goiás
    MA = 10, // Maranhão
    MT = 11, // Mato Grosso
    MS = 12, // Mato Grosso do Sul
    MG = 13, // Minas Gerais
    PA = 14, // Pará
    PB = 15, // Paraíba
    PR = 16, // Paraná
    PE = 17, // Pernambuco
    PI = 18, // Piauí
    RJ = 19, // Rio de Janeiro
    RN = 20, // Rio Grande do Norte
    RS = 21, // Rio Grande do Sul
    RO = 22, // Rondônia
    RR = 23, // Roraima
    SC = 24, // Santa Catarina
    SP = 25, // São Paulo
    SE = 26, // Sergipe
    TO = 27  // Tocantins
}

/// <summary>
/// Tipos de endereço
/// </summary>
public enum TipoEndereco
{
    Residencial = 1,
    Comercial = 2,
    Rural = 3,
    Correspondencia = 4
}

/// <summary>
/// Tipos de contato
/// </summary>
public enum TipoContato
{
    Telefone = 1,
    Celular = 2,
    WhatsApp = 3,
    Email = 4,
    Fax = 5
}

/// <summary>
/// Tipos de arquivo
/// </summary>
public enum TipoArquivo
{
    Imagem = 1,
    Documento = 2,
    Planilha = 3,
    PDF = 4,
    Video = 5,
    Audio = 6
}

/// <summary>
/// Extensões de arquivo permitidas
/// </summary>
public enum ExtensaoArquivo
{
    JPG = 1,
    JPEG = 2,
    PNG = 3,
    GIF = 4,
    PDF = 5,
    DOC = 6,
    DOCX = 7,
    XLS = 8,
    XLSX = 9,
    TXT = 10,
    CSV = 11
}
</EnumsCompartilhados.cs>
<EnumsNegocio.cs>
namespace Agriis.Compartilhado.Dominio.Enums;

/// <summary>
/// Roles/perfis de usuário no sistema
/// </summary>
public enum Roles
{
    /// <summary>
    /// Comprador/Produtor
    /// </summary>
    RoleComprador = 1,
    
    /// <summary>
    /// Administrador do sistema
    /// </summary>
    RoleAdmin = 2,
    
    /// <summary>
    /// Administrador web do fornecedor
    /// </summary>
    RoleFornecedorWebAdmin = 3,
    
    /// <summary>
    /// Representante comercial do fornecedor
    /// </summary>
    RoleFornecedorWebRepresentante = 4
}

/// <summary>
/// Tipos de entrega para BARTER
/// </summary>
public enum BarterTipoEntrega
{
    /// <summary>
    /// Free On Board - mercadoria entregue no local de embarque
    /// </summary>
    Fob = 0,
    
    /// <summary>
    /// Cost, Insurance and Freight - mercadoria entregue no destino
    /// </summary>
    Cif = 1
}

/// <summary>
/// Modalidade de pagamento
/// </summary>
public enum ModalidadePagamento
{
    /// <summary>
    /// Pagamento via troca por produtos agrícolas
    /// </summary>
    Barter = 0,
    
    /// <summary>
    /// Pagamento monetário normal
    /// </summary>
    Normal = 1
}

/// <summary>
/// Tipo de cálculo de cubagem
/// </summary>
public enum CalculoCubagem
{
    /// <summary>
    /// Cálculo baseado na densidade do produto
    /// </summary>
    Densidade = 0,
    
    /// <summary>
    /// Cálculo baseado em 300kg/m³
    /// </summary>
    Base300KgM3 = 1
}

/// <summary>
/// Tipo de cálculo de frete
/// </summary>
public enum CalculoFrete
{
    /// <summary>
    /// Baseado no peso nominal
    /// </summary>
    PesoNominal = 0,
    
    /// <summary>
    /// Baseado no peso cubado
    /// </summary>
    PesoCubado = 1
}

/// <summary>
/// Classificação de produto
/// </summary>
public enum ClassificacaoProduto
{
    /// <summary>
    /// Classificação A - alta prioridade
    /// </summary>
    A = 0,
    
    /// <summary>
    /// Classificação B - média prioridade
    /// </summary>
    B = 1,
    
    /// <summary>
    /// Classificação C - baixa prioridade
    /// </summary>
    C = 2,
    
    /// <summary>
    /// Classificação D - menor prioridade
    /// </summary>
    D = 3
}

/// <summary>
/// Tipo de acesso para auditoria
/// </summary>
public enum TipoAcessoAuditoria
{
    /// <summary>
    /// Acesso de produtor
    /// </summary>
    Produtor = 1,
    
    /// <summary>
    /// Acesso de consultor agronômico
    /// </summary>
    ConsultorAgronomico = 2,
    
    /// <summary>
    /// Acesso de fornecedor
    /// </summary>
    Fornecedor = 3,
    
    /// <summary>
    /// Outros tipos de acesso
    /// </summary>
    Outros = 4
}

/// <summary>
/// Status de tentativa no SERPRO
/// </summary>
public enum StatusTentativaSerpro
{
    /// <summary>
    /// Autorizado pelo SERPRO
    /// </summary>
    Autorizado = 1,
    
    /// <summary>
    /// Não autorizado pelo SERPRO
    /// </summary>
    NaoAutorizado = 2
}
</EnumsNegocio.cs>
<StatusPedido.cs>
namespace Agriis.Compartilhado.Dominio.Enums;

/// <summary>
/// Status do pedido no sistema
/// </summary>
public enum StatusPedido
{
    /// <summary>
    /// Pedido em processo de negociação
    /// </summary>
    EmNegociacao = 1,
    
    /// <summary>
    /// Pedido fechado/finalizado
    /// </summary>
    Fechado = 2,
    
    /// <summary>
    /// Cancelado por atingir tempo limite
    /// </summary>
    CanceladoPorTempoLimite = 3,
    
    /// <summary>
    /// Cancelado pelo comprador
    /// </summary>
    CanceladoPeloComprador = 4
}

/// <summary>
/// Status do carrinho de compras
/// </summary>
public enum StatusCarrinho
{
    /// <summary>
    /// Carrinho em aberto para alterações
    /// </summary>
    EmAberto = 0
}

/// <summary>
/// Ações do comprador no pedido
/// </summary>
public enum AcaoCompradorPedido
{
    /// <summary>
    /// Iniciou a negociação
    /// </summary>
    Iniciou = 0,
    
    /// <summary>
    /// Aceitou a proposta
    /// </summary>
    Aceitou = 1,
    
    /// <summary>
    /// Alterou o carrinho
    /// </summary>
    AlterouCarrinho = 2,
    
    /// <summary>
    /// Cancelou o pedido
    /// </summary>
    Cancelou = 3
}
</StatusPedido.cs>
<StatusProdutor.cs>
namespace Agriis.Compartilhado.Dominio.Enums;

/// <summary>
/// Status do produtor no sistema
/// </summary>
public enum StatusProdutor
{
    /// <summary>
    /// Aguardando validação automática via SERPRO
    /// </summary>
    PendenteValidacaoAutomatica = 1,
    
    /// <summary>
    /// Aguardando validação manual por administrador
    /// </summary>
    PendenteValidacaoManual = 2,
    
    /// <summary>
    /// Aguardando validação de CNPJ
    /// </summary>
    PendenteCnpj = 3,
    
    /// <summary>
    /// Autorizado automaticamente pelo sistema
    /// </summary>
    AutorizadoAutomaticamente = 4,
    
    /// <summary>
    /// Autorizado manualmente por administrador
    /// </summary>
    AutorizadoManualmente = 5,
    
    /// <summary>
    /// Acesso negado
    /// </summary>
    Negado = 6
}
</StatusProdutor.cs>
<TipoVenda.cs>
namespace Agriis.Compartilhado.Dominio.Enums;

/// <summary>
/// Tipo de venda no sistema
/// </summary>
public enum TipoVenda
{
    /// <summary>
    /// Venda direta do fornecedor para o produtor
    /// </summary>
    VendaDireta = 1,
    
    /// <summary>
    /// Venda via distribuição/revenda
    /// </summary>
    ViaDistribuicao = 2
}
</TipoVenda.cs>
<DomainException.cs>
namespace Agriis.Compartilhado.Dominio.Exceptions;

/// <summary>
/// Exceção base para violações de regras de domínio
/// </summary>
public class DomainException : Exception
{
    public string ErrorCode { get; }

    public DomainException(string errorCode, string message) : base(message)
    {
        ErrorCode = errorCode ?? throw new ArgumentNullException(nameof(errorCode));
    }

    public DomainException(string errorCode, string message, Exception innerException) 
        : base(message, innerException)
    {
        ErrorCode = errorCode ?? throw new ArgumentNullException(nameof(errorCode));
    }
}

/// <summary>
/// Exceção para entidades não encontradas
/// </summary>
public class EntityNotFoundException : DomainException
{
    public EntityNotFoundException(string entityName, object id) 
        : base("ENTITY_NOT_FOUND", $"{entityName} com ID '{id}' não foi encontrado(a)")
    {
    }
}

/// <summary>
/// Exceção para violações de regras de negócio
/// </summary>
public class BusinessRuleException : DomainException
{
    public BusinessRuleException(string rule, string message) 
        : base($"BUSINESS_RULE_{rule}", message)
    {
    }
}

/// <summary>
/// Exceção para conflitos de dados
/// </summary>
public class ConflictException : DomainException
{
    public ConflictException(string message) 
        : base("CONFLICT", message)
    {
    }
}
</DomainException.cs>
<IRepository.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using System.Linq.Expressions;

namespace Agriis.Compartilhado.Dominio.Interfaces;

/// <summary>
/// Interface base para repositórios genéricos
/// </summary>
/// <typeparam name="T">Tipo da entidade</typeparam>
public interface IRepository<T> where T : EntidadeBase
{
    /// <summary>
    /// Obtém uma entidade por seu ID
    /// </summary>
    /// <param name="id">ID da entidade</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Entidade encontrada ou null</returns>
    Task<T?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém todas as entidades
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de entidades</returns>
    Task<IEnumerable<T>> ObterTodosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém entidades que atendem a uma condição
    /// </summary>
    /// <param name="predicate">Condição de filtro</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de entidades filtradas</returns>
    Task<IEnumerable<T>> ObterPorCondicaoAsync(Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém uma única entidade que atende a uma condição
    /// </summary>
    /// <param name="predicate">Condição de filtro</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Entidade encontrada ou null</returns>
    Task<T?> ObterPrimeiroAsync(Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Adiciona uma nova entidade
    /// </summary>
    /// <param name="entidade">Entidade a ser adicionada</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Entidade adicionada</returns>
    Task<T> AdicionarAsync(T entidade, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Adiciona múltiplas entidades
    /// </summary>
    /// <param name="entidades">Entidades a serem adicionadas</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task AdicionarVariasAsync(IEnumerable<T> entidades, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Atualiza uma entidade existente
    /// </summary>
    /// <param name="entidade">Entidade a ser atualizada</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task AtualizarAsync(T entidade, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove uma entidade por ID
    /// </summary>
    /// <param name="id">ID da entidade a ser removida</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task RemoverAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove uma entidade
    /// </summary>
    /// <param name="entidade">Entidade a ser removida</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task RemoverAsync(T entidade, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove múltiplas entidades
    /// </summary>
    /// <param name="entidades">Entidades a serem removidas</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task RemoverVariasAsync(IEnumerable<T> entidades, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe uma entidade com o ID especificado
    /// </summary>
    /// <param name="id">ID da entidade</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se existe</returns>
    Task<bool> ExisteAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe uma entidade que atende a uma condição
    /// </summary>
    /// <param name="predicate">Condição de filtro</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se existe</returns>
    Task<bool> ExisteAsync(Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Conta o número de entidades
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Número total de entidades</returns>
    Task<int> ContarAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Conta o número de entidades que atendem a uma condição
    /// </summary>
    /// <param name="predicate">Condição de filtro</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Número de entidades que atendem à condição</returns>
    Task<int> ContarAsync(Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default);
}
</IRepository.cs>
<IUnitOfWork.cs>
namespace Agriis.Compartilhado.Dominio.Interfaces;

/// <summary>
/// Interface para Unit of Work pattern
/// Gerencia transações e coordena o trabalho de múltiplos repositórios
/// </summary>
public interface IUnitOfWork : IDisposable
{
    /// <summary>
    /// Salva todas as alterações pendentes no contexto
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Número de entidades afetadas</returns>
    Task<int> SalvarAlteracoesAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Inicia uma nova transação
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task IniciarTransacaoAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Confirma a transação atual
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task ConfirmarTransacaoAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Reverte a transação atual
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task ReverterTransacaoAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Executa uma operação dentro de uma transação
    /// </summary>
    /// <param name="operacao">Operação a ser executada</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Resultado da operação</returns>
    Task<T> ExecutarEmTransacaoAsync<T>(Func<Task<T>> operacao, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Executa uma operação dentro de uma transação sem retorno
    /// </summary>
    /// <param name="operacao">Operação a ser executada</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task ExecutarEmTransacaoAsync(Func<Task> operacao, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Descarta todas as alterações pendentes
    /// </summary>
    void DescartarAlteracoes();
    
    /// <summary>
    /// Verifica se há alterações pendentes
    /// </summary>
    /// <returns>True se há alterações pendentes</returns>
    bool TemAlteracoesPendentes();
}
</IUnitOfWork.cs>
<AreaPlantio.cs>
namespace Agriis.Compartilhado.Dominio.ObjetosValor;

/// <summary>
/// Objeto de valor para área de plantio em hectares
/// </summary>
public class AreaPlantio : ObjetoValorBase
{
    /// <summary>
    /// Valor da área em hectares
    /// </summary>
    public decimal Valor { get; private set; }

    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected AreaPlantio() { }

    /// <summary>
    /// Construtor público para criação da área de plantio
    /// </summary>
    /// <param name="valor">Área em hectares</param>
    /// <exception cref="ArgumentException">Lançada quando a área é inválida</exception>
    public AreaPlantio(decimal valor)
    {
        if (valor < 0)
            throw new ArgumentException("Área de plantio não pode ser negativa", nameof(valor));

        if (valor > 1_000_000) // Limite máximo razoável para área de plantio
            throw new ArgumentException("Área de plantio excede o limite máximo permitido", nameof(valor));

        Valor = Math.Round(valor, 4); // Precisão de 4 casas decimais para hectares
    }

    /// <summary>
    /// Retorna a área formatada com unidade
    /// </summary>
    public string ValorFormatado => $"{Valor:N2} ha";

    /// <summary>
    /// Converte hectares para metros quadrados
    /// </summary>
    public decimal EmMetrosQuadrados => Valor * 10000;

    /// <summary>
    /// Converte hectares para alqueires paulistas (1 alqueire = 2,42 hectares)
    /// </summary>
    public decimal EmAlqueiresPaulistas => Valor / 2.42m;

    /// <summary>
    /// Converte hectares para alqueires mineiros (1 alqueire = 4,84 hectares)
    /// </summary>
    public decimal EmAlqueiresMineiros => Valor / 4.84m;

    /// <summary>
    /// Soma duas áreas de plantio
    /// </summary>
    public static AreaPlantio operator +(AreaPlantio area1, AreaPlantio area2)
    {
        if (area1 == null) throw new ArgumentNullException(nameof(area1));
        if (area2 == null) throw new ArgumentNullException(nameof(area2));
        
        return new AreaPlantio(area1.Valor + area2.Valor);
    }

    /// <summary>
    /// Subtrai duas áreas de plantio
    /// </summary>
    public static AreaPlantio operator -(AreaPlantio area1, AreaPlantio area2)
    {
        if (area1 == null) throw new ArgumentNullException(nameof(area1));
        if (area2 == null) throw new ArgumentNullException(nameof(area2));
        
        return new AreaPlantio(area1.Valor - area2.Valor);
    }

    /// <summary>
    /// Multiplica área por um fator
    /// </summary>
    public static AreaPlantio operator *(AreaPlantio area, decimal fator)
    {
        if (area == null) throw new ArgumentNullException(nameof(area));
        
        return new AreaPlantio(area.Valor * fator);
    }

    /// <summary>
    /// Divide área por um fator
    /// </summary>
    public static AreaPlantio operator /(AreaPlantio area, decimal fator)
    {
        if (area == null) throw new ArgumentNullException(nameof(area));
        if (fator == 0) throw new DivideByZeroException("Não é possível dividir por zero");
        
        return new AreaPlantio(area.Valor / fator);
    }

    /// <summary>
    /// Compara se uma área é maior que outra
    /// </summary>
    public static bool operator >(AreaPlantio area1, AreaPlantio area2)
    {
        if (area1 == null || area2 == null) return false;
        return area1.Valor > area2.Valor;
    }

    /// <summary>
    /// Compara se uma área é menor que outra
    /// </summary>
    public static bool operator <(AreaPlantio area1, AreaPlantio area2)
    {
        if (area1 == null || area2 == null) return false;
        return area1.Valor < area2.Valor;
    }

    /// <summary>
    /// Compara se uma área é maior ou igual a outra
    /// </summary>
    public static bool operator >=(AreaPlantio area1, AreaPlantio area2)
    {
        if (area1 == null || area2 == null) return false;
        return area1.Valor >= area2.Valor;
    }

    /// <summary>
    /// Compara se uma área é menor ou igual a outra
    /// </summary>
    public static bool operator <=(AreaPlantio area1, AreaPlantio area2)
    {
        if (area1 == null || area2 == null) return false;
        return area1.Valor <= area2.Valor;
    }

    /// <summary>
    /// Retorna os componentes de igualdade
    /// </summary>
    protected override IEnumerable<object?> ObterComponentesIgualdade()
    {
        yield return Valor;
    }

    /// <summary>
    /// Representação em string da área
    /// </summary>
    public override string ToString() => ValorFormatado;

    /// <summary>
    /// Conversão implícita de decimal para AreaPlantio
    /// </summary>
    public static implicit operator AreaPlantio(decimal valor) => new(valor);

    /// <summary>
    /// Conversão implícita de AreaPlantio para decimal
    /// </summary>
    public static implicit operator decimal(AreaPlantio area) => area?.Valor ?? 0;

    /// <summary>
    /// Cria uma área de plantio a partir de metros quadrados
    /// </summary>
    public static AreaPlantio DeMetrosQuadrados(decimal metrosQuadrados)
    {
        return new AreaPlantio(metrosQuadrados / 10000);
    }

    /// <summary>
    /// Cria uma área de plantio a partir de alqueires paulistas
    /// </summary>
    public static AreaPlantio DeAlqueiresPaulistas(decimal alqueires)
    {
        return new AreaPlantio(alqueires * 2.42m);
    }

    /// <summary>
    /// Cria uma área de plantio a partir de alqueires mineiros
    /// </summary>
    public static AreaPlantio DeAlqueiresMineiros(decimal alqueires)
    {
        return new AreaPlantio(alqueires * 4.84m);
    }
}
</AreaPlantio.cs>
<Cnpj.cs>
using System.Text.RegularExpressions;

namespace Agriis.Compartilhado.Dominio.ObjetosValor;

/// <summary>
/// Objeto de valor para CNPJ (Cadastro Nacional da Pessoa Jurídica)
/// </summary>
public class Cnpj : ObjetoValorBase
{
    /// <summary>
    /// Valor do CNPJ sem formatação
    /// </summary>
    public string Valor { get; private set; } = string.Empty;

    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected Cnpj() { }

    /// <summary>
    /// Construtor público para criação do CNPJ
    /// </summary>
    /// <param name="valor">CNPJ com ou sem formatação</param>
    /// <exception cref="ArgumentException">Lançada quando o CNPJ é inválido</exception>
    public Cnpj(string valor)
    {
        if (string.IsNullOrWhiteSpace(valor))
            throw new ArgumentException("CNPJ não pode ser vazio ou nulo", nameof(valor));

        var cnpjLimpo = LimparCnpj(valor);
        
        if (!ValidarCnpj(cnpjLimpo))
            throw new ArgumentException("CNPJ inválido", nameof(valor));

        Valor = cnpjLimpo;
    }

    /// <summary>
    /// Retorna o CNPJ formatado (XX.XXX.XXX/XXXX-XX)
    /// </summary>
    public string ValorFormatado => FormatarCnpj(Valor);

    /// <summary>
    /// Remove formatação do CNPJ
    /// </summary>
    /// <param name="cnpj">CNPJ com ou sem formatação</param>
    /// <returns>CNPJ apenas com números</returns>
    private static string LimparCnpj(string cnpj)
    {
        return Regex.Replace(cnpj, @"[^\d]", "");
    }

    /// <summary>
    /// Formata o CNPJ com pontos, barra e hífen
    /// </summary>
    /// <param name="cnpj">CNPJ sem formatação</param>
    /// <returns>CNPJ formatado</returns>
    private static string FormatarCnpj(string cnpj)
    {
        if (cnpj.Length != 14)
            return cnpj;

        return $"{cnpj.Substring(0, 2)}.{cnpj.Substring(2, 3)}.{cnpj.Substring(5, 3)}/{cnpj.Substring(8, 4)}-{cnpj.Substring(12, 2)}";
    }

    /// <summary>
    /// Valida se o CNPJ é válido usando o algoritmo oficial
    /// </summary>
    /// <param name="cnpj">CNPJ sem formatação</param>
    /// <returns>True se válido, False caso contrário</returns>
    private static bool ValidarCnpj(string cnpj)
    {
        // CNPJ deve ter 14 dígitos
        if (cnpj.Length != 14)
            return false;

        // Verifica se todos os dígitos são iguais (CNPJ inválido)
        if (cnpj.All(c => c == cnpj[0]))
            return false;

        // Calcula o primeiro dígito verificador
        var multiplicadores1 = new int[] { 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2 };
        var soma = 0;

        for (int i = 0; i < 12; i++)
        {
            soma += int.Parse(cnpj[i].ToString()) * multiplicadores1[i];
        }

        var resto = soma % 11;
        var digitoVerificador1 = resto < 2 ? 0 : 11 - resto;

        if (int.Parse(cnpj[12].ToString()) != digitoVerificador1)
            return false;

        // Calcula o segundo dígito verificador
        var multiplicadores2 = new int[] { 6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2 };
        soma = 0;

        for (int i = 0; i < 13; i++)
        {
            soma += int.Parse(cnpj[i].ToString()) * multiplicadores2[i];
        }

        resto = soma % 11;
        var digitoVerificador2 = resto < 2 ? 0 : 11 - resto;

        return int.Parse(cnpj[13].ToString()) == digitoVerificador2;
    }

    /// <summary>
    /// Retorna os componentes de igualdade
    /// </summary>
    protected override IEnumerable<object?> ObterComponentesIgualdade()
    {
        yield return Valor;
    }

    /// <summary>
    /// Representação em string do CNPJ
    /// </summary>
    public override string ToString() => ValorFormatado;

    /// <summary>
    /// Conversão implícita de string para CNPJ
    /// </summary>
    public static implicit operator Cnpj(string valor) => new(valor);

    /// <summary>
    /// Conversão implícita de CNPJ para string
    /// </summary>
    public static implicit operator string(Cnpj cnpj) => cnpj?.Valor ?? string.Empty;
}
</Cnpj.cs>
<Cpf.cs>
using System.Text.RegularExpressions;

namespace Agriis.Compartilhado.Dominio.ObjetosValor;

/// <summary>
/// Objeto de valor para CPF (Cadastro de Pessoa Física)
/// </summary>
public class Cpf : ObjetoValorBase
{
    /// <summary>
    /// Valor do CPF sem formatação
    /// </summary>
    public string Valor { get; private set; } = string.Empty;

    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected Cpf() { }

    /// <summary>
    /// Construtor público para criação do CPF
    /// </summary>
    /// <param name="valor">CPF com ou sem formatação</param>
    /// <exception cref="ArgumentException">Lançada quando o CPF é inválido</exception>
    public Cpf(string valor)
    {
        if (string.IsNullOrWhiteSpace(valor))
            throw new ArgumentException("CPF não pode ser vazio ou nulo", nameof(valor));

        var cpfLimpo = LimparCpf(valor);
        
        if (!ValidarCpf(cpfLimpo))
            throw new ArgumentException("CPF inválido", nameof(valor));

        Valor = cpfLimpo;
    }

    /// <summary>
    /// Retorna o CPF formatado (XXX.XXX.XXX-XX)
    /// </summary>
    public string ValorFormatado => FormatarCpf(Valor);

    /// <summary>
    /// Remove formatação do CPF
    /// </summary>
    /// <param name="cpf">CPF com ou sem formatação</param>
    /// <returns>CPF apenas com números</returns>
    private static string LimparCpf(string cpf)
    {
        return Regex.Replace(cpf, @"[^\d]", "");
    }

    /// <summary>
    /// Formata o CPF com pontos e hífen
    /// </summary>
    /// <param name="cpf">CPF sem formatação</param>
    /// <returns>CPF formatado</returns>
    private static string FormatarCpf(string cpf)
    {
        if (cpf.Length != 11)
            return cpf;

        return $"{cpf.Substring(0, 3)}.{cpf.Substring(3, 3)}.{cpf.Substring(6, 3)}-{cpf.Substring(9, 2)}";
    }

    /// <summary>
    /// Valida se o CPF é válido usando o algoritmo oficial
    /// </summary>
    /// <param name="cpf">CPF sem formatação</param>
    /// <returns>True se válido, False caso contrário</returns>
    private static bool ValidarCpf(string cpf)
    {
        // CPF deve ter 11 dígitos
        if (cpf.Length != 11)
            return false;

        // Verifica se todos os dígitos são iguais (CPF inválido)
        if (cpf.All(c => c == cpf[0]))
            return false;

        // Calcula o primeiro dígito verificador
        var soma = 0;
        for (int i = 0; i < 9; i++)
        {
            soma += int.Parse(cpf[i].ToString()) * (10 - i);
        }

        var resto = soma % 11;
        var digitoVerificador1 = resto < 2 ? 0 : 11 - resto;

        if (int.Parse(cpf[9].ToString()) != digitoVerificador1)
            return false;

        // Calcula o segundo dígito verificador
        soma = 0;
        for (int i = 0; i < 10; i++)
        {
            soma += int.Parse(cpf[i].ToString()) * (11 - i);
        }

        resto = soma % 11;
        var digitoVerificador2 = resto < 2 ? 0 : 11 - resto;

        return int.Parse(cpf[10].ToString()) == digitoVerificador2;
    }

    /// <summary>
    /// Retorna os componentes de igualdade
    /// </summary>
    protected override IEnumerable<object?> ObterComponentesIgualdade()
    {
        yield return Valor;
    }

    /// <summary>
    /// Representação em string do CPF
    /// </summary>
    public override string ToString() => ValorFormatado;

    /// <summary>
    /// Conversão implícita de string para CPF
    /// </summary>
    public static implicit operator Cpf(string valor) => new(valor);

    /// <summary>
    /// Conversão implícita de CPF para string
    /// </summary>
    public static implicit operator string(Cpf cpf) => cpf?.Valor ?? string.Empty;
}
</Cpf.cs>
<ObjetoValorBase.cs>
namespace Agriis.Compartilhado.Dominio.ObjetosValor;

/// <summary>
/// Classe base para objetos de valor (Value Objects) no DDD
/// Implementa igualdade baseada em valor ao invés de referência
/// </summary>
public abstract class ObjetoValorBase : IEquatable<ObjetoValorBase>
{
    /// <summary>
    /// Retorna os componentes que definem a igualdade do objeto de valor
    /// </summary>
    /// <returns>Enumeração dos componentes de igualdade</returns>
    protected abstract IEnumerable<object?> ObterComponentesIgualdade();
    
    /// <summary>
    /// Implementação de igualdade baseada nos componentes
    /// </summary>
    public override bool Equals(object? obj)
    {
        if (obj == null || obj.GetType() != GetType())
            return false;
            
        return Equals((ObjetoValorBase)obj);
    }
    
    /// <summary>
    /// Implementação de igualdade tipada
    /// </summary>
    public bool Equals(ObjetoValorBase? other)
    {
        if (other == null)
            return false;
            
        return ObterComponentesIgualdade().SequenceEqual(other.ObterComponentesIgualdade());
    }
    
    /// <summary>
    /// Implementação de GetHashCode baseada nos componentes
    /// </summary>
    public override int GetHashCode()
    {
        return ObterComponentesIgualdade()
            .Where(x => x != null)
            .Aggregate(1, (current, obj) =>
            {
                unchecked
                {
                    return current * 23 + obj!.GetHashCode();
                }
            });
    }
    
    /// <summary>
    /// Operador de igualdade
    /// </summary>
    public static bool operator ==(ObjetoValorBase? left, ObjetoValorBase? right)
    {
        return Equals(left, right);
    }
    
    /// <summary>
    /// Operador de desigualdade
    /// </summary>
    public static bool operator !=(ObjetoValorBase? left, ObjetoValorBase? right)
    {
        return !Equals(left, right);
    }
    
    /// <summary>
    /// Cria uma cópia do objeto de valor
    /// </summary>
    /// <returns>Nova instância com os mesmos valores</returns>
    public virtual ObjetoValorBase Clonar()
    {
        return (ObjetoValorBase)MemberwiseClone();
    }
}
</ObjetoValorBase.cs>
<ValidadorDocumentosBrasileiros.cs>
using System.Text.RegularExpressions;

namespace Agriis.Compartilhado.Dominio.Validadores;

/// <summary>
/// Validador para documentos brasileiros (CPF, CNPJ, etc.)
/// </summary>
public static class ValidadorDocumentosBrasileiros
{
    /// <summary>
    /// Valida se um CPF é válido
    /// </summary>
    /// <param name="cpf">CPF com ou sem formatação</param>
    /// <returns>True se válido, False caso contrário</returns>
    public static bool ValidarCpf(string cpf)
    {
        if (string.IsNullOrWhiteSpace(cpf))
            return false;

        // Remove formatação
        cpf = Regex.Replace(cpf, @"[^\d]", "");

        // CPF deve ter 11 dígitos
        if (cpf.Length != 11)
            return false;

        // Verifica se todos os dígitos são iguais (CPF inválido)
        if (cpf.All(c => c == cpf[0]))
            return false;

        // Calcula o primeiro dígito verificador
        var soma = 0;
        for (int i = 0; i < 9; i++)
        {
            soma += int.Parse(cpf[i].ToString()) * (10 - i);
        }

        var resto = soma % 11;
        var digitoVerificador1 = resto < 2 ? 0 : 11 - resto;

        if (int.Parse(cpf[9].ToString()) != digitoVerificador1)
            return false;

        // Calcula o segundo dígito verificador
        soma = 0;
        for (int i = 0; i < 10; i++)
        {
            soma += int.Parse(cpf[i].ToString()) * (11 - i);
        }

        resto = soma % 11;
        var digitoVerificador2 = resto < 2 ? 0 : 11 - resto;

        return int.Parse(cpf[10].ToString()) == digitoVerificador2;
    }

    /// <summary>
    /// Valida se um CNPJ é válido
    /// </summary>
    /// <param name="cnpj">CNPJ com ou sem formatação</param>
    /// <returns>True se válido, False caso contrário</returns>
    public static bool ValidarCnpj(string cnpj)
    {
        if (string.IsNullOrWhiteSpace(cnpj))
            return false;

        // Remove formatação
        cnpj = Regex.Replace(cnpj, @"[^\d]", "");

        // CNPJ deve ter 14 dígitos
        if (cnpj.Length != 14)
            return false;

        // Verifica se todos os dígitos são iguais (CNPJ inválido)
        if (cnpj.All(c => c == cnpj[0]))
            return false;

        // Calcula o primeiro dígito verificador
        var multiplicadores1 = new int[] { 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2 };
        var soma = 0;

        for (int i = 0; i < 12; i++)
        {
            soma += int.Parse(cnpj[i].ToString()) * multiplicadores1[i];
        }

        var resto = soma % 11;
        var digitoVerificador1 = resto < 2 ? 0 : 11 - resto;

        if (int.Parse(cnpj[12].ToString()) != digitoVerificador1)
            return false;

        // Calcula o segundo dígito verificador
        var multiplicadores2 = new int[] { 6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2 };
        soma = 0;

        for (int i = 0; i < 13; i++)
        {
            soma += int.Parse(cnpj[i].ToString()) * multiplicadores2[i];
        }

        resto = soma % 11;
        var digitoVerificador2 = resto < 2 ? 0 : 11 - resto;

        return int.Parse(cnpj[13].ToString()) == digitoVerificador2;
    }

    /// <summary>
    /// Valida se uma Inscrição Estadual é válida (validação básica)
    /// </summary>
    /// <param name="inscricaoEstadual">Inscrição Estadual</param>
    /// <param name="uf">UF do estado</param>
    /// <returns>True se válida, False caso contrário</returns>
    public static bool ValidarInscricaoEstadual(string inscricaoEstadual, string uf)
    {
        if (string.IsNullOrWhiteSpace(inscricaoEstadual) || string.IsNullOrWhiteSpace(uf))
            return false;

        // Remove formatação
        inscricaoEstadual = Regex.Replace(inscricaoEstadual, @"[^\d]", "");

        // Verifica se é "ISENTO"
        if (inscricaoEstadual.ToUpper() == "ISENTO")
            return true;

        // Validação básica por tamanho (cada estado tem suas regras específicas)
        return uf.ToUpper() switch
        {
            "AC" => inscricaoEstadual.Length == 13,
            "AL" => inscricaoEstadual.Length == 9,
            "AP" => inscricaoEstadual.Length == 9,
            "AM" => inscricaoEstadual.Length == 9,
            "BA" => inscricaoEstadual.Length == 8 || inscricaoEstadual.Length == 9,
            "CE" => inscricaoEstadual.Length == 9,
            "DF" => inscricaoEstadual.Length == 13,
            "ES" => inscricaoEstadual.Length == 9,
            "GO" => inscricaoEstadual.Length == 9,
            "MA" => inscricaoEstadual.Length == 9,
            "MT" => inscricaoEstadual.Length == 11,
            "MS" => inscricaoEstadual.Length == 9,
            "MG" => inscricaoEstadual.Length == 13,
            "PA" => inscricaoEstadual.Length == 9,
            "PB" => inscricaoEstadual.Length == 9,
            "PR" => inscricaoEstadual.Length == 10,
            "PE" => inscricaoEstadual.Length == 9,
            "PI" => inscricaoEstadual.Length == 9,
            "RJ" => inscricaoEstadual.Length == 8,
            "RN" => inscricaoEstadual.Length == 9 || inscricaoEstadual.Length == 10,
            "RS" => inscricaoEstadual.Length == 10,
            "RO" => inscricaoEstadual.Length == 9 || inscricaoEstadual.Length == 14,
            "RR" => inscricaoEstadual.Length == 9,
            "SC" => inscricaoEstadual.Length == 9,
            "SP" => inscricaoEstadual.Length == 12,
            "SE" => inscricaoEstadual.Length == 9,
            "TO" => inscricaoEstadual.Length == 11,
            _ => false
        };
    }

    /// <summary>
    /// Valida se um CEP é válido
    /// </summary>
    /// <param name="cep">CEP com ou sem formatação</param>
    /// <returns>True se válido, False caso contrário</returns>
    public static bool ValidarCep(string cep)
    {
        if (string.IsNullOrWhiteSpace(cep))
            return false;

        // Remove formatação
        cep = Regex.Replace(cep, @"[^\d]", "");

        // CEP deve ter 8 dígitos
        return cep.Length == 8 && cep.All(char.IsDigit);
    }

    /// <summary>
    /// Valida se um telefone brasileiro é válido
    /// </summary>
    /// <param name="telefone">Telefone com ou sem formatação</param>
    /// <returns>True se válido, False caso contrário</returns>
    public static bool ValidarTelefone(string telefone)
    {
        if (string.IsNullOrWhiteSpace(telefone))
            return false;

        // Remove formatação
        telefone = Regex.Replace(telefone, @"[^\d]", "");

        // Telefone deve ter 10 ou 11 dígitos (com DDD)
        // 10 dígitos: telefone fixo (XX) XXXX-XXXX
        // 11 dígitos: celular (XX) 9XXXX-XXXX
        return telefone.Length == 10 || telefone.Length == 11;
    }

    /// <summary>
    /// Valida se um email é válido
    /// </summary>
    /// <param name="email">Email a ser validado</param>
    /// <returns>True se válido, False caso contrário</returns>
    public static bool ValidarEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;

        try
        {
            var emailRegex = new Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", RegexOptions.IgnoreCase);
            return emailRegex.IsMatch(email);
        }
        catch
        {
            return false;
        }
    }

    /// <summary>
    /// Remove formatação de CPF
    /// </summary>
    /// <param name="cpf">CPF formatado</param>
    /// <returns>CPF sem formatação</returns>
    public static string LimparCpf(string cpf)
    {
        return string.IsNullOrWhiteSpace(cpf) ? string.Empty : Regex.Replace(cpf, @"[^\d]", "");
    }

    /// <summary>
    /// Remove formatação de CNPJ
    /// </summary>
    /// <param name="cnpj">CNPJ formatado</param>
    /// <returns>CNPJ sem formatação</returns>
    public static string LimparCnpj(string cnpj)
    {
        return string.IsNullOrWhiteSpace(cnpj) ? string.Empty : Regex.Replace(cnpj, @"[^\d]", "");
    }

    /// <summary>
    /// Formata CPF
    /// </summary>
    /// <param name="cpf">CPF sem formatação</param>
    /// <returns>CPF formatado</returns>
    public static string FormatarCpf(string cpf)
    {
        if (string.IsNullOrWhiteSpace(cpf) || cpf.Length != 11)
            return cpf;

        return $"{cpf.Substring(0, 3)}.{cpf.Substring(3, 3)}.{cpf.Substring(6, 3)}-{cpf.Substring(9, 2)}";
    }

    /// <summary>
    /// Formata CNPJ
    /// </summary>
    /// <param name="cnpj">CNPJ sem formatação</param>
    /// <returns>CNPJ formatado</returns>
    public static string FormatarCnpj(string cnpj)
    {
        if (string.IsNullOrWhiteSpace(cnpj) || cnpj.Length != 14)
            return cnpj;

        return $"{cnpj.Substring(0, 2)}.{cnpj.Substring(2, 3)}.{cnpj.Substring(5, 3)}/{cnpj.Substring(8, 4)}-{cnpj.Substring(12, 2)}";
    }

    /// <summary>
    /// Formata CEP
    /// </summary>
    /// <param name="cep">CEP sem formatação</param>
    /// <returns>CEP formatado</returns>
    public static string FormatarCep(string cep)
    {
        if (string.IsNullOrWhiteSpace(cep) || cep.Length != 8)
            return cep;

        return $"{cep.Substring(0, 5)}-{cep.Substring(5, 3)}";
    }

    /// <summary>
    /// Formata telefone
    /// </summary>
    /// <param name="telefone">Telefone sem formatação</param>
    /// <returns>Telefone formatado</returns>
    public static string FormatarTelefone(string telefone)
    {
        if (string.IsNullOrWhiteSpace(telefone))
            return telefone;

        telefone = Regex.Replace(telefone, @"[^\d]", "");

        return telefone.Length switch
        {
            10 => $"({telefone.Substring(0, 2)}) {telefone.Substring(2, 4)}-{telefone.Substring(6, 4)}",
            11 => $"({telefone.Substring(0, 2)}) {telefone.Substring(2, 5)}-{telefone.Substring(7, 4)}",
            _ => telefone
        };
    }
}
</ValidadorDocumentosBrasileiros.cs>
<AwsService.cs>
using Amazon.S3;
using Amazon.S3.Model;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Text;

namespace Agriis.Compartilhado.Infraestrutura.Integracoes;

public interface IAwsService
{
    Task<string> UploadFileAsync(string bucketName, string key, Stream fileStream, string contentType);
    Task<string> UploadFileAsync(string key, Stream fileStream, string contentType);
    Task<Stream> DownloadFileAsync(string bucketName, string key);
    Task<Stream> DownloadFileAsync(string key);
    Task<bool> DeleteFileAsync(string bucketName, string key);
    Task<bool> DeleteFileAsync(string key);
    Task<bool> FileExistsAsync(string bucketName, string key);
    Task<bool> FileExistsAsync(string key);
    Task<string> GetPreSignedUrlAsync(string bucketName, string key, TimeSpan expiration);
    Task<string> GetPreSignedUrlAsync(string key, TimeSpan expiration);
    Task<IEnumerable<string>> ListFilesAsync(string bucketName, string prefix = "");
    Task<IEnumerable<string>> ListFilesAsync(string prefix = "");
}

public class AwsService : IAwsService
{
    private readonly IAmazonS3 _s3Client;
    private readonly ILogger<AwsService> _logger;
    private readonly string _defaultBucketName;

    public AwsService(IAmazonS3 s3Client, IConfiguration configuration, ILogger<AwsService> logger)
    {
        _s3Client = s3Client ?? throw new ArgumentNullException(nameof(s3Client));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _defaultBucketName = configuration["AwsSettings:S3BucketName"] ?? throw new ArgumentNullException("AwsSettings:S3BucketName");
    }

    public async Task<string> UploadFileAsync(string bucketName, string key, Stream fileStream, string contentType)
    {
        try
        {
            var request = new PutObjectRequest
            {
                BucketName = bucketName,
                Key = key,
                InputStream = fileStream,
                ContentType = contentType,
                ServerSideEncryptionMethod = ServerSideEncryptionMethod.AES256
            };

            var response = await _s3Client.PutObjectAsync(request);
            
            _logger.LogInformation("Arquivo {Key} enviado com sucesso para o bucket {BucketName}. ETag: {ETag}", 
                key, bucketName, response.ETag);

            return $"https://{bucketName}.s3.amazonaws.com/{key}";
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar arquivo {Key} para o bucket {BucketName}", key, bucketName);
            throw;
        }
    }

    public async Task<string> UploadFileAsync(string key, Stream fileStream, string contentType)
    {
        return await UploadFileAsync(_defaultBucketName, key, fileStream, contentType);
    }

    public async Task<Stream> DownloadFileAsync(string bucketName, string key)
    {
        try
        {
            var request = new GetObjectRequest
            {
                BucketName = bucketName,
                Key = key
            };

            var response = await _s3Client.GetObjectAsync(request);
            
            _logger.LogInformation("Arquivo {Key} baixado com sucesso do bucket {BucketName}", key, bucketName);
            
            return response.ResponseStream;
        }
        catch (AmazonS3Exception ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            _logger.LogWarning("Arquivo {Key} não encontrado no bucket {BucketName}", key, bucketName);
            throw new FileNotFoundException($"Arquivo {key} não encontrado no bucket {bucketName}");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao baixar arquivo {Key} do bucket {BucketName}", key, bucketName);
            throw;
        }
    }

    public async Task<Stream> DownloadFileAsync(string key)
    {
        return await DownloadFileAsync(_defaultBucketName, key);
    }

    public async Task<bool> DeleteFileAsync(string bucketName, string key)
    {
        try
        {
            var request = new DeleteObjectRequest
            {
                BucketName = bucketName,
                Key = key
            };

            await _s3Client.DeleteObjectAsync(request);
            
            _logger.LogInformation("Arquivo {Key} excluído com sucesso do bucket {BucketName}", key, bucketName);
            
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao excluir arquivo {Key} do bucket {BucketName}", key, bucketName);
            return false;
        }
    }

    public async Task<bool> DeleteFileAsync(string key)
    {
        return await DeleteFileAsync(_defaultBucketName, key);
    }

    public async Task<bool> FileExistsAsync(string bucketName, string key)
    {
        try
        {
            var request = new GetObjectMetadataRequest
            {
                BucketName = bucketName,
                Key = key
            };

            await _s3Client.GetObjectMetadataAsync(request);
            return true;
        }
        catch (AmazonS3Exception ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            return false;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao verificar existência do arquivo {Key} no bucket {BucketName}", key, bucketName);
            throw;
        }
    }

    public async Task<bool> FileExistsAsync(string key)
    {
        return await FileExistsAsync(_defaultBucketName, key);
    }

    public async Task<string> GetPreSignedUrlAsync(string bucketName, string key, TimeSpan expiration)
    {
        try
        {
            var request = new GetPreSignedUrlRequest
            {
                BucketName = bucketName,
                Key = key,
                Verb = HttpVerb.GET,
                Expires = DateTime.UtcNow.Add(expiration)
            };

            var url = await _s3Client.GetPreSignedURLAsync(request);
            
            _logger.LogInformation("URL pré-assinada gerada para arquivo {Key} no bucket {BucketName}, expira em {Expiration}", 
                key, bucketName, expiration);
            
            return url;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao gerar URL pré-assinada para arquivo {Key} no bucket {BucketName}", key, bucketName);
            throw;
        }
    }

    public async Task<string> GetPreSignedUrlAsync(string key, TimeSpan expiration)
    {
        return await GetPreSignedUrlAsync(_defaultBucketName, key, expiration);
    }

    public async Task<IEnumerable<string>> ListFilesAsync(string bucketName, string prefix = "")
    {
        try
        {
            var request = new ListObjectsV2Request
            {
                BucketName = bucketName,
                Prefix = prefix,
                MaxKeys = 1000
            };

            var files = new List<string>();
            ListObjectsV2Response response;

            do
            {
                response = await _s3Client.ListObjectsV2Async(request);
                files.AddRange(response.S3Objects.Select(obj => obj.Key));
                request.ContinuationToken = response.NextContinuationToken;
            }
            while (response.IsTruncated);

            _logger.LogInformation("Listados {Count} arquivos no bucket {BucketName} com prefixo '{Prefix}'", 
                files.Count, bucketName, prefix);

            return files;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao listar arquivos no bucket {BucketName} com prefixo '{Prefix}'", bucketName, prefix);
            throw;
        }
    }

    public async Task<IEnumerable<string>> ListFilesAsync(string prefix = "")
    {
        return await ListFilesAsync(_defaultBucketName, prefix);
    }
}
</AwsService.cs>
<CurrencyConverterService.cs>
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System.Text.Json;

namespace Agriis.Compartilhado.Infraestrutura.Integracoes;

public interface ICurrencyConverterService
{
    Task<decimal> ConvertAsync(decimal amount, string fromCurrency, string toCurrency);
    Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency);
    Task<Dictionary<string, decimal>> GetAllRatesAsync(string baseCurrency = "USD");
    Task RefreshRatesAsync();
}

public class CurrencyConverterService : ICurrencyConverterService
{
    private readonly HttpClient _httpClient;
    private readonly IMemoryCache _cache;
    private readonly ILogger<CurrencyConverterService> _logger;
    private readonly string _apiKey;
    private readonly string _baseUrl;
    private readonly TimeSpan _cacheExpiration;

    public CurrencyConverterService(
        HttpClient httpClient, 
        IMemoryCache cache, 
        IConfiguration configuration, 
        ILogger<CurrencyConverterService> logger)
    {
        _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
        _cache = cache ?? throw new ArgumentNullException(nameof(cache));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        
        _apiKey = configuration["CurrencySettings:ApiKey"] ?? "";
        _baseUrl = configuration["CurrencySettings:BaseUrl"] ?? "https://api.exchangerate-api.com/v4/latest";
        _cacheExpiration = TimeSpan.FromMinutes(configuration.GetValue<int>("CurrencySettings:CacheExpirationMinutes", 60));
    }

    public async Task<decimal> ConvertAsync(decimal amount, string fromCurrency, string toCurrency)
    {
        if (string.IsNullOrWhiteSpace(fromCurrency) || string.IsNullOrWhiteSpace(toCurrency))
        {
            throw new ArgumentException("Moedas de origem e destino devem ser especificadas");
        }

        if (fromCurrency.Equals(toCurrency, StringComparison.OrdinalIgnoreCase))
        {
            return amount;
        }

        try
        {
            var rate = await GetExchangeRateAsync(fromCurrency, toCurrency);
            var convertedAmount = amount * rate;

            _logger.LogInformation("Conversão realizada: {Amount} {FromCurrency} = {ConvertedAmount} {ToCurrency} (Taxa: {Rate})",
                amount, fromCurrency, convertedAmount, toCurrency, rate);

            return Math.Round(convertedAmount, 4);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao converter {Amount} de {FromCurrency} para {ToCurrency}",
                amount, fromCurrency, toCurrency);
            throw;
        }
    }

    public async Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency)
    {
        if (string.IsNullOrWhiteSpace(fromCurrency) || string.IsNullOrWhiteSpace(toCurrency))
        {
            throw new ArgumentException("Moedas de origem e destino devem ser especificadas");
        }

        if (fromCurrency.Equals(toCurrency, StringComparison.OrdinalIgnoreCase))
        {
            return 1.0m;
        }

        var cacheKey = $"exchange_rate_{fromCurrency}_{toCurrency}";
        
        if (_cache.TryGetValue(cacheKey, out decimal cachedRate))
        {
            _logger.LogDebug("Taxa de câmbio obtida do cache: {FromCurrency}/{ToCurrency} = {Rate}",
                fromCurrency, toCurrency, cachedRate);
            return cachedRate;
        }

        try
        {
            var rates = await GetAllRatesAsync(fromCurrency);
            
            if (!rates.TryGetValue(toCurrency.ToUpper(), out decimal rate))
            {
                throw new InvalidOperationException($"Taxa de câmbio não encontrada para {fromCurrency}/{toCurrency}");
            }

            _cache.Set(cacheKey, rate, _cacheExpiration);
            
            _logger.LogInformation("Taxa de câmbio obtida da API: {FromCurrency}/{ToCurrency} = {Rate}",
                fromCurrency, toCurrency, rate);

            return rate;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter taxa de câmbio {FromCurrency}/{ToCurrency}",
                fromCurrency, toCurrency);
            
            // Tentar usar taxa padrão em caso de erro
            if (TryGetFallbackRate(fromCurrency, toCurrency, out decimal fallbackRate))
            {
                _logger.LogWarning("Usando taxa de câmbio padrão: {FromCurrency}/{ToCurrency} = {Rate}",
                    fromCurrency, toCurrency, fallbackRate);
                return fallbackRate;
            }
            
            throw;
        }
    }

    public async Task<Dictionary<string, decimal>> GetAllRatesAsync(string baseCurrency = "USD")
    {
        var cacheKey = $"all_rates_{baseCurrency}";
        
        if (_cache.TryGetValue(cacheKey, out Dictionary<string, decimal>? cachedRates) && cachedRates != null)
        {
            _logger.LogDebug("Taxas de câmbio obtidas do cache para base {BaseCurrency}", baseCurrency);
            return cachedRates;
        }

        try
        {
            var url = string.IsNullOrEmpty(_apiKey) 
                ? $"{_baseUrl}/{baseCurrency}"
                : $"{_baseUrl}/{baseCurrency}?access_key={_apiKey}";

            var response = await _httpClient.GetAsync(url);
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync();
            var exchangeRateResponse = JsonSerializer.Deserialize<ExchangeRateResponse>(content);

            if (exchangeRateResponse?.Rates == null)
            {
                throw new InvalidOperationException("Resposta inválida da API de câmbio");
            }

            var rates = exchangeRateResponse.Rates;
            _cache.Set(cacheKey, rates, _cacheExpiration);

            _logger.LogInformation("Taxas de câmbio atualizadas para base {BaseCurrency}. {Count} moedas disponíveis",
                baseCurrency, rates.Count);

            return rates;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter todas as taxas de câmbio para base {BaseCurrency}", baseCurrency);
            
            // Retornar taxas padrão em caso de erro
            var fallbackRates = GetFallbackRates(baseCurrency);
            if (fallbackRates.Any())
            {
                _logger.LogWarning("Usando taxas de câmbio padrão para base {BaseCurrency}", baseCurrency);
                return fallbackRates;
            }
            
            throw;
        }
    }

    public async Task RefreshRatesAsync()
    {
        try
        {
            _logger.LogInformation("Iniciando atualização manual das taxas de câmbio");

            // Limpar cache
            if (_cache is MemoryCache memoryCache)
            {
                memoryCache.Compact(1.0);
            }

            // Recarregar taxas principais
            var baseCurrencies = new[] { "USD", "BRL", "EUR" };
            
            foreach (var baseCurrency in baseCurrencies)
            {
                await GetAllRatesAsync(baseCurrency);
            }

            _logger.LogInformation("Atualização manual das taxas de câmbio concluída");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro durante atualização manual das taxas de câmbio");
            throw;
        }
    }

    private bool TryGetFallbackRate(string fromCurrency, string toCurrency, out decimal rate)
    {
        rate = 0;

        // Taxas padrão para casos de emergência (valores aproximados)
        var fallbackRates = new Dictionary<string, Dictionary<string, decimal>>
        {
            ["USD"] = new()
            {
                ["BRL"] = 5.0m,
                ["EUR"] = 0.85m,
                ["GBP"] = 0.75m
            },
            ["BRL"] = new()
            {
                ["USD"] = 0.20m,
                ["EUR"] = 0.17m,
                ["GBP"] = 0.15m
            },
            ["EUR"] = new()
            {
                ["USD"] = 1.18m,
                ["BRL"] = 5.88m,
                ["GBP"] = 0.88m
            }
        };

        if (fallbackRates.TryGetValue(fromCurrency.ToUpper(), out var fromRates) &&
            fromRates.TryGetValue(toCurrency.ToUpper(), out rate))
        {
            return true;
        }

        return false;
    }

    private Dictionary<string, decimal> GetFallbackRates(string baseCurrency)
    {
        // Taxas padrão básicas para casos de emergência
        return baseCurrency.ToUpper() switch
        {
            "USD" => new Dictionary<string, decimal>
            {
                ["BRL"] = 5.0m,
                ["EUR"] = 0.85m,
                ["GBP"] = 0.75m,
                ["JPY"] = 110.0m,
                ["CAD"] = 1.25m
            },
            "BRL" => new Dictionary<string, decimal>
            {
                ["USD"] = 0.20m,
                ["EUR"] = 0.17m,
                ["GBP"] = 0.15m,
                ["JPY"] = 22.0m,
                ["CAD"] = 0.25m
            },
            _ => new Dictionary<string, decimal>()
        };
    }
}

public class ExchangeRateResponse
{
    public string? Base { get; set; }
    public string? Date { get; set; }
    public Dictionary<string, decimal> Rates { get; set; } = new();
}

// Background service para atualizar taxas periodicamente
public class CurrencyRateUpdateService : BackgroundService
{
    private readonly IServiceProvider _serviceProvider;
    private readonly ILogger<CurrencyRateUpdateService> _logger;
    private readonly TimeSpan _updateInterval;

    public CurrencyRateUpdateService(
        IServiceProvider serviceProvider,
        IConfiguration configuration,
        ILogger<CurrencyRateUpdateService> logger)
    {
        _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        
        var intervalMinutes = configuration.GetValue<int>("CurrencySettings:UpdateIntervalMinutes", 60);
        _updateInterval = TimeSpan.FromMinutes(intervalMinutes);
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("Serviço de atualização de taxas de câmbio iniciado. Intervalo: {Interval}", _updateInterval);

        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                using var scope = _serviceProvider.CreateScope();
                var currencyService = scope.ServiceProvider.GetRequiredService<ICurrencyConverterService>();
                
                await currencyService.RefreshRatesAsync();
                _logger.LogInformation("Taxas de câmbio atualizadas automaticamente");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro durante atualização automática das taxas de câmbio");
            }

            await Task.Delay(_updateInterval, stoppingToken);
        }
    }
}
</CurrencyConverterService.cs>
<NotificationService.cs>
using Microsoft.AspNetCore.SignalR;
using Microsoft.Extensions.Logging;
using System.Text.Json;

namespace Agriis.Compartilhado.Infraestrutura.Integracoes;

public interface INotificationService
{
    Task SendNotificationToUserAsync(string userId, string message, object? data = null);
    Task SendNotificationToGroupAsync(string groupName, string message, object? data = null);
    Task SendNotificationToAllAsync(string message, object? data = null);
    Task AddUserToGroupAsync(string userId, string groupName);
    Task RemoveUserFromGroupAsync(string userId, string groupName);
    Task SendPedidoNotificationAsync(int pedidoId, string userId, string message, object? data = null);
    Task SendPropostaNotificationAsync(int propostaId, string userId, string message, object? data = null);
    Task SendSystemNotificationAsync(string message, object? data = null);
}

public class NotificationService : INotificationService
{
    private readonly IHubContext<NotificationHub> _hubContext;
    private readonly ILogger<NotificationService> _logger;

    public NotificationService(IHubContext<NotificationHub> hubContext, ILogger<NotificationService> logger)
    {
        _hubContext = hubContext ?? throw new ArgumentNullException(nameof(hubContext));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task SendNotificationToUserAsync(string userId, string message, object? data = null)
    {
        try
        {
            var notification = new
            {
                Message = message,
                Data = data,
                Timestamp = DateTime.UtcNow,
                Type = "user"
            };

            await _hubContext.Clients.User(userId).SendAsync("ReceiveNotification", notification);
            
            _logger.LogInformation("Notificação enviada para usuário {UserId}: {Message}", userId, message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar notificação para usuário {UserId}: {Message}", userId, message);
            throw;
        }
    }

    public async Task SendNotificationToGroupAsync(string groupName, string message, object? data = null)
    {
        try
        {
            var notification = new
            {
                Message = message,
                Data = data,
                Timestamp = DateTime.UtcNow,
                Type = "group"
            };

            await _hubContext.Clients.Group(groupName).SendAsync("ReceiveNotification", notification);
            
            _logger.LogInformation("Notificação enviada para grupo {GroupName}: {Message}", groupName, message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar notificação para grupo {GroupName}: {Message}", groupName, message);
            throw;
        }
    }

    public async Task SendNotificationToAllAsync(string message, object? data = null)
    {
        try
        {
            var notification = new
            {
                Message = message,
                Data = data,
                Timestamp = DateTime.UtcNow,
                Type = "broadcast"
            };

            await _hubContext.Clients.All.SendAsync("ReceiveNotification", notification);
            
            _logger.LogInformation("Notificação broadcast enviada: {Message}", message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar notificação broadcast: {Message}", message);
            throw;
        }
    }

    public async Task AddUserToGroupAsync(string userId, string groupName)
    {
        try
        {
            await _hubContext.Groups.AddToGroupAsync(userId, groupName);
            
            _logger.LogInformation("Usuário {UserId} adicionado ao grupo {GroupName}", userId, groupName);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao adicionar usuário {UserId} ao grupo {GroupName}", userId, groupName);
            throw;
        }
    }

    public async Task RemoveUserFromGroupAsync(string userId, string groupName)
    {
        try
        {
            await _hubContext.Groups.RemoveFromGroupAsync(userId, groupName);
            
            _logger.LogInformation("Usuário {UserId} removido do grupo {GroupName}", userId, groupName);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover usuário {UserId} do grupo {GroupName}", userId, groupName);
            throw;
        }
    }

    public async Task SendPedidoNotificationAsync(int pedidoId, string userId, string message, object? data = null)
    {
        try
        {
            var notification = new
            {
                Message = message,
                Data = data,
                Timestamp = DateTime.UtcNow,
                Type = "pedido",
                PedidoId = pedidoId
            };

            await _hubContext.Clients.User(userId).SendAsync("ReceivePedidoNotification", notification);
            
            _logger.LogInformation("Notificação de pedido {PedidoId} enviada para usuário {UserId}: {Message}", 
                pedidoId, userId, message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar notificação de pedido {PedidoId} para usuário {UserId}: {Message}", 
                pedidoId, userId, message);
            throw;
        }
    }

    public async Task SendPropostaNotificationAsync(int propostaId, string userId, string message, object? data = null)
    {
        try
        {
            var notification = new
            {
                Message = message,
                Data = data,
                Timestamp = DateTime.UtcNow,
                Type = "proposta",
                PropostaId = propostaId
            };

            await _hubContext.Clients.User(userId).SendAsync("ReceivePropostaNotification", notification);
            
            _logger.LogInformation("Notificação de proposta {PropostaId} enviada para usuário {UserId}: {Message}", 
                propostaId, userId, message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar notificação de proposta {PropostaId} para usuário {UserId}: {Message}", 
                propostaId, userId, message);
            throw;
        }
    }

    public async Task SendSystemNotificationAsync(string message, object? data = null)
    {
        try
        {
            var notification = new
            {
                Message = message,
                Data = data,
                Timestamp = DateTime.UtcNow,
                Type = "system"
            };

            await _hubContext.Clients.All.SendAsync("ReceiveSystemNotification", notification);
            
            _logger.LogInformation("Notificação do sistema enviada: {Message}", message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao enviar notificação do sistema: {Message}", message);
            throw;
        }
    }
}

public class NotificationHub : Hub
{
    private readonly ILogger<NotificationHub> _logger;

    public NotificationHub(ILogger<NotificationHub> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public override async Task OnConnectedAsync()
    {
        var userId = Context.UserIdentifier;
        _logger.LogInformation("Cliente conectado ao hub de notificações. ConnectionId: {ConnectionId}, UserId: {UserId}", 
            Context.ConnectionId, userId);

        // Adicionar usuário a grupos baseados em suas roles ou características
        if (!string.IsNullOrEmpty(userId))
        {
            // Adicionar a grupo geral de usuários autenticados
            await Groups.AddToGroupAsync(Context.ConnectionId, "authenticated-users");
            
            // Adicionar a grupos específicos baseados em claims do usuário
            var userType = Context.User?.FindFirst("user_type")?.Value;
            if (!string.IsNullOrEmpty(userType))
            {
                await Groups.AddToGroupAsync(Context.ConnectionId, $"{userType}-users");
            }
        }

        await base.OnConnectedAsync();
    }

    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        var userId = Context.UserIdentifier;
        _logger.LogInformation("Cliente desconectado do hub de notificações. ConnectionId: {ConnectionId}, UserId: {UserId}", 
            Context.ConnectionId, userId);

        if (exception != null)
        {
            _logger.LogError(exception, "Cliente desconectado com erro. ConnectionId: {ConnectionId}", Context.ConnectionId);
        }

        await base.OnDisconnectedAsync(exception);
    }

    public async Task JoinGroup(string groupName)
    {
        await Groups.AddToGroupAsync(Context.ConnectionId, groupName);
        _logger.LogInformation("Cliente {ConnectionId} adicionado ao grupo {GroupName}", Context.ConnectionId, groupName);
    }

    public async Task LeaveGroup(string groupName)
    {
        await Groups.RemoveFromGroupAsync(Context.ConnectionId, groupName);
        _logger.LogInformation("Cliente {ConnectionId} removido do grupo {GroupName}", Context.ConnectionId, groupName);
    }

    public async Task SendMessageToGroup(string groupName, string message)
    {
        await Clients.Group(groupName).SendAsync("ReceiveMessage", Context.User?.Identity?.Name ?? "Anônimo", message);
        _logger.LogInformation("Mensagem enviada para grupo {GroupName} por {User}: {Message}", 
            groupName, Context.User?.Identity?.Name ?? "Anônimo", message);
    }
}
</NotificationService.cs>
<CorrelationIdEnricher.cs>
using Serilog.Core;
using Serilog.Events;
using Microsoft.AspNetCore.Http;

namespace Agriis.Compartilhado.Infraestrutura.Logging;

/// <summary>
/// Enriquecedor que adiciona o ID de correlação aos logs
/// </summary>
public class CorrelationIdEnricher : ILogEventEnricher
{
    private readonly IHttpContextAccessor _httpContextAccessor;

    public CorrelationIdEnricher(IHttpContextAccessor httpContextAccessor)
    {
        _httpContextAccessor = httpContextAccessor;
    }

    public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)
    {
        var httpContext = _httpContextAccessor.HttpContext;
        if (httpContext == null) return;

        // Correlation ID
        if (httpContext.Request.Headers.TryGetValue("X-Correlation-ID", out var correlationId))
        {
            var correlationIdProperty = propertyFactory.CreateProperty("CorrelationId", correlationId.ToString());
            logEvent.AddPropertyIfAbsent(correlationIdProperty);
        }

        // Request Path
        var requestPath = httpContext.Request.Path.Value;
        if (!string.IsNullOrEmpty(requestPath))
        {
            var requestPathProperty = propertyFactory.CreateProperty("RequestPath", requestPath);
            logEvent.AddPropertyIfAbsent(requestPathProperty);
        }

        // Request Method
        var requestMethod = httpContext.Request.Method;
        if (!string.IsNullOrEmpty(requestMethod))
        {
            var requestMethodProperty = propertyFactory.CreateProperty("RequestMethod", requestMethod);
            logEvent.AddPropertyIfAbsent(requestMethodProperty);
        }

        // Remote IP Address
        var remoteIp = httpContext.Connection.RemoteIpAddress?.ToString();
        if (!string.IsNullOrEmpty(remoteIp))
        {
            var remoteIpProperty = propertyFactory.CreateProperty("RemoteIpAddress", remoteIp);
            logEvent.AddPropertyIfAbsent(remoteIpProperty);
        }

        // User Agent
        var userAgent = httpContext.Request.Headers.UserAgent.FirstOrDefault();
        if (!string.IsNullOrEmpty(userAgent))
        {
            var userAgentProperty = propertyFactory.CreateProperty("UserAgent", userAgent);
            logEvent.AddPropertyIfAbsent(userAgentProperty);
        }
    }
}
</CorrelationIdEnricher.cs>
<ILoggingContext.cs>
namespace Agriis.Compartilhado.Infraestrutura.Logging;

/// <summary>
/// Interface para contexto de logging estruturado
/// </summary>
public interface ILoggingContext
{
    /// <summary>
    /// ID de correlação da requisição atual
    /// </summary>
    string? CorrelationId { get; set; }

    /// <summary>
    /// ID do usuário autenticado
    /// </summary>
    string? UserId { get; set; }

    /// <summary>
    /// Email do usuário autenticado
    /// </summary>
    string? UserEmail { get; set; }

    /// <summary>
    /// Caminho da requisição atual
    /// </summary>
    string? RequestPath { get; set; }

    /// <summary>
    /// Método HTTP da requisição atual
    /// </summary>
    string? RequestMethod { get; set; }

    /// <summary>
    /// IP remoto da requisição
    /// </summary>
    string? RemoteIpAddress { get; set; }

    /// <summary>
    /// User Agent da requisição
    /// </summary>
    string? UserAgent { get; set; }

    /// <summary>
    /// Adiciona propriedade customizada ao contexto
    /// </summary>
    void AddProperty(string key, object? value);

    /// <summary>
    /// Remove propriedade do contexto
    /// </summary>
    void RemoveProperty(string key);

    /// <summary>
    /// Obtém todas as propriedades do contexto
    /// </summary>
    IDictionary<string, object?> GetProperties();

    /// <summary>
    /// Limpa o contexto
    /// </summary>
    void Clear();
}
</ILoggingContext.cs>
<LoggerExtensions.cs>
using Microsoft.Extensions.Logging;
using System.Runtime.CompilerServices;

namespace Agriis.Compartilhado.Infraestrutura.Logging;

/// <summary>
/// Extensões para logging estruturado
/// </summary>
public static class LoggerExtensions
{
    /// <summary>
    /// Log de início de operação
    /// </summary>
    public static IDisposable BeginOperation(this ILogger logger, string operationName, object? parameters = null,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
    {
        var operationId = Guid.NewGuid().ToString("N")[..8];
        
        logger.LogInformation("Starting operation {OperationName} with ID {OperationId} at {MemberName} in {SourceFile}:{SourceLine} {@Parameters}",
            operationName, operationId, memberName, Path.GetFileName(sourceFilePath), sourceLineNumber, parameters);

        return new OperationScope(logger, operationName, operationId);
    }

    /// <summary>
    /// Log de erro com contexto estruturado
    /// </summary>
    public static void LogStructuredError(this ILogger logger, Exception exception, string message, object? context = null,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
    {
        logger.LogError(exception, 
            "Error in {MemberName} at {SourceFile}:{SourceLine} - {Message} {@Context}",
            memberName, Path.GetFileName(sourceFilePath), sourceLineNumber, message, context);
    }

    /// <summary>
    /// Log de warning com contexto estruturado
    /// </summary>
    public static void LogStructuredWarning(this ILogger logger, string message, object? context = null,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
    {
        logger.LogWarning(
            "Warning in {MemberName} at {SourceFile}:{SourceLine} - {Message} {@Context}",
            memberName, Path.GetFileName(sourceFilePath), sourceLineNumber, message, context);
    }

    /// <summary>
    /// Log de informação com contexto estruturado
    /// </summary>
    public static void LogStructuredInformation(this ILogger logger, string message, object? context = null,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
    {
        logger.LogInformation(
            "Info in {MemberName} at {SourceFile}:{SourceLine} - {Message} {@Context}",
            memberName, Path.GetFileName(sourceFilePath), sourceLineNumber, message, context);
    }

    /// <summary>
    /// Log de debug com contexto estruturado
    /// </summary>
    public static void LogStructuredDebug(this ILogger logger, string message, object? context = null,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
    {
        logger.LogDebug(
            "Debug in {MemberName} at {SourceFile}:{SourceLine} - {Message} {@Context}",
            memberName, Path.GetFileName(sourceFilePath), sourceLineNumber, message, context);
    }

    /// <summary>
    /// Log de performance para operações demoradas
    /// </summary>
    public static void LogPerformance(this ILogger logger, string operationName, TimeSpan elapsed, object? context = null,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
    {
        var logLevel = elapsed.TotalMilliseconds switch
        {
            > 5000 => LogLevel.Warning, // > 5 segundos
            > 1000 => LogLevel.Information, // > 1 segundo
            _ => LogLevel.Debug
        };

        logger.Log(logLevel,
            "Performance: {OperationName} completed in {ElapsedMilliseconds}ms at {MemberName} in {SourceFile}:{SourceLine} {@Context}",
            operationName, elapsed.TotalMilliseconds, memberName, Path.GetFileName(sourceFilePath), sourceLineNumber, context);
    }

    /// <summary>
    /// Log de auditoria para ações importantes
    /// </summary>
    public static void LogAudit(this ILogger logger, string action, string? userId = null, object? details = null,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
    {
        logger.LogInformation(
            "AUDIT: {Action} by user {UserId} at {MemberName} in {SourceFile}:{SourceLine} {@Details}",
            action, userId ?? "Anonymous", memberName, Path.GetFileName(sourceFilePath), sourceLineNumber, details);
    }

    /// <summary>
    /// Log de segurança para eventos relacionados à segurança
    /// </summary>
    public static void LogSecurity(this ILogger logger, string securityEvent, string? userId = null, string? ipAddress = null, object? details = null,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
    {
        logger.LogWarning(
            "SECURITY: {SecurityEvent} by user {UserId} from IP {IpAddress} at {MemberName} in {SourceFile}:{SourceLine} {@Details}",
            securityEvent, userId ?? "Anonymous", ipAddress ?? "Unknown", memberName, Path.GetFileName(sourceFilePath), sourceLineNumber, details);
    }

    /// <summary>
    /// Log de business events para eventos de negócio importantes
    /// </summary>
    public static void LogBusinessEvent(this ILogger logger, string eventName, object eventData,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
    {
        logger.LogInformation(
            "BUSINESS_EVENT: {EventName} at {MemberName} in {SourceFile}:{SourceLine} {@EventData}",
            eventName, memberName, Path.GetFileName(sourceFilePath), sourceLineNumber, eventData);
    }
}

/// <summary>
/// Scope para operações com logging automático de início e fim
/// </summary>
internal class OperationScope : IDisposable
{
    private readonly ILogger _logger;
    private readonly string _operationName;
    private readonly string _operationId;
    private readonly DateTime _startTime;
    private bool _disposed;

    public OperationScope(ILogger logger, string operationName, string operationId)
    {
        _logger = logger;
        _operationName = operationName;
        _operationId = operationId;
        _startTime = DateTime.UtcNow;
    }

    public void Dispose()
    {
        if (_disposed) return;

        var elapsed = DateTime.UtcNow - _startTime;
        _logger.LogInformation("Completed operation {OperationName} with ID {OperationId} in {ElapsedMilliseconds}ms",
            _operationName, _operationId, elapsed.TotalMilliseconds);

        _disposed = true;
    }
}
</LoggerExtensions.cs>
<LoggingContext.cs>
using System.Collections.Concurrent;

namespace Agriis.Compartilhado.Infraestrutura.Logging;

/// <summary>
/// Implementação do contexto de logging estruturado
/// </summary>
public class LoggingContext : ILoggingContext
{
    private readonly ConcurrentDictionary<string, object?> _properties = new();

    public string? CorrelationId
    {
        get => GetProperty<string>(nameof(CorrelationId));
        set => SetProperty(nameof(CorrelationId), value);
    }

    public string? UserId
    {
        get => GetProperty<string>(nameof(UserId));
        set => SetProperty(nameof(UserId), value);
    }

    public string? UserEmail
    {
        get => GetProperty<string>(nameof(UserEmail));
        set => SetProperty(nameof(UserEmail), value);
    }

    public string? RequestPath
    {
        get => GetProperty<string>(nameof(RequestPath));
        set => SetProperty(nameof(RequestPath), value);
    }

    public string? RequestMethod
    {
        get => GetProperty<string>(nameof(RequestMethod));
        set => SetProperty(nameof(RequestMethod), value);
    }

    public string? RemoteIpAddress
    {
        get => GetProperty<string>(nameof(RemoteIpAddress));
        set => SetProperty(nameof(RemoteIpAddress), value);
    }

    public string? UserAgent
    {
        get => GetProperty<string>(nameof(UserAgent));
        set => SetProperty(nameof(UserAgent), value);
    }

    public void AddProperty(string key, object? value)
    {
        if (string.IsNullOrWhiteSpace(key))
            throw new ArgumentException("Key cannot be null or empty", nameof(key));

        SetProperty(key, value);
    }

    public void RemoveProperty(string key)
    {
        if (string.IsNullOrWhiteSpace(key))
            return;

        _properties.TryRemove(key, out _);
    }

    public IDictionary<string, object?> GetProperties()
    {
        return new Dictionary<string, object?>(_properties);
    }

    public void Clear()
    {
        _properties.Clear();
    }

    private T? GetProperty<T>(string key)
    {
        if (_properties.TryGetValue(key, out var value) && value is T typedValue)
            return typedValue;

        return default;
    }

    private void SetProperty(string key, object? value)
    {
        if (value == null)
        {
            _properties.TryRemove(key, out _);
        }
        else
        {
            _properties.AddOrUpdate(key, value, (_, _) => value);
        }
    }
}
</LoggingContext.cs>
<PerformanceLogger.cs>
using Microsoft.Extensions.Logging;
using System.Diagnostics;

namespace Agriis.Compartilhado.Infraestrutura.Logging;

/// <summary>
/// Logger especializado para monitoramento de performance
/// </summary>
public interface IPerformanceLogger
{
    /// <summary>
    /// Inicia o monitoramento de uma operação
    /// </summary>
    IDisposable BeginOperation(string operationName, object? context = null);

    /// <summary>
    /// Log de performance de operação de banco de dados
    /// </summary>
    void LogDatabaseOperation(string operation, TimeSpan elapsed, int? recordCount = null, object? context = null);

    /// <summary>
    /// Log de performance de operação de API externa
    /// </summary>
    void LogExternalApiCall(string apiName, string endpoint, TimeSpan elapsed, bool success, object? context = null);

    /// <summary>
    /// Log de performance de operação de negócio
    /// </summary>
    void LogBusinessOperation(string operation, TimeSpan elapsed, object? context = null);

    /// <summary>
    /// Log de uso de memória
    /// </summary>
    void LogMemoryUsage(string operation, long memoryBefore, long memoryAfter, object? context = null);
}

/// <summary>
/// Implementação do logger de performance
/// </summary>
public class PerformanceLogger : IPerformanceLogger
{
    private readonly ILogger<PerformanceLogger> _logger;
    private readonly ILoggingContext _loggingContext;

    public PerformanceLogger(ILogger<PerformanceLogger> logger, ILoggingContext loggingContext)
    {
        _logger = logger;
        _loggingContext = loggingContext;
    }

    public IDisposable BeginOperation(string operationName, object? context = null)
    {
        return new PerformanceScope(_logger, _loggingContext, operationName, context);
    }

    public void LogDatabaseOperation(string operation, TimeSpan elapsed, int? recordCount = null, object? context = null)
    {
        var logLevel = GetLogLevelForDatabaseOperation(elapsed);
        
        _logger.Log(logLevel, 
            "DATABASE_PERFORMANCE: {Operation} completed in {ElapsedMilliseconds}ms with {RecordCount} records {@Context} {CorrelationId}",
            operation, elapsed.TotalMilliseconds, recordCount, context, _loggingContext.CorrelationId);

        // Log warning para operações muito lentas
        if (elapsed.TotalMilliseconds > 5000)
        {
            _logger.LogWarning(
                "SLOW_DATABASE_OPERATION: {Operation} took {ElapsedMilliseconds}ms - consider optimization {@Context}",
                operation, elapsed.TotalMilliseconds, context);
        }
    }

    public void LogExternalApiCall(string apiName, string endpoint, TimeSpan elapsed, bool success, object? context = null)
    {
        var logLevel = success ? LogLevel.Information : LogLevel.Warning;
        
        _logger.Log(logLevel,
            "EXTERNAL_API_PERFORMANCE: {ApiName} call to {Endpoint} completed in {ElapsedMilliseconds}ms with success={Success} {@Context} {CorrelationId}",
            apiName, endpoint, elapsed.TotalMilliseconds, success, context, _loggingContext.CorrelationId);

        // Log warning para chamadas muito lentas
        if (elapsed.TotalMilliseconds > 10000)
        {
            _logger.LogWarning(
                "SLOW_EXTERNAL_API: {ApiName} call to {Endpoint} took {ElapsedMilliseconds}ms {@Context}",
                apiName, endpoint, elapsed.TotalMilliseconds, context);
        }
    }

    public void LogBusinessOperation(string operation, TimeSpan elapsed, object? context = null)
    {
        var logLevel = GetLogLevelForBusinessOperation(elapsed);
        
        _logger.Log(logLevel,
            "BUSINESS_PERFORMANCE: {Operation} completed in {ElapsedMilliseconds}ms {@Context} {CorrelationId}",
            operation, elapsed.TotalMilliseconds, context, _loggingContext.CorrelationId);

        // Log warning para operações de negócio muito lentas
        if (elapsed.TotalMilliseconds > 3000)
        {
            _logger.LogWarning(
                "SLOW_BUSINESS_OPERATION: {Operation} took {ElapsedMilliseconds}ms - review business logic {@Context}",
                operation, elapsed.TotalMilliseconds, context);
        }
    }

    public void LogMemoryUsage(string operation, long memoryBefore, long memoryAfter, object? context = null)
    {
        var memoryDiff = memoryAfter - memoryBefore;
        var memoryDiffMB = memoryDiff / (1024.0 * 1024.0);

        var logLevel = Math.Abs(memoryDiffMB) > 100 ? LogLevel.Warning : LogLevel.Information;

        _logger.Log(logLevel,
            "MEMORY_USAGE: {Operation} changed memory by {MemoryDiffMB:F2}MB (before: {MemoryBeforeMB:F2}MB, after: {MemoryAfterMB:F2}MB) {@Context} {CorrelationId}",
            operation, memoryDiffMB, memoryBefore / (1024.0 * 1024.0), memoryAfter / (1024.0 * 1024.0), context, _loggingContext.CorrelationId);
    }

    private static LogLevel GetLogLevelForDatabaseOperation(TimeSpan elapsed)
    {
        return elapsed.TotalMilliseconds switch
        {
            > 5000 => LogLevel.Warning,  // > 5 segundos
            > 1000 => LogLevel.Information, // > 1 segundo
            _ => LogLevel.Debug
        };
    }

    private static LogLevel GetLogLevelForBusinessOperation(TimeSpan elapsed)
    {
        return elapsed.TotalMilliseconds switch
        {
            > 3000 => LogLevel.Warning,  // > 3 segundos
            > 1000 => LogLevel.Information, // > 1 segundo
            _ => LogLevel.Debug
        };
    }
}

/// <summary>
/// Scope para monitoramento automático de performance
/// </summary>
internal class PerformanceScope : IDisposable
{
    private readonly ILogger _logger;
    private readonly ILoggingContext _loggingContext;
    private readonly string _operationName;
    private readonly object? _context;
    private readonly Stopwatch _stopwatch;
    private readonly long _memoryBefore;
    private bool _disposed;

    public PerformanceScope(ILogger logger, ILoggingContext loggingContext, string operationName, object? context)
    {
        _logger = logger;
        _loggingContext = loggingContext;
        _operationName = operationName;
        _context = context;
        _stopwatch = Stopwatch.StartNew();
        _memoryBefore = GC.GetTotalMemory(false);

        _logger.LogDebug("PERFORMANCE_START: {Operation} started {@Context} {CorrelationId}",
            _operationName, _context, _loggingContext.CorrelationId);
    }

    public void Dispose()
    {
        if (_disposed) return;

        _stopwatch.Stop();
        var memoryAfter = GC.GetTotalMemory(false);
        var elapsed = _stopwatch.Elapsed;

        var logLevel = elapsed.TotalMilliseconds switch
        {
            > 5000 => LogLevel.Warning,
            > 1000 => LogLevel.Information,
            _ => LogLevel.Debug
        };

        _logger.Log(logLevel,
            "PERFORMANCE_END: {Operation} completed in {ElapsedMilliseconds}ms (memory change: {MemoryChangeMB:F2}MB) {@Context} {CorrelationId}",
            _operationName, elapsed.TotalMilliseconds, (memoryAfter - _memoryBefore) / (1024.0 * 1024.0), _context, _loggingContext.CorrelationId);

        _disposed = true;
    }
}
</PerformanceLogger.cs>
<SerilogConfiguration.cs>
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Serilog;
using Serilog.Core;
using Serilog.Events;
using Serilog.Exceptions;
using Serilog.Filters;
using Serilog.Formatting.Compact;
using Serilog.Sinks.PostgreSQL;

namespace Agriis.Compartilhado.Infraestrutura.Logging;

/// <summary>
/// Configuração centralizada do Serilog para logging estruturado
/// </summary>
public static class SerilogConfiguration
{
    /// <summary>
    /// Configura o Serilog com múltiplos destinos e structured logging
    /// </summary>
    public static LoggerConfiguration ConfigureSerilog(
        this LoggerConfiguration loggerConfiguration,
        IConfiguration configuration,
        IHostEnvironment environment)
    {
        var loggerConfig = loggerConfiguration
            .ReadFrom.Configuration(configuration)
            .Enrich.FromLogContext()
            .Enrich.WithMachineName()
            .Enrich.WithEnvironmentName()
            .Enrich.WithProcessId()
            .Enrich.WithThreadId()
            .Enrich.WithExceptionDetails()
            .Enrich.WithProperty("Application", "Agriis.Api")
            .Enrich.WithProperty("Version", GetApplicationVersion());

        // Configurar níveis de log por ambiente
        ConfigureLogLevels(loggerConfig, environment);

        // Configurar destinos de log
        ConfigureLogSinks(loggerConfig, configuration, environment);

        // Configurar filtros
        ConfigureLogFilters(loggerConfig);

        return loggerConfig;
    }

    /// <summary>
    /// Configura os níveis de log baseado no ambiente
    /// </summary>
    private static void ConfigureLogLevels(LoggerConfiguration loggerConfig, IHostEnvironment environment)
    {
        var minimumLevel = environment.IsDevelopment() ? LogEventLevel.Debug : LogEventLevel.Information;

        loggerConfig.MinimumLevel.Is(minimumLevel)
            .MinimumLevel.Override("Microsoft", LogEventLevel.Warning)
            .MinimumLevel.Override("Microsoft.Hosting.Lifetime", LogEventLevel.Information)
            .MinimumLevel.Override("Microsoft.EntityFrameworkCore", environment.IsDevelopment() ? LogEventLevel.Information : LogEventLevel.Warning)
            .MinimumLevel.Override("System", LogEventLevel.Warning)
            .MinimumLevel.Override("Hangfire", LogEventLevel.Information);
    }

    /// <summary>
    /// Configura os destinos de log (sinks)
    /// </summary>
    private static void ConfigureLogSinks(LoggerConfiguration loggerConfig, IConfiguration configuration, IHostEnvironment environment)
    {
        // Console Sink - sempre habilitado
        ConfigureConsoleSink(loggerConfig, environment);

        // File Sink - sempre habilitado
        ConfigureFileSink(loggerConfig, environment);

        // PostgreSQL Sink - apenas em produção ou quando configurado
        ConfigurePostgreSqlSink(loggerConfig, configuration, environment);

        // Seq Sink - para desenvolvimento local (opcional)
        ConfigureSeqSink(loggerConfig, configuration, environment);
    }

    /// <summary>
    /// Configura o sink do console
    /// </summary>
    private static void ConfigureConsoleSink(LoggerConfiguration loggerConfig, IHostEnvironment environment)
    {
        if (environment.IsDevelopment())
        {
            loggerConfig.WriteTo.Console(
                outputTemplate: "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} {Properties:j}{NewLine}{Exception}",
                restrictedToMinimumLevel: LogEventLevel.Debug);
        }
        else
        {
            // Em produção, usar formato JSON compacto para melhor parsing
            loggerConfig.WriteTo.Console(
                formatter: new CompactJsonFormatter(),
                restrictedToMinimumLevel: LogEventLevel.Information);
        }
    }

    /// <summary>
    /// Configura o sink de arquivo
    /// </summary>
    private static void ConfigureFileSink(LoggerConfiguration loggerConfig, IHostEnvironment environment)
    {
        var logPath = environment.IsDevelopment() ? "logs/agriis-.log" : "/app/logs/agriis-.log";
        
        loggerConfig.WriteTo.File(
            path: logPath,
            rollingInterval: RollingInterval.Day,
            retainedFileCountLimit: environment.IsDevelopment() ? 7 : 30,
            outputTemplate: "[{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} {Level:u3}] [{SourceContext}] {Message:lj} {Properties:j}{NewLine}{Exception}",
            restrictedToMinimumLevel: LogEventLevel.Information,
            shared: true,
            flushToDiskInterval: TimeSpan.FromSeconds(1));

        // Arquivo separado para erros
        loggerConfig.WriteTo.File(
            path: environment.IsDevelopment() ? "logs/agriis-errors-.log" : "/app/logs/agriis-errors-.log",
            rollingInterval: RollingInterval.Day,
            retainedFileCountLimit: environment.IsDevelopment() ? 30 : 90,
            outputTemplate: "[{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} {Level:u3}] [{SourceContext}] {Message:lj} {Properties:j}{NewLine}{Exception}",
            restrictedToMinimumLevel: LogEventLevel.Error,
            shared: true);
    }

    /// <summary>
    /// Configura o sink do PostgreSQL
    /// </summary>
    private static void ConfigurePostgreSqlSink(LoggerConfiguration loggerConfig, IConfiguration configuration, IHostEnvironment environment)
    {
        var connectionString = configuration.GetConnectionString("LoggingConnection") 
                              ?? configuration.GetConnectionString("DefaultConnection");

        if (!string.IsNullOrEmpty(connectionString) && !environment.IsDevelopment())
        {
            var columnOptions = new Dictionary<string, ColumnWriterBase>
            {
                { "message", new RenderedMessageColumnWriter() },
                { "message_template", new MessageTemplateColumnWriter() },
                { "level", new LevelColumnWriter() },
                { "timestamp", new TimestampColumnWriter() },
                { "exception", new ExceptionColumnWriter() },
                { "log_event", new LogEventSerializedColumnWriter() },
                { "properties", new PropertiesColumnWriter() },
                { "machine_name", new SinglePropertyColumnWriter("MachineName") },
                { "environment", new SinglePropertyColumnWriter("EnvironmentName") },
                { "application", new SinglePropertyColumnWriter("Application") },
                { "version", new SinglePropertyColumnWriter("Version") },
                { "correlation_id", new SinglePropertyColumnWriter("CorrelationId") },
                { "user_id", new SinglePropertyColumnWriter("UserId") },
                { "user_email", new SinglePropertyColumnWriter("UserEmail") },
                { "request_path", new SinglePropertyColumnWriter("RequestPath") },
                { "request_method", new SinglePropertyColumnWriter("RequestMethod") },
                { "status_code", new SinglePropertyColumnWriter("StatusCode") },
                { "elapsed_milliseconds", new SinglePropertyColumnWriter("ElapsedMilliseconds") }
            };

            loggerConfig.WriteTo.PostgreSQL(
                connectionString: connectionString,
                tableName: "logs",
                columnOptions: columnOptions,
                restrictedToMinimumLevel: LogEventLevel.Information,
                needAutoCreateTable: true,
                batchSizeLimit: 50,
                period: TimeSpan.FromSeconds(5));
        }
    }

    /// <summary>
    /// Configura o sink do Seq (opcional para desenvolvimento)
    /// </summary>
    private static void ConfigureSeqSink(LoggerConfiguration loggerConfig, IConfiguration configuration, IHostEnvironment environment)
    {
        var seqUrl = configuration["Serilog:Seq:ServerUrl"];
        var seqApiKey = configuration["Serilog:Seq:ApiKey"];

        if (!string.IsNullOrEmpty(seqUrl) && environment.IsDevelopment())
        {
            loggerConfig.WriteTo.Seq(
                serverUrl: seqUrl,
                apiKey: seqApiKey,
                restrictedToMinimumLevel: LogEventLevel.Debug);
        }
    }

    /// <summary>
    /// Configura filtros de log
    /// </summary>
    private static void ConfigureLogFilters(LoggerConfiguration loggerConfig)
    {
        // Filtrar logs de health checks para reduzir ruído
        loggerConfig.Filter.ByExcluding(Matching.WithProperty<string>("RequestPath", path => 
            path.Contains("/health", StringComparison.OrdinalIgnoreCase) ||
            path.Contains("/metrics", StringComparison.OrdinalIgnoreCase)));

        // Filtrar logs de static files
        loggerConfig.Filter.ByExcluding(Matching.WithProperty<string>("RequestPath", path => 
            path.Contains("/swagger", StringComparison.OrdinalIgnoreCase) ||
            path.Contains("/favicon.ico", StringComparison.OrdinalIgnoreCase) ||
            path.EndsWith(".css", StringComparison.OrdinalIgnoreCase) ||
            path.EndsWith(".js", StringComparison.OrdinalIgnoreCase) ||
            path.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ||
            path.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase)));
    }

    /// <summary>
    /// Obtém a versão da aplicação
    /// </summary>
    private static string GetApplicationVersion()
    {
        try
        {
            var assembly = System.Reflection.Assembly.GetExecutingAssembly();
            var version = assembly.GetName().Version;
            return version?.ToString() ?? "1.0.0";
        }
        catch
        {
            return "1.0.0";
        }
    }

    /// <summary>
    /// Adiciona configuração de logging estruturado aos serviços
    /// </summary>
    public static IServiceCollection AddStructuredLogging(this IServiceCollection services, IConfiguration configuration)
    {
        // Configurar HttpContextAccessor (necessário para os enrichers)
        services.AddHttpContextAccessor();
        
        // Configurar contexto de logging
        services.AddScoped<ILoggingContext, LoggingContext>();
        
        // Configurar enriquecedores customizados
        services.AddSingleton<ILogEventEnricher, CorrelationIdEnricher>();
        services.AddSingleton<ILogEventEnricher, UserContextEnricher>();
        
        // Configurar logger de performance
        services.AddScoped<IPerformanceLogger, PerformanceLogger>();
        
        return services;
    }
}
</SerilogConfiguration.cs>
<UserContextEnricher.cs>
using Serilog.Core;
using Serilog.Events;
using Microsoft.AspNetCore.Http;
using System.Security.Claims;

namespace Agriis.Compartilhado.Infraestrutura.Logging;

/// <summary>
/// Enriquecedor que adiciona informações do usuário aos logs
/// </summary>
public class UserContextEnricher : ILogEventEnricher
{
    private readonly IHttpContextAccessor _httpContextAccessor;

    public UserContextEnricher(IHttpContextAccessor httpContextAccessor)
    {
        _httpContextAccessor = httpContextAccessor;
    }

    public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)
    {
        var httpContext = _httpContextAccessor.HttpContext;
        if (httpContext?.User?.Identity?.IsAuthenticated != true) return;

        // User ID
        var userId = httpContext.User.FindFirst("user_id")?.Value ?? 
                    httpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!string.IsNullOrEmpty(userId))
        {
            var userIdProperty = propertyFactory.CreateProperty("UserId", userId);
            logEvent.AddPropertyIfAbsent(userIdProperty);
        }

        // User Email
        var userEmail = httpContext.User.FindFirst("email")?.Value ?? 
                       httpContext.User.FindFirst(ClaimTypes.Email)?.Value;
        if (!string.IsNullOrEmpty(userEmail))
        {
            var userEmailProperty = propertyFactory.CreateProperty("UserEmail", userEmail);
            logEvent.AddPropertyIfAbsent(userEmailProperty);
        }

        // User Name
        var userName = httpContext.User.FindFirst("name")?.Value ?? 
                      httpContext.User.FindFirst(ClaimTypes.Name)?.Value;
        if (!string.IsNullOrEmpty(userName))
        {
            var userNameProperty = propertyFactory.CreateProperty("UserName", userName);
            logEvent.AddPropertyIfAbsent(userNameProperty);
        }

        // User Role
        var userRole = httpContext.User.FindFirst("role")?.Value ?? 
                      httpContext.User.FindFirst(ClaimTypes.Role)?.Value;
        if (!string.IsNullOrEmpty(userRole))
        {
            var userRoleProperty = propertyFactory.CreateProperty("UserRole", userRole);
            logEvent.AddPropertyIfAbsent(userRoleProperty);
        }
    }
}
</UserContextEnricher.cs>
<RepositoryBase.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;

namespace Agriis.Compartilhado.Infraestrutura.Persistencia;

/// <summary>
/// Implementação base para repositórios usando Entity Framework Core
/// </summary>
/// <typeparam name="T">Tipo da entidade</typeparam>
/// <typeparam name="TContext">Tipo do contexto do Entity Framework</typeparam>
public abstract class RepositoryBase<T, TContext> : IRepository<T>
    where T : EntidadeBase
    where TContext : DbContext
{
    protected readonly TContext Context;
    protected readonly DbSet<T> DbSet;
    
    /// <summary>
    /// Construtor
    /// </summary>
    /// <param name="context">Contexto do Entity Framework</param>
    protected RepositoryBase(TContext context)
    {
        Context = context ?? throw new ArgumentNullException(nameof(context));
        DbSet = Context.Set<T>();
    }
    
    /// <summary>
    /// Obtém uma entidade por seu ID
    /// </summary>
    public virtual async Task<T?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await DbSet.FindAsync(new object[] { id }, cancellationToken);
    }
    
    /// <summary>
    /// Obtém todas as entidades
    /// </summary>
    public virtual async Task<IEnumerable<T>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet.ToListAsync(cancellationToken);
    }
    
    /// <summary>
    /// Obtém entidades que atendem a uma condição
    /// </summary>
    public virtual async Task<IEnumerable<T>> ObterPorCondicaoAsync(Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default)
    {
        return await DbSet.Where(predicate).ToListAsync(cancellationToken);
    }
    
    /// <summary>
    /// Obtém uma única entidade que atende a uma condição
    /// </summary>
    public virtual async Task<T?> ObterPrimeiroAsync(Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default)
    {
        return await DbSet.FirstOrDefaultAsync(predicate, cancellationToken);
    }
    
    /// <summary>
    /// Adiciona uma nova entidade
    /// </summary>
    public virtual async Task<T> AdicionarAsync(T entidade, CancellationToken cancellationToken = default)
    {
        if (entidade == null)
            throw new ArgumentNullException(nameof(entidade));
            
        var entityEntry = await DbSet.AddAsync(entidade, cancellationToken);
        return entityEntry.Entity;
    }
    
    /// <summary>
    /// Adiciona múltiplas entidades
    /// </summary>
    public virtual async Task AdicionarVariasAsync(IEnumerable<T> entidades, CancellationToken cancellationToken = default)
    {
        if (entidades == null)
            throw new ArgumentNullException(nameof(entidades));
            
        await DbSet.AddRangeAsync(entidades, cancellationToken);
    }
    
    /// <summary>
    /// Atualiza uma entidade existente
    /// </summary>
    public virtual Task AtualizarAsync(T entidade, CancellationToken cancellationToken = default)
    {
        if (entidade == null)
            throw new ArgumentNullException(nameof(entidade));
            
        entidade.AtualizarDataModificacao();
        DbSet.Update(entidade);
        return Task.CompletedTask;
    }
    
    /// <summary>
    /// Remove uma entidade por ID
    /// </summary>
    public virtual async Task RemoverAsync(int id, CancellationToken cancellationToken = default)
    {
        var entidade = await ObterPorIdAsync(id, cancellationToken);
        if (entidade != null)
        {
            DbSet.Remove(entidade);
        }
    }
    
    /// <summary>
    /// Remove uma entidade
    /// </summary>
    public virtual Task RemoverAsync(T entidade, CancellationToken cancellationToken = default)
    {
        if (entidade == null)
            throw new ArgumentNullException(nameof(entidade));
            
        DbSet.Remove(entidade);
        return Task.CompletedTask;
    }
    
    /// <summary>
    /// Remove múltiplas entidades
    /// </summary>
    public virtual Task RemoverVariasAsync(IEnumerable<T> entidades, CancellationToken cancellationToken = default)
    {
        if (entidades == null)
            throw new ArgumentNullException(nameof(entidades));
            
        DbSet.RemoveRange(entidades);
        return Task.CompletedTask;
    }
    
    /// <summary>
    /// Verifica se existe uma entidade com o ID especificado
    /// </summary>
    public virtual async Task<bool> ExisteAsync(int id, CancellationToken cancellationToken = default)
    {
        return await DbSet.AnyAsync(e => e.Id == id, cancellationToken);
    }
    
    /// <summary>
    /// Verifica se existe uma entidade que atende a uma condição
    /// </summary>
    public virtual async Task<bool> ExisteAsync(Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default)
    {
        return await DbSet.AnyAsync(predicate, cancellationToken);
    }
    
    /// <summary>
    /// Conta o número de entidades
    /// </summary>
    public virtual async Task<int> ContarAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet.CountAsync(cancellationToken);
    }
    
    /// <summary>
    /// Conta o número de entidades que atendem a uma condição
    /// </summary>
    public virtual async Task<int> ContarAsync(Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default)
    {
        return await DbSet.CountAsync(predicate, cancellationToken);
    }
}
</RepositoryBase.cs>
<UnitOfWork.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;

namespace Agriis.Compartilhado.Infraestrutura.Persistencia;

/// <summary>
/// Implementação do padrão Unit of Work usando Entity Framework Core
/// </summary>
/// <typeparam name="TContext">Tipo do contexto do Entity Framework</typeparam>
public class UnitOfWork<TContext> : IUnitOfWork
    where TContext : DbContext
{
    private readonly TContext _context;
    private IDbContextTransaction? _currentTransaction;
    private bool _disposed = false;
    
    /// <summary>
    /// Construtor
    /// </summary>
    /// <param name="context">Contexto do Entity Framework</param>
    public UnitOfWork(TContext context)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
    }
    
    /// <summary>
    /// Salva todas as alterações pendentes no contexto
    /// </summary>
    public async Task<int> SalvarAlteracoesAsync(CancellationToken cancellationToken = default)
    {
        try
        {
            return await _context.SaveChangesAsync(cancellationToken);
        }
        catch (DbUpdateConcurrencyException ex)
        {
            throw new InvalidOperationException("Erro de concorrência ao salvar alterações", ex);
        }
        catch (DbUpdateException ex)
        {
            throw new InvalidOperationException("Erro ao salvar alterações no banco de dados", ex);
        }
    }
    
    /// <summary>
    /// Inicia uma nova transação
    /// </summary>
    public async Task IniciarTransacaoAsync(CancellationToken cancellationToken = default)
    {
        if (_currentTransaction != null)
        {
            throw new InvalidOperationException("Uma transação já está em andamento");
        }
        
        _currentTransaction = await _context.Database.BeginTransactionAsync(cancellationToken);
    }
    
    /// <summary>
    /// Confirma a transação atual
    /// </summary>
    public async Task ConfirmarTransacaoAsync(CancellationToken cancellationToken = default)
    {
        if (_currentTransaction == null)
        {
            throw new InvalidOperationException("Nenhuma transação ativa para confirmar");
        }
        
        try
        {
            await SalvarAlteracoesAsync(cancellationToken);
            await _currentTransaction.CommitAsync(cancellationToken);
        }
        catch
        {
            await ReverterTransacaoAsync(cancellationToken);
            throw;
        }
        finally
        {
            await _currentTransaction.DisposeAsync();
            _currentTransaction = null;
        }
    }
    
    /// <summary>
    /// Reverte a transação atual
    /// </summary>
    public async Task ReverterTransacaoAsync(CancellationToken cancellationToken = default)
    {
        if (_currentTransaction == null)
        {
            throw new InvalidOperationException("Nenhuma transação ativa para reverter");
        }
        
        try
        {
            await _currentTransaction.RollbackAsync(cancellationToken);
        }
        finally
        {
            await _currentTransaction.DisposeAsync();
            _currentTransaction = null;
        }
    }
    
    /// <summary>
    /// Executa uma operação dentro de uma transação
    /// </summary>
    public async Task<T> ExecutarEmTransacaoAsync<T>(Func<Task<T>> operacao, CancellationToken cancellationToken = default)
    {
        if (operacao == null)
            throw new ArgumentNullException(nameof(operacao));
        
        var transacaoIniciada = _currentTransaction == null;
        
        if (transacaoIniciada)
        {
            await IniciarTransacaoAsync(cancellationToken);
        }
        
        try
        {
            var resultado = await operacao();
            
            if (transacaoIniciada)
            {
                await ConfirmarTransacaoAsync(cancellationToken);
            }
            
            return resultado;
        }
        catch
        {
            if (transacaoIniciada && _currentTransaction != null)
            {
                await ReverterTransacaoAsync(cancellationToken);
            }
            throw;
        }
    }
    
    /// <summary>
    /// Executa uma operação dentro de uma transação sem retorno
    /// </summary>
    public async Task ExecutarEmTransacaoAsync(Func<Task> operacao, CancellationToken cancellationToken = default)
    {
        await ExecutarEmTransacaoAsync(async () =>
        {
            await operacao();
            return true;
        }, cancellationToken);
    }
    
    /// <summary>
    /// Descarta todas as alterações pendentes
    /// </summary>
    public void DescartarAlteracoes()
    {
        foreach (var entry in _context.ChangeTracker.Entries())
        {
            switch (entry.State)
            {
                case EntityState.Modified:
                    entry.State = EntityState.Unchanged;
                    break;
                case EntityState.Added:
                    entry.State = EntityState.Detached;
                    break;
                case EntityState.Deleted:
                    entry.Reload();
                    break;
            }
        }
    }
    
    /// <summary>
    /// Verifica se há alterações pendentes
    /// </summary>
    public bool TemAlteracoesPendentes()
    {
        return _context.ChangeTracker.HasChanges();
    }
    
    /// <summary>
    /// Libera os recursos
    /// </summary>
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }
    
    /// <summary>
    /// Libera os recursos de forma protegida
    /// </summary>
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            _currentTransaction?.Dispose();
            _context?.Dispose();
            _disposed = true;
        }
    }
}
</UnitOfWork.cs>
<Class1.cs>
namespace Agriis.Autenticacao.Dominio;

public class Class1
{

}

</Class1.cs>
<Class1.cs>
namespace Agriis.Fornecedores.Dominio;

public class Class1
{

}

</Class1.cs>
<ConfiguracaoServicos.cs>
using Microsoft.Extensions.DependencyInjection;
using Agriis.Pedidos.Aplicacao.Interfaces;
using Agriis.Pedidos.Aplicacao.Servicos;
using Agriis.Pedidos.Dominio.Servicos;

namespace Agriis.Pedidos.Aplicacao;

/// <summary>
/// Configuração de serviços do módulo de pedidos
/// </summary>
public static class ConfiguracaoServicos
{
    /// <summary>
    /// Adiciona os serviços do módulo de pedidos
    /// </summary>
    /// <param name="services">Coleção de serviços</param>
    /// <returns>Coleção de serviços</returns>
    public static IServiceCollection AdicionarServicosPedidos(this IServiceCollection services)
    {
        // Serviços de aplicação
        services.AddScoped<IPedidoService, PedidoService>();
        services.AddScoped<IPropostaService, PropostaService>();
        
        // Serviços de domínio
        services.AddScoped<CarrinhoComprasService>();
        
        // Serviços em background
        services.AddHostedService<PrazoLimiteBackgroundService>();
        
        return services;
    }
}
</ConfiguracaoServicos.cs>
<Class1.cs>
namespace Agriis.Pedidos.Dominio;

public class Class1
{

}

</Class1.cs>
<Class1.cs>
namespace Agriis.Produtores.Dominio;

public class Class1
{

}

</Class1.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Api.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Api")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Api")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Api")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Api.AssemblyInfo.cs>
<Agriis.Api.GlobalUsings.g.cs>
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Api.GlobalUsings.g.cs>
<Agriis.Api.MvcApplicationPartsAssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("FluentValidation.AspNetCore")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.OpenApi")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Api.MvcApplicationPartsAssemblyInfo.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Api.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Api")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Api")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Api")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Api.AssemblyInfo.cs>
<Agriis.Api.GlobalUsings.g.cs>
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Api.GlobalUsings.g.cs>
<Agriis.Api.MvcApplicationPartsAssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("FluentValidation.AspNetCore")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.OpenApi")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Api.MvcApplicationPartsAssemblyInfo.cs>
<EFCoreNpgsqlNetTopologySuite.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute(("Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesig" +
    "nTimeServices, Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite"), "Npgsql.EntityFrameworkCore.PostgreSQL")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</EFCoreNpgsqlNetTopologySuite.cs>
<EnumConverters.cs>
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Compartilhado.Infraestrutura.Persistencia.Conversores;

/// <summary>
/// Conversores de enum para PostgreSQL
/// </summary>
public static class EnumConverters
{
    /// <summary>
    /// Conversor para StatusProdutor
    /// </summary>
    public static ValueConverter<StatusProdutor, int> StatusProdutorConverter =>
        new(
            v => (int)v,
            v => (StatusProdutor)v
        );

    /// <summary>
    /// Conversor para StatusPedido
    /// </summary>
    public static ValueConverter<StatusPedido, int> StatusPedidoConverter =>
        new(
            v => (int)v,
            v => (StatusPedido)v
        );

    /// <summary>
    /// Conversor para StatusCarrinho
    /// </summary>
    public static ValueConverter<StatusCarrinho, int> StatusCarrinhoConverter =>
        new(
            v => (int)v,
            v => (StatusCarrinho)v
        );

    /// <summary>
    /// Conversor para AcaoCompradorPedido
    /// </summary>
    public static ValueConverter<AcaoCompradorPedido, int> AcaoCompradorPedidoConverter =>
        new(
            v => (int)v,
            v => (AcaoCompradorPedido)v
        );

    /// <summary>
    /// Conversor para TipoVenda
    /// </summary>
    public static ValueConverter<TipoVenda, int> TipoVendaConverter =>
        new(
            v => (int)v,
            v => (TipoVenda)v
        );

    /// <summary>
    /// Conversor para Roles
    /// </summary>
    public static ValueConverter<Roles, int> RolesConverter =>
        new(
            v => (int)v,
            v => (Roles)v
        );

    /// <summary>
    /// Conversor para BarterTipoEntrega
    /// </summary>
    public static ValueConverter<BarterTipoEntrega, int> BarterTipoEntregaConverter =>
        new(
            v => (int)v,
            v => (BarterTipoEntrega)v
        );

    /// <summary>
    /// Conversor para ModalidadePagamento
    /// </summary>
    public static ValueConverter<ModalidadePagamento, int> ModalidadePagamentoConverter =>
        new(
            v => (int)v,
            v => (ModalidadePagamento)v
        );

    /// <summary>
    /// Conversor para CalculoCubagem
    /// </summary>
    public static ValueConverter<CalculoCubagem, int> CalculoCubagemConverter =>
        new(
            v => (int)v,
            v => (CalculoCubagem)v
        );

    /// <summary>
    /// Conversor para CalculoFrete
    /// </summary>
    public static ValueConverter<CalculoFrete, int> CalculoFreteConverter =>
        new(
            v => (int)v,
            v => (CalculoFrete)v
        );

    /// <summary>
    /// Conversor para ClassificacaoProduto
    /// </summary>
    public static ValueConverter<ClassificacaoProduto, int> ClassificacaoProdutoConverter =>
        new(
            v => (int)v,
            v => (ClassificacaoProduto)v
        );

    /// <summary>
    /// Conversor para TipoAcessoAuditoria
    /// </summary>
    public static ValueConverter<TipoAcessoAuditoria, int> TipoAcessoAuditoriaConverter =>
        new(
            v => (int)v,
            v => (TipoAcessoAuditoria)v
        );

    /// <summary>
    /// Conversor para StatusTentativaSerpro
    /// </summary>
    public static ValueConverter<StatusTentativaSerpro, int> StatusTentativaSerproConverter =>
        new(
            v => (int)v,
            v => (StatusTentativaSerpro)v
        );

    /// <summary>
    /// Conversor para TipoUnidade
    /// </summary>
    public static ValueConverter<TipoUnidade, int> TipoUnidadeConverter =>
        new(
            v => (int)v,
            v => (TipoUnidade)v
        );

    /// <summary>
    /// Conversor para Moeda
    /// </summary>
    public static ValueConverter<Moeda, int> MoedaConverter =>
        new(
            v => (int)v,
            v => (Moeda)v
        );

    /// <summary>
    /// Conversor para StatusGenerico
    /// </summary>
    public static ValueConverter<StatusGenerico, int> StatusGenericoConverter =>
        new(
            v => (int)v,
            v => (StatusGenerico)v
        );

    /// <summary>
    /// Conversor para TipoOperacao
    /// </summary>
    public static ValueConverter<TipoOperacao, int> TipoOperacaoConverter =>
        new(
            v => (int)v,
            v => (TipoOperacao)v
        );

    /// <summary>
    /// Conversor para NivelLog
    /// </summary>
    public static ValueConverter<NivelLog, int> NivelLogConverter =>
        new(
            v => (int)v,
            v => (NivelLog)v
        );

    /// <summary>
    /// Conversor para TipoDocumento
    /// </summary>
    public static ValueConverter<TipoDocumento, int> TipoDocumentoConverter =>
        new(
            v => (int)v,
            v => (TipoDocumento)v
        );

    /// <summary>
    /// Conversor para EstadoBrasil
    /// </summary>
    public static ValueConverter<EstadoBrasil, int> EstadoBrasilConverter =>
        new(
            v => (int)v,
            v => (EstadoBrasil)v
        );

    /// <summary>
    /// Conversor para TipoEndereco
    /// </summary>
    public static ValueConverter<TipoEndereco, int> TipoEnderecoConverter =>
        new(
            v => (int)v,
            v => (TipoEndereco)v
        );

    /// <summary>
    /// Conversor para TipoContato
    /// </summary>
    public static ValueConverter<TipoContato, int> TipoContatoConverter =>
        new(
            v => (int)v,
            v => (TipoContato)v
        );

    /// <summary>
    /// Conversor para TipoArquivo
    /// </summary>
    public static ValueConverter<TipoArquivo, int> TipoArquivoConverter =>
        new(
            v => (int)v,
            v => (TipoArquivo)v
        );

    /// <summary>
    /// Conversor para ExtensaoArquivo
    /// </summary>
    public static ValueConverter<ExtensaoArquivo, int> ExtensaoArquivoConverter =>
        new(
            v => (int)v,
            v => (ExtensaoArquivo)v
        );
}
</EnumConverters.cs>
<ValueObjectConverters.cs>
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Agriis.Compartilhado.Dominio.ObjetosValor;

namespace Agriis.Compartilhado.Infraestrutura.Persistencia.Conversores;

/// <summary>
/// Conversores de objetos de valor para Entity Framework
/// </summary>
public static class ValueObjectConverters
{
    /// <summary>
    /// Conversor para CPF
    /// </summary>
    public static ValueConverter<Cpf, string> CpfConverter =>
        new(
            v => v.Valor,
            v => new Cpf(v)
        );

    /// <summary>
    /// Conversor para CPF nullable
    /// </summary>
    public static ValueConverter<Cpf?, string?> CpfNullableConverter =>
        new(
            v => v != null ? v.Valor : null,
            v => v != null ? new Cpf(v) : null
        );

    /// <summary>
    /// Conversor para CNPJ
    /// </summary>
    public static ValueConverter<Cnpj, string> CnpjConverter =>
        new(
            v => v.Valor,
            v => new Cnpj(v)
        );

    /// <summary>
    /// Conversor para AreaPlantio
    /// </summary>
    public static ValueConverter<AreaPlantio, decimal> AreaPlantioConverter =>
        new(
            v => v.Valor,
            v => new AreaPlantio(v)
        );
}
</ValueObjectConverters.cs>
<ModelBuilderExtensions.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Compartilhado.Infraestrutura.Persistencia.Conversores;

namespace Agriis.Compartilhado.Infraestrutura.Persistencia.Extensions;

/// <summary>
/// Extensões para configuração do ModelBuilder
/// </summary>
public static class ModelBuilderExtensions
{
    /// <summary>
    /// Configura conversores de enum para PostgreSQL
    /// Este método deve ser chamado no OnModelCreating do DbContext específico
    /// para cada entidade que usa os enums
    /// </summary>
    /// <param name="modelBuilder">ModelBuilder do Entity Framework</param>
    /// <returns>ModelBuilder configurado</returns>
    public static ModelBuilder ConfigurarConversoresEnum(this ModelBuilder modelBuilder)
    {
        // Os conversores serão aplicados automaticamente quando as entidades forem configuradas
        // Este método serve como documentação dos conversores disponíveis
        return modelBuilder;
    }

    /// <summary>
    /// Configura conversores de objetos de valor
    /// Este método deve ser chamado no OnModelCreating do DbContext específico
    /// para cada entidade que usa os objetos de valor
    /// </summary>
    /// <param name="modelBuilder">ModelBuilder do Entity Framework</param>
    /// <returns>ModelBuilder configurado</returns>
    public static ModelBuilder ConfigurarConversoresObjetosValor(this ModelBuilder modelBuilder)
    {
        // Os conversores serão aplicados automaticamente quando as entidades forem configuradas
        // Este método serve como documentação dos conversores disponíveis
        return modelBuilder;
    }

    /// <summary>
    /// Configura todos os conversores (enums e objetos de valor)
    /// </summary>
    /// <param name="modelBuilder">ModelBuilder do Entity Framework</param>
    /// <returns>ModelBuilder configurado</returns>
    public static ModelBuilder ConfigurarTodosConversores(this ModelBuilder modelBuilder)
    {
        return modelBuilder
            .ConfigurarConversoresEnum()
            .ConfigurarConversoresObjetosValor();
    }
}
</ModelBuilderExtensions.cs>
<AlterarSenhaRequestDto.cs>
using System.ComponentModel.DataAnnotations;

namespace Agriis.Autenticacao.Aplicacao.DTOs;

/// <summary>
/// DTO para requisição de alteração de senha
/// </summary>
public class AlterarSenhaRequestDto
{
    /// <summary>
    /// Senha atual do usuário
    /// </summary>
    [Required(ErrorMessage = "Senha atual é obrigatória")]
    public string SenhaAtual { get; set; } = string.Empty;
    
    /// <summary>
    /// Nova senha do usuário
    /// </summary>
    [Required(ErrorMessage = "Nova senha é obrigatória")]
    [MinLength(6, ErrorMessage = "Nova senha deve ter pelo menos 6 caracteres")]
    public string NovaSenha { get; set; } = string.Empty;
    
    /// <summary>
    /// Confirmação da nova senha
    /// </summary>
    [Required(ErrorMessage = "Confirmação da senha é obrigatória")]
    [Compare(nameof(NovaSenha), ErrorMessage = "Confirmação deve ser igual à nova senha")]
    public string ConfirmacaoSenha { get; set; } = string.Empty;
}
</AlterarSenhaRequestDto.cs>
<LoginRequestDto.cs>
using System.ComponentModel.DataAnnotations;

namespace Agriis.Autenticacao.Aplicacao.DTOs;

/// <summary>
/// DTO para requisição de login
/// </summary>
public class LoginRequestDto
{
    /// <summary>
    /// Email do usuário
    /// </summary>
    [Required(ErrorMessage = "Email é obrigatório")]
    [EmailAddress(ErrorMessage = "Email deve ter um formato válido")]
    public string Email { get; set; } = string.Empty;
    
    /// <summary>
    /// Senha do usuário
    /// </summary>
    [Required(ErrorMessage = "Senha é obrigatória")]
    [MinLength(6, ErrorMessage = "Senha deve ter pelo menos 6 caracteres")]
    public string Senha { get; set; } = string.Empty;
    
    /// <summary>
    /// Indica se deve lembrar do login (manter sessão)
    /// </summary>
    public bool LembrarLogin { get; set; } = false;
}
</LoginRequestDto.cs>
<LoginResponseDto.cs>
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Autenticacao.Aplicacao.DTOs;

/// <summary>
/// DTO para resposta de login
/// </summary>
public class LoginResponseDto
{
    /// <summary>
    /// Token JWT de acesso
    /// </summary>
    public string AccessToken { get; set; } = string.Empty;
    
    /// <summary>
    /// Refresh token para renovação
    /// </summary>
    public string RefreshToken { get; set; } = string.Empty;
    
    /// <summary>
    /// Tipo do token (sempre "Bearer")
    /// </summary>
    public string TokenType { get; set; } = "Bearer";
    
    /// <summary>
    /// Tempo de expiração do token em segundos
    /// </summary>
    public int ExpiresIn { get; set; }
    
    /// <summary>
    /// Dados do usuário logado
    /// </summary>
    public UsuarioLogadoDto Usuario { get; set; } = new();
}

/// <summary>
/// DTO com dados do usuário logado
/// </summary>
public class UsuarioLogadoDto
{
    /// <summary>
    /// ID do usuário
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome do usuário
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Email do usuário
    /// </summary>
    public string Email { get; set; } = string.Empty;
    
    /// <summary>
    /// Roles do usuário
    /// </summary>
    public IEnumerable<string> Roles { get; set; } = new List<string>();
    
    /// <summary>
    /// URL da logo do usuário
    /// </summary>
    public string? LogoUrl { get; set; }
    
    /// <summary>
    /// Data do último login
    /// </summary>
    public DateTime? UltimoLogin { get; set; }
}
</LoginResponseDto.cs>
<RefreshTokenRequestDto.cs>
using System.ComponentModel.DataAnnotations;

namespace Agriis.Autenticacao.Aplicacao.DTOs;

/// <summary>
/// DTO para requisição de renovação de token
/// </summary>
public class RefreshTokenRequestDto
{
    /// <summary>
    /// Token de acesso atual (pode estar expirado)
    /// </summary>
    [Required(ErrorMessage = "Token de acesso é obrigatório")]
    public string AccessToken { get; set; } = string.Empty;
    
    /// <summary>
    /// Refresh token para renovação
    /// </summary>
    [Required(ErrorMessage = "Refresh token é obrigatório")]
    public string RefreshToken { get; set; } = string.Empty;
}
</RefreshTokenRequestDto.cs>
<IAutenticacaoService.cs>
using Agriis.Autenticacao.Aplicacao.DTOs;
using Agriis.Compartilhado.Aplicacao.Resultados;

namespace Agriis.Autenticacao.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de autenticação
/// </summary>
public interface IAutenticacaoService
{
    /// <summary>
    /// Realiza o login do usuário
    /// </summary>
    /// <param name="request">Dados de login</param>
    /// <param name="enderecoIp">Endereço IP do cliente</param>
    /// <param name="userAgent">User Agent do cliente</param>
    /// <returns>Resultado do login com tokens</returns>
    Task<Result<LoginResponseDto>> LoginAsync(LoginRequestDto request, string? enderecoIp = null, string? userAgent = null);
    
    /// <summary>
    /// Renova o token de acesso usando refresh token
    /// </summary>
    /// <param name="request">Dados para renovação</param>
    /// <param name="enderecoIp">Endereço IP do cliente</param>
    /// <param name="userAgent">User Agent do cliente</param>
    /// <returns>Resultado com novos tokens</returns>
    Task<Result<LoginResponseDto>> RefreshTokenAsync(RefreshTokenRequestDto request, string? enderecoIp = null, string? userAgent = null);
    
    /// <summary>
    /// Realiza o logout do usuário
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="refreshToken">Refresh token a ser revogado (opcional)</param>
    /// <returns>Resultado da operação</returns>
    Task<Result<bool>> LogoutAsync(int usuarioId, string? refreshToken = null);
    
    /// <summary>
    /// Altera a senha do usuário
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="request">Dados para alteração de senha</param>
    /// <returns>Resultado da operação</returns>
    Task<Result<bool>> AlterarSenhaAsync(int usuarioId, AlterarSenhaRequestDto request);
    
    /// <summary>
    /// Valida se um token de acesso está válido
    /// </summary>
    /// <param name="token">Token a ser validado</param>
    /// <returns>True se o token é válido</returns>
    Task<bool> ValidarTokenAsync(string token);
    
    /// <summary>
    /// Revoga todos os refresh tokens de um usuário
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <returns>Resultado da operação</returns>
    Task<Result<bool>> RevogarTodosTokensAsync(int usuarioId);
}
</IAutenticacaoService.cs>
<AutenticacaoService.cs>
using Agriis.Autenticacao.Aplicacao.DTOs;
using Agriis.Autenticacao.Aplicacao.Interfaces;
using Agriis.Autenticacao.Dominio.Entidades;
using Agriis.Autenticacao.Dominio.Interfaces;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Usuarios.Dominio.Interfaces;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace Agriis.Autenticacao.Aplicacao.Servicos;

/// <summary>
/// Serviço de autenticação
/// </summary>
public class AutenticacaoService : IAutenticacaoService
{
    private readonly IUsuarioRepository _usuarioRepository;
    private readonly IRefreshTokenRepository _refreshTokenRepository;
    private readonly ITokenService _tokenService;
    private readonly IPasswordService _passwordService;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IConfiguration _configuration;
    private readonly ILogger<AutenticacaoService> _logger;

    public AutenticacaoService(
        IUsuarioRepository usuarioRepository,
        IRefreshTokenRepository refreshTokenRepository,
        ITokenService tokenService,
        IPasswordService passwordService,
        IUnitOfWork unitOfWork,
        IConfiguration configuration,
        ILogger<AutenticacaoService> logger)
    {
        _usuarioRepository = usuarioRepository;
        _refreshTokenRepository = refreshTokenRepository;
        _tokenService = tokenService;
        _passwordService = passwordService;
        _unitOfWork = unitOfWork;
        _configuration = configuration;
        _logger = logger;
    }

    public async Task<Result<LoginResponseDto>> LoginAsync(LoginRequestDto request, string? enderecoIp = null, string? userAgent = null)
    {
        try
        {
            _logger.LogInformation("Tentativa de login para email: {Email}", request.Email);

            // Buscar usuário por email
            var usuario = await _usuarioRepository.ObterPorEmailAsync(request.Email);
            if (usuario == null)
            {
                _logger.LogWarning("Tentativa de login com email inexistente: {Email}", request.Email);
                return Result<LoginResponseDto>.Failure("Email ou senha inválidos");
            }

            // Verificar se usuário está ativo
            if (!usuario.Ativo)
            {
                _logger.LogWarning("Tentativa de login com usuário inativo: {Email}", request.Email);
                return Result<LoginResponseDto>.Failure("Usuário inativo");
            }

            // Verificar senha
            if (string.IsNullOrEmpty(usuario.SenhaHash) || !_passwordService.VerificarSenha(request.Senha, usuario.SenhaHash))
            {
                _logger.LogWarning("Tentativa de login com senha incorreta para: {Email}", request.Email);
                return Result<LoginResponseDto>.Failure("Email ou senha inválidos");
            }

            // Gerar tokens
            var roles = usuario.ObterRoles();
            var accessToken = _tokenService.GerarToken(usuario.Id, usuario.Email, usuario.Nome, roles);
            var refreshTokenValue = _tokenService.GerarRefreshToken();

            // Configurar expiração do refresh token
            var refreshTokenExpirationDays = _configuration.GetValue<int>("JwtSettings:RefreshTokenExpirationInDays", 60);
            var refreshTokenExpiration = DateTime.UtcNow.AddDays(refreshTokenExpirationDays);

            // Criar refresh token
            var refreshToken = new RefreshToken(refreshTokenValue, usuario.Id, refreshTokenExpiration, enderecoIp, userAgent);
            await _refreshTokenRepository.AdicionarAsync(refreshToken);

            // Atualizar último login
            usuario.RegistrarLogin();
            await _usuarioRepository.AtualizarAsync(usuario);

            await _unitOfWork.SalvarAlteracoesAsync();

            // Preparar resposta
            var tokenExpirationDays = _configuration.GetValue<int>("JwtSettings:TokenExpirationInDays", 100);
            var response = new LoginResponseDto
            {
                AccessToken = accessToken,
                RefreshToken = refreshTokenValue,
                TokenType = "Bearer",
                ExpiresIn = (int)TimeSpan.FromDays(tokenExpirationDays).TotalSeconds,
                Usuario = new UsuarioLogadoDto
                {
                    Id = usuario.Id,
                    Nome = usuario.Nome,
                    Email = usuario.Email,
                    Roles = roles.Select(r => r.ToString()),
                    LogoUrl = usuario.LogoUrl,
                    UltimoLogin = usuario.UltimoLogin
                }
            };

            _logger.LogInformation("Login realizado com sucesso para: {Email}", request.Email);
            return Result<LoginResponseDto>.Success(response);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao realizar login para: {Email}", request.Email);
            return Result<LoginResponseDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<LoginResponseDto>> RefreshTokenAsync(RefreshTokenRequestDto request, string? enderecoIp = null, string? userAgent = null)
    {
        try
        {
            _logger.LogInformation("Tentativa de renovação de token");

            // Validar refresh token
            var refreshToken = await _refreshTokenRepository.ObterPorTokenAsync(request.RefreshToken);
            if (refreshToken == null || !refreshToken.EstaValido())
            {
                _logger.LogWarning("Tentativa de renovação com refresh token inválido");
                return Result<LoginResponseDto>.Failure("Refresh token inválido ou expirado");
            }

            // Buscar usuário
            var usuario = await _usuarioRepository.ObterPorIdAsync(refreshToken.UsuarioId);
            if (usuario == null || !usuario.Ativo)
            {
                _logger.LogWarning("Tentativa de renovação para usuário inexistente ou inativo: {UsuarioId}", refreshToken.UsuarioId);
                return Result<LoginResponseDto>.Failure("Usuário inválido");
            }

            // Revogar refresh token atual
            refreshToken.Revogar();
            await _refreshTokenRepository.AtualizarAsync(refreshToken);

            // Gerar novos tokens
            var roles = usuario.ObterRoles();
            var accessToken = _tokenService.GerarToken(usuario.Id, usuario.Email, usuario.Nome, roles);
            var newRefreshTokenValue = _tokenService.GerarRefreshToken();

            // Configurar expiração do novo refresh token
            var refreshTokenExpirationDays = _configuration.GetValue<int>("JwtSettings:RefreshTokenExpirationInDays", 60);
            var refreshTokenExpiration = DateTime.UtcNow.AddDays(refreshTokenExpirationDays);

            // Criar novo refresh token
            var newRefreshToken = new RefreshToken(newRefreshTokenValue, usuario.Id, refreshTokenExpiration, enderecoIp, userAgent);
            await _refreshTokenRepository.AdicionarAsync(newRefreshToken);

            await _unitOfWork.SalvarAlteracoesAsync();

            // Preparar resposta
            var tokenExpirationDays = _configuration.GetValue<int>("JwtSettings:TokenExpirationInDays", 100);
            var response = new LoginResponseDto
            {
                AccessToken = accessToken,
                RefreshToken = newRefreshTokenValue,
                TokenType = "Bearer",
                ExpiresIn = (int)TimeSpan.FromDays(tokenExpirationDays).TotalSeconds,
                Usuario = new UsuarioLogadoDto
                {
                    Id = usuario.Id,
                    Nome = usuario.Nome,
                    Email = usuario.Email,
                    Roles = roles.Select(r => r.ToString()),
                    LogoUrl = usuario.LogoUrl,
                    UltimoLogin = usuario.UltimoLogin
                }
            };

            _logger.LogInformation("Token renovado com sucesso para usuário: {UsuarioId}", usuario.Id);
            return Result<LoginResponseDto>.Success(response);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao renovar token");
            return Result<LoginResponseDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<bool>> LogoutAsync(int usuarioId, string? refreshToken = null)
    {
        try
        {
            _logger.LogInformation("Logout para usuário: {UsuarioId}", usuarioId);

            if (!string.IsNullOrEmpty(refreshToken))
            {
                // Revogar refresh token específico
                var token = await _refreshTokenRepository.ObterPorTokenAsync(refreshToken);
                if (token != null && token.UsuarioId == usuarioId)
                {
                    token.Revogar();
                    await _refreshTokenRepository.AtualizarAsync(token);
                }
            }
            else
            {
                // Revogar todos os refresh tokens do usuário
                await _refreshTokenRepository.RevogarTodosTokensUsuarioAsync(usuarioId);
            }

            await _unitOfWork.SalvarAlteracoesAsync();

            _logger.LogInformation("Logout realizado com sucesso para usuário: {UsuarioId}", usuarioId);
            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao realizar logout para usuário: {UsuarioId}", usuarioId);
            return Result<bool>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<bool>> AlterarSenhaAsync(int usuarioId, AlterarSenhaRequestDto request)
    {
        try
        {
            _logger.LogInformation("Alteração de senha para usuário: {UsuarioId}", usuarioId);

            // Buscar usuário
            var usuario = await _usuarioRepository.ObterPorIdAsync(usuarioId);
            if (usuario == null)
            {
                return Result<bool>.Failure("Usuário não encontrado");
            }

            // Verificar senha atual
            if (string.IsNullOrEmpty(usuario.SenhaHash) || !_passwordService.VerificarSenha(request.SenhaAtual, usuario.SenhaHash))
            {
                _logger.LogWarning("Tentativa de alteração de senha com senha atual incorreta para usuário: {UsuarioId}", usuarioId);
                return Result<bool>.Failure("Senha atual incorreta");
            }

            // Validar força da nova senha
            if (!_passwordService.ValidarForcaSenha(request.NovaSenha))
            {
                return Result<bool>.Failure("Nova senha não atende aos critérios de segurança");
            }

            // Gerar hash da nova senha
            var novoHash = _passwordService.GerarHash(request.NovaSenha);
            usuario.DefinirSenha(novoHash);

            await _usuarioRepository.AtualizarAsync(usuario);

            // Revogar todos os refresh tokens para forçar novo login
            await _refreshTokenRepository.RevogarTodosTokensUsuarioAsync(usuarioId);

            await _unitOfWork.SalvarAlteracoesAsync();

            _logger.LogInformation("Senha alterada com sucesso para usuário: {UsuarioId}", usuarioId);
            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao alterar senha para usuário: {UsuarioId}", usuarioId);
            return Result<bool>.Failure("Erro interno do servidor");
        }
    }

    public async Task<bool> ValidarTokenAsync(string token)
    {
        try
        {
            var principal = _tokenService.ValidarToken(token);
            return principal != null && !_tokenService.TokenExpirou(token);
        }
        catch
        {
            return false;
        }
    }

    public async Task<Result<bool>> RevogarTodosTokensAsync(int usuarioId)
    {
        try
        {
            _logger.LogInformation("Revogando todos os tokens para usuário: {UsuarioId}", usuarioId);

            await _refreshTokenRepository.RevogarTodosTokensUsuarioAsync(usuarioId);
            await _unitOfWork.SalvarAlteracoesAsync();

            _logger.LogInformation("Todos os tokens revogados para usuário: {UsuarioId}", usuarioId);
            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao revogar tokens para usuário: {UsuarioId}", usuarioId);
            return Result<bool>.Failure("Erro interno do servidor");
        }
    }
}
</AutenticacaoService.cs>
<RefreshToken.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Autenticacao.Dominio.Entidades;

/// <summary>
/// Entidade que representa um refresh token para renovação de JWT
/// </summary>
public class RefreshToken : EntidadeBase
{
    /// <summary>
    /// Token de refresh único
    /// </summary>
    public string Token { get; private set; }
    
    /// <summary>
    /// ID do usuário proprietário do token
    /// </summary>
    public int UsuarioId { get; private set; }
    
    /// <summary>
    /// Data de expiração do refresh token
    /// </summary>
    public DateTime DataExpiracao { get; private set; }
    
    /// <summary>
    /// Indica se o token foi revogado
    /// </summary>
    public bool Revogado { get; private set; }
    
    /// <summary>
    /// Data de revogação do token
    /// </summary>
    public DateTime? DataRevogacao { get; private set; }
    
    /// <summary>
    /// Endereço IP que criou o token
    /// </summary>
    public string? EnderecoIp { get; private set; }
    
    /// <summary>
    /// User Agent que criou o token
    /// </summary>
    public string? UserAgent { get; private set; }
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected RefreshToken()
    {
        Token = string.Empty;
    }
    
    /// <summary>
    /// Construtor para criar um novo refresh token
    /// </summary>
    /// <param name="token">Token único</param>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="dataExpiracao">Data de expiração</param>
    /// <param name="enderecoIp">Endereço IP</param>
    /// <param name="userAgent">User Agent</param>
    public RefreshToken(string token, int usuarioId, DateTime dataExpiracao, string? enderecoIp = null, string? userAgent = null)
    {
        if (string.IsNullOrWhiteSpace(token))
            throw new ArgumentException("Token é obrigatório", nameof(token));
            
        if (usuarioId <= 0)
            throw new ArgumentException("ID do usuário deve ser maior que zero", nameof(usuarioId));
            
        if (dataExpiracao <= DateTime.UtcNow)
            throw new ArgumentException("Data de expiração deve ser futura", nameof(dataExpiracao));
            
        Token = token;
        UsuarioId = usuarioId;
        DataExpiracao = dataExpiracao;
        EnderecoIp = enderecoIp;
        UserAgent = userAgent;
        Revogado = false;
    }
    
    /// <summary>
    /// Verifica se o token está válido (não expirado e não revogado)
    /// </summary>
    /// <returns>True se o token está válido</returns>
    public bool EstaValido()
    {
        return !Revogado && DataExpiracao > DateTime.UtcNow;
    }
    
    /// <summary>
    /// Revoga o refresh token
    /// </summary>
    public void Revogar()
    {
        Revogado = true;
        DataRevogacao = DateTime.UtcNow;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Verifica se o token expirou
    /// </summary>
    /// <returns>True se o token expirou</returns>
    public bool Expirou()
    {
        return DataExpiracao <= DateTime.UtcNow;
    }
}
</RefreshToken.cs>
<IPasswordService.cs>
namespace Agriis.Autenticacao.Dominio.Interfaces;

/// <summary>
/// Interface para serviços de senha
/// </summary>
public interface IPasswordService
{
    /// <summary>
    /// Gera o hash de uma senha
    /// </summary>
    /// <param name="senha">Senha em texto plano</param>
    /// <returns>Hash da senha</returns>
    string GerarHash(string senha);
    
    /// <summary>
    /// Verifica se uma senha corresponde ao hash
    /// </summary>
    /// <param name="senha">Senha em texto plano</param>
    /// <param name="hash">Hash armazenado</param>
    /// <returns>True se a senha está correta</returns>
    bool VerificarSenha(string senha, string hash);
    
    /// <summary>
    /// Gera uma senha temporária aleatória
    /// </summary>
    /// <param name="tamanho">Tamanho da senha (padrão: 8)</param>
    /// <returns>Senha temporária</returns>
    string GerarSenhaTemporaria(int tamanho = 8);
    
    /// <summary>
    /// Valida se uma senha atende aos critérios de segurança
    /// </summary>
    /// <param name="senha">Senha a ser validada</param>
    /// <returns>True se a senha é válida</returns>
    bool ValidarForcaSenha(string senha);
}
</IPasswordService.cs>
<IRefreshTokenRepository.cs>
using Agriis.Autenticacao.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.Interfaces;

namespace Agriis.Autenticacao.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de refresh tokens
/// </summary>
public interface IRefreshTokenRepository : IRepository<RefreshToken>
{
    /// <summary>
    /// Obtém um refresh token pelo valor do token
    /// </summary>
    /// <param name="token">Token a ser buscado</param>
    /// <returns>Refresh token encontrado ou null</returns>
    Task<RefreshToken?> ObterPorTokenAsync(string token);
    
    /// <summary>
    /// Obtém todos os refresh tokens válidos de um usuário
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <returns>Lista de refresh tokens válidos</returns>
    Task<IEnumerable<RefreshToken>> ObterTokensValidosPorUsuarioAsync(int usuarioId);
    
    /// <summary>
    /// Revoga todos os refresh tokens de um usuário
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <returns>Task</returns>
    Task RevogarTodosTokensUsuarioAsync(int usuarioId);
    
    /// <summary>
    /// Remove refresh tokens expirados
    /// </summary>
    /// <returns>Número de tokens removidos</returns>
    Task<int> RemoverTokensExpiradosAsync();
    
    /// <summary>
    /// Verifica se existe um refresh token válido para o usuário
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <returns>True se existe token válido</returns>
    Task<bool> ExisteTokenValidoParaUsuarioAsync(int usuarioId);
}
</IRefreshTokenRepository.cs>
<ITokenService.cs>
using Agriis.Compartilhado.Dominio.Enums;
using System.Security.Claims;

namespace Agriis.Autenticacao.Dominio.Interfaces;

/// <summary>
/// Interface para serviços de token JWT
/// </summary>
public interface ITokenService
{
    /// <summary>
    /// Gera um token JWT para o usuário
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="email">Email do usuário</param>
    /// <param name="nome">Nome do usuário</param>
    /// <param name="roles">Roles do usuário</param>
    /// <returns>Token JWT</returns>
    string GerarToken(int usuarioId, string email, string nome, IEnumerable<Roles> roles);
    
    /// <summary>
    /// Gera um refresh token único
    /// </summary>
    /// <returns>Refresh token</returns>
    string GerarRefreshToken();
    
    /// <summary>
    /// Valida um token JWT
    /// </summary>
    /// <param name="token">Token a ser validado</param>
    /// <returns>ClaimsPrincipal se válido, null se inválido</returns>
    ClaimsPrincipal? ValidarToken(string token);
    
    /// <summary>
    /// Obtém o ID do usuário a partir de um token
    /// </summary>
    /// <param name="token">Token JWT</param>
    /// <returns>ID do usuário ou null se inválido</returns>
    int? ObterUsuarioIdDoToken(string token);
    
    /// <summary>
    /// Obtém as claims de um token
    /// </summary>
    /// <param name="token">Token JWT</param>
    /// <returns>Claims do token</returns>
    IEnumerable<Claim> ObterClaimsDoToken(string token);
    
    /// <summary>
    /// Verifica se um token expirou
    /// </summary>
    /// <param name="token">Token JWT</param>
    /// <returns>True se expirou</returns>
    bool TokenExpirou(string token);
}
</ITokenService.cs>
<RefreshTokenConfiguration.cs>
using Agriis.Autenticacao.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Autenticacao.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para RefreshToken
/// </summary>
public class RefreshTokenConfiguration : IEntityTypeConfiguration<RefreshToken>
{
    public void Configure(EntityTypeBuilder<RefreshToken> builder)
    {
        builder.ToTable("refresh_tokens");

        // Chave primária
        builder.HasKey(rt => rt.Id);
        builder.Property(rt => rt.Id)
            .HasColumnName("id")
            .ValueGeneratedOnAdd();

        // Token
        builder.Property(rt => rt.Token)
            .HasColumnName("token")
            .HasMaxLength(500)
            .IsRequired();

        builder.HasIndex(rt => rt.Token)
            .IsUnique()
            .HasDatabaseName("ix_refresh_tokens_token");

        // UsuarioId
        builder.Property(rt => rt.UsuarioId)
            .HasColumnName("usuario_id")
            .IsRequired();

        builder.HasIndex(rt => rt.UsuarioId)
            .HasDatabaseName("ix_refresh_tokens_usuario_id");

        // DataExpiracao
        builder.Property(rt => rt.DataExpiracao)
            .HasColumnName("data_expiracao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        // Revogado
        builder.Property(rt => rt.Revogado)
            .HasColumnName("revogado")
            .HasDefaultValue(false)
            .IsRequired();

        // DataRevogacao
        builder.Property(rt => rt.DataRevogacao)
            .HasColumnName("data_revogacao")
            .HasColumnType("timestamp with time zone");

        // EnderecoIp
        builder.Property(rt => rt.EnderecoIp)
            .HasColumnName("endereco_ip")
            .HasMaxLength(45); // IPv6 máximo

        // UserAgent
        builder.Property(rt => rt.UserAgent)
            .HasColumnName("user_agent")
            .HasMaxLength(1000);

        // Campos de auditoria herdados de EntidadeBase
        builder.Property(rt => rt.DataCriacao)
            .HasColumnName("data_criacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(rt => rt.DataAtualizacao)
            .HasColumnName("data_atualizacao")
            .HasColumnType("timestamp with time zone");

        // Índices para performance
        builder.HasIndex(rt => new { rt.UsuarioId, rt.Revogado, rt.DataExpiracao })
            .HasDatabaseName("ix_refresh_tokens_usuario_valido");

        builder.HasIndex(rt => rt.DataExpiracao)
            .HasDatabaseName("ix_refresh_tokens_data_expiracao");
    }
}
</RefreshTokenConfiguration.cs>
<RefreshTokenRepository.cs>
using Agriis.Autenticacao.Dominio.Entidades;
using Agriis.Autenticacao.Dominio.Interfaces;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Autenticacao.Infraestrutura.Repositorios;

/// <summary>
/// Repositório para refresh tokens
/// </summary>
public class RefreshTokenRepository : RepositoryBase<RefreshToken, DbContext>, IRefreshTokenRepository
{
    public RefreshTokenRepository(DbContext context) : base(context)
    {
    }

    public async Task<RefreshToken?> ObterPorTokenAsync(string token)
    {
        return await DbSet
            .FirstOrDefaultAsync(rt => rt.Token == token);
    }

    public async Task<IEnumerable<RefreshToken>> ObterTokensValidosPorUsuarioAsync(int usuarioId)
    {
        return await DbSet
            .Where(rt => rt.UsuarioId == usuarioId && 
                        !rt.Revogado && 
                        rt.DataExpiracao > DateTime.UtcNow)
            .OrderByDescending(rt => rt.DataCriacao)
            .ToListAsync();
    }

    public async Task RevogarTodosTokensUsuarioAsync(int usuarioId)
    {
        var tokens = await DbSet
            .Where(rt => rt.UsuarioId == usuarioId && !rt.Revogado)
            .ToListAsync();

        foreach (var token in tokens)
        {
            token.Revogar();
        }

        DbSet.UpdateRange(tokens);
    }

    public async Task<int> RemoverTokensExpiradosAsync()
    {
        var tokensExpirados = await DbSet
            .Where(rt => rt.DataExpiracao <= DateTime.UtcNow || rt.Revogado)
            .ToListAsync();

        if (tokensExpirados.Any())
        {
            DbSet.RemoveRange(tokensExpirados);
        }

        return tokensExpirados.Count;
    }

    public async Task<bool> ExisteTokenValidoParaUsuarioAsync(int usuarioId)
    {
        return await DbSet
            .AnyAsync(rt => rt.UsuarioId == usuarioId && 
                           !rt.Revogado && 
                           rt.DataExpiracao > DateTime.UtcNow);
    }
}
</RefreshTokenRepository.cs>
<PasswordService.cs>
using Agriis.Autenticacao.Dominio.Interfaces;
using System.Text.RegularExpressions;

namespace Agriis.Autenticacao.Infraestrutura.Servicos;

/// <summary>
/// Serviço para gerenciamento de senhas
/// </summary>
public class PasswordService : IPasswordService
{
    private const int WorkFactor = 12; // Fator de trabalho do BCrypt

    public string GerarHash(string senha)
    {
        if (string.IsNullOrWhiteSpace(senha))
            throw new ArgumentException("Senha não pode ser vazia", nameof(senha));

        return BCrypt.Net.BCrypt.HashPassword(senha, WorkFactor);
    }

    public bool VerificarSenha(string senha, string hash)
    {
        if (string.IsNullOrWhiteSpace(senha) || string.IsNullOrWhiteSpace(hash))
            return false;

        try
        {
            return BCrypt.Net.BCrypt.Verify(senha, hash);
        }
        catch
        {
            return false;
        }
    }

    public string GerarSenhaTemporaria(int tamanho = 8)
    {
        const string chars = "ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789";
        var random = new Random();
        
        return new string(Enumerable.Repeat(chars, tamanho)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    public bool ValidarForcaSenha(string senha)
    {
        if (string.IsNullOrWhiteSpace(senha))
            return false;

        // Mínimo 6 caracteres
        if (senha.Length < 6)
            return false;

        // Pelo menos uma letra
        if (!Regex.IsMatch(senha, @"[a-zA-Z]"))
            return false;

        // Pelo menos um número
        if (!Regex.IsMatch(senha, @"\d"))
            return false;

        // Não pode ter espaços
        if (senha.Contains(' '))
            return false;

        return true;
    }
}
</PasswordService.cs>
<TokenService.cs>
using Agriis.Autenticacao.Dominio.Interfaces;
using Agriis.Compartilhado.Dominio.Enums;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;

namespace Agriis.Autenticacao.Infraestrutura.Servicos;

/// <summary>
/// Serviço para geração e validação de tokens JWT
/// </summary>
public class TokenService : ITokenService
{
    private readonly IConfiguration _configuration;
    private readonly string _secretKey;
    private readonly string _issuer;
    private readonly string _audience;
    private readonly int _tokenExpirationInDays;

    public TokenService(IConfiguration configuration)
    {
        _configuration = configuration;
        _secretKey = _configuration["JwtSettings:SecretKey"] ?? throw new InvalidOperationException("JWT SecretKey não configurada");
        _issuer = _configuration["JwtSettings:Issuer"] ?? "Agriis.Api";
        _audience = _configuration["JwtSettings:Audience"] ?? "Agriis.Client";
        _tokenExpirationInDays = _configuration.GetValue<int>("JwtSettings:TokenExpirationInDays", 100);
    }

    public string GerarToken(int usuarioId, string email, string nome, IEnumerable<Roles> roles)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_secretKey);

        var claims = new List<Claim>
        {
            new(ClaimTypes.NameIdentifier, usuarioId.ToString()),
            new(ClaimTypes.Email, email),
            new(ClaimTypes.Name, nome),
            new("user_id", usuarioId.ToString()),
            new("email", email),
            new("name", nome)
        };

        // Adicionar roles como claims
        foreach (var role in roles)
        {
            claims.Add(new Claim(ClaimTypes.Role, role.ToString()));
            claims.Add(new Claim("role", role.ToString()));
        }

        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(claims),
            Expires = DateTime.UtcNow.AddDays(_tokenExpirationInDays),
            Issuer = _issuer,
            Audience = _audience,
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };

        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }

    public string GerarRefreshToken()
    {
        var randomNumber = new byte[64];
        using var rng = RandomNumberGenerator.Create();
        rng.GetBytes(randomNumber);
        return Convert.ToBase64String(randomNumber);
    }

    public ClaimsPrincipal? ValidarToken(string token)
    {
        try
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_secretKey);

            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = _issuer,
                ValidateAudience = true,
                ValidAudience = _audience,
                ValidateLifetime = true,
                ClockSkew = TimeSpan.Zero
            };

            var principal = tokenHandler.ValidateToken(token, validationParameters, out SecurityToken validatedToken);

            if (validatedToken is not JwtSecurityToken jwtToken ||
                !jwtToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256, StringComparison.InvariantCultureIgnoreCase))
            {
                return null;
            }

            return principal;
        }
        catch
        {
            return null;
        }
    }

    public int? ObterUsuarioIdDoToken(string token)
    {
        try
        {
            var principal = ValidarToken(token);
            var userIdClaim = principal?.FindFirst("user_id")?.Value ?? principal?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (int.TryParse(userIdClaim, out var userId))
            {
                return userId;
            }

            return null;
        }
        catch
        {
            return null;
        }
    }

    public IEnumerable<Claim> ObterClaimsDoToken(string token)
    {
        try
        {
            var principal = ValidarToken(token);
            return principal?.Claims ?? Enumerable.Empty<Claim>();
        }
        catch
        {
            return Enumerable.Empty<Claim>();
        }
    }

    public bool TokenExpirou(string token)
    {
        try
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var jwtToken = tokenHandler.ReadJwtToken(token);
            
            return jwtToken.ValidTo <= DateTime.UtcNow;
        }
        catch
        {
            return true;
        }
    }
}
</TokenService.cs>
<CatalogoDto.cs>
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Catalogos.Aplicacao.DTOs;

public class CatalogoDto
{
    public int Id { get; set; }
    public int SafraId { get; set; }
    public int PontoDistribuicaoId { get; set; }
    public int CulturaId { get; set; }
    public int CategoriaId { get; set; }
    public Moeda Moeda { get; set; }
    public DateTime DataInicio { get; set; }
    public DateTime? DataFim { get; set; }
    public bool Ativo { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
    
    public List<CatalogoItemDto> Itens { get; set; } = new();
}

public class CriarCatalogoDto
{
    public int SafraId { get; set; }
    public int PontoDistribuicaoId { get; set; }
    public int CulturaId { get; set; }
    public int CategoriaId { get; set; }
    public Moeda Moeda { get; set; }
    public DateTime DataInicio { get; set; }
    public DateTime? DataFim { get; set; }
}

public class AtualizarCatalogoDto
{
    public DateTime DataInicio { get; set; }
    public DateTime? DataFim { get; set; }
    public bool Ativo { get; set; }
}
</CatalogoDto.cs>
<CatalogoItemDto.cs>
using System.Text.Json;

namespace Agriis.Catalogos.Aplicacao.DTOs;

public class CatalogoItemDto
{
    public int Id { get; set; }
    public int CatalogoId { get; set; }
    public int ProdutoId { get; set; }
    public JsonDocument EstruturaPrecosJson { get; set; } = null!;
    public decimal? PrecoBase { get; set; }
    public bool Ativo { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

public class CriarCatalogoItemDto
{
    public int ProdutoId { get; set; }
    public JsonDocument EstruturaPrecosJson { get; set; } = null!;
    public decimal? PrecoBase { get; set; }
}

public class AtualizarCatalogoItemDto
{
    public JsonDocument EstruturaPrecosJson { get; set; } = null!;
    public decimal? PrecoBase { get; set; }
    public bool Ativo { get; set; }
}

public class ConsultarPrecoDto
{
    public string Uf { get; set; } = string.Empty;
    public DateTime Data { get; set; }
}
</CatalogoItemDto.cs>
<ICatalogoService.cs>
using Agriis.Catalogos.Aplicacao.DTOs;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Catalogos.Aplicacao.Interfaces;

public interface ICatalogoService
{
    Task<Result<CatalogoDto>> ObterPorIdAsync(int id);
    Task<Result<CatalogoDto>> CriarAsync(CriarCatalogoDto dto);
    Task<Result<CatalogoDto>> AtualizarAsync(int id, AtualizarCatalogoDto dto);
    Task<Result> RemoverAsync(int id);
    Task<Result<PagedResult<CatalogoDto>>> ObterPaginadoAsync(int pagina, int tamanhoPagina, 
        int? safraId = null, int? pontoDistribuicaoId = null, int? culturaId = null, 
        int? categoriaId = null, Moeda? moeda = null, bool? ativo = null);
    Task<Result<IEnumerable<CatalogoDto>>> ObterVigentesAsync(DateTime data);
    Task<Result<CatalogoDto>> ObterPorChaveUnicaAsync(int safraId, int pontoDistribuicaoId, int culturaId, int categoriaId);
    
    // Métodos para itens do catálogo
    Task<Result<CatalogoItemDto>> AdicionarItemAsync(int catalogoId, CriarCatalogoItemDto dto);
    Task<Result<CatalogoItemDto>> AtualizarItemAsync(int catalogoId, int itemId, AtualizarCatalogoItemDto dto);
    Task<Result> RemoverItemAsync(int catalogoId, int itemId);
    Task<Result<decimal?>> ConsultarPrecoAsync(int catalogoId, int produtoId, ConsultarPrecoDto dto);
}
</ICatalogoService.cs>
<CatalogoMappingProfile.cs>
using AutoMapper;
using Agriis.Catalogos.Aplicacao.DTOs;
using Agriis.Catalogos.Dominio.Entidades;

namespace Agriis.Catalogos.Aplicacao.Mapeamentos;

public class CatalogoMappingProfile : Profile
{
    public CatalogoMappingProfile()
    {
        CreateMap<Catalogo, CatalogoDto>();
        CreateMap<CriarCatalogoDto, Catalogo>()
            .ConstructUsing(src => new Catalogo(
                src.SafraId,
                src.PontoDistribuicaoId,
                src.CulturaId,
                src.CategoriaId,
                src.Moeda,
                src.DataInicio,
                src.DataFim));
        
        CreateMap<CatalogoItem, CatalogoItemDto>();
        CreateMap<CriarCatalogoItemDto, CatalogoItem>()
            .ConstructUsing((src, context) => new CatalogoItem(
                0, // CatalogoId será definido no serviço
                src.ProdutoId,
                src.EstruturaPrecosJson,
                src.PrecoBase));
    }
}
</CatalogoMappingProfile.cs>
<CatalogoService.cs>
using AutoMapper;
using Agriis.Catalogos.Aplicacao.DTOs;
using Agriis.Catalogos.Aplicacao.Interfaces;
using Agriis.Catalogos.Dominio.Entidades;
using Agriis.Catalogos.Dominio.Interfaces;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Compartilhado.Dominio.Interfaces;
using Microsoft.Extensions.Logging;

namespace Agriis.Catalogos.Aplicacao.Servicos;

public class CatalogoService : ICatalogoService
{
    private readonly ICatalogoRepository _catalogoRepository;
    private readonly ICatalogoItemRepository _catalogoItemRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly ILogger<CatalogoService> _logger;

    public CatalogoService(
        ICatalogoRepository catalogoRepository,
        ICatalogoItemRepository catalogoItemRepository,
        IUnitOfWork unitOfWork,
        IMapper mapper,
        ILogger<CatalogoService> logger)
    {
        _catalogoRepository = catalogoRepository;
        _catalogoItemRepository = catalogoItemRepository;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        _logger = logger;
    }

    public async Task<Result<CatalogoDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var catalogo = await _catalogoRepository.ObterPorIdAsync(id);
            if (catalogo == null)
                return Result<CatalogoDto>.Failure("Catálogo não encontrado");

            var dto = _mapper.Map<CatalogoDto>(catalogo);
            return Result<CatalogoDto>.Success(dto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter catálogo {Id}", id);
            return Result<CatalogoDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<CatalogoDto>> CriarAsync(CriarCatalogoDto dto)
    {
        try
        {
            // Validar unicidade
            var existe = await _catalogoRepository.ExisteChaveUnicaAsync(
                dto.SafraId, dto.PontoDistribuicaoId, dto.CulturaId, dto.CategoriaId);
            
            if (existe)
                return Result<CatalogoDto>.Failure("Já existe um catálogo para esta combinação de safra, ponto de distribuição, cultura e categoria");

            var catalogo = new Catalogo(
                dto.SafraId,
                dto.PontoDistribuicaoId,
                dto.CulturaId,
                dto.CategoriaId,
                dto.Moeda,
                dto.DataInicio,
                dto.DataFim);

            catalogo = await _catalogoRepository.AdicionarAsync(catalogo);
            await _unitOfWork.SalvarAlteracoesAsync();

            var catalogoDto = _mapper.Map<CatalogoDto>(catalogo);
            return Result<CatalogoDto>.Success(catalogoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar catálogo");
            return Result<CatalogoDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<CatalogoDto>> AtualizarAsync(int id, AtualizarCatalogoDto dto)
    {
        try
        {
            var catalogo = await _catalogoRepository.ObterPorIdAsync(id);
            if (catalogo == null)
                return Result<CatalogoDto>.Failure("Catálogo não encontrado");

            // Usar reflection para atualizar propriedades
            var propriedades = typeof(AtualizarCatalogoDto).GetProperties();
            foreach (var prop in propriedades)
            {
                var valor = prop.GetValue(dto);
                var propCatalogo = typeof(Catalogo).GetProperty(prop.Name);
                if (propCatalogo != null && propCatalogo.CanWrite)
                {
                    propCatalogo.SetValue(catalogo, valor);
                }
            }

            catalogo.AtualizarDataModificacao();
            await _catalogoRepository.AtualizarAsync(catalogo);
            await _unitOfWork.SalvarAlteracoesAsync();

            var catalogoDto = _mapper.Map<CatalogoDto>(catalogo);
            return Result<CatalogoDto>.Success(catalogoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar catálogo {Id}", id);
            return Result<CatalogoDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            var catalogo = await _catalogoRepository.ObterPorIdAsync(id);
            if (catalogo == null)
                return Result.Failure("Catálogo não encontrado");

            await _catalogoRepository.RemoverAsync(id);
            await _unitOfWork.SalvarAlteracoesAsync();

            return Result.Success();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover catálogo {Id}", id);
            return Result.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<PagedResult<CatalogoDto>>> ObterPaginadoAsync(int pagina, int tamanhoPagina, 
        int? safraId = null, int? pontoDistribuicaoId = null, int? culturaId = null, 
        int? categoriaId = null, Moeda? moeda = null, bool? ativo = null)
    {
        try
        {
            var resultado = await _catalogoRepository.ObterPaginadoAsync(
                pagina, tamanhoPagina, safraId, pontoDistribuicaoId, culturaId, categoriaId, moeda, ativo);

            var dtos = _mapper.Map<IEnumerable<CatalogoDto>>(resultado.Items);
            var pagedResult = new PagedResult<CatalogoDto>(dtos, resultado.TotalCount, pagina, tamanhoPagina);

            return Result<PagedResult<CatalogoDto>>.Success(pagedResult);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter catálogos paginados");
            return Result<PagedResult<CatalogoDto>>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<IEnumerable<CatalogoDto>>> ObterVigentesAsync(DateTime data)
    {
        try
        {
            var catalogos = await _catalogoRepository.ObterVigentesAsync(data);
            var dtos = _mapper.Map<IEnumerable<CatalogoDto>>(catalogos);
            return Result<IEnumerable<CatalogoDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter catálogos vigentes para data {Data}", data);
            return Result<IEnumerable<CatalogoDto>>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<CatalogoDto>> ObterPorChaveUnicaAsync(int safraId, int pontoDistribuicaoId, int culturaId, int categoriaId)
    {
        try
        {
            var catalogo = await _catalogoRepository.ObterPorChaveUnicaAsync(safraId, pontoDistribuicaoId, culturaId, categoriaId);
            if (catalogo == null)
                return Result<CatalogoDto>.Failure("Catálogo não encontrado");

            var dto = _mapper.Map<CatalogoDto>(catalogo);
            return Result<CatalogoDto>.Success(dto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter catálogo por chave única");
            return Result<CatalogoDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<CatalogoItemDto>> AdicionarItemAsync(int catalogoId, CriarCatalogoItemDto dto)
    {
        try
        {
            var catalogo = await _catalogoRepository.ObterPorIdAsync(catalogoId);
            if (catalogo == null)
                return Result<CatalogoItemDto>.Failure("Catálogo não encontrado");

            var item = new CatalogoItem(catalogoId, dto.ProdutoId, dto.EstruturaPrecosJson, dto.PrecoBase);
            catalogo.AdicionarItem(item);

            await _catalogoRepository.AtualizarAsync(catalogo);
            await _unitOfWork.SalvarAlteracoesAsync();

            var itemDto = _mapper.Map<CatalogoItemDto>(item);
            return Result<CatalogoItemDto>.Success(itemDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao adicionar item ao catálogo {CatalogoId}", catalogoId);
            return Result<CatalogoItemDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<CatalogoItemDto>> AtualizarItemAsync(int catalogoId, int itemId, AtualizarCatalogoItemDto dto)
    {
        try
        {
            var item = await _catalogoItemRepository.ObterPorIdAsync(itemId);
            if (item == null || item.CatalogoId != catalogoId)
                return Result<CatalogoItemDto>.Failure("Item não encontrado");

            item.AtualizarPrecos(dto.EstruturaPrecosJson, dto.PrecoBase);
            if (!dto.Ativo)
                item.Desativar();
            else
                item.Ativar();

            await _catalogoItemRepository.AtualizarAsync(item);
            await _unitOfWork.SalvarAlteracoesAsync();

            var itemDto = _mapper.Map<CatalogoItemDto>(item);
            return Result<CatalogoItemDto>.Success(itemDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar item {ItemId} do catálogo {CatalogoId}", itemId, catalogoId);
            return Result<CatalogoItemDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result> RemoverItemAsync(int catalogoId, int itemId)
    {
        try
        {
            var catalogo = await _catalogoRepository.ObterPorIdAsync(catalogoId);
            if (catalogo == null)
                return Result.Failure("Catálogo não encontrado");

            var item = await _catalogoItemRepository.ObterPorIdAsync(itemId);
            if (item == null || item.CatalogoId != catalogoId)
                return Result.Failure("Item não encontrado");

            catalogo.RemoverItem(item.ProdutoId);
            await _catalogoRepository.AtualizarAsync(catalogo);
            await _unitOfWork.SalvarAlteracoesAsync();

            return Result.Success();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover item {ItemId} do catálogo {CatalogoId}", itemId, catalogoId);
            return Result.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<decimal?>> ConsultarPrecoAsync(int catalogoId, int produtoId, ConsultarPrecoDto dto)
    {
        try
        {
            var item = await _catalogoItemRepository.ObterPorCatalogoEProdutoAsync(catalogoId, produtoId);
            if (item == null)
                return Result<decimal?>.Failure("Item não encontrado no catálogo");

            var preco = item.ObterPrecoPorEstadoEData(dto.Uf, dto.Data);
            return Result<decimal?>.Success(preco);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao consultar preço do produto {ProdutoId} no catálogo {CatalogoId}", produtoId, catalogoId);
            return Result<decimal?>.Failure("Erro interno do servidor");
        }
    }
}
</CatalogoService.cs>
<CriarCatalogoDtoValidator.cs>
using Agriis.Catalogos.Aplicacao.DTOs;
using FluentValidation;

namespace Agriis.Catalogos.Aplicacao.Validadores;

public class CriarCatalogoDtoValidator : AbstractValidator<CriarCatalogoDto>
{
    public CriarCatalogoDtoValidator()
    {
        RuleFor(x => x.SafraId)
            .GreaterThan(0)
            .WithMessage("SafraId deve ser maior que zero");

        RuleFor(x => x.PontoDistribuicaoId)
            .GreaterThan(0)
            .WithMessage("PontoDistribuicaoId deve ser maior que zero");

        RuleFor(x => x.CulturaId)
            .GreaterThan(0)
            .WithMessage("CulturaId deve ser maior que zero");

        RuleFor(x => x.CategoriaId)
            .GreaterThan(0)
            .WithMessage("CategoriaId deve ser maior que zero");

        RuleFor(x => x.Moeda)
            .IsInEnum()
            .WithMessage("Moeda deve ser um valor válido");

        RuleFor(x => x.DataInicio)
            .NotEmpty()
            .WithMessage("DataInicio é obrigatória");

        RuleFor(x => x.DataFim)
            .GreaterThan(x => x.DataInicio)
            .When(x => x.DataFim.HasValue)
            .WithMessage("DataFim deve ser maior que DataInicio");
    }
}
</CriarCatalogoDtoValidator.cs>
<CriarCatalogoItemDtoValidator.cs>
using Agriis.Catalogos.Aplicacao.DTOs;
using FluentValidation;

namespace Agriis.Catalogos.Aplicacao.Validadores;

public class CriarCatalogoItemDtoValidator : AbstractValidator<CriarCatalogoItemDto>
{
    public CriarCatalogoItemDtoValidator()
    {
        RuleFor(x => x.ProdutoId)
            .GreaterThan(0)
            .WithMessage("ProdutoId deve ser maior que zero");

        RuleFor(x => x.EstruturaPrecosJson)
            .NotNull()
            .WithMessage("EstruturaPrecosJson é obrigatória");

        RuleFor(x => x.PrecoBase)
            .GreaterThanOrEqualTo(0)
            .When(x => x.PrecoBase.HasValue)
            .WithMessage("PrecoBase deve ser maior ou igual a zero");
    }
}
</CriarCatalogoItemDtoValidator.cs>
<Catalogo.cs>
using System.Text.Json;
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Catalogos.Dominio.Entidades;

public class Catalogo : EntidadeRaizAgregada
{
    public int SafraId { get; private set; }
    public int PontoDistribuicaoId { get; private set; }
    public int CulturaId { get; private set; }
    public int CategoriaId { get; private set; }
    public Moeda Moeda { get; private set; }
    public DateTime DataInicio { get; private set; }
    public DateTime? DataFim { get; private set; }
    public bool Ativo { get; private set; }
    
    // Navigation Properties
    public virtual ICollection<CatalogoItem> Itens { get; private set; }
    
    protected Catalogo() 
    {
        Itens = new List<CatalogoItem>();
    }
    
    public Catalogo(int safraId, int pontoDistribuicaoId, int culturaId, int categoriaId, 
                   Moeda moeda, DateTime dataInicio, DateTime? dataFim = null)
    {
        SafraId = safraId;
        PontoDistribuicaoId = pontoDistribuicaoId;
        CulturaId = culturaId;
        CategoriaId = categoriaId;
        Moeda = moeda;
        DataInicio = dataInicio;
        DataFim = dataFim;
        Ativo = true;
        Itens = new List<CatalogoItem>();
    }
    
    public void AdicionarItem(CatalogoItem item)
    {
        if (item == null)
            throw new ArgumentNullException(nameof(item));
            
        if (Itens.Any(i => i.ProdutoId == item.ProdutoId))
            throw new InvalidOperationException($"Produto {item.ProdutoId} já existe no catálogo");
            
        Itens.Add(item);
        AtualizarDataModificacao();
    }
    
    public void RemoverItem(int produtoId)
    {
        var item = Itens.FirstOrDefault(i => i.ProdutoId == produtoId);
        if (item != null)
        {
            Itens.Remove(item);
            AtualizarDataModificacao();
        }
    }
    
    public void Desativar()
    {
        Ativo = false;
        AtualizarDataModificacao();
    }
    
    public void Ativar()
    {
        Ativo = true;
        AtualizarDataModificacao();
    }
    
    public bool EstaVigente(DateTime data)
    {
        return Ativo && 
               data >= DataInicio && 
               (DataFim == null || data <= DataFim);
    }
}
</Catalogo.cs>
<CatalogoItem.cs>
using System.Text.Json;
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Catalogos.Dominio.Entidades;

public class CatalogoItem : EntidadeBase
{
    public int CatalogoId { get; private set; }
    public int ProdutoId { get; private set; }
    public JsonDocument EstruturaPrecosJson { get; private set; }
    public decimal? PrecoBase { get; private set; }
    public bool Ativo { get; private set; }
    
    // Navigation Properties
    public virtual Catalogo Catalogo { get; private set; } = null!;
    
    protected CatalogoItem() 
    {
        EstruturaPrecosJson = null!;
    }
    
    public CatalogoItem(int catalogoId, int produtoId, JsonDocument estruturaPrecosJson, decimal? precoBase = null)
    {
        CatalogoId = catalogoId;
        ProdutoId = produtoId;
        EstruturaPrecosJson = estruturaPrecosJson ?? throw new ArgumentNullException(nameof(estruturaPrecosJson));
        PrecoBase = precoBase;
        Ativo = true;
    }
    
    public void AtualizarPrecos(JsonDocument novaEstruturaPrecosJson, decimal? novoPrecoBase = null)
    {
        EstruturaPrecosJson = novaEstruturaPrecosJson ?? throw new ArgumentNullException(nameof(novaEstruturaPrecosJson));
        PrecoBase = novoPrecoBase;
        AtualizarDataModificacao();
    }
    
    public void Desativar()
    {
        Ativo = false;
        AtualizarDataModificacao();
    }
    
    public void Ativar()
    {
        Ativo = true;
        AtualizarDataModificacao();
    }
    
    public decimal? ObterPrecoPorEstadoEData(string uf, DateTime data)
    {
        if (EstruturaPrecosJson == null)
            return PrecoBase;
            
        try
        {
            var root = EstruturaPrecosJson.RootElement;
            
            // Procurar por estado específico
            if (root.TryGetProperty("estados", out var estados) && 
                estados.TryGetProperty(uf, out var estadoElement))
            {
                return ObterPrecoParaData(estadoElement, data);
            }
            
            // Fallback para preço padrão
            if (root.TryGetProperty("padrao", out var padraoElement))
            {
                return ObterPrecoParaData(padraoElement, data);
            }
            
            return PrecoBase;
        }
        catch
        {
            return PrecoBase;
        }
    }
    
    private decimal? ObterPrecoParaData(JsonElement elemento, DateTime data)
    {
        if (elemento.ValueKind == JsonValueKind.Number)
        {
            return elemento.GetDecimal();
        }
        
        if (elemento.ValueKind == JsonValueKind.Array)
        {
            foreach (var item in elemento.EnumerateArray())
            {
                if (item.TryGetProperty("data_inicio", out var dataInicioElement) &&
                    item.TryGetProperty("valor", out var valorElement))
                {
                    if (DateTime.TryParse(dataInicioElement.GetString(), out var dataInicio) &&
                        data >= dataInicio)
                    {
                        var dataFim = DateTime.MaxValue;
                        if (item.TryGetProperty("data_fim", out var dataFimElement) &&
                            DateTime.TryParse(dataFimElement.GetString(), out var dataFimParsed))
                        {
                            dataFim = dataFimParsed;
                        }
                        
                        if (data <= dataFim)
                        {
                            return valorElement.GetDecimal();
                        }
                    }
                }
            }
        }
        
        return null;
    }
}
</CatalogoItem.cs>
<ICatalogoItemRepository.cs>
using Agriis.Catalogos.Dominio.Entidades;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Interfaces;

namespace Agriis.Catalogos.Dominio.Interfaces;

public interface ICatalogoItemRepository : IRepository<CatalogoItem>
{
    Task<IEnumerable<CatalogoItem>> ObterPorCatalogoAsync(int catalogoId);
    Task<CatalogoItem?> ObterPorCatalogoEProdutoAsync(int catalogoId, int produtoId);
    Task<IEnumerable<CatalogoItem>> ObterPorProdutoAsync(int produtoId);
    Task<PagedResult<CatalogoItem>> ObterPaginadoAsync(int pagina, int tamanhoPagina, 
        int? catalogoId = null, int? produtoId = null, bool? ativo = null);
}
</ICatalogoItemRepository.cs>
<ICatalogoRepository.cs>
using Agriis.Catalogos.Dominio.Entidades;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Compartilhado.Dominio.Interfaces;

namespace Agriis.Catalogos.Dominio.Interfaces;

public interface ICatalogoRepository : IRepository<Catalogo>
{
    Task<Catalogo?> ObterPorChaveUnicaAsync(int safraId, int pontoDistribuicaoId, int culturaId, int categoriaId);
    Task<IEnumerable<Catalogo>> ObterPorSafraAsync(int safraId);
    Task<IEnumerable<Catalogo>> ObterPorPontoDistribuicaoAsync(int pontoDistribuicaoId);
    Task<IEnumerable<Catalogo>> ObterPorCulturaAsync(int culturaId);
    Task<IEnumerable<Catalogo>> ObterVigentesAsync(DateTime data);
    Task<PagedResult<Catalogo>> ObterPaginadoAsync(int pagina, int tamanhoPagina, 
        int? safraId = null, int? pontoDistribuicaoId = null, int? culturaId = null, 
        int? categoriaId = null, Moeda? moeda = null, bool? ativo = null);
    Task<bool> ExisteChaveUnicaAsync(int safraId, int pontoDistribuicaoId, int culturaId, int categoriaId, int? catalogoIdExcluir = null);
}
</ICatalogoRepository.cs>
<CatalogoConfiguration.cs>
using Agriis.Catalogos.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Catalogos.Infraestrutura.Configuracoes;

public class CatalogoConfiguration : IEntityTypeConfiguration<Catalogo>
{
    public void Configure(EntityTypeBuilder<Catalogo> builder)
    {
        builder.ToTable("Catalogo");

        builder.HasKey(c => c.Id);

        builder.Property(c => c.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(c => c.SafraId)
            .HasColumnName("SafraId")
            .IsRequired();

        builder.Property(c => c.PontoDistribuicaoId)
            .HasColumnName("PontoDistribuicaoId")
            .IsRequired();

        builder.Property(c => c.CulturaId)
            .HasColumnName("CulturaId")
            .IsRequired();

        builder.Property(c => c.CategoriaId)
            .HasColumnName("CategoriaId")
            .IsRequired();

        builder.Property(c => c.Moeda)
            .HasColumnName("Moeda")
            .HasConversion<string>()
            .IsRequired();

        builder.Property(c => c.DataInicio)
            .HasColumnName("DataInicio")
            .HasColumnType("timestamp without time zone")
            .IsRequired();

        builder.Property(c => c.DataFim)
            .HasColumnName("DataFim")
            .HasColumnType("timestamp without time zone");

        builder.Property(c => c.Ativo)
            .HasColumnName("Ativo")
            .IsRequired()
            .HasDefaultValue(true);

        builder.Property(c => c.DataCriacao)
            .HasColumnName("DataCriacao")
            .HasColumnType("timestamp without time zone")
            .IsRequired();

        builder.Property(c => c.DataAtualizacao)
            .HasColumnName("DataAtualizacao")
            .HasColumnType("timestamp without time zone");

        // Relacionamentos
        builder.HasMany(c => c.Itens)
            .WithOne(i => i.Catalogo)
            .HasForeignKey(i => i.CatalogoId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(c => new { c.SafraId, c.PontoDistribuicaoId, c.CulturaId, c.CategoriaId })
            .IsUnique()
            .HasDatabaseName("IX_Catalogo_ChaveUnica");

        builder.HasIndex(c => c.SafraId)
            .HasDatabaseName("IX_Catalogo_SafraId");

        builder.HasIndex(c => c.PontoDistribuicaoId)
            .HasDatabaseName("IX_Catalogo_PontoDistribuicaoId");

        builder.HasIndex(c => c.CulturaId)
            .HasDatabaseName("IX_Catalogo_CulturaId");

        builder.HasIndex(c => c.CategoriaId)
            .HasDatabaseName("IX_Catalogo_CategoriaId");

        builder.HasIndex(c => new { c.DataInicio, c.DataFim, c.Ativo })
            .HasDatabaseName("IX_Catalogo_Vigencia");
    }
}
</CatalogoConfiguration.cs>
<CatalogoItemConfiguration.cs>
using Agriis.Catalogos.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Catalogos.Infraestrutura.Configuracoes;

public class CatalogoItemConfiguration : IEntityTypeConfiguration<CatalogoItem>
{
    public void Configure(EntityTypeBuilder<CatalogoItem> builder)
    {
        builder.ToTable("CatalogoItem");

        builder.HasKey(ci => ci.Id);

        builder.Property(ci => ci.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(ci => ci.CatalogoId)
            .HasColumnName("CatalogoId")
            .IsRequired();

        builder.Property(ci => ci.ProdutoId)
            .HasColumnName("ProdutoId")
            .IsRequired();

        builder.Property(ci => ci.EstruturaPrecosJson)
            .HasColumnName("EstruturaPrecosJson")
            .HasColumnType("jsonb")
            .IsRequired();

        builder.Property(ci => ci.PrecoBase)
            .HasColumnName("PrecoBase")
            .HasColumnType("decimal(18,2)");

        builder.Property(ci => ci.Ativo)
            .HasColumnName("Ativo")
            .IsRequired()
            .HasDefaultValue(true);

        builder.Property(ci => ci.DataCriacao)
            .HasColumnName("DataCriacao")
            .HasColumnType("timestamp without time zone")
            .IsRequired();

        builder.Property(ci => ci.DataAtualizacao)
            .HasColumnName("DataAtualizacao")
            .HasColumnType("timestamp without time zone");

        // Relacionamentos
        builder.HasOne(ci => ci.Catalogo)
            .WithMany(c => c.Itens)
            .HasForeignKey(ci => ci.CatalogoId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(ci => new { ci.CatalogoId, ci.ProdutoId })
            .IsUnique()
            .HasDatabaseName("IX_CatalogoItem_CatalogoProduto");

        builder.HasIndex(ci => ci.CatalogoId)
            .HasDatabaseName("IX_CatalogoItem_CatalogoId");

        builder.HasIndex(ci => ci.ProdutoId)
            .HasDatabaseName("IX_CatalogoItem_ProdutoId");

        builder.HasIndex(ci => ci.Ativo)
            .HasDatabaseName("IX_CatalogoItem_Ativo");
    }
}
</CatalogoItemConfiguration.cs>
<CatalogoItemRepository.cs>
using Agriis.Catalogos.Dominio.Entidades;
using Agriis.Catalogos.Dominio.Interfaces;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Catalogos.Infraestrutura.Repositorios;

public class CatalogoItemRepository : RepositoryBase<CatalogoItem, DbContext>, ICatalogoItemRepository
{
    private readonly DbSet<CatalogoItem> _dbSet;

    public CatalogoItemRepository(DbContext context) : base(context)
    {
        _dbSet = context.Set<CatalogoItem>();
    }

    public async Task<IEnumerable<CatalogoItem>> ObterPorCatalogoAsync(int catalogoId)
    {
        return await _dbSet
            .Where(ci => ci.CatalogoId == catalogoId)
            .OrderBy(ci => ci.DataCriacao)
            .ToListAsync();
    }

    public async Task<CatalogoItem?> ObterPorCatalogoEProdutoAsync(int catalogoId, int produtoId)
    {
        return await _dbSet
            .FirstOrDefaultAsync(ci => ci.CatalogoId == catalogoId && ci.ProdutoId == produtoId);
    }

    public async Task<IEnumerable<CatalogoItem>> ObterPorProdutoAsync(int produtoId)
    {
        return await _dbSet
            .Include(ci => ci.Catalogo)
            .Where(ci => ci.ProdutoId == produtoId)
            .OrderBy(ci => ci.DataCriacao)
            .ToListAsync();
    }

    public async Task<PagedResult<CatalogoItem>> ObterPaginadoAsync(int pagina, int tamanhoPagina, 
        int? catalogoId = null, int? produtoId = null, bool? ativo = null)
    {
        var query = _dbSet.AsQueryable();

        if (catalogoId.HasValue)
            query = query.Where(ci => ci.CatalogoId == catalogoId.Value);

        if (produtoId.HasValue)
            query = query.Where(ci => ci.ProdutoId == produtoId.Value);

        if (ativo.HasValue)
            query = query.Where(ci => ci.Ativo == ativo.Value);

        var totalCount = await query.CountAsync();

        var items = await query
            .OrderByDescending(ci => ci.DataCriacao)
            .Skip((pagina - 1) * tamanhoPagina)
            .Take(tamanhoPagina)
            .ToListAsync();

        return new PagedResult<CatalogoItem>(items, totalCount, pagina, tamanhoPagina);
    }
}
</CatalogoItemRepository.cs>
<CatalogoRepository.cs>
using Agriis.Catalogos.Dominio.Entidades;
using Agriis.Catalogos.Dominio.Interfaces;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Catalogos.Infraestrutura.Repositorios;

public class CatalogoRepository : RepositoryBase<Catalogo, DbContext>, ICatalogoRepository
{
    private readonly DbSet<Catalogo> _dbSet;

    public CatalogoRepository(DbContext context) : base(context)
    {
        _dbSet = context.Set<Catalogo>();
    }

    public async Task<Catalogo?> ObterPorChaveUnicaAsync(int safraId, int pontoDistribuicaoId, int culturaId, int categoriaId)
    {
        return await _dbSet
            .Include(c => c.Itens)
            .FirstOrDefaultAsync(c => 
                c.SafraId == safraId && 
                c.PontoDistribuicaoId == pontoDistribuicaoId && 
                c.CulturaId == culturaId && 
                c.CategoriaId == categoriaId);
    }

    public async Task<IEnumerable<Catalogo>> ObterPorSafraAsync(int safraId)
    {
        return await _dbSet
            .Include(c => c.Itens)
            .Where(c => c.SafraId == safraId)
            .OrderBy(c => c.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Catalogo>> ObterPorPontoDistribuicaoAsync(int pontoDistribuicaoId)
    {
        return await _dbSet
            .Include(c => c.Itens)
            .Where(c => c.PontoDistribuicaoId == pontoDistribuicaoId)
            .OrderBy(c => c.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Catalogo>> ObterPorCulturaAsync(int culturaId)
    {
        return await _dbSet
            .Include(c => c.Itens)
            .Where(c => c.CulturaId == culturaId)
            .OrderBy(c => c.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Catalogo>> ObterVigentesAsync(DateTime data)
    {
        return await _dbSet
            .Include(c => c.Itens)
            .Where(c => c.Ativo && 
                       c.DataInicio <= data && 
                       (c.DataFim == null || c.DataFim >= data))
            .OrderBy(c => c.DataCriacao)
            .ToListAsync();
    }

    public async Task<PagedResult<Catalogo>> ObterPaginadoAsync(int pagina, int tamanhoPagina, 
        int? safraId = null, int? pontoDistribuicaoId = null, int? culturaId = null, 
        int? categoriaId = null, Moeda? moeda = null, bool? ativo = null)
    {
        var query = _dbSet.Include(c => c.Itens).AsQueryable();

        if (safraId.HasValue)
            query = query.Where(c => c.SafraId == safraId.Value);

        if (pontoDistribuicaoId.HasValue)
            query = query.Where(c => c.PontoDistribuicaoId == pontoDistribuicaoId.Value);

        if (culturaId.HasValue)
            query = query.Where(c => c.CulturaId == culturaId.Value);

        if (categoriaId.HasValue)
            query = query.Where(c => c.CategoriaId == categoriaId.Value);

        if (moeda.HasValue)
            query = query.Where(c => c.Moeda == moeda.Value);

        if (ativo.HasValue)
            query = query.Where(c => c.Ativo == ativo.Value);

        var totalCount = await query.CountAsync();

        var items = await query
            .OrderByDescending(c => c.DataCriacao)
            .Skip((pagina - 1) * tamanhoPagina)
            .Take(tamanhoPagina)
            .ToListAsync();

        return new PagedResult<Catalogo>(items, totalCount, pagina, tamanhoPagina);
    }

    public async Task<bool> ExisteChaveUnicaAsync(int safraId, int pontoDistribuicaoId, int culturaId, int categoriaId, int? catalogoIdExcluir = null)
    {
        var query = _dbSet.Where(c => 
            c.SafraId == safraId && 
            c.PontoDistribuicaoId == pontoDistribuicaoId && 
            c.CulturaId == culturaId && 
            c.CategoriaId == categoriaId);

        if (catalogoIdExcluir.HasValue)
            query = query.Where(c => c.Id != catalogoIdExcluir.Value);

        return await query.AnyAsync();
    }

    public override async Task<Catalogo?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await _dbSet
            .Include(c => c.Itens)
            .FirstOrDefaultAsync(c => c.Id == id, cancellationToken);
    }
}
</CatalogoRepository.cs>
<ComboCategoriaDescontoDto.cs>
using Agriis.Combos.Dominio.Enums;

namespace Agriis.Combos.Aplicacao.DTOs;

/// <summary>
/// DTO para representar desconto por categoria em combo
/// </summary>
public class ComboCategoriaDescontoDto
{
    public int Id { get; set; }
    public int ComboId { get; set; }
    public int CategoriaId { get; set; }
    public decimal PercentualDesconto { get; set; }
    public decimal ValorDescontoFixo { get; set; }
    public decimal DescontoPorHectare { get; set; }
    public TipoDesconto TipoDesconto { get; set; }
    public decimal HectareMinimo { get; set; }
    public decimal HectareMaximo { get; set; }
    public bool Ativo { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criar desconto por categoria em combo
/// </summary>
public class CriarComboCategoriaDescontoDto
{
    public int CategoriaId { get; set; }
    public TipoDesconto TipoDesconto { get; set; }
    public decimal ValorDesconto { get; set; }
    public decimal HectareMinimo { get; set; } = 0;
    public decimal HectareMaximo { get; set; } = decimal.MaxValue;
}

/// <summary>
/// DTO para atualizar desconto por categoria em combo
/// </summary>
public class AtualizarComboCategoriaDescontoDto
{
    public TipoDesconto TipoDesconto { get; set; }
    public decimal ValorDesconto { get; set; }
    public decimal HectareMinimo { get; set; }
    public decimal HectareMaximo { get; set; }
    public bool Ativo { get; set; }
}
</ComboCategoriaDescontoDto.cs>
<ComboDto.cs>
using Agriis.Combos.Dominio.Enums;

namespace Agriis.Combos.Aplicacao.DTOs;

/// <summary>
/// DTO para representar um combo
/// </summary>
public class ComboDto
{
    public int Id { get; set; }
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public decimal HectareMinimo { get; set; }
    public decimal HectareMaximo { get; set; }
    public DateTime DataInicio { get; set; }
    public DateTime DataFim { get; set; }
    public ModalidadePagamento ModalidadePagamento { get; set; }
    public StatusCombo Status { get; set; }
    public bool PermiteAlteracaoItem { get; set; }
    public bool PermiteExclusaoItem { get; set; }
    public int FornecedorId { get; set; }
    public int SafraId { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }

    public List<ComboItemDto> Itens { get; set; } = new();
    public List<ComboLocalRecebimentoDto> LocaisRecebimento { get; set; } = new();
    public List<ComboCategoriaDescontoDto> CategoriasDesconto { get; set; } = new();
    public object? RestricoesMunicipios { get; set; }
}

/// <summary>
/// DTO para criar um novo combo
/// </summary>
public class CriarComboDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public decimal HectareMinimo { get; set; }
    public decimal HectareMaximo { get; set; }
    public DateTime DataInicio { get; set; }
    public DateTime DataFim { get; set; }
    public ModalidadePagamento ModalidadePagamento { get; set; }
    public int FornecedorId { get; set; }
    public int SafraId { get; set; }
    public List<int>? MunicipiosPermitidos { get; set; }
    public bool PermiteAlteracaoItem { get; set; } = true;
    public bool PermiteExclusaoItem { get; set; } = true;
}

/// <summary>
/// DTO para atualizar um combo
/// </summary>
public class AtualizarComboDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public decimal HectareMinimo { get; set; }
    public decimal HectareMaximo { get; set; }
    public DateTime DataInicio { get; set; }
    public DateTime DataFim { get; set; }
    public List<int>? MunicipiosPermitidos { get; set; }
    public bool PermiteAlteracaoItem { get; set; }
    public bool PermiteExclusaoItem { get; set; }
}
</ComboDto.cs>
<ComboItemDto.cs>
namespace Agriis.Combos.Aplicacao.DTOs;

/// <summary>
/// DTO para representar um item de combo
/// </summary>
public class ComboItemDto
{
    public int Id { get; set; }
    public int ComboId { get; set; }
    public int ProdutoId { get; set; }
    public decimal Quantidade { get; set; }
    public decimal PrecoUnitario { get; set; }
    public decimal PercentualDesconto { get; set; }
    public bool ProdutoObrigatorio { get; set; }
    public int Ordem { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criar um item de combo
/// </summary>
public class CriarComboItemDto
{
    public int ProdutoId { get; set; }
    public decimal Quantidade { get; set; }
    public decimal PrecoUnitario { get; set; }
    public decimal PercentualDesconto { get; set; } = 0;
    public bool ProdutoObrigatorio { get; set; } = false;
    public int Ordem { get; set; } = 0;
}

/// <summary>
/// DTO para atualizar um item de combo
/// </summary>
public class AtualizarComboItemDto
{
    public decimal Quantidade { get; set; }
    public decimal PrecoUnitario { get; set; }
    public decimal PercentualDesconto { get; set; }
    public bool ProdutoObrigatorio { get; set; }
    public int Ordem { get; set; }
}
</ComboItemDto.cs>
<ComboLocalRecebimentoDto.cs>
namespace Agriis.Combos.Aplicacao.DTOs;

/// <summary>
/// DTO para representar um local de recebimento de combo
/// </summary>
public class ComboLocalRecebimentoDto
{
    public int Id { get; set; }
    public int ComboId { get; set; }
    public int PontoDistribuicaoId { get; set; }
    public decimal PrecoAdicional { get; set; }
    public decimal PercentualDesconto { get; set; }
    public bool LocalPadrao { get; set; }
    public string? Observacoes { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criar um local de recebimento de combo
/// </summary>
public class CriarComboLocalRecebimentoDto
{
    public int PontoDistribuicaoId { get; set; }
    public decimal PrecoAdicional { get; set; } = 0;
    public decimal PercentualDesconto { get; set; } = 0;
    public bool LocalPadrao { get; set; } = false;
    public string? Observacoes { get; set; }
}

/// <summary>
/// DTO para atualizar um local de recebimento de combo
/// </summary>
public class AtualizarComboLocalRecebimentoDto
{
    public decimal PrecoAdicional { get; set; }
    public decimal PercentualDesconto { get; set; }
    public bool LocalPadrao { get; set; }
    public string? Observacoes { get; set; }
}
</ComboLocalRecebimentoDto.cs>
<IComboService.cs>
using Agriis.Combos.Aplicacao.DTOs;
using Agriis.Combos.Dominio.Enums;
using Agriis.Compartilhado.Aplicacao.Resultados;

namespace Agriis.Combos.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de combo
/// </summary>
public interface IComboService
{
    /// <summary>
    /// Cria um novo combo
    /// </summary>
    Task<Result<ComboDto>> CriarAsync(CriarComboDto dto);

    /// <summary>
    /// Atualiza um combo existente
    /// </summary>
    Task<Result<ComboDto>> AtualizarAsync(int id, AtualizarComboDto dto);

    /// <summary>
    /// Obtém um combo por ID
    /// </summary>
    Task<Result<ComboDto>> ObterPorIdAsync(int id);

    /// <summary>
    /// Obtém combos por fornecedor
    /// </summary>
    Task<Result<IEnumerable<ComboDto>>> ObterPorFornecedorAsync(int fornecedorId);

    /// <summary>
    /// Obtém combos vigentes
    /// </summary>
    Task<Result<IEnumerable<ComboDto>>> ObterCombosVigentesAsync();

    /// <summary>
    /// Obtém combos válidos para um produtor
    /// </summary>
    Task<Result<IEnumerable<ComboDto>>> ObterCombosValidosParaProdutorAsync(
        int produtorId, 
        decimal hectareProdutor, 
        int municipioId);

    /// <summary>
    /// Atualiza status do combo
    /// </summary>
    Task<Result> AtualizarStatusAsync(int id, StatusCombo status);

    /// <summary>
    /// Remove um combo
    /// </summary>
    Task<Result> RemoverAsync(int id);

    /// <summary>
    /// Adiciona item ao combo
    /// </summary>
    Task<Result<ComboItemDto>> AdicionarItemAsync(int comboId, CriarComboItemDto dto);

    /// <summary>
    /// Atualiza item do combo
    /// </summary>
    Task<Result<ComboItemDto>> AtualizarItemAsync(int comboId, int itemId, AtualizarComboItemDto dto);

    /// <summary>
    /// Remove item do combo
    /// </summary>
    Task<Result> RemoverItemAsync(int comboId, int itemId);

    /// <summary>
    /// Adiciona local de recebimento ao combo
    /// </summary>
    Task<Result<ComboLocalRecebimentoDto>> AdicionarLocalRecebimentoAsync(
        int comboId, 
        CriarComboLocalRecebimentoDto dto);

    /// <summary>
    /// Adiciona desconto por categoria ao combo
    /// </summary>
    Task<Result<ComboCategoriaDescontoDto>> AdicionarCategoriaDescontoAsync(
        int comboId, 
        CriarComboCategoriaDescontoDto dto);

    /// <summary>
    /// Valida se um combo é aplicável para um produtor
    /// </summary>
    Task<Result<bool>> ValidarComboParaProdutorAsync(
        int comboId, 
        int produtorId, 
        decimal hectareProdutor, 
        int municipioId);
}
</IComboService.cs>
<ComboMappingProfile.cs>
using System.Text.Json;
using AutoMapper;
using Agriis.Combos.Aplicacao.DTOs;
using Agriis.Combos.Dominio.Entidades;

namespace Agriis.Combos.Aplicacao.Mapeamentos;

/// <summary>
/// Perfil de mapeamento para entidades de Combo
/// </summary>
public class ComboMappingProfile : Profile
{
    public ComboMappingProfile()
    {
        CreateMap<Combo, ComboDto>()
            .ForMember(dest => dest.RestricoesMunicipios, opt => opt.MapFrom(src => 
                src.RestricoesMunicipios != null ? 
                JsonSerializer.Deserialize<object>(src.RestricoesMunicipios.RootElement.GetRawText(), (JsonSerializerOptions?)null) : 
                null));

        CreateMap<ComboItem, ComboItemDto>();

        CreateMap<ComboLocalRecebimento, ComboLocalRecebimentoDto>();

        CreateMap<ComboCategoriaDesconto, ComboCategoriaDescontoDto>();
    }
}
</ComboMappingProfile.cs>
<ComboService.cs>
using System.Text.Json;
using AutoMapper;
using Agriis.Combos.Aplicacao.DTOs;
using Agriis.Combos.Aplicacao.Interfaces;
using Agriis.Combos.Dominio.Entidades;
using Agriis.Combos.Dominio.Enums;
using Agriis.Combos.Dominio.Interfaces;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Interfaces;

namespace Agriis.Combos.Aplicacao.Servicos;

/// <summary>
/// Implementação do serviço de combos
/// </summary>
public class ComboService : IComboService
{
    private readonly IComboRepository _comboRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public ComboService(
        IComboRepository comboRepository,
        IUnitOfWork unitOfWork,
        IMapper mapper)
    {
        _comboRepository = comboRepository;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<Result<ComboDto>> CriarAsync(CriarComboDto dto)
    {
        try
        {
            // Verificar se já existe combo com mesmo nome para o fornecedor na safra
            var existeCombo = await _comboRepository.ExisteComboAtivoAsync(
                dto.FornecedorId, 
                dto.SafraId, 
                dto.Nome);

            if (existeCombo)
            {
                return Result<ComboDto>.Failure("Já existe um combo ativo com este nome para o fornecedor na safra selecionada");
            }

            var combo = new Combo(
                dto.Nome,
                dto.HectareMinimo,
                dto.HectareMaximo,
                dto.DataInicio,
                dto.DataFim,
                dto.ModalidadePagamento,
                dto.FornecedorId,
                dto.SafraId,
                dto.Descricao);

            // Configurar permissões
            combo.ConfigurarPermissoes(dto.PermiteAlteracaoItem, dto.PermiteExclusaoItem);

            // Configurar restrições de municípios se fornecidas
            if (dto.MunicipiosPermitidos?.Any() == true)
            {
                var restricoes = JsonDocument.Parse(JsonSerializer.Serialize(new { municipios = dto.MunicipiosPermitidos }));
                combo.DefinirRestricoesMunicipios(restricoes);
            }

            await _comboRepository.AdicionarAsync(combo);
            await _unitOfWork.SalvarAlteracoesAsync();

            var comboDto = _mapper.Map<ComboDto>(combo);
            return Result<ComboDto>.Success(comboDto);
        }
        catch (Exception ex)
        {
            return Result<ComboDto>.Failure($"Erro ao criar combo: {ex.Message}");
        }
    }

    public async Task<Result<ComboDto>> AtualizarAsync(int id, AtualizarComboDto dto)
    {
        try
        {
            var combo = await _comboRepository.ObterPorIdAsync(id);
            if (combo == null)
            {
                return Result<ComboDto>.Failure("Combo não encontrado");
            }

            combo.AtualizarInformacoes(
                dto.Nome,
                dto.HectareMinimo,
                dto.HectareMaximo,
                dto.DataInicio,
                dto.DataFim,
                dto.Descricao);

            combo.ConfigurarPermissoes(dto.PermiteAlteracaoItem, dto.PermiteExclusaoItem);

            // Atualizar restrições de municípios
            if (dto.MunicipiosPermitidos?.Any() == true)
            {
                var restricoes = JsonDocument.Parse(JsonSerializer.Serialize(new { municipios = dto.MunicipiosPermitidos }));
                combo.DefinirRestricoesMunicipios(restricoes);
            }

            await _comboRepository.AtualizarAsync(combo);
            await _unitOfWork.SalvarAlteracoesAsync();

            var comboDto = _mapper.Map<ComboDto>(combo);
            return Result<ComboDto>.Success(comboDto);
        }
        catch (Exception ex)
        {
            return Result<ComboDto>.Failure($"Erro ao atualizar combo: {ex.Message}");
        }
    }

    public async Task<Result<ComboDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var combo = await _comboRepository.ObterCompletoAsync(id);
            if (combo == null)
            {
                return Result<ComboDto>.Failure("Combo não encontrado");
            }

            var comboDto = _mapper.Map<ComboDto>(combo);
            return Result<ComboDto>.Success(comboDto);
        }
        catch (Exception ex)
        {
            return Result<ComboDto>.Failure($"Erro ao obter combo: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<ComboDto>>> ObterPorFornecedorAsync(int fornecedorId)
    {
        try
        {
            var combos = await _comboRepository.ObterPorFornecedorAsync(fornecedorId);
            var combosDto = _mapper.Map<IEnumerable<ComboDto>>(combos);
            return Result<IEnumerable<ComboDto>>.Success(combosDto);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<ComboDto>>.Failure($"Erro ao obter combos do fornecedor: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<ComboDto>>> ObterCombosVigentesAsync()
    {
        try
        {
            var combos = await _comboRepository.ObterCombosVigentesAsync();
            var combosDto = _mapper.Map<IEnumerable<ComboDto>>(combos);
            return Result<IEnumerable<ComboDto>>.Success(combosDto);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<ComboDto>>.Failure($"Erro ao obter combos vigentes: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<ComboDto>>> ObterCombosValidosParaProdutorAsync(
        int produtorId, 
        decimal hectareProdutor, 
        int municipioId)
    {
        try
        {
            var combos = await _comboRepository.ObterCombosValidosParaProdutorAsync(
                produtorId, 
                hectareProdutor, 
                municipioId);

            var combosDto = _mapper.Map<IEnumerable<ComboDto>>(combos);
            return Result<IEnumerable<ComboDto>>.Success(combosDto);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<ComboDto>>.Failure($"Erro ao obter combos válidos para o produtor: {ex.Message}");
        }
    }

    public async Task<Result> AtualizarStatusAsync(int id, StatusCombo status)
    {
        try
        {
            var combo = await _comboRepository.ObterPorIdAsync(id);
            if (combo == null)
            {
                return Result.Failure("Combo não encontrado");
            }

            combo.AtualizarStatus(status);
            await _comboRepository.AtualizarAsync(combo);
            await _unitOfWork.SalvarAlteracoesAsync();

            return Result.Success();
        }
        catch (Exception ex)
        {
            return Result.Failure($"Erro ao atualizar status do combo: {ex.Message}");
        }
    }

    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            var combo = await _comboRepository.ObterPorIdAsync(id);
            if (combo == null)
            {
                return Result.Failure("Combo não encontrado");
            }

            await _comboRepository.RemoverAsync(id);
            await _unitOfWork.SalvarAlteracoesAsync();

            return Result.Success();
        }
        catch (Exception ex)
        {
            return Result.Failure($"Erro ao remover combo: {ex.Message}");
        }
    }

    public async Task<Result<ComboItemDto>> AdicionarItemAsync(int comboId, CriarComboItemDto dto)
    {
        try
        {
            var combo = await _comboRepository.ObterPorIdAsync(comboId);
            if (combo == null)
            {
                return Result<ComboItemDto>.Failure("Combo não encontrado");
            }

            var item = new ComboItem(
                comboId,
                dto.ProdutoId,
                dto.Quantidade,
                dto.PrecoUnitario,
                dto.PercentualDesconto,
                dto.ProdutoObrigatorio,
                dto.Ordem);

            combo.AdicionarItem(item);
            await _comboRepository.AtualizarAsync(combo);
            await _unitOfWork.SalvarAlteracoesAsync();

            var itemDto = _mapper.Map<ComboItemDto>(item);
            return Result<ComboItemDto>.Success(itemDto);
        }
        catch (Exception ex)
        {
            return Result<ComboItemDto>.Failure($"Erro ao adicionar item ao combo: {ex.Message}");
        }
    }

    public async Task<Result<ComboItemDto>> AtualizarItemAsync(int comboId, int itemId, AtualizarComboItemDto dto)
    {
        try
        {
            var combo = await _comboRepository.ObterCompletoAsync(comboId);
            if (combo == null)
            {
                return Result<ComboItemDto>.Failure("Combo não encontrado");
            }

            if (!combo.PermiteAlteracaoItem)
            {
                return Result<ComboItemDto>.Failure("Alteração de itens não permitida para este combo");
            }

            var item = combo.Itens.FirstOrDefault(i => i.Id == itemId);
            if (item == null)
            {
                return Result<ComboItemDto>.Failure("Item não encontrado no combo");
            }

            item.AtualizarQuantidade(dto.Quantidade);
            item.AtualizarPreco(dto.PrecoUnitario);
            item.AtualizarDesconto(dto.PercentualDesconto);
            item.DefinirComoObrigatorio(dto.ProdutoObrigatorio);
            item.AtualizarOrdem(dto.Ordem);

            await _comboRepository.AtualizarAsync(combo);
            await _unitOfWork.SalvarAlteracoesAsync();

            var itemDto = _mapper.Map<ComboItemDto>(item);
            return Result<ComboItemDto>.Success(itemDto);
        }
        catch (Exception ex)
        {
            return Result<ComboItemDto>.Failure($"Erro ao atualizar item do combo: {ex.Message}");
        }
    }

    public async Task<Result> RemoverItemAsync(int comboId, int itemId)
    {
        try
        {
            var combo = await _comboRepository.ObterCompletoAsync(comboId);
            if (combo == null)
            {
                return Result.Failure("Combo não encontrado");
            }

            combo.RemoverItem(itemId);
            await _comboRepository.AtualizarAsync(combo);
            await _unitOfWork.SalvarAlteracoesAsync();

            return Result.Success();
        }
        catch (Exception ex)
        {
            return Result.Failure($"Erro ao remover item do combo: {ex.Message}");
        }
    }

    public async Task<Result<ComboLocalRecebimentoDto>> AdicionarLocalRecebimentoAsync(
        int comboId, 
        CriarComboLocalRecebimentoDto dto)
    {
        try
        {
            var combo = await _comboRepository.ObterPorIdAsync(comboId);
            if (combo == null)
            {
                return Result<ComboLocalRecebimentoDto>.Failure("Combo não encontrado");
            }

            var local = new ComboLocalRecebimento(
                comboId,
                dto.PontoDistribuicaoId,
                dto.PrecoAdicional,
                dto.PercentualDesconto,
                dto.LocalPadrao,
                dto.Observacoes);

            combo.AdicionarLocalRecebimento(local);
            await _comboRepository.AtualizarAsync(combo);
            await _unitOfWork.SalvarAlteracoesAsync();

            var localDto = _mapper.Map<ComboLocalRecebimentoDto>(local);
            return Result<ComboLocalRecebimentoDto>.Success(localDto);
        }
        catch (Exception ex)
        {
            return Result<ComboLocalRecebimentoDto>.Failure($"Erro ao adicionar local de recebimento: {ex.Message}");
        }
    }

    public async Task<Result<ComboCategoriaDescontoDto>> AdicionarCategoriaDescontoAsync(
        int comboId, 
        CriarComboCategoriaDescontoDto dto)
    {
        try
        {
            var combo = await _comboRepository.ObterPorIdAsync(comboId);
            if (combo == null)
            {
                return Result<ComboCategoriaDescontoDto>.Failure("Combo não encontrado");
            }

            var categoria = new ComboCategoriaDesconto(
                comboId,
                dto.CategoriaId,
                dto.TipoDesconto,
                dto.HectareMinimo,
                dto.HectareMaximo);

            // Configurar o valor do desconto baseado no tipo
            switch (dto.TipoDesconto)
            {
                case TipoDesconto.Percentual:
                    categoria.DefinirDescontoPercentual(dto.ValorDesconto);
                    break;
                case TipoDesconto.ValorFixo:
                    categoria.DefinirDescontoFixo(dto.ValorDesconto);
                    break;
                case TipoDesconto.PorHectare:
                    categoria.DefinirDescontoPorHectare(dto.ValorDesconto);
                    break;
            }

            combo.AdicionarCategoriaDesconto(categoria);
            await _comboRepository.AtualizarAsync(combo);
            await _unitOfWork.SalvarAlteracoesAsync();

            var categoriaDto = _mapper.Map<ComboCategoriaDescontoDto>(categoria);
            return Result<ComboCategoriaDescontoDto>.Success(categoriaDto);
        }
        catch (Exception ex)
        {
            return Result<ComboCategoriaDescontoDto>.Failure($"Erro ao adicionar categoria de desconto: {ex.Message}");
        }
    }

    public async Task<Result<bool>> ValidarComboParaProdutorAsync(
        int comboId, 
        int produtorId, 
        decimal hectareProdutor, 
        int municipioId)
    {
        try
        {
            var combo = await _comboRepository.ObterCompletoAsync(comboId);
            if (combo == null)
            {
                return Result<bool>.Failure("Combo não encontrado");
            }

            // Verificar se o combo está vigente
            if (!combo.EstaVigente())
            {
                return Result<bool>.Success(false);
            }

            // Verificar faixa de hectare
            if (!combo.ValidarHectareProdutor(hectareProdutor))
            {
                return Result<bool>.Success(false);
            }

            // Verificar restrições de município se existirem
            if (combo.RestricoesMunicipios != null)
            {
                var restricoes = JsonSerializer.Deserialize<dynamic>(combo.RestricoesMunicipios.RootElement.GetRawText());
                // Lógica de validação de município seria implementada aqui
                // Por simplicidade, assumindo que é válido se chegou até aqui
            }

            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            return Result<bool>.Failure($"Erro ao validar combo para produtor: {ex.Message}");
        }
    }
}
</ComboService.cs>
<CriarComboDtoValidator.cs>
using FluentValidation;
using Agriis.Combos.Aplicacao.DTOs;

namespace Agriis.Combos.Aplicacao.Validadores;

/// <summary>
/// Validador para criação de combo
/// </summary>
public class CriarComboDtoValidator : AbstractValidator<CriarComboDto>
{
    public CriarComboDtoValidator()
    {
        RuleFor(x => x.Nome)
            .NotEmpty()
            .WithMessage("Nome do combo é obrigatório")
            .MaximumLength(200)
            .WithMessage("Nome do combo deve ter no máximo 200 caracteres");

        RuleFor(x => x.Descricao)
            .MaximumLength(1000)
            .WithMessage("Descrição deve ter no máximo 1000 caracteres");

        RuleFor(x => x.HectareMinimo)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Hectare mínimo deve ser maior ou igual a zero");

        RuleFor(x => x.HectareMaximo)
            .GreaterThan(x => x.HectareMinimo)
            .WithMessage("Hectare máximo deve ser maior que o mínimo");

        RuleFor(x => x.DataInicio)
            .GreaterThanOrEqualTo(DateTime.Today)
            .WithMessage("Data de início não pode ser no passado");

        RuleFor(x => x.DataFim)
            .GreaterThan(x => x.DataInicio)
            .WithMessage("Data fim deve ser posterior à data início");

        RuleFor(x => x.ModalidadePagamento)
            .IsInEnum()
            .WithMessage("Modalidade de pagamento inválida");

        RuleFor(x => x.FornecedorId)
            .GreaterThan(0)
            .WithMessage("Fornecedor é obrigatório");

        RuleFor(x => x.SafraId)
            .GreaterThan(0)
            .WithMessage("Safra é obrigatória");

        RuleFor(x => x.MunicipiosPermitidos)
            .Must(municipios => municipios == null || municipios.All(m => m > 0))
            .WithMessage("Todos os municípios devem ter ID válido");
    }
}
</CriarComboDtoValidator.cs>
<CriarComboItemDtoValidator.cs>
using FluentValidation;
using Agriis.Combos.Aplicacao.DTOs;

namespace Agriis.Combos.Aplicacao.Validadores;

/// <summary>
/// Validador para criação de item de combo
/// </summary>
public class CriarComboItemDtoValidator : AbstractValidator<CriarComboItemDto>
{
    public CriarComboItemDtoValidator()
    {
        RuleFor(x => x.ProdutoId)
            .GreaterThan(0)
            .WithMessage("Produto é obrigatório");

        RuleFor(x => x.Quantidade)
            .GreaterThan(0)
            .WithMessage("Quantidade deve ser maior que zero");

        RuleFor(x => x.PrecoUnitario)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Preço unitário não pode ser negativo");

        RuleFor(x => x.PercentualDesconto)
            .InclusiveBetween(0, 100)
            .WithMessage("Percentual de desconto deve estar entre 0 e 100");

        RuleFor(x => x.Ordem)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Ordem deve ser maior ou igual a zero");
    }
}
</CriarComboItemDtoValidator.cs>
<Combo.cs>
using System.Text.Json;
using Agriis.Combos.Dominio.Enums;
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Combos.Dominio.Entidades;

/// <summary>
/// Representa um combo promocional de produtos
/// </summary>
public class Combo : EntidadeRaizAgregada
{
    public string Nome { get; private set; } = string.Empty;
    public string? Descricao { get; private set; }
    public decimal HectareMinimo { get; private set; }
    public decimal HectareMaximo { get; private set; }
    public DateTime DataInicio { get; private set; }
    public DateTime DataFim { get; private set; }
    public ModalidadePagamento ModalidadePagamento { get; private set; }
    public StatusCombo Status { get; private set; }
    public JsonDocument? RestricoesMunicipios { get; private set; }
    public bool PermiteAlteracaoItem { get; private set; }
    public bool PermiteExclusaoItem { get; private set; }
    public int FornecedorId { get; private set; }
    public int SafraId { get; private set; }

    // Navigation Properties
    public virtual ICollection<ComboItem> Itens { get; private set; } = new List<ComboItem>();
    public virtual ICollection<ComboLocalRecebimento> LocaisRecebimento { get; private set; } = new List<ComboLocalRecebimento>();
    public virtual ICollection<ComboCategoriaDesconto> CategoriasDesconto { get; private set; } = new List<ComboCategoriaDesconto>();

    protected Combo() { } // EF Constructor

    public Combo(
        string nome,
        decimal hectareMinimo,
        decimal hectareMaximo,
        DateTime dataInicio,
        DateTime dataFim,
        ModalidadePagamento modalidadePagamento,
        int fornecedorId,
        int safraId,
        string? descricao = null)
    {
        ValidarParametros(nome, hectareMinimo, hectareMaximo, dataInicio, dataFim);

        Nome = nome;
        Descricao = descricao;
        HectareMinimo = hectareMinimo;
        HectareMaximo = hectareMaximo;
        DataInicio = dataInicio;
        DataFim = dataFim;
        ModalidadePagamento = modalidadePagamento;
        FornecedorId = fornecedorId;
        SafraId = safraId;
        Status = StatusCombo.Ativo;
        PermiteAlteracaoItem = true;
        PermiteExclusaoItem = true;
    }

    public void AtualizarInformacoes(
        string nome,
        decimal hectareMinimo,
        decimal hectareMaximo,
        DateTime dataInicio,
        DateTime dataFim,
        string? descricao = null)
    {
        ValidarParametros(nome, hectareMinimo, hectareMaximo, dataInicio, dataFim);

        Nome = nome;
        Descricao = descricao;
        HectareMinimo = hectareMinimo;
        HectareMaximo = hectareMaximo;
        DataInicio = dataInicio;
        DataFim = dataFim;
        AtualizarDataModificacao();
    }

    public void AtualizarStatus(StatusCombo novoStatus)
    {
        Status = novoStatus;
        AtualizarDataModificacao();
    }

    public void DefinirRestricoesMunicipios(JsonDocument restricoes)
    {
        RestricoesMunicipios = restricoes;
        AtualizarDataModificacao();
    }

    public void ConfigurarPermissoes(bool permiteAlteracao, bool permiteExclusao)
    {
        PermiteAlteracaoItem = permiteAlteracao;
        PermiteExclusaoItem = permiteExclusao;
        AtualizarDataModificacao();
    }

    public void AdicionarItem(ComboItem item)
    {
        if (item == null)
            throw new ArgumentNullException(nameof(item));

        Itens.Add(item);
        AtualizarDataModificacao();
    }

    public void RemoverItem(int itemId)
    {
        if (!PermiteExclusaoItem)
            throw new InvalidOperationException("Exclusão de itens não permitida para este combo");

        var item = Itens.FirstOrDefault(i => i.Id == itemId);
        if (item != null)
        {
            Itens.Remove(item);
            AtualizarDataModificacao();
        }
    }

    public void AdicionarLocalRecebimento(ComboLocalRecebimento local)
    {
        if (local == null)
            throw new ArgumentNullException(nameof(local));

        LocaisRecebimento.Add(local);
        AtualizarDataModificacao();
    }

    public void AdicionarCategoriaDesconto(ComboCategoriaDesconto categoria)
    {
        if (categoria == null)
            throw new ArgumentNullException(nameof(categoria));

        CategoriasDesconto.Add(categoria);
        AtualizarDataModificacao();
    }

    public bool EstaVigente()
    {
        var agora = DateTime.UtcNow;
        return Status == StatusCombo.Ativo && 
               agora >= DataInicio && 
               agora <= DataFim;
    }

    public bool ValidarHectareProdutor(decimal hectareProdutor)
    {
        return hectareProdutor >= HectareMinimo && hectareProdutor <= HectareMaximo;
    }

    private static void ValidarParametros(
        string nome,
        decimal hectareMinimo,
        decimal hectareMaximo,
        DateTime dataInicio,
        DateTime dataFim)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome do combo é obrigatório", nameof(nome));

        if (hectareMinimo < 0)
            throw new ArgumentException("Hectare mínimo deve ser maior ou igual a zero", nameof(hectareMinimo));

        if (hectareMaximo <= hectareMinimo)
            throw new ArgumentException("Hectare máximo deve ser maior que o mínimo", nameof(hectareMaximo));

        if (dataFim <= dataInicio)
            throw new ArgumentException("Data fim deve ser posterior à data início", nameof(dataFim));

        if (dataInicio < DateTime.UtcNow.Date)
            throw new ArgumentException("Data início não pode ser no passado", nameof(dataInicio));
    }
}
</Combo.cs>
<ComboCategoriaDesconto.cs>
using Agriis.Combos.Dominio.Enums;
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Combos.Dominio.Entidades;

/// <summary>
/// Representa descontos específicos por categoria de produto dentro de um combo
/// </summary>
public class ComboCategoriaDesconto : EntidadeBase
{
    public int ComboId { get; private set; }
    public int CategoriaId { get; private set; }
    public decimal PercentualDesconto { get; private set; }
    public decimal ValorDescontoFixo { get; private set; }
    public decimal DescontoPorHectare { get; private set; }
    public TipoDesconto TipoDesconto { get; private set; }
    public decimal HectareMinimo { get; private set; }
    public decimal HectareMaximo { get; private set; }
    public bool Ativo { get; private set; }

    // Navigation Properties
    public virtual Combo Combo { get; private set; } = null!;

    protected ComboCategoriaDesconto() { } // EF Constructor

    public ComboCategoriaDesconto(
        int comboId,
        int categoriaId,
        TipoDesconto tipoDesconto,
        decimal hectareMinimo = 0,
        decimal hectareMaximo = decimal.MaxValue)
    {
        ValidarParametros(hectareMinimo, hectareMaximo);

        ComboId = comboId;
        CategoriaId = categoriaId;
        TipoDesconto = tipoDesconto;
        HectareMinimo = hectareMinimo;
        HectareMaximo = hectareMaximo;
        Ativo = true;
        PercentualDesconto = 0;
        ValorDescontoFixo = 0;
        DescontoPorHectare = 0;
    }

    public void DefinirDescontoPercentual(decimal percentual)
    {
        if (percentual < 0 || percentual > 100)
            throw new ArgumentException("Percentual deve estar entre 0 e 100", nameof(percentual));

        TipoDesconto = TipoDesconto.Percentual;
        PercentualDesconto = percentual;
        ValorDescontoFixo = 0;
        DescontoPorHectare = 0;
        AtualizarDataModificacao();
    }

    public void DefinirDescontoFixo(decimal valorFixo)
    {
        if (valorFixo < 0)
            throw new ArgumentException("Valor fixo não pode ser negativo", nameof(valorFixo));

        TipoDesconto = TipoDesconto.ValorFixo;
        ValorDescontoFixo = valorFixo;
        PercentualDesconto = 0;
        DescontoPorHectare = 0;
        AtualizarDataModificacao();
    }

    public void DefinirDescontoPorHectare(decimal valorPorHectare)
    {
        if (valorPorHectare < 0)
            throw new ArgumentException("Valor por hectare não pode ser negativo", nameof(valorPorHectare));

        TipoDesconto = TipoDesconto.PorHectare;
        DescontoPorHectare = valorPorHectare;
        PercentualDesconto = 0;
        ValorDescontoFixo = 0;
        AtualizarDataModificacao();
    }

    public void AtualizarFaixaHectare(decimal hectareMinimo, decimal hectareMaximo)
    {
        ValidarParametros(hectareMinimo, hectareMaximo);

        HectareMinimo = hectareMinimo;
        HectareMaximo = hectareMaximo;
        AtualizarDataModificacao();
    }

    public void Ativar()
    {
        Ativo = true;
        AtualizarDataModificacao();
    }

    public void Desativar()
    {
        Ativo = false;
        AtualizarDataModificacao();
    }

    public decimal CalcularDesconto(decimal valorBase, decimal hectareProdutor)
    {
        if (!Ativo || !ValidarFaixaHectare(hectareProdutor))
            return 0;

        return TipoDesconto switch
        {
            TipoDesconto.Percentual => valorBase * (PercentualDesconto / 100),
            TipoDesconto.ValorFixo => ValorDescontoFixo,
            TipoDesconto.PorHectare => DescontoPorHectare * hectareProdutor,
            _ => 0
        };
    }

    public bool ValidarFaixaHectare(decimal hectareProdutor)
    {
        return hectareProdutor >= HectareMinimo && hectareProdutor <= HectareMaximo;
    }

    private static void ValidarParametros(decimal hectareMinimo, decimal hectareMaximo)
    {
        if (hectareMinimo < 0)
            throw new ArgumentException("Hectare mínimo deve ser maior ou igual a zero", nameof(hectareMinimo));

        if (hectareMaximo <= hectareMinimo)
            throw new ArgumentException("Hectare máximo deve ser maior que o mínimo", nameof(hectareMaximo));
    }
}
</ComboCategoriaDesconto.cs>
<ComboItem.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Combos.Dominio.Entidades;

/// <summary>
/// Representa um item de produto dentro de um combo
/// </summary>
public class ComboItem : EntidadeBase
{
    public int ComboId { get; private set; }
    public int ProdutoId { get; private set; }
    public decimal Quantidade { get; private set; }
    public decimal PrecoUnitario { get; private set; }
    public decimal PercentualDesconto { get; private set; }
    public bool ProdutoObrigatorio { get; private set; }
    public int Ordem { get; private set; }

    // Navigation Properties
    public virtual Combo Combo { get; private set; } = null!;

    protected ComboItem() { } // EF Constructor

    public ComboItem(
        int comboId,
        int produtoId,
        decimal quantidade,
        decimal precoUnitario,
        decimal percentualDesconto = 0,
        bool produtoObrigatorio = false,
        int ordem = 0)
    {
        ValidarParametros(quantidade, precoUnitario, percentualDesconto);

        ComboId = comboId;
        ProdutoId = produtoId;
        Quantidade = quantidade;
        PrecoUnitario = precoUnitario;
        PercentualDesconto = percentualDesconto;
        ProdutoObrigatorio = produtoObrigatorio;
        Ordem = ordem;
    }

    public void AtualizarQuantidade(decimal novaQuantidade)
    {
        if (novaQuantidade <= 0)
            throw new ArgumentException("Quantidade deve ser maior que zero", nameof(novaQuantidade));

        Quantidade = novaQuantidade;
        AtualizarDataModificacao();
    }

    public void AtualizarPreco(decimal novoPreco)
    {
        if (novoPreco < 0)
            throw new ArgumentException("Preço não pode ser negativo", nameof(novoPreco));

        PrecoUnitario = novoPreco;
        AtualizarDataModificacao();
    }

    public void AtualizarDesconto(decimal novoDesconto)
    {
        if (novoDesconto < 0 || novoDesconto > 100)
            throw new ArgumentException("Desconto deve estar entre 0 e 100", nameof(novoDesconto));

        PercentualDesconto = novoDesconto;
        AtualizarDataModificacao();
    }

    public void DefinirComoObrigatorio(bool obrigatorio)
    {
        ProdutoObrigatorio = obrigatorio;
        AtualizarDataModificacao();
    }

    public void AtualizarOrdem(int novaOrdem)
    {
        if (novaOrdem < 0)
            throw new ArgumentException("Ordem deve ser maior ou igual a zero", nameof(novaOrdem));

        Ordem = novaOrdem;
        AtualizarDataModificacao();
    }

    public decimal CalcularValorComDesconto()
    {
        var valorTotal = Quantidade * PrecoUnitario;
        var desconto = valorTotal * (PercentualDesconto / 100);
        return valorTotal - desconto;
    }

    private static void ValidarParametros(decimal quantidade, decimal precoUnitario, decimal percentualDesconto)
    {
        if (quantidade <= 0)
            throw new ArgumentException("Quantidade deve ser maior que zero", nameof(quantidade));

        if (precoUnitario < 0)
            throw new ArgumentException("Preço unitário não pode ser negativo", nameof(precoUnitario));

        if (percentualDesconto < 0 || percentualDesconto > 100)
            throw new ArgumentException("Percentual de desconto deve estar entre 0 e 100", nameof(percentualDesconto));
    }
}
</ComboItem.cs>
<ComboLocalRecebimento.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Combos.Dominio.Entidades;

/// <summary>
/// Representa um local de recebimento específico para um combo com preços diferenciados
/// </summary>
public class ComboLocalRecebimento : EntidadeBase
{
    public int ComboId { get; private set; }
    public int PontoDistribuicaoId { get; private set; }
    public decimal PrecoAdicional { get; private set; }
    public decimal PercentualDesconto { get; private set; }
    public bool LocalPadrao { get; private set; }
    public string? Observacoes { get; private set; }

    // Navigation Properties
    public virtual Combo Combo { get; private set; } = null!;

    protected ComboLocalRecebimento() { } // EF Constructor

    public ComboLocalRecebimento(
        int comboId,
        int pontoDistribuicaoId,
        decimal precoAdicional = 0,
        decimal percentualDesconto = 0,
        bool localPadrao = false,
        string? observacoes = null)
    {
        ValidarParametros(precoAdicional, percentualDesconto);

        ComboId = comboId;
        PontoDistribuicaoId = pontoDistribuicaoId;
        PrecoAdicional = precoAdicional;
        PercentualDesconto = percentualDesconto;
        LocalPadrao = localPadrao;
        Observacoes = observacoes;
    }

    public void AtualizarPrecoAdicional(decimal novoPreco)
    {
        if (novoPreco < 0)
            throw new ArgumentException("Preço adicional não pode ser negativo", nameof(novoPreco));

        PrecoAdicional = novoPreco;
        AtualizarDataModificacao();
    }

    public void AtualizarDesconto(decimal novoDesconto)
    {
        if (novoDesconto < 0 || novoDesconto > 100)
            throw new ArgumentException("Desconto deve estar entre 0 e 100", nameof(novoDesconto));

        PercentualDesconto = novoDesconto;
        AtualizarDataModificacao();
    }

    public void DefinirComoPadrao(bool padrao)
    {
        LocalPadrao = padrao;
        AtualizarDataModificacao();
    }

    public void AtualizarObservacoes(string? observacoes)
    {
        Observacoes = observacoes;
        AtualizarDataModificacao();
    }

    public decimal CalcularPrecoFinal(decimal precoBase)
    {
        var precoComAdicional = precoBase + PrecoAdicional;
        var desconto = precoComAdicional * (PercentualDesconto / 100);
        return precoComAdicional - desconto;
    }

    private static void ValidarParametros(decimal precoAdicional, decimal percentualDesconto)
    {
        if (precoAdicional < 0)
            throw new ArgumentException("Preço adicional não pode ser negativo", nameof(precoAdicional));

        if (percentualDesconto < 0 || percentualDesconto > 100)
            throw new ArgumentException("Percentual de desconto deve estar entre 0 e 100", nameof(percentualDesconto));
    }
}
</ComboLocalRecebimento.cs>
<EnumsCombos.cs>
namespace Agriis.Combos.Dominio.Enums;

/// <summary>
/// Modalidades de pagamento para combos
/// </summary>
public enum ModalidadePagamento
{
    Normal = 1,
    Barter = 2
}

/// <summary>
/// Status do combo
/// </summary>
public enum StatusCombo
{
    Ativo = 1,
    Inativo = 2,
    Expirado = 3,
    Suspenso = 4
}

/// <summary>
/// Tipo de desconto do combo
/// </summary>
public enum TipoDesconto
{
    Percentual = 1,
    ValorFixo = 2,
    PorHectare = 3
}
</EnumsCombos.cs>
<IComboRepository.cs>
using Agriis.Combos.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.Interfaces;

namespace Agriis.Combos.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de combos
/// </summary>
public interface IComboRepository : IRepository<Combo>
{
    /// <summary>
    /// Obtém combos ativos por fornecedor
    /// </summary>
    Task<IEnumerable<Combo>> ObterPorFornecedorAsync(int fornecedorId);

    /// <summary>
    /// Obtém combos vigentes (ativos e dentro do período)
    /// </summary>
    Task<IEnumerable<Combo>> ObterCombosVigentesAsync();

    /// <summary>
    /// Obtém combos por safra
    /// </summary>
    Task<IEnumerable<Combo>> ObterPorSafraAsync(int safraId);

    /// <summary>
    /// Obtém combos válidos para um produtor (considerando hectare e localização)
    /// </summary>
    Task<IEnumerable<Combo>> ObterCombosValidosParaProdutorAsync(
        int produtorId, 
        decimal hectareProdutor, 
        int municipioId);

    /// <summary>
    /// Obtém combo com todos os relacionamentos
    /// </summary>
    Task<Combo?> ObterCompletoAsync(int id);

    /// <summary>
    /// Verifica se existe combo ativo para o fornecedor na safra
    /// </summary>
    Task<bool> ExisteComboAtivoAsync(int fornecedorId, int safraId, string nome);

    /// <summary>
    /// Obtém combos que expiram em determinado período
    /// </summary>
    Task<IEnumerable<Combo>> ObterCombosExpirandoAsync(DateTime dataLimite);
}
</IComboRepository.cs>
<ComboCategoriaDescontoConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Combos.Dominio.Entidades;

namespace Agriis.Combos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração da entidade ComboCategoriaDesconto para Entity Framework
/// </summary>
public class ComboCategoriaDescontoConfiguration : IEntityTypeConfiguration<ComboCategoriaDesconto>
{
    public void Configure(EntityTypeBuilder<ComboCategoriaDesconto> builder)
    {
        builder.ToTable("ComboCategoriaDesconto");

        builder.HasKey(ccd => ccd.Id);

        builder.Property(ccd => ccd.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(ccd => ccd.ComboId)
            .HasColumnName("ComboId")
            .IsRequired();

        builder.Property(ccd => ccd.CategoriaId)
            .HasColumnName("CategoriaId")
            .IsRequired();

        builder.Property(ccd => ccd.PercentualDesconto)
            .HasColumnName("PercentualDesconto")
            .HasColumnType("decimal(5,2)")
            .IsRequired();

        builder.Property(ccd => ccd.ValorDescontoFixo)
            .HasColumnName("ValorDescontoFixo")
            .HasColumnType("decimal(18,4)")
            .IsRequired();

        builder.Property(ccd => ccd.DescontoPorHectare)
            .HasColumnName("DescontoPorHectare")
            .HasColumnType("decimal(18,4)")
            .IsRequired();

        builder.Property(ccd => ccd.TipoDesconto)
            .HasColumnName("TipoDesconto")
            .HasConversion<int>()
            .IsRequired();

        builder.Property(ccd => ccd.HectareMinimo)
            .HasColumnName("HectareMinimo")
            .HasColumnType("decimal(18,4)")
            .IsRequired();

        builder.Property(ccd => ccd.HectareMaximo)
            .HasColumnName("HectareMaximo")
            .HasColumnType("decimal(18,4)")
            .IsRequired();

        builder.Property(ccd => ccd.Ativo)
            .HasColumnName("Ativo")
            .IsRequired();

        builder.Property(ccd => ccd.DataCriacao)
            .HasColumnName("DataCriacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(ccd => ccd.DataAtualizacao)
            .HasColumnName("DataAtualizacao")
            .HasColumnType("timestamp with time zone");

        // Relacionamentos
        builder.HasOne(ccd => ccd.Combo)
            .WithMany(c => c.CategoriasDesconto)
            .HasForeignKey(ccd => ccd.ComboId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(ccd => ccd.ComboId)
            .HasDatabaseName("IX_ComboCategoriaDesconto_ComboId");

        builder.HasIndex(ccd => ccd.CategoriaId)
            .HasDatabaseName("IX_ComboCategoriaDesconto_CategoriaId");

        builder.HasIndex(ccd => new { ccd.ComboId, ccd.CategoriaId })
            .HasDatabaseName("IX_ComboCategoriaDesconto_ComboCategoria")
            .IsUnique();

        builder.HasIndex(ccd => ccd.Ativo)
            .HasDatabaseName("IX_ComboCategoriaDesconto_Ativo");
    }
}
</ComboCategoriaDescontoConfiguration.cs>
<ComboConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Combos.Dominio.Entidades;
using Agriis.Combos.Dominio.Enums;

namespace Agriis.Combos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração da entidade Combo para Entity Framework
/// </summary>
public class ComboConfiguration : IEntityTypeConfiguration<Combo>
{
    public void Configure(EntityTypeBuilder<Combo> builder)
    {
        builder.ToTable("Combo");

        builder.HasKey(c => c.Id);

        builder.Property(c => c.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(c => c.Nome)
            .HasColumnName("Nome")
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(c => c.Descricao)
            .HasColumnName("Descricao")
            .HasMaxLength(1000);

        builder.Property(c => c.HectareMinimo)
            .HasColumnName("HectareMinimo")
            .HasColumnType("decimal(18,4)")
            .IsRequired();

        builder.Property(c => c.HectareMaximo)
            .HasColumnName("HectareMaximo")
            .HasColumnType("decimal(18,4)")
            .IsRequired();

        builder.Property(c => c.DataInicio)
            .HasColumnName("DataInicio")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(c => c.DataFim)
            .HasColumnName("DataFim")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(c => c.ModalidadePagamento)
            .HasColumnName("ModalidadePagamento")
            .HasConversion<int>()
            .IsRequired();

        builder.Property(c => c.Status)
            .HasColumnName("Status")
            .HasConversion<int>()
            .IsRequired();

        builder.Property(c => c.RestricoesMunicipios)
            .HasColumnName("RestricoesMunicipios")
            .HasColumnType("jsonb");

        builder.Property(c => c.PermiteAlteracaoItem)
            .HasColumnName("PermiteAlteracaoItem")
            .IsRequired();

        builder.Property(c => c.PermiteExclusaoItem)
            .HasColumnName("PermiteExclusaoItem")
            .IsRequired();

        builder.Property(c => c.FornecedorId)
            .HasColumnName("FornecedorId")
            .IsRequired();

        builder.Property(c => c.SafraId)
            .HasColumnName("SafraId")
            .IsRequired();

        builder.Property(c => c.DataCriacao)
            .HasColumnName("DataCriacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(c => c.DataAtualizacao)
            .HasColumnName("DataAtualizacao")
            .HasColumnType("timestamp with time zone");

        // Relacionamentos
        builder.HasMany(c => c.Itens)
            .WithOne(i => i.Combo)
            .HasForeignKey(i => i.ComboId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasMany(c => c.LocaisRecebimento)
            .WithOne(l => l.Combo)
            .HasForeignKey(l => l.ComboId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasMany(c => c.CategoriasDesconto)
            .WithOne(cd => cd.Combo)
            .HasForeignKey(cd => cd.ComboId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(c => c.FornecedorId)
            .HasDatabaseName("IX_Combo_FornecedorId");

        builder.HasIndex(c => c.SafraId)
            .HasDatabaseName("IX_Combo_SafraId");

        builder.HasIndex(c => c.Status)
            .HasDatabaseName("IX_Combo_Status");

        builder.HasIndex(c => new { c.DataInicio, c.DataFim })
            .HasDatabaseName("IX_Combo_Periodo");

        builder.HasIndex(c => new { c.FornecedorId, c.SafraId, c.Nome })
            .HasDatabaseName("IX_Combo_FornecedorSafraNome")
            .IsUnique();
    }
}
</ComboConfiguration.cs>
<ComboItemConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Combos.Dominio.Entidades;

namespace Agriis.Combos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração da entidade ComboItem para Entity Framework
/// </summary>
public class ComboItemConfiguration : IEntityTypeConfiguration<ComboItem>
{
    public void Configure(EntityTypeBuilder<ComboItem> builder)
    {
        builder.ToTable("ComboItem");

        builder.HasKey(ci => ci.Id);

        builder.Property(ci => ci.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(ci => ci.ComboId)
            .HasColumnName("ComboId")
            .IsRequired();

        builder.Property(ci => ci.ProdutoId)
            .HasColumnName("ProdutoId")
            .IsRequired();

        builder.Property(ci => ci.Quantidade)
            .HasColumnName("Quantidade")
            .HasColumnType("decimal(18,4)")
            .IsRequired();

        builder.Property(ci => ci.PrecoUnitario)
            .HasColumnName("PrecoUnitario")
            .HasColumnType("decimal(18,4)")
            .IsRequired();

        builder.Property(ci => ci.PercentualDesconto)
            .HasColumnName("PercentualDesconto")
            .HasColumnType("decimal(5,2)")
            .IsRequired();

        builder.Property(ci => ci.ProdutoObrigatorio)
            .HasColumnName("ProdutoObrigatorio")
            .IsRequired();

        builder.Property(ci => ci.Ordem)
            .HasColumnName("Ordem")
            .IsRequired();

        builder.Property(ci => ci.DataCriacao)
            .HasColumnName("DataCriacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(ci => ci.DataAtualizacao)
            .HasColumnName("DataAtualizacao")
            .HasColumnType("timestamp with time zone");

        // Relacionamentos
        builder.HasOne(ci => ci.Combo)
            .WithMany(c => c.Itens)
            .HasForeignKey(ci => ci.ComboId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(ci => ci.ComboId)
            .HasDatabaseName("IX_ComboItem_ComboId");

        builder.HasIndex(ci => ci.ProdutoId)
            .HasDatabaseName("IX_ComboItem_ProdutoId");

        builder.HasIndex(ci => new { ci.ComboId, ci.Ordem })
            .HasDatabaseName("IX_ComboItem_ComboOrdem");
    }
}
</ComboItemConfiguration.cs>
<ComboLocalRecebimentoConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Combos.Dominio.Entidades;

namespace Agriis.Combos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração da entidade ComboLocalRecebimento para Entity Framework
/// </summary>
public class ComboLocalRecebimentoConfiguration : IEntityTypeConfiguration<ComboLocalRecebimento>
{
    public void Configure(EntityTypeBuilder<ComboLocalRecebimento> builder)
    {
        builder.ToTable("ComboLocalRecebimento");

        builder.HasKey(clr => clr.Id);

        builder.Property(clr => clr.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(clr => clr.ComboId)
            .HasColumnName("ComboId")
            .IsRequired();

        builder.Property(clr => clr.PontoDistribuicaoId)
            .HasColumnName("PontoDistribuicaoId")
            .IsRequired();

        builder.Property(clr => clr.PrecoAdicional)
            .HasColumnName("PrecoAdicional")
            .HasColumnType("decimal(18,4)")
            .IsRequired();

        builder.Property(clr => clr.PercentualDesconto)
            .HasColumnName("PercentualDesconto")
            .HasColumnType("decimal(5,2)")
            .IsRequired();

        builder.Property(clr => clr.LocalPadrao)
            .HasColumnName("LocalPadrao")
            .IsRequired();

        builder.Property(clr => clr.Observacoes)
            .HasColumnName("Observacoes")
            .HasMaxLength(500);

        builder.Property(clr => clr.DataCriacao)
            .HasColumnName("DataCriacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(clr => clr.DataAtualizacao)
            .HasColumnName("DataAtualizacao")
            .HasColumnType("timestamp with time zone");

        // Relacionamentos
        builder.HasOne(clr => clr.Combo)
            .WithMany(c => c.LocaisRecebimento)
            .HasForeignKey(clr => clr.ComboId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(clr => clr.ComboId)
            .HasDatabaseName("IX_ComboLocalRecebimento_ComboId");

        builder.HasIndex(clr => clr.PontoDistribuicaoId)
            .HasDatabaseName("IX_ComboLocalRecebimento_PontoDistribuicaoId");

        builder.HasIndex(clr => new { clr.ComboId, clr.PontoDistribuicaoId })
            .HasDatabaseName("IX_ComboLocalRecebimento_ComboPonto")
            .IsUnique();
    }
}
</ComboLocalRecebimentoConfiguration.cs>
<ComboRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Combos.Dominio.Entidades;
using Agriis.Combos.Dominio.Enums;
using Agriis.Combos.Dominio.Interfaces;
using Agriis.Compartilhado.Infraestrutura.Persistencia;

namespace Agriis.Combos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de combos
/// </summary>
public class ComboRepository : RepositoryBase<Combo, DbContext>, IComboRepository
{
    public ComboRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<Combo>> ObterPorFornecedorAsync(int fornecedorId)
    {
        return await DbSet
            .Where(c => c.FornecedorId == fornecedorId)
            .Include(c => c.Itens)
            .Include(c => c.LocaisRecebimento)
            .Include(c => c.CategoriasDesconto)
            .OrderByDescending(c => c.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Combo>> ObterCombosVigentesAsync()
    {
        var agora = DateTime.UtcNow;
        
        return await DbSet
            .Where(c => c.Status == StatusCombo.Ativo && 
                       c.DataInicio <= agora && 
                       c.DataFim >= agora)
            .Include(c => c.Itens)
            .Include(c => c.LocaisRecebimento)
            .Include(c => c.CategoriasDesconto)
            .OrderBy(c => c.Nome)
            .ToListAsync();
    }

    public async Task<IEnumerable<Combo>> ObterPorSafraAsync(int safraId)
    {
        return await DbSet
            .Where(c => c.SafraId == safraId)
            .Include(c => c.Itens)
            .Include(c => c.LocaisRecebimento)
            .Include(c => c.CategoriasDesconto)
            .OrderByDescending(c => c.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Combo>> ObterCombosValidosParaProdutorAsync(
        int produtorId, 
        decimal hectareProdutor, 
        int municipioId)
    {
        var agora = DateTime.UtcNow;
        
        return await DbSet
            .Where(c => c.Status == StatusCombo.Ativo && 
                       c.DataInicio <= agora && 
                       c.DataFim >= agora &&
                       c.HectareMinimo <= hectareProdutor &&
                       c.HectareMaximo >= hectareProdutor)
            .Include(c => c.Itens)
            .Include(c => c.LocaisRecebimento)
            .Include(c => c.CategoriasDesconto)
            .OrderBy(c => c.Nome)
            .ToListAsync();
    }

    public async Task<Combo?> ObterCompletoAsync(int id)
    {
        return await DbSet
            .Where(c => c.Id == id)
            .Include(c => c.Itens)
            .Include(c => c.LocaisRecebimento)
            .Include(c => c.CategoriasDesconto)
            .FirstOrDefaultAsync();
    }

    public async Task<bool> ExisteComboAtivoAsync(int fornecedorId, int safraId, string nome)
    {
        return await DbSet
            .AnyAsync(c => c.FornecedorId == fornecedorId && 
                          c.SafraId == safraId && 
                          c.Nome == nome && 
                          c.Status == StatusCombo.Ativo);
    }

    public async Task<IEnumerable<Combo>> ObterCombosExpirandoAsync(DateTime dataLimite)
    {
        return await DbSet
            .Where(c => c.Status == StatusCombo.Ativo && 
                       c.DataFim <= dataLimite)
            .Include(c => c.Itens)
            .Include(c => c.LocaisRecebimento)
            .Include(c => c.CategoriasDesconto)
            .ToListAsync();
    }
}
</ComboRepository.cs>
<CulturaDto.cs>
namespace Agriis.Culturas.Aplicacao.DTOs;

public class CulturaDto
{
    public int Id { get; set; }
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public bool Ativo { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

public class CriarCulturaDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
}

public class AtualizarCulturaDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public bool Ativo { get; set; }
}
</CulturaDto.cs>
<ICulturaService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Culturas.Aplicacao.DTOs;

namespace Agriis.Culturas.Aplicacao.Interfaces;

public interface ICulturaService
{
    Task<Result<CulturaDto>> ObterPorIdAsync(int id);
    Task<Result<IEnumerable<CulturaDto>>> ObterTodasAsync();
    Task<Result<IEnumerable<CulturaDto>>> ObterAtivasAsync();
    Task<Result<CulturaDto>> CriarAsync(CriarCulturaDto dto);
    Task<Result<CulturaDto>> AtualizarAsync(int id, AtualizarCulturaDto dto);
    Task<Result> RemoverAsync(int id);
    Task<Result<CulturaDto>> ObterPorNomeAsync(string nome);
}
</ICulturaService.cs>
<CulturaMappingProfile.cs>
using AutoMapper;
using Agriis.Culturas.Aplicacao.DTOs;
using Agriis.Culturas.Dominio.Entidades;

namespace Agriis.Culturas.Aplicacao.Mapeamentos;

public class CulturaMappingProfile : Profile
{
    public CulturaMappingProfile()
    {
        CreateMap<Cultura, CulturaDto>();
        CreateMap<CriarCulturaDto, Cultura>()
            .ConstructUsing(src => new Cultura(src.Nome, src.Descricao));
    }
}
</CulturaMappingProfile.cs>
<CulturaService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Culturas.Aplicacao.DTOs;
using Agriis.Culturas.Aplicacao.Interfaces;
using Agriis.Culturas.Dominio.Entidades;
using Agriis.Culturas.Dominio.Interfaces;
using Microsoft.Extensions.Logging;

namespace Agriis.Culturas.Aplicacao.Servicos;

public class CulturaService : ICulturaService
{
    private readonly ICulturaRepository _culturaRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly ILogger<CulturaService> _logger;

    public CulturaService(
        ICulturaRepository culturaRepository,
        IUnitOfWork unitOfWork,
        IMapper mapper,
        ILogger<CulturaService> logger)
    {
        _culturaRepository = culturaRepository;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        _logger = logger;
    }

    public async Task<Result<CulturaDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var cultura = await _culturaRepository.ObterPorIdAsync(id);
            if (cultura == null)
            {
                return Result<CulturaDto>.Failure("Cultura não encontrada");
            }

            var dto = _mapper.Map<CulturaDto>(cultura);
            return Result<CulturaDto>.Success(dto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter cultura por ID {Id}", id);
            return Result<CulturaDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<IEnumerable<CulturaDto>>> ObterTodasAsync()
    {
        try
        {
            var culturas = await _culturaRepository.ObterTodosAsync();
            var culturasOrdenadas = culturas.OrderBy(c => c.Nome);
            var dtos = _mapper.Map<IEnumerable<CulturaDto>>(culturasOrdenadas);
            return Result<IEnumerable<CulturaDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter todas as culturas");
            return Result<IEnumerable<CulturaDto>>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<IEnumerable<CulturaDto>>> ObterAtivasAsync()
    {
        try
        {
            var culturas = await _culturaRepository.ObterAtivasAsync();
            var culturasOrdenadas = culturas.OrderBy(c => c.Nome);
            var dtos = _mapper.Map<IEnumerable<CulturaDto>>(culturasOrdenadas);
            return Result<IEnumerable<CulturaDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter culturas ativas");
            return Result<IEnumerable<CulturaDto>>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<CulturaDto>> CriarAsync(CriarCulturaDto dto)
    {
        try
        {
            // Validar se já existe cultura com o mesmo nome
            var existeNome = await _culturaRepository.ExisteComNomeAsync(dto.Nome);
            if (existeNome)
            {
                return Result<CulturaDto>.Failure("Já existe uma cultura com este nome");
            }

            var cultura = new Cultura(dto.Nome, dto.Descricao);
            await _culturaRepository.AdicionarAsync(cultura);
            await _unitOfWork.SalvarAlteracoesAsync();

            var culturaDto = _mapper.Map<CulturaDto>(cultura);
            _logger.LogInformation("Cultura criada com sucesso: {Nome}", cultura.Nome);
            
            return Result<CulturaDto>.Success(culturaDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar cultura: {Nome}", dto.Nome);
            return Result<CulturaDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<CulturaDto>> AtualizarAsync(int id, AtualizarCulturaDto dto)
    {
        try
        {
            var cultura = await _culturaRepository.ObterPorIdAsync(id);
            if (cultura == null)
            {
                return Result<CulturaDto>.Failure("Cultura não encontrada");
            }

            // Validar se já existe cultura com o mesmo nome (excluindo a atual)
            var existeNome = await _culturaRepository.ExisteComNomeAsync(dto.Nome, id);
            if (existeNome)
            {
                return Result<CulturaDto>.Failure("Já existe uma cultura com este nome");
            }

            cultura.AtualizarNome(dto.Nome);
            cultura.AtualizarDescricao(dto.Descricao);
            
            if (dto.Ativo && !cultura.Ativo)
                cultura.Ativar();
            else if (!dto.Ativo && cultura.Ativo)
                cultura.Desativar();

            await _culturaRepository.AtualizarAsync(cultura);
            await _unitOfWork.SalvarAlteracoesAsync();

            var culturaDto = _mapper.Map<CulturaDto>(cultura);
            _logger.LogInformation("Cultura atualizada com sucesso: {Id} - {Nome}", id, cultura.Nome);
            
            return Result<CulturaDto>.Success(culturaDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar cultura: {Id}", id);
            return Result<CulturaDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            var cultura = await _culturaRepository.ObterPorIdAsync(id);
            if (cultura == null)
            {
                return Result.Failure("Cultura não encontrada");
            }

            await _culturaRepository.RemoverAsync(id);
            await _unitOfWork.SalvarAlteracoesAsync();

            _logger.LogInformation("Cultura removida com sucesso: {Id} - {Nome}", id, cultura.Nome);
            return Result.Success();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover cultura: {Id}", id);
            return Result.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<CulturaDto>> ObterPorNomeAsync(string nome)
    {
        try
        {
            var cultura = await _culturaRepository.ObterPorNomeAsync(nome);
            if (cultura == null)
            {
                return Result<CulturaDto>.Failure("Cultura não encontrada");
            }

            var dto = _mapper.Map<CulturaDto>(cultura);
            return Result<CulturaDto>.Success(dto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter cultura por nome: {Nome}", nome);
            return Result<CulturaDto>.Failure("Erro interno do servidor");
        }
    }
}
</CulturaService.cs>
<AtualizarCulturaDtoValidator.cs>
using FluentValidation;
using Agriis.Culturas.Aplicacao.DTOs;

namespace Agriis.Culturas.Aplicacao.Validadores;

public class AtualizarCulturaDtoValidator : AbstractValidator<AtualizarCulturaDto>
{
    public AtualizarCulturaDtoValidator()
    {
        RuleFor(x => x.Nome)
            .NotEmpty()
            .WithMessage("Nome é obrigatório")
            .MaximumLength(100)
            .WithMessage("Nome deve ter no máximo 100 caracteres");

        RuleFor(x => x.Descricao)
            .MaximumLength(500)
            .WithMessage("Descrição deve ter no máximo 500 caracteres")
            .When(x => !string.IsNullOrEmpty(x.Descricao));
    }
}
</AtualizarCulturaDtoValidator.cs>
<CriarCulturaDtoValidator.cs>
using FluentValidation;
using Agriis.Culturas.Aplicacao.DTOs;

namespace Agriis.Culturas.Aplicacao.Validadores;

public class CriarCulturaDtoValidator : AbstractValidator<CriarCulturaDto>
{
    public CriarCulturaDtoValidator()
    {
        RuleFor(x => x.Nome)
            .NotEmpty()
            .WithMessage("Nome é obrigatório")
            .MaximumLength(100)
            .WithMessage("Nome deve ter no máximo 100 caracteres");

        RuleFor(x => x.Descricao)
            .MaximumLength(500)
            .WithMessage("Descrição deve ter no máximo 500 caracteres")
            .When(x => !string.IsNullOrEmpty(x.Descricao));
    }
}
</CriarCulturaDtoValidator.cs>
<Cultura.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Culturas.Dominio.Entidades;

public class Cultura : EntidadeBase
{
    public string Nome { get; private set; } = string.Empty;
    public string? Descricao { get; private set; }
    public bool Ativo { get; private set; }

    protected Cultura() { } // EF Constructor

    public Cultura(string nome, string? descricao = null)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        Descricao = descricao;
        Ativo = true;
    }

    public void AtualizarNome(string nome)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        AtualizarDataModificacao();
    }

    public void AtualizarDescricao(string? descricao)
    {
        Descricao = descricao;
        AtualizarDataModificacao();
    }

    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            AtualizarDataModificacao();
        }
    }

    public void Desativar()
    {
        if (Ativo)
        {
            Ativo = false;
            AtualizarDataModificacao();
        }
    }
}
</Cultura.cs>
<ICulturaRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Culturas.Dominio.Entidades;

namespace Agriis.Culturas.Dominio.Interfaces;

public interface ICulturaRepository : IRepository<Cultura>
{
    Task<Cultura?> ObterPorNomeAsync(string nome);
    Task<IEnumerable<Cultura>> ObterAtivasAsync();
    Task<IEnumerable<Cultura>> ObterPorNomesAsync(IEnumerable<string> nomes);
    Task<bool> ExisteComNomeAsync(string nome, int? idExcluir = null);
}
</ICulturaRepository.cs>
<CulturaConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Culturas.Dominio.Entidades;

namespace Agriis.Culturas.Infraestrutura.Configuracoes;

public class CulturaConfiguration : IEntityTypeConfiguration<Cultura>
{
    public void Configure(EntityTypeBuilder<Cultura> builder)
    {
        builder.ToTable("Cultura");

        builder.HasKey(c => c.Id);

        builder.Property(c => c.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(c => c.Nome)
            .HasColumnName("Nome")
            .HasMaxLength(100)
            .IsRequired();

        builder.Property(c => c.Descricao)
            .HasColumnName("Descricao")
            .HasMaxLength(500);

        builder.Property(c => c.Ativo)
            .HasColumnName("Ativo")
            .IsRequired()
            .HasDefaultValue(true);

        builder.Property(c => c.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();

        builder.Property(c => c.DataAtualizacao)
            .HasColumnName("DataAtualizacao");

        // Índices
        builder.HasIndex(c => c.Nome)
            .HasDatabaseName("IX_Cultura_Nome")
            .IsUnique();

        builder.HasIndex(c => c.Ativo)
            .HasDatabaseName("IX_Cultura_Ativo");
    }
}
</CulturaConfiguration.cs>
<CulturaRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Culturas.Dominio.Entidades;
using Agriis.Culturas.Dominio.Interfaces;

namespace Agriis.Culturas.Infraestrutura.Repositorios;

public class CulturaRepository : RepositoryBase<Cultura, DbContext>, ICulturaRepository
{
    public CulturaRepository(DbContext context) : base(context)
    {
    }

    public async Task<Cultura?> ObterPorNomeAsync(string nome)
    {
        return await DbSet
            .FirstOrDefaultAsync(c => c.Nome.ToLower() == nome.ToLower());
    }

    public async Task<IEnumerable<Cultura>> ObterAtivasAsync()
    {
        return await DbSet
            .Where(c => c.Ativo)
            .OrderBy(c => c.Nome)
            .ToListAsync();
    }

    public async Task<IEnumerable<Cultura>> ObterPorNomesAsync(IEnumerable<string> nomes)
    {
        var nomesLower = nomes.Select(n => n.ToLower()).ToList();
        return await DbSet
            .Where(c => nomesLower.Contains(c.Nome.ToLower()))
            .ToListAsync();
    }

    public async Task<bool> ExisteComNomeAsync(string nome, int? idExcluir = null)
    {
        var query = DbSet.Where(c => c.Nome.ToLower() == nome.ToLower());
        
        if (idExcluir.HasValue)
        {
            query = query.Where(c => c.Id != idExcluir.Value);
        }

        return await query.AnyAsync();
    }

    public override async Task<IEnumerable<Cultura>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .OrderBy(c => c.Nome)
            .ToListAsync(cancellationToken);
    }
}
</CulturaRepository.cs>
<EnderecoDto.cs>
namespace Agriis.Enderecos.Aplicacao.DTOs;

/// <summary>
/// DTO para Endereço
/// </summary>
public class EnderecoDto
{
    /// <summary>
    /// ID do endereço
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// CEP do endereço
    /// </summary>
    public string Cep { get; set; } = string.Empty;
    
    /// <summary>
    /// CEP formatado (00000-000)
    /// </summary>
    public string CepFormatado { get; set; } = string.Empty;
    
    /// <summary>
    /// Logradouro
    /// </summary>
    public string Logradouro { get; set; } = string.Empty;
    
    /// <summary>
    /// Número do endereço
    /// </summary>
    public string? Numero { get; set; }
    
    /// <summary>
    /// Complemento
    /// </summary>
    public string? Complemento { get; set; }
    
    /// <summary>
    /// Bairro
    /// </summary>
    public string Bairro { get; set; } = string.Empty;
    
    /// <summary>
    /// Latitude específica do endereço
    /// </summary>
    public double? Latitude { get; set; }
    
    /// <summary>
    /// Longitude específica do endereço
    /// </summary>
    public double? Longitude { get; set; }
    
    /// <summary>
    /// ID do município
    /// </summary>
    public int MunicipioId { get; set; }
    
    /// <summary>
    /// Dados do município
    /// </summary>
    public MunicipioResumoDto Municipio { get; set; } = new();
    
    /// <summary>
    /// ID do estado
    /// </summary>
    public int EstadoId { get; set; }
    
    /// <summary>
    /// Dados do estado
    /// </summary>
    public EstadoResumoDto Estado { get; set; } = new();
    
    /// <summary>
    /// Endereço formatado completo
    /// </summary>
    public string EnderecoFormatado { get; set; } = string.Empty;
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criação de Endereço
/// </summary>
public class CriarEnderecoDto
{
    /// <summary>
    /// CEP do endereço
    /// </summary>
    public string Cep { get; set; } = string.Empty;
    
    /// <summary>
    /// Logradouro
    /// </summary>
    public string Logradouro { get; set; } = string.Empty;
    
    /// <summary>
    /// Número do endereço
    /// </summary>
    public string? Numero { get; set; }
    
    /// <summary>
    /// Complemento
    /// </summary>
    public string? Complemento { get; set; }
    
    /// <summary>
    /// Bairro
    /// </summary>
    public string Bairro { get; set; } = string.Empty;
    
    /// <summary>
    /// ID do município
    /// </summary>
    public int MunicipioId { get; set; }
    
    /// <summary>
    /// ID do estado
    /// </summary>
    public int EstadoId { get; set; }
    
    /// <summary>
    /// Latitude específica do endereço
    /// </summary>
    public double? Latitude { get; set; }
    
    /// <summary>
    /// Longitude específica do endereço
    /// </summary>
    public double? Longitude { get; set; }
}

/// <summary>
/// DTO para atualização de Endereço
/// </summary>
public class AtualizarEnderecoDto
{
    /// <summary>
    /// CEP do endereço
    /// </summary>
    public string Cep { get; set; } = string.Empty;
    
    /// <summary>
    /// Logradouro
    /// </summary>
    public string Logradouro { get; set; } = string.Empty;
    
    /// <summary>
    /// Número do endereço
    /// </summary>
    public string? Numero { get; set; }
    
    /// <summary>
    /// Complemento
    /// </summary>
    public string? Complemento { get; set; }
    
    /// <summary>
    /// Bairro
    /// </summary>
    public string Bairro { get; set; } = string.Empty;
    
    /// <summary>
    /// Latitude específica do endereço
    /// </summary>
    public double? Latitude { get; set; }
    
    /// <summary>
    /// Longitude específica do endereço
    /// </summary>
    public double? Longitude { get; set; }
}

/// <summary>
/// DTO resumido para Endereço (para uso em listas)
/// </summary>
public class EnderecoResumoDto
{
    /// <summary>
    /// ID do endereço
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// CEP formatado
    /// </summary>
    public string CepFormatado { get; set; } = string.Empty;
    
    /// <summary>
    /// Endereço formatado
    /// </summary>
    public string EnderecoFormatado { get; set; } = string.Empty;
    
    /// <summary>
    /// Nome do município
    /// </summary>
    public string MunicipioNome { get; set; } = string.Empty;
    
    /// <summary>
    /// UF do estado
    /// </summary>
    public string EstadoUf { get; set; } = string.Empty;
}

/// <summary>
/// DTO para consulta de endereços próximos
/// </summary>
public class EnderecoProximoDto
{
    /// <summary>
    /// ID do endereço
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Endereço formatado
    /// </summary>
    public string EnderecoFormatado { get; set; } = string.Empty;
    
    /// <summary>
    /// CEP formatado
    /// </summary>
    public string CepFormatado { get; set; } = string.Empty;
    
    /// <summary>
    /// Nome do município
    /// </summary>
    public string MunicipioNome { get; set; } = string.Empty;
    
    /// <summary>
    /// UF do estado
    /// </summary>
    public string EstadoUf { get; set; } = string.Empty;
    
    /// <summary>
    /// Latitude
    /// </summary>
    public double? Latitude { get; set; }
    
    /// <summary>
    /// Longitude
    /// </summary>
    public double? Longitude { get; set; }
    
    /// <summary>
    /// Distância em quilômetros do ponto de referência
    /// </summary>
    public double? DistanciaKm { get; set; }
}
</EnderecoDto.cs>
<EstadoDto.cs>
namespace Agriis.Enderecos.Aplicacao.DTOs;

/// <summary>
/// DTO para Estado
/// </summary>
public class EstadoDto
{
    /// <summary>
    /// ID do estado
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome completo do estado
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Sigla do estado (UF)
    /// </summary>
    public string Uf { get; set; } = string.Empty;
    
    /// <summary>
    /// Código IBGE do estado
    /// </summary>
    public int CodigoIbge { get; set; }
    
    /// <summary>
    /// Região do estado
    /// </summary>
    public string Regiao { get; set; } = string.Empty;
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criação de Estado
/// </summary>
public class CriarEstadoDto
{
    /// <summary>
    /// Nome completo do estado
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Sigla do estado (UF)
    /// </summary>
    public string Uf { get; set; } = string.Empty;
    
    /// <summary>
    /// Código IBGE do estado
    /// </summary>
    public int CodigoIbge { get; set; }
    
    /// <summary>
    /// Região do estado
    /// </summary>
    public string Regiao { get; set; } = string.Empty;
}

/// <summary>
/// DTO para atualização de Estado
/// </summary>
public class AtualizarEstadoDto
{
    /// <summary>
    /// Nome completo do estado
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Sigla do estado (UF)
    /// </summary>
    public string Uf { get; set; } = string.Empty;
    
    /// <summary>
    /// Código IBGE do estado
    /// </summary>
    public int CodigoIbge { get; set; }
    
    /// <summary>
    /// Região do estado
    /// </summary>
    public string Regiao { get; set; } = string.Empty;
}

/// <summary>
/// DTO resumido para Estado (para uso em listas)
/// </summary>
public class EstadoResumoDto
{
    /// <summary>
    /// ID do estado
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome completo do estado
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Sigla do estado (UF)
    /// </summary>
    public string Uf { get; set; } = string.Empty;
    
    /// <summary>
    /// Região do estado
    /// </summary>
    public string Regiao { get; set; } = string.Empty;
}
</EstadoDto.cs>
<MunicipioDto.cs>
namespace Agriis.Enderecos.Aplicacao.DTOs;

/// <summary>
/// DTO para Município
/// </summary>
public class MunicipioDto
{
    /// <summary>
    /// ID do município
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome do município
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Código IBGE do município
    /// </summary>
    public int CodigoIbge { get; set; }
    
    /// <summary>
    /// CEP principal do município
    /// </summary>
    public string? CepPrincipal { get; set; }
    
    /// <summary>
    /// Latitude do centro do município
    /// </summary>
    public double? Latitude { get; set; }
    
    /// <summary>
    /// Longitude do centro do município
    /// </summary>
    public double? Longitude { get; set; }
    
    /// <summary>
    /// ID do estado
    /// </summary>
    public int EstadoId { get; set; }
    
    /// <summary>
    /// Dados do estado
    /// </summary>
    public EstadoResumoDto Estado { get; set; } = new();
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criação de Município
/// </summary>
public class CriarMunicipioDto
{
    /// <summary>
    /// Nome do município
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Código IBGE do município
    /// </summary>
    public int CodigoIbge { get; set; }
    
    /// <summary>
    /// ID do estado
    /// </summary>
    public int EstadoId { get; set; }
    
    /// <summary>
    /// CEP principal do município
    /// </summary>
    public string? CepPrincipal { get; set; }
    
    /// <summary>
    /// Latitude do centro do município
    /// </summary>
    public double? Latitude { get; set; }
    
    /// <summary>
    /// Longitude do centro do município
    /// </summary>
    public double? Longitude { get; set; }
}

/// <summary>
/// DTO para atualização de Município
/// </summary>
public class AtualizarMunicipioDto
{
    /// <summary>
    /// Nome do município
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Código IBGE do município
    /// </summary>
    public int CodigoIbge { get; set; }
    
    /// <summary>
    /// CEP principal do município
    /// </summary>
    public string? CepPrincipal { get; set; }
    
    /// <summary>
    /// Latitude do centro do município
    /// </summary>
    public double? Latitude { get; set; }
    
    /// <summary>
    /// Longitude do centro do município
    /// </summary>
    public double? Longitude { get; set; }
}

/// <summary>
/// DTO resumido para Município (para uso em listas)
/// </summary>
public class MunicipioResumoDto
{
    /// <summary>
    /// ID do município
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome do município
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Código IBGE do município
    /// </summary>
    public int CodigoIbge { get; set; }
    
    /// <summary>
    /// UF do estado
    /// </summary>
    public string EstadoUf { get; set; } = string.Empty;
    
    /// <summary>
    /// Nome do estado
    /// </summary>
    public string EstadoNome { get; set; } = string.Empty;
}

/// <summary>
/// DTO para consulta de municípios próximos
/// </summary>
public class MunicipioProximoDto
{
    /// <summary>
    /// ID do município
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome do município
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// UF do estado
    /// </summary>
    public string EstadoUf { get; set; } = string.Empty;
    
    /// <summary>
    /// Latitude
    /// </summary>
    public double? Latitude { get; set; }
    
    /// <summary>
    /// Longitude
    /// </summary>
    public double? Longitude { get; set; }
    
    /// <summary>
    /// Distância em quilômetros do ponto de referência
    /// </summary>
    public double? DistanciaKm { get; set; }
}
</MunicipioDto.cs>
<EnderecoMappingProfile.cs>
using AutoMapper;
using Agriis.Enderecos.Aplicacao.DTOs;
using Agriis.Enderecos.Dominio.Entidades;

namespace Agriis.Enderecos.Aplicacao.Mapeamentos;

/// <summary>
/// Perfil de mapeamento para entidades do módulo de Endereços
/// </summary>
public class EnderecoMappingProfile : Profile
{
    public EnderecoMappingProfile()
    {
        ConfigurarMapeamentosEstado();
        ConfigurarMapeamentosMunicipio();
        ConfigurarMapeamentosEndereco();
    }

    private void ConfigurarMapeamentosEstado()
    {
        // Estado -> EstadoDto
        CreateMap<Estado, EstadoDto>();
        
        // Estado -> EstadoResumoDto
        CreateMap<Estado, EstadoResumoDto>();
        
        // CriarEstadoDto -> Estado
        CreateMap<CriarEstadoDto, Estado>()
            .ConstructUsing(dto => new Estado(dto.Nome, dto.Uf, dto.CodigoIbge, dto.Regiao));
    }

    private void ConfigurarMapeamentosMunicipio()
    {
        // Municipio -> MunicipioDto
        CreateMap<Municipio, MunicipioDto>()
            .ForMember(dest => dest.Estado, opt => opt.MapFrom(src => src.Estado));
        
        // Municipio -> MunicipioResumoDto
        CreateMap<Municipio, MunicipioResumoDto>()
            .ForMember(dest => dest.EstadoUf, opt => opt.MapFrom(src => src.Estado.Uf))
            .ForMember(dest => dest.EstadoNome, opt => opt.MapFrom(src => src.Estado.Nome));
        
        // Municipio -> MunicipioProximoDto
        CreateMap<Municipio, MunicipioProximoDto>()
            .ForMember(dest => dest.EstadoUf, opt => opt.MapFrom(src => src.Estado.Uf))
            .ForMember(dest => dest.DistanciaKm, opt => opt.Ignore()); // Será preenchido manualmente
        
        // CriarMunicipioDto -> Municipio
        CreateMap<CriarMunicipioDto, Municipio>()
            .ConstructUsing(dto => new Municipio(dto.Nome, dto.CodigoIbge, dto.EstadoId, 
                dto.CepPrincipal, dto.Latitude, dto.Longitude));
    }

    private void ConfigurarMapeamentosEndereco()
    {
        // Endereco -> EnderecoDto
        CreateMap<Endereco, EnderecoDto>()
            .ForMember(dest => dest.CepFormatado, opt => opt.MapFrom(src => src.ObterCepFormatado()))
            .ForMember(dest => dest.EnderecoFormatado, opt => opt.MapFrom(src => src.ObterEnderecoFormatado()))
            .ForMember(dest => dest.Municipio, opt => opt.MapFrom(src => src.Municipio))
            .ForMember(dest => dest.Estado, opt => opt.MapFrom(src => src.Estado));
        
        // Endereco -> EnderecoResumoDto
        CreateMap<Endereco, EnderecoResumoDto>()
            .ForMember(dest => dest.CepFormatado, opt => opt.MapFrom(src => src.ObterCepFormatado()))
            .ForMember(dest => dest.EnderecoFormatado, opt => opt.MapFrom(src => src.ObterEnderecoFormatado()))
            .ForMember(dest => dest.MunicipioNome, opt => opt.MapFrom(src => src.Municipio.Nome))
            .ForMember(dest => dest.EstadoUf, opt => opt.MapFrom(src => src.Estado.Uf));
        
        // Endereco -> EnderecoProximoDto
        CreateMap<Endereco, EnderecoProximoDto>()
            .ForMember(dest => dest.CepFormatado, opt => opt.MapFrom(src => src.ObterCepFormatado()))
            .ForMember(dest => dest.EnderecoFormatado, opt => opt.MapFrom(src => src.ObterEnderecoFormatado()))
            .ForMember(dest => dest.MunicipioNome, opt => opt.MapFrom(src => src.Municipio.Nome))
            .ForMember(dest => dest.EstadoUf, opt => opt.MapFrom(src => src.Estado.Uf))
            .ForMember(dest => dest.DistanciaKm, opt => opt.Ignore()); // Será preenchido manualmente
        
        // CriarEnderecoDto -> Endereco
        CreateMap<CriarEnderecoDto, Endereco>()
            .ConstructUsing(dto => new Endereco(dto.Cep, dto.Logradouro, dto.Bairro, 
                dto.MunicipioId, dto.EstadoId, dto.Numero, dto.Complemento, 
                dto.Latitude, dto.Longitude));
    }
}
</EnderecoMappingProfile.cs>
<Endereco.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using NetTopologySuite.Geometries;

namespace Agriis.Enderecos.Dominio.Entidades;

/// <summary>
/// Entidade que representa um endereço completo
/// </summary>
public class Endereco : EntidadeBase
{
    /// <summary>
    /// CEP do endereço
    /// </summary>
    public string Cep { get; private set; } = string.Empty;
    
    /// <summary>
    /// Logradouro (rua, avenida, etc.)
    /// </summary>
    public string Logradouro { get; private set; } = string.Empty;
    
    /// <summary>
    /// Número do endereço
    /// </summary>
    public string? Numero { get; private set; }
    
    /// <summary>
    /// Complemento do endereço
    /// </summary>
    public string? Complemento { get; private set; }
    
    /// <summary>
    /// Bairro
    /// </summary>
    public string Bairro { get; private set; } = string.Empty;
    
    /// <summary>
    /// Latitude específica do endereço
    /// </summary>
    public double? Latitude { get; private set; }
    
    /// <summary>
    /// Longitude específica do endereço
    /// </summary>
    public double? Longitude { get; private set; }
    
    /// <summary>
    /// Ponto geográfico específico do endereço (PostGIS)
    /// </summary>
    public Point? Localizacao { get; private set; }
    
    /// <summary>
    /// ID do município
    /// </summary>
    public int MunicipioId { get; private set; }
    
    /// <summary>
    /// Município do endereço
    /// </summary>
    public virtual Municipio Municipio { get; private set; } = null!;
    
    /// <summary>
    /// ID do estado
    /// </summary>
    public int EstadoId { get; private set; }
    
    /// <summary>
    /// Estado do endereço
    /// </summary>
    public virtual Estado Estado { get; private set; } = null!;
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected Endereco() { }
    
    /// <summary>
    /// Construtor para criar um novo endereço
    /// </summary>
    /// <param name="cep">CEP do endereço</param>
    /// <param name="logradouro">Logradouro</param>
    /// <param name="bairro">Bairro</param>
    /// <param name="municipioId">ID do município</param>
    /// <param name="estadoId">ID do estado</param>
    /// <param name="numero">Número do endereço</param>
    /// <param name="complemento">Complemento</param>
    /// <param name="latitude">Latitude específica</param>
    /// <param name="longitude">Longitude específica</param>
    public Endereco(string cep, string logradouro, string bairro, int municipioId, int estadoId,
                   string? numero = null, string? complemento = null, 
                   double? latitude = null, double? longitude = null)
    {
        ValidarParametros(cep, logradouro, bairro, municipioId, estadoId);
        
        Cep = LimparCep(cep);
        Logradouro = logradouro;
        Bairro = bairro;
        MunicipioId = municipioId;
        EstadoId = estadoId;
        Numero = numero;
        Complemento = complemento;
        
        DefinirLocalizacao(latitude, longitude);
    }
    
    /// <summary>
    /// Atualiza os dados do endereço
    /// </summary>
    /// <param name="cep">CEP do endereço</param>
    /// <param name="logradouro">Logradouro</param>
    /// <param name="bairro">Bairro</param>
    /// <param name="numero">Número do endereço</param>
    /// <param name="complemento">Complemento</param>
    /// <param name="latitude">Latitude específica</param>
    /// <param name="longitude">Longitude específica</param>
    public void Atualizar(string cep, string logradouro, string bairro,
                         string? numero = null, string? complemento = null,
                         double? latitude = null, double? longitude = null)
    {
        ValidarParametros(cep, logradouro, bairro, MunicipioId, EstadoId);
        
        Cep = LimparCep(cep);
        Logradouro = logradouro;
        Bairro = bairro;
        Numero = numero;
        Complemento = complemento;
        
        DefinirLocalizacao(latitude, longitude);
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define a localização geográfica específica do endereço
    /// </summary>
    /// <param name="latitude">Latitude</param>
    /// <param name="longitude">Longitude</param>
    public void DefinirLocalizacao(double? latitude, double? longitude)
    {
        if (latitude.HasValue && longitude.HasValue)
        {
            ValidarCoordenadas(latitude.Value, longitude.Value);
            
            Latitude = latitude.Value;
            Longitude = longitude.Value;
            
            // Criar ponto geográfico para PostGIS (SRID 4326 = WGS84)
            var geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);
            Localizacao = geometryFactory.CreatePoint(new Coordinate(longitude.Value, latitude.Value));
        }
        else
        {
            Latitude = null;
            Longitude = null;
            Localizacao = null;
        }
        
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Calcula a distância em quilômetros para outro endereço
    /// </summary>
    /// <param name="outroEndereco">Endereço de destino</param>
    /// <returns>Distância em quilômetros ou null se algum endereço não tiver localização</returns>
    public double? CalcularDistanciaKm(Endereco outroEndereco)
    {
        if (Localizacao == null || outroEndereco.Localizacao == null)
            return null;
            
        // Usar a função de distância do PostGIS (em metros, converter para km)
        var distanciaMetros = Localizacao.Distance(outroEndereco.Localizacao);
        return distanciaMetros / 1000.0;
    }
    
    /// <summary>
    /// Calcula a distância em quilômetros para um município
    /// </summary>
    /// <param name="municipio">Município de destino</param>
    /// <returns>Distância em quilômetros ou null se não houver localização</returns>
    public double? CalcularDistanciaKm(Municipio municipio)
    {
        if (Localizacao == null || municipio.Localizacao == null)
            return null;
            
        var distanciaMetros = Localizacao.Distance(municipio.Localizacao);
        return distanciaMetros / 1000.0;
    }
    
    /// <summary>
    /// Verifica se o endereço possui localização específica definida
    /// </summary>
    /// <returns>True se possui latitude e longitude específicas</returns>
    public bool PossuiLocalizacao()
    {
        return Latitude.HasValue && Longitude.HasValue && Localizacao != null;
    }
    
    /// <summary>
    /// Retorna o endereço formatado como string
    /// </summary>
    /// <returns>Endereço formatado</returns>
    public string ObterEnderecoFormatado()
    {
        var endereco = Logradouro;
        
        if (!string.IsNullOrWhiteSpace(Numero))
            endereco += $", {Numero}";
            
        if (!string.IsNullOrWhiteSpace(Complemento))
            endereco += $", {Complemento}";
            
        endereco += $", {Bairro}";
        
        return endereco;
    }
    
    /// <summary>
    /// Retorna o CEP formatado (00000-000)
    /// </summary>
    /// <returns>CEP formatado</returns>
    public string ObterCepFormatado()
    {
        if (Cep.Length == 8)
            return $"{Cep[..5]}-{Cep[5..]}";
            
        return Cep;
    }
    
    private static void ValidarParametros(string cep, string logradouro, string bairro, int municipioId, int estadoId)
    {
        if (string.IsNullOrWhiteSpace(cep))
            throw new ArgumentException("CEP é obrigatório", nameof(cep));
            
        if (string.IsNullOrWhiteSpace(logradouro))
            throw new ArgumentException("Logradouro é obrigatório", nameof(logradouro));
            
        if (string.IsNullOrWhiteSpace(bairro))
            throw new ArgumentException("Bairro é obrigatório", nameof(bairro));
            
        if (municipioId <= 0)
            throw new ArgumentException("ID do município deve ser maior que zero", nameof(municipioId));
            
        if (estadoId <= 0)
            throw new ArgumentException("ID do estado deve ser maior que zero", nameof(estadoId));
            
        var cepLimpo = LimparCep(cep);
        if (cepLimpo.Length != 8 || !cepLimpo.All(char.IsDigit))
            throw new ArgumentException("CEP deve conter exatamente 8 dígitos", nameof(cep));
    }
    
    private static void ValidarCoordenadas(double latitude, double longitude)
    {
        if (latitude < -90 || latitude > 90)
            throw new ArgumentException("Latitude deve estar entre -90 e 90 graus", nameof(latitude));
            
        if (longitude < -180 || longitude > 180)
            throw new ArgumentException("Longitude deve estar entre -180 e 180 graus", nameof(longitude));
    }
    
    private static string LimparCep(string cep)
    {
        return cep.Replace("-", "").Replace(".", "").Replace(" ", "");
    }
}
</Endereco.cs>
<Estado.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Enderecos.Dominio.Entidades;

/// <summary>
/// Entidade que representa um estado brasileiro
/// </summary>
public class Estado : EntidadeBase
{
    /// <summary>
    /// Nome completo do estado
    /// </summary>
    public string Nome { get; private set; } = string.Empty;
    
    /// <summary>
    /// Sigla do estado (UF)
    /// </summary>
    public string Uf { get; private set; } = string.Empty;
    
    /// <summary>
    /// Código IBGE do estado
    /// </summary>
    public int CodigoIbge { get; private set; }
    
    /// <summary>
    /// Região do estado (Norte, Nordeste, Centro-Oeste, Sudeste, Sul)
    /// </summary>
    public string Regiao { get; private set; } = string.Empty;
    
    /// <summary>
    /// Municípios do estado
    /// </summary>
    public virtual ICollection<Municipio> Municipios { get; private set; } = new List<Municipio>();
    
    /// <summary>
    /// Endereços do estado
    /// </summary>
    public virtual ICollection<Endereco> Enderecos { get; private set; } = new List<Endereco>();
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected Estado() { }
    
    /// <summary>
    /// Construtor para criar um novo estado
    /// </summary>
    /// <param name="nome">Nome completo do estado</param>
    /// <param name="uf">Sigla do estado</param>
    /// <param name="codigoIbge">Código IBGE do estado</param>
    /// <param name="regiao">Região do estado</param>
    public Estado(string nome, string uf, int codigoIbge, string regiao)
    {
        ValidarParametros(nome, uf, codigoIbge, regiao);
        
        Nome = nome;
        Uf = uf.ToUpperInvariant();
        CodigoIbge = codigoIbge;
        Regiao = regiao;
    }
    
    /// <summary>
    /// Atualiza os dados do estado
    /// </summary>
    /// <param name="nome">Nome completo do estado</param>
    /// <param name="uf">Sigla do estado</param>
    /// <param name="codigoIbge">Código IBGE do estado</param>
    /// <param name="regiao">Região do estado</param>
    public void Atualizar(string nome, string uf, int codigoIbge, string regiao)
    {
        ValidarParametros(nome, uf, codigoIbge, regiao);
        
        Nome = nome;
        Uf = uf.ToUpperInvariant();
        CodigoIbge = codigoIbge;
        Regiao = regiao;
        
        AtualizarDataModificacao();
    }
    
    private static void ValidarParametros(string nome, string uf, int codigoIbge, string regiao)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome do estado é obrigatório", nameof(nome));
            
        if (string.IsNullOrWhiteSpace(uf) || uf.Length != 2)
            throw new ArgumentException("UF deve ter exatamente 2 caracteres", nameof(uf));
            
        if (codigoIbge <= 0)
            throw new ArgumentException("Código IBGE deve ser maior que zero", nameof(codigoIbge));
            
        if (string.IsNullOrWhiteSpace(regiao))
            throw new ArgumentException("Região é obrigatória", nameof(regiao));
    }
}
</Estado.cs>
<Municipio.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using NetTopologySuite.Geometries;

namespace Agriis.Enderecos.Dominio.Entidades;

/// <summary>
/// Entidade que representa um município brasileiro
/// </summary>
public class Municipio : EntidadeBase
{
    /// <summary>
    /// Nome do município
    /// </summary>
    public string Nome { get; private set; } = string.Empty;
    
    /// <summary>
    /// Código IBGE do município
    /// </summary>
    public int CodigoIbge { get; private set; }
    
    /// <summary>
    /// CEP principal do município
    /// </summary>
    public string? CepPrincipal { get; private set; }
    
    /// <summary>
    /// Latitude do centro do município
    /// </summary>
    public double? Latitude { get; private set; }
    
    /// <summary>
    /// Longitude do centro do município
    /// </summary>
    public double? Longitude { get; private set; }
    
    /// <summary>
    /// Ponto geográfico do centro do município (PostGIS)
    /// </summary>
    public Point? Localizacao { get; private set; }
    
    /// <summary>
    /// ID do estado ao qual o município pertence
    /// </summary>
    public int EstadoId { get; private set; }
    
    /// <summary>
    /// Estado ao qual o município pertence
    /// </summary>
    public virtual Estado Estado { get; private set; } = null!;
    
    /// <summary>
    /// Endereços do município
    /// </summary>
    public virtual ICollection<Endereco> Enderecos { get; private set; } = new List<Endereco>();
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected Municipio() { }
    
    /// <summary>
    /// Construtor para criar um novo município
    /// </summary>
    /// <param name="nome">Nome do município</param>
    /// <param name="codigoIbge">Código IBGE do município</param>
    /// <param name="estadoId">ID do estado</param>
    /// <param name="cepPrincipal">CEP principal do município</param>
    /// <param name="latitude">Latitude do centro do município</param>
    /// <param name="longitude">Longitude do centro do município</param>
    public Municipio(string nome, int codigoIbge, int estadoId, string? cepPrincipal = null, 
                    double? latitude = null, double? longitude = null)
    {
        ValidarParametros(nome, codigoIbge, estadoId);
        
        Nome = nome;
        CodigoIbge = codigoIbge;
        EstadoId = estadoId;
        CepPrincipal = cepPrincipal;
        
        DefinirLocalizacao(latitude, longitude);
    }
    
    /// <summary>
    /// Atualiza os dados do município
    /// </summary>
    /// <param name="nome">Nome do município</param>
    /// <param name="codigoIbge">Código IBGE do município</param>
    /// <param name="cepPrincipal">CEP principal do município</param>
    /// <param name="latitude">Latitude do centro do município</param>
    /// <param name="longitude">Longitude do centro do município</param>
    public void Atualizar(string nome, int codigoIbge, string? cepPrincipal = null, 
                         double? latitude = null, double? longitude = null)
    {
        ValidarParametros(nome, codigoIbge, EstadoId);
        
        Nome = nome;
        CodigoIbge = codigoIbge;
        CepPrincipal = cepPrincipal;
        
        DefinirLocalizacao(latitude, longitude);
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define a localização geográfica do município
    /// </summary>
    /// <param name="latitude">Latitude</param>
    /// <param name="longitude">Longitude</param>
    public void DefinirLocalizacao(double? latitude, double? longitude)
    {
        if (latitude.HasValue && longitude.HasValue)
        {
            ValidarCoordenadas(latitude.Value, longitude.Value);
            
            Latitude = latitude.Value;
            Longitude = longitude.Value;
            
            // Criar ponto geográfico para PostGIS (SRID 4326 = WGS84)
            var geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);
            Localizacao = geometryFactory.CreatePoint(new Coordinate(longitude.Value, latitude.Value));
        }
        else
        {
            Latitude = null;
            Longitude = null;
            Localizacao = null;
        }
        
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Calcula a distância em quilômetros para outro município
    /// </summary>
    /// <param name="outroMunicipio">Município de destino</param>
    /// <returns>Distância em quilômetros ou null se algum município não tiver localização</returns>
    public double? CalcularDistanciaKm(Municipio outroMunicipio)
    {
        if (Localizacao == null || outroMunicipio.Localizacao == null)
            return null;
            
        // Usar a função de distância do PostGIS (em metros, converter para km)
        var distanciaMetros = Localizacao.Distance(outroMunicipio.Localizacao);
        return distanciaMetros / 1000.0;
    }
    
    /// <summary>
    /// Verifica se o município possui localização definida
    /// </summary>
    /// <returns>True se possui latitude e longitude</returns>
    public bool PossuiLocalizacao()
    {
        return Latitude.HasValue && Longitude.HasValue && Localizacao != null;
    }
    
    private static void ValidarParametros(string nome, int codigoIbge, int estadoId)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome do município é obrigatório", nameof(nome));
            
        if (codigoIbge <= 0)
            throw new ArgumentException("Código IBGE deve ser maior que zero", nameof(codigoIbge));
            
        if (estadoId <= 0)
            throw new ArgumentException("ID do estado deve ser maior que zero", nameof(estadoId));
    }
    
    private static void ValidarCoordenadas(double latitude, double longitude)
    {
        if (latitude < -90 || latitude > 90)
            throw new ArgumentException("Latitude deve estar entre -90 e 90 graus", nameof(latitude));
            
        if (longitude < -180 || longitude > 180)
            throw new ArgumentException("Longitude deve estar entre -180 e 180 graus", nameof(longitude));
    }
}
</Municipio.cs>
<IEnderecoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Enderecos.Dominio.Entidades;

namespace Agriis.Enderecos.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de Endereços
/// </summary>
public interface IEnderecoRepository : IRepository<Endereco>
{
    /// <summary>
    /// Obtém endereços por CEP
    /// </summary>
    /// <param name="cep">CEP (com ou sem formatação)</param>
    /// <returns>Lista de endereços com o CEP especificado</returns>
    Task<IEnumerable<Endereco>> ObterPorCepAsync(string cep);
    
    /// <summary>
    /// Obtém endereços por município
    /// </summary>
    /// <param name="municipioId">ID do município</param>
    /// <returns>Lista de endereços do município</returns>
    Task<IEnumerable<Endereco>> ObterPorMunicipioAsync(int municipioId);
    
    /// <summary>
    /// Obtém endereços por estado
    /// </summary>
    /// <param name="estadoId">ID do estado</param>
    /// <returns>Lista de endereços do estado</returns>
    Task<IEnumerable<Endereco>> ObterPorEstadoAsync(int estadoId);
    
    /// <summary>
    /// Busca endereços por logradouro
    /// </summary>
    /// <param name="logradouro">Logradouro ou parte do logradouro</param>
    /// <param name="municipioId">ID do município (opcional)</param>
    /// <returns>Lista de endereços encontrados</returns>
    Task<IEnumerable<Endereco>> BuscarPorLogradouroAsync(string logradouro, int? municipioId = null);
    
    /// <summary>
    /// Busca endereços por bairro
    /// </summary>
    /// <param name="bairro">Bairro ou parte do bairro</param>
    /// <param name="municipioId">ID do município (opcional)</param>
    /// <returns>Lista de endereços encontrados</returns>
    Task<IEnumerable<Endereco>> BuscarPorBairroAsync(string bairro, int? municipioId = null);
    
    /// <summary>
    /// Obtém endereços próximos a uma localização
    /// </summary>
    /// <param name="latitude">Latitude de referência</param>
    /// <param name="longitude">Longitude de referência</param>
    /// <param name="raioKm">Raio de busca em quilômetros</param>
    /// <param name="limite">Número máximo de resultados</param>
    /// <returns>Lista de endereços próximos ordenados por distância</returns>
    Task<IEnumerable<Endereco>> ObterProximosAsync(double latitude, double longitude, double raioKm, int limite = 10);
    
    /// <summary>
    /// Obtém endereços que possuem localização específica definida
    /// </summary>
    /// <param name="municipioId">ID do município (opcional)</param>
    /// <returns>Lista de endereços com localização específica</returns>
    Task<IEnumerable<Endereco>> ObterComLocalizacaoAsync(int? municipioId = null);
    
    /// <summary>
    /// Calcula a distância entre dois endereços
    /// </summary>
    /// <param name="enderecoOrigemId">ID do endereço de origem</param>
    /// <param name="enderecoDestinoId">ID do endereço de destino</param>
    /// <returns>Distância em quilômetros ou null se algum endereço não tiver localização</returns>
    Task<double?> CalcularDistanciaAsync(int enderecoOrigemId, int enderecoDestinoId);
    
    /// <summary>
    /// Verifica se existe um endereço com os dados especificados
    /// </summary>
    /// <param name="cep">CEP</param>
    /// <param name="logradouro">Logradouro</param>
    /// <param name="numero">Número</param>
    /// <param name="municipioId">ID do município</param>
    /// <returns>True se existe</returns>
    Task<bool> ExisteEnderecoAsync(string cep, string logradouro, string? numero, int municipioId);
}
</IEnderecoRepository.cs>
<IEstadoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Enderecos.Dominio.Entidades;

namespace Agriis.Enderecos.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de Estados
/// </summary>
public interface IEstadoRepository : IRepository<Estado>
{
    /// <summary>
    /// Obtém um estado pela sigla (UF)
    /// </summary>
    /// <param name="uf">Sigla do estado</param>
    /// <returns>Estado encontrado ou null</returns>
    Task<Estado?> ObterPorUfAsync(string uf);
    
    /// <summary>
    /// Obtém um estado pelo código IBGE
    /// </summary>
    /// <param name="codigoIbge">Código IBGE do estado</param>
    /// <returns>Estado encontrado ou null</returns>
    Task<Estado?> ObterPorCodigoIbgeAsync(int codigoIbge);
    
    /// <summary>
    /// Obtém estados por região
    /// </summary>
    /// <param name="regiao">Nome da região</param>
    /// <returns>Lista de estados da região</returns>
    Task<IEnumerable<Estado>> ObterPorRegiaoAsync(string regiao);
    
    /// <summary>
    /// Obtém todos os estados com seus municípios
    /// </summary>
    /// <returns>Lista de estados com municípios</returns>
    Task<IEnumerable<Estado>> ObterTodosComMunicipiosAsync();
    
    /// <summary>
    /// Verifica se existe um estado com a UF especificada
    /// </summary>
    /// <param name="uf">Sigla do estado</param>
    /// <returns>True se existe</returns>
    Task<bool> ExistePorUfAsync(string uf);
    
    /// <summary>
    /// Verifica se existe um estado com o código IBGE especificado
    /// </summary>
    /// <param name="codigoIbge">Código IBGE</param>
    /// <returns>True se existe</returns>
    Task<bool> ExistePorCodigoIbgeAsync(int codigoIbge);
}
</IEstadoRepository.cs>
<IMunicipioRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Enderecos.Dominio.Entidades;

namespace Agriis.Enderecos.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de Municípios
/// </summary>
public interface IMunicipioRepository : IRepository<Municipio>
{
    /// <summary>
    /// Obtém um município pelo código IBGE
    /// </summary>
    /// <param name="codigoIbge">Código IBGE do município</param>
    /// <returns>Município encontrado ou null</returns>
    Task<Municipio?> ObterPorCodigoIbgeAsync(int codigoIbge);
    
    /// <summary>
    /// Obtém municípios por estado
    /// </summary>
    /// <param name="estadoId">ID do estado</param>
    /// <returns>Lista de municípios do estado</returns>
    Task<IEnumerable<Municipio>> ObterPorEstadoAsync(int estadoId);
    
    /// <summary>
    /// Obtém municípios por UF
    /// </summary>
    /// <param name="uf">Sigla do estado</param>
    /// <returns>Lista de municípios do estado</returns>
    Task<IEnumerable<Municipio>> ObterPorUfAsync(string uf);
    
    /// <summary>
    /// Busca municípios por nome (busca parcial)
    /// </summary>
    /// <param name="nome">Nome ou parte do nome do município</param>
    /// <param name="estadoId">ID do estado (opcional)</param>
    /// <returns>Lista de municípios encontrados</returns>
    Task<IEnumerable<Municipio>> BuscarPorNomeAsync(string nome, int? estadoId = null);
    
    /// <summary>
    /// Obtém municípios próximos a uma localização
    /// </summary>
    /// <param name="latitude">Latitude de referência</param>
    /// <param name="longitude">Longitude de referência</param>
    /// <param name="raioKm">Raio de busca em quilômetros</param>
    /// <param name="limite">Número máximo de resultados</param>
    /// <returns>Lista de municípios próximos ordenados por distância</returns>
    Task<IEnumerable<Municipio>> ObterProximosAsync(double latitude, double longitude, double raioKm, int limite = 10);
    
    /// <summary>
    /// Obtém municípios que possuem localização definida
    /// </summary>
    /// <param name="estadoId">ID do estado (opcional)</param>
    /// <returns>Lista de municípios com localização</returns>
    Task<IEnumerable<Municipio>> ObterComLocalizacaoAsync(int? estadoId = null);
    
    /// <summary>
    /// Calcula a distância entre dois municípios
    /// </summary>
    /// <param name="municipioOrigemId">ID do município de origem</param>
    /// <param name="municipioDestinoId">ID do município de destino</param>
    /// <returns>Distância em quilômetros ou null se algum município não tiver localização</returns>
    Task<double?> CalcularDistanciaAsync(int municipioOrigemId, int municipioDestinoId);
    
    /// <summary>
    /// Verifica se existe um município com o código IBGE especificado
    /// </summary>
    /// <param name="codigoIbge">Código IBGE</param>
    /// <returns>True se existe</returns>
    Task<bool> ExistePorCodigoIbgeAsync(int codigoIbge);
}
</IMunicipioRepository.cs>
<EnderecoConfiguration.cs>
using Agriis.Enderecos.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Enderecos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Endereco
/// </summary>
public class EnderecoConfiguration : IEntityTypeConfiguration<Endereco>
{
    public void Configure(EntityTypeBuilder<Endereco> builder)
    {
        // Configuração da tabela
        builder.ToTable("enderecos", "public");
        
        // Chave primária
        builder.HasKey(e => e.Id);
        builder.Property(e => e.Id)
            .HasColumnName("id")
            .ValueGeneratedOnAdd();
        
        // Propriedades
        builder.Property(e => e.Cep)
            .HasColumnName("cep")
            .HasMaxLength(8)
            .IsRequired();
            
        builder.Property(e => e.Logradouro)
            .HasColumnName("logradouro")
            .HasMaxLength(200)
            .IsRequired();
            
        builder.Property(e => e.Numero)
            .HasColumnName("numero")
            .HasMaxLength(20)
            .IsRequired(false);
            
        builder.Property(e => e.Complemento)
            .HasColumnName("complemento")
            .HasMaxLength(100)
            .IsRequired(false);
            
        builder.Property(e => e.Bairro)
            .HasColumnName("bairro")
            .HasMaxLength(100)
            .IsRequired();
            
        builder.Property(e => e.Latitude)
            .HasColumnName("latitude")
            .HasPrecision(10, 8)
            .IsRequired(false);
            
        builder.Property(e => e.Longitude)
            .HasColumnName("longitude")
            .HasPrecision(11, 8)
            .IsRequired(false);
            
        // TODO: Configuração do campo geográfico PostGIS - temporariamente ignorado
        builder.Ignore(e => e.Localizacao);
        
        // Chaves estrangeiras
        builder.Property(e => e.MunicipioId)
            .HasColumnName("municipio_id")
            .IsRequired();
            
        builder.Property(e => e.EstadoId)
            .HasColumnName("estado_id")
            .IsRequired();
        
        // Propriedades de auditoria
        builder.Property(e => e.DataCriacao)
            .HasColumnName("data_criacao")
            .IsRequired()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");
            
        builder.Property(e => e.DataAtualizacao)
            .HasColumnName("data_atualizacao")
            .IsRequired(false);
        
        // Índices
        builder.HasIndex(e => e.Cep)
            .HasDatabaseName("IX_enderecos_cep");
            
        builder.HasIndex(e => e.Logradouro)
            .HasDatabaseName("IX_enderecos_logradouro");
            
        builder.HasIndex(e => e.Bairro)
            .HasDatabaseName("IX_enderecos_bairro");
            
        builder.HasIndex(e => e.MunicipioId)
            .HasDatabaseName("IX_enderecos_municipio_id");
            
        builder.HasIndex(e => e.EstadoId)
            .HasDatabaseName("IX_enderecos_estado_id");
        
        // TODO: Índice espacial para consultas geográficas - temporariamente desabilitado
        // builder.HasIndex(e => e.Localizacao)
        //     .HasDatabaseName("IX_enderecos_localizacao")
        //     .HasMethod("gist");
        
        // Índice composto para verificação de duplicatas
        builder.HasIndex(e => new { e.Cep, e.Logradouro, e.Numero, e.MunicipioId })
            .HasDatabaseName("IX_enderecos_unique_address");
        
        // Relacionamentos
        builder.HasOne(e => e.Municipio)
            .WithMany(m => m.Enderecos)
            .HasForeignKey(e => e.MunicipioId)
            .OnDelete(DeleteBehavior.Restrict);
            
        builder.HasOne(e => e.Estado)
            .WithMany(es => es.Enderecos)
            .HasForeignKey(e => e.EstadoId)
            .OnDelete(DeleteBehavior.Restrict);
    }
}
</EnderecoConfiguration.cs>
<EstadoConfiguration.cs>
using Agriis.Enderecos.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Enderecos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Estado
/// </summary>
public class EstadoConfiguration : IEntityTypeConfiguration<Estado>
{
    public void Configure(EntityTypeBuilder<Estado> builder)
    {
        // Configuração da tabela
        builder.ToTable("estados", "public");
        
        // Chave primária
        builder.HasKey(e => e.Id);
        builder.Property(e => e.Id)
            .HasColumnName("id")
            .ValueGeneratedOnAdd();
        
        // Propriedades
        builder.Property(e => e.Nome)
            .HasColumnName("nome")
            .HasMaxLength(100)
            .IsRequired();
            
        builder.Property(e => e.Uf)
            .HasColumnName("uf")
            .HasMaxLength(2)
            .IsRequired();
            
        builder.Property(e => e.CodigoIbge)
            .HasColumnName("codigo_ibge")
            .IsRequired();
            
        builder.Property(e => e.Regiao)
            .HasColumnName("regiao")
            .HasMaxLength(50)
            .IsRequired();
        
        // Propriedades de auditoria
        builder.Property(e => e.DataCriacao)
            .HasColumnName("data_criacao")
            .IsRequired()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");
            
        builder.Property(e => e.DataAtualizacao)
            .HasColumnName("data_atualizacao")
            .IsRequired(false);
        
        // Índices
        builder.HasIndex(e => e.Uf)
            .IsUnique()
            .HasDatabaseName("IX_estados_uf");
            
        builder.HasIndex(e => e.CodigoIbge)
            .IsUnique()
            .HasDatabaseName("IX_estados_codigo_ibge");
            
        builder.HasIndex(e => e.Nome)
            .HasDatabaseName("IX_estados_nome");
            
        builder.HasIndex(e => e.Regiao)
            .HasDatabaseName("IX_estados_regiao");
        
        // Relacionamentos
        builder.HasMany(e => e.Municipios)
            .WithOne(m => m.Estado)
            .HasForeignKey(m => m.EstadoId)
            .OnDelete(DeleteBehavior.Restrict);
            
        builder.HasMany(e => e.Enderecos)
            .WithOne(en => en.Estado)
            .HasForeignKey(en => en.EstadoId)
            .OnDelete(DeleteBehavior.Restrict);
    }
}
</EstadoConfiguration.cs>
<MunicipioConfiguration.cs>
using Agriis.Enderecos.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Enderecos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Municipio
/// </summary>
public class MunicipioConfiguration : IEntityTypeConfiguration<Municipio>
{
    public void Configure(EntityTypeBuilder<Municipio> builder)
    {
        // Configuração da tabela
        builder.ToTable("municipios", "public");
        
        // Chave primária
        builder.HasKey(m => m.Id);
        builder.Property(m => m.Id)
            .HasColumnName("id")
            .ValueGeneratedOnAdd();
        
        // Propriedades
        builder.Property(m => m.Nome)
            .HasColumnName("nome")
            .HasMaxLength(150)
            .IsRequired();
            
        builder.Property(m => m.CodigoIbge)
            .HasColumnName("codigo_ibge")
            .IsRequired();
            
        builder.Property(m => m.CepPrincipal)
            .HasColumnName("cep_principal")
            .HasMaxLength(8)
            .IsRequired(false);
            
        builder.Property(m => m.Latitude)
            .HasColumnName("latitude")
            .HasPrecision(10, 8)
            .IsRequired(false);
            
        builder.Property(m => m.Longitude)
            .HasColumnName("longitude")
            .HasPrecision(11, 8)
            .IsRequired(false);
            
        // TODO: Configuração do campo geográfico PostGIS - temporariamente ignorado
        builder.Ignore(m => m.Localizacao);
        
        // Chave estrangeira
        builder.Property(m => m.EstadoId)
            .HasColumnName("estado_id")
            .IsRequired();
        
        // Propriedades de auditoria
        builder.Property(m => m.DataCriacao)
            .HasColumnName("data_criacao")
            .IsRequired()
            .HasDefaultValueSql("CURRENT_TIMESTAMP");
            
        builder.Property(m => m.DataAtualizacao)
            .HasColumnName("data_atualizacao")
            .IsRequired(false);
        
        // Índices
        builder.HasIndex(m => m.CodigoIbge)
            .IsUnique()
            .HasDatabaseName("IX_municipios_codigo_ibge");
            
        builder.HasIndex(m => m.Nome)
            .HasDatabaseName("IX_municipios_nome");
            
        builder.HasIndex(m => m.EstadoId)
            .HasDatabaseName("IX_municipios_estado_id");
            
        builder.HasIndex(m => m.CepPrincipal)
            .HasDatabaseName("IX_municipios_cep_principal");
        
        // TODO: Índice espacial para consultas geográficas - temporariamente desabilitado
        // builder.HasIndex(m => m.Localizacao)
        //     .HasDatabaseName("IX_municipios_localizacao")
        //     .HasMethod("gist");
        
        // Relacionamentos
        builder.HasOne(m => m.Estado)
            .WithMany(e => e.Municipios)
            .HasForeignKey(m => m.EstadoId)
            .OnDelete(DeleteBehavior.Restrict);
            
        builder.HasMany(m => m.Enderecos)
            .WithOne(e => e.Municipio)
            .HasForeignKey(e => e.MunicipioId)
            .OnDelete(DeleteBehavior.Restrict);
    }
}
</MunicipioConfiguration.cs>
<EnderecoRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Enderecos.Dominio.Entidades;
using Agriis.Enderecos.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;

namespace Agriis.Enderecos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de Endereços
/// </summary>
public class EnderecoRepository : RepositoryBase<Endereco, DbContext>, IEnderecoRepository
{
    public EnderecoRepository(DbContext context) : base(context)
    {
    }

    /// <summary>
    /// Obtém endereços por CEP
    /// </summary>
    public async Task<IEnumerable<Endereco>> ObterPorCepAsync(string cep)
    {
        var cepLimpo = LimparCep(cep);
        
        return await DbSet
            .Include(e => e.Municipio)
            .Include(e => e.Estado)
            .Where(e => e.Cep == cepLimpo)
            .OrderBy(e => e.Logradouro)
            .ToListAsync();
    }

    /// <summary>
    /// Obtém endereços por município
    /// </summary>
    public async Task<IEnumerable<Endereco>> ObterPorMunicipioAsync(int municipioId)
    {
        return await DbSet
            .Include(e => e.Municipio)
            .Include(e => e.Estado)
            .Where(e => e.MunicipioId == municipioId)
            .OrderBy(e => e.Logradouro)
            .ThenBy(e => e.Numero)
            .ToListAsync();
    }

    /// <summary>
    /// Obtém endereços por estado
    /// </summary>
    public async Task<IEnumerable<Endereco>> ObterPorEstadoAsync(int estadoId)
    {
        return await DbSet
            .Include(e => e.Municipio)
            .Include(e => e.Estado)
            .Where(e => e.EstadoId == estadoId)
            .OrderBy(e => e.Municipio.Nome)
            .ThenBy(e => e.Logradouro)
            .ToListAsync();
    }

    /// <summary>
    /// Busca endereços por logradouro
    /// </summary>
    public async Task<IEnumerable<Endereco>> BuscarPorLogradouroAsync(string logradouro, int? municipioId = null)
    {
        var query = DbSet
            .Include(e => e.Municipio)
            .Include(e => e.Estado)
            .Where(e => EF.Functions.ILike(e.Logradouro, $"%{logradouro}%"));

        if (municipioId.HasValue)
        {
            query = query.Where(e => e.MunicipioId == municipioId.Value);
        }

        return await query
            .OrderBy(e => e.Logradouro)
            .ThenBy(e => e.Numero)
            .ToListAsync();
    }

    /// <summary>
    /// Busca endereços por bairro
    /// </summary>
    public async Task<IEnumerable<Endereco>> BuscarPorBairroAsync(string bairro, int? municipioId = null)
    {
        var query = DbSet
            .Include(e => e.Municipio)
            .Include(e => e.Estado)
            .Where(e => EF.Functions.ILike(e.Bairro, $"%{bairro}%"));

        if (municipioId.HasValue)
        {
            query = query.Where(e => e.MunicipioId == municipioId.Value);
        }

        return await query
            .OrderBy(e => e.Bairro)
            .ThenBy(e => e.Logradouro)
            .ToListAsync();
    }

    /// <summary>
    /// Obtém endereços próximos a uma localização
    /// </summary>
    public async Task<IEnumerable<Endereco>> ObterProximosAsync(double latitude, double longitude, double raioKm, int limite = 10)
    {
        var geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);
        var pontoReferencia = geometryFactory.CreatePoint(new Coordinate(longitude, latitude));
        var raioMetros = raioKm * 1000;

        return await DbSet
            .Include(e => e.Municipio)
            .Include(e => e.Estado)
            .Where(e => e.Localizacao != null && e.Localizacao.Distance(pontoReferencia) <= raioMetros)
            .OrderBy(e => e.Localizacao!.Distance(pontoReferencia))
            .Take(limite)
            .ToListAsync();
    }

    /// <summary>
    /// Obtém endereços que possuem localização específica definida
    /// </summary>
    public async Task<IEnumerable<Endereco>> ObterComLocalizacaoAsync(int? municipioId = null)
    {
        var query = DbSet
            .Include(e => e.Municipio)
            .Include(e => e.Estado)
            .Where(e => e.Localizacao != null);

        if (municipioId.HasValue)
        {
            query = query.Where(e => e.MunicipioId == municipioId.Value);
        }

        return await query
            .OrderBy(e => e.Logradouro)
            .ThenBy(e => e.Numero)
            .ToListAsync();
    }

    /// <summary>
    /// Calcula a distância entre dois endereços
    /// </summary>
    public async Task<double?> CalcularDistanciaAsync(int enderecoOrigemId, int enderecoDestinoId)
    {
        var enderecos = await DbSet
            .Where(e => e.Id == enderecoOrigemId || e.Id == enderecoDestinoId)
            .Where(e => e.Localizacao != null)
            .ToListAsync();

        if (enderecos.Count != 2)
            return null;

        var origem = enderecos.First(e => e.Id == enderecoOrigemId);
        var destino = enderecos.First(e => e.Id == enderecoDestinoId);

        return origem.CalcularDistanciaKm(destino);
    }

    /// <summary>
    /// Verifica se existe um endereço com os dados especificados
    /// </summary>
    public async Task<bool> ExisteEnderecoAsync(string cep, string logradouro, string? numero, int municipioId)
    {
        var cepLimpo = LimparCep(cep);
        
        return await DbSet
            .AnyAsync(e => e.Cep == cepLimpo && 
                          e.Logradouro == logradouro && 
                          e.Numero == numero && 
                          e.MunicipioId == municipioId);
    }

    /// <summary>
    /// Sobrescreve o método base para incluir relacionamentos
    /// </summary>
    public override async Task<Endereco?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(e => e.Municipio)
            .Include(e => e.Estado)
            .FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
    }

    /// <summary>
    /// Sobrescreve o método base para incluir relacionamentos e ordenação
    /// </summary>
    public override async Task<IEnumerable<Endereco>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(e => e.Municipio)
            .Include(e => e.Estado)
            .OrderBy(e => e.Estado.Nome)
            .ThenBy(e => e.Municipio.Nome)
            .ThenBy(e => e.Logradouro)
            .ToListAsync(cancellationToken);
    }

    /// <summary>
    /// Remove formatação do CEP
    /// </summary>
    private static string LimparCep(string cep)
    {
        return cep.Replace("-", "").Replace(".", "").Replace(" ", "");
    }
}
</EnderecoRepository.cs>
<EstadoRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Enderecos.Dominio.Entidades;
using Agriis.Enderecos.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Enderecos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de Estados
/// </summary>
public class EstadoRepository : RepositoryBase<Estado, DbContext>, IEstadoRepository
{
    public EstadoRepository(DbContext context) : base(context)
    {
    }

    /// <summary>
    /// Obtém um estado pela sigla (UF)
    /// </summary>
    public async Task<Estado?> ObterPorUfAsync(string uf)
    {
        return await DbSet
            .FirstOrDefaultAsync(e => e.Uf == uf.ToUpperInvariant());
    }

    /// <summary>
    /// Obtém um estado pelo código IBGE
    /// </summary>
    public async Task<Estado?> ObterPorCodigoIbgeAsync(int codigoIbge)
    {
        return await DbSet
            .FirstOrDefaultAsync(e => e.CodigoIbge == codigoIbge);
    }

    /// <summary>
    /// Obtém estados por região
    /// </summary>
    public async Task<IEnumerable<Estado>> ObterPorRegiaoAsync(string regiao)
    {
        return await DbSet
            .Where(e => e.Regiao == regiao)
            .OrderBy(e => e.Nome)
            .ToListAsync();
    }

    /// <summary>
    /// Obtém todos os estados com seus municípios
    /// </summary>
    public async Task<IEnumerable<Estado>> ObterTodosComMunicipiosAsync()
    {
        return await DbSet
            .Include(e => e.Municipios)
            .OrderBy(e => e.Nome)
            .ToListAsync();
    }

    /// <summary>
    /// Verifica se existe um estado com a UF especificada
    /// </summary>
    public async Task<bool> ExistePorUfAsync(string uf)
    {
        return await DbSet
            .AnyAsync(e => e.Uf == uf.ToUpperInvariant());
    }

    /// <summary>
    /// Verifica se existe um estado com o código IBGE especificado
    /// </summary>
    public async Task<bool> ExistePorCodigoIbgeAsync(int codigoIbge)
    {
        return await DbSet
            .AnyAsync(e => e.CodigoIbge == codigoIbge);
    }

    /// <summary>
    /// Sobrescreve o método base para incluir ordenação por nome
    /// </summary>
    public override async Task<IEnumerable<Estado>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .OrderBy(e => e.Nome)
            .ToListAsync(cancellationToken);
    }
}
</EstadoRepository.cs>
<MunicipioRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Enderecos.Dominio.Entidades;
using Agriis.Enderecos.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;

namespace Agriis.Enderecos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de Municípios
/// </summary>
public class MunicipioRepository : RepositoryBase<Municipio, DbContext>, IMunicipioRepository
{
    public MunicipioRepository(DbContext context) : base(context)
    {
    }

    /// <summary>
    /// Obtém um município pelo código IBGE
    /// </summary>
    public async Task<Municipio?> ObterPorCodigoIbgeAsync(int codigoIbge)
    {
        return await DbSet
            .Include(m => m.Estado)
            .FirstOrDefaultAsync(m => m.CodigoIbge == codigoIbge);
    }

    /// <summary>
    /// Obtém municípios por estado
    /// </summary>
    public async Task<IEnumerable<Municipio>> ObterPorEstadoAsync(int estadoId)
    {
        return await DbSet
            .Where(m => m.EstadoId == estadoId)
            .OrderBy(m => m.Nome)
            .ToListAsync();
    }

    /// <summary>
    /// Obtém municípios por UF
    /// </summary>
    public async Task<IEnumerable<Municipio>> ObterPorUfAsync(string uf)
    {
        return await DbSet
            .Include(m => m.Estado)
            .Where(m => m.Estado.Uf == uf.ToUpperInvariant())
            .OrderBy(m => m.Nome)
            .ToListAsync();
    }

    /// <summary>
    /// Busca municípios por nome (busca parcial)
    /// </summary>
    public async Task<IEnumerable<Municipio>> BuscarPorNomeAsync(string nome, int? estadoId = null)
    {
        var query = DbSet
            .Include(m => m.Estado)
            .Where(m => EF.Functions.ILike(m.Nome, $"%{nome}%"));

        if (estadoId.HasValue)
        {
            query = query.Where(m => m.EstadoId == estadoId.Value);
        }

        return await query
            .OrderBy(m => m.Nome)
            .ToListAsync();
    }

    /// <summary>
    /// Obtém municípios próximos a uma localização
    /// </summary>
    public async Task<IEnumerable<Municipio>> ObterProximosAsync(double latitude, double longitude, double raioKm, int limite = 10)
    {
        var geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);
        var pontoReferencia = geometryFactory.CreatePoint(new Coordinate(longitude, latitude));
        var raioMetros = raioKm * 1000;

        return await DbSet
            .Include(m => m.Estado)
            .Where(m => m.Localizacao != null && m.Localizacao.Distance(pontoReferencia) <= raioMetros)
            .OrderBy(m => m.Localizacao!.Distance(pontoReferencia))
            .Take(limite)
            .ToListAsync();
    }

    /// <summary>
    /// Obtém municípios que possuem localização definida
    /// </summary>
    public async Task<IEnumerable<Municipio>> ObterComLocalizacaoAsync(int? estadoId = null)
    {
        var query = DbSet
            .Include(m => m.Estado)
            .Where(m => m.Localizacao != null);

        if (estadoId.HasValue)
        {
            query = query.Where(m => m.EstadoId == estadoId.Value);
        }

        return await query
            .OrderBy(m => m.Nome)
            .ToListAsync();
    }

    /// <summary>
    /// Calcula a distância entre dois municípios
    /// </summary>
    public async Task<double?> CalcularDistanciaAsync(int municipioOrigemId, int municipioDestinoId)
    {
        var municipios = await DbSet
            .Where(m => m.Id == municipioOrigemId || m.Id == municipioDestinoId)
            .Where(m => m.Localizacao != null)
            .ToListAsync();

        if (municipios.Count != 2)
            return null;

        var origem = municipios.First(m => m.Id == municipioOrigemId);
        var destino = municipios.First(m => m.Id == municipioDestinoId);

        return origem.CalcularDistanciaKm(destino);
    }

    /// <summary>
    /// Verifica se existe um município com o código IBGE especificado
    /// </summary>
    public async Task<bool> ExistePorCodigoIbgeAsync(int codigoIbge)
    {
        return await DbSet
            .AnyAsync(m => m.CodigoIbge == codigoIbge);
    }

    /// <summary>
    /// Sobrescreve o método base para incluir o estado
    /// </summary>
    public override async Task<Municipio?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(m => m.Estado)
            .FirstOrDefaultAsync(m => m.Id == id, cancellationToken);
    }

    /// <summary>
    /// Sobrescreve o método base para incluir ordenação por nome
    /// </summary>
    public override async Task<IEnumerable<Municipio>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(m => m.Estado)
            .OrderBy(m => m.Nome)
            .ToListAsync(cancellationToken);
    }
}
</MunicipioRepository.cs>
<AtualizarFornecedorRequest.cs>
using System.ComponentModel.DataAnnotations;

namespace Agriis.Fornecedores.Aplicacao.DTOs;

/// <summary>
/// Request para atualizar um fornecedor
/// </summary>
public class AtualizarFornecedorRequest
{
    /// <summary>
    /// Nome/Razão social do fornecedor
    /// </summary>
    [Required(ErrorMessage = "Nome é obrigatório")]
    [StringLength(200, ErrorMessage = "Nome deve ter no máximo 200 caracteres")]
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Inscrição estadual do fornecedor
    /// </summary>
    [StringLength(20, ErrorMessage = "Inscrição estadual deve ter no máximo 20 caracteres")]
    public string? InscricaoEstadual { get; set; }
    
    /// <summary>
    /// Endereço completo do fornecedor
    /// </summary>
    [StringLength(500, ErrorMessage = "Endereço deve ter no máximo 500 caracteres")]
    public string? Endereco { get; set; }
    
    /// <summary>
    /// Telefone de contato do fornecedor
    /// </summary>
    [StringLength(20, ErrorMessage = "Telefone deve ter no máximo 20 caracteres")]
    public string? Telefone { get; set; }
    
    /// <summary>
    /// Email de contato do fornecedor
    /// </summary>
    [EmailAddress(ErrorMessage = "Email deve ter um formato válido")]
    [StringLength(100, ErrorMessage = "Email deve ter no máximo 100 caracteres")]
    public string? Email { get; set; }
    
    /// <summary>
    /// Moeda padrão do fornecedor (0 = Real, 1 = Dólar)
    /// </summary>
    [Range(0, 1, ErrorMessage = "Moeda padrão deve ser 0 (Real) ou 1 (Dólar)")]
    public int MoedaPadrao { get; set; } = 0;
    
    /// <summary>
    /// Valor mínimo de pedido
    /// </summary>
    [Range(0, double.MaxValue, ErrorMessage = "Pedido mínimo deve ser maior ou igual a zero")]
    public decimal? PedidoMinimo { get; set; }
    
    /// <summary>
    /// Token para integração Lincros
    /// </summary>
    [StringLength(100, ErrorMessage = "Token Lincros deve ter no máximo 100 caracteres")]
    public string? TokenLincros { get; set; }
}
</AtualizarFornecedorRequest.cs>
<CriarFornecedorRequest.cs>
using System.ComponentModel.DataAnnotations;

namespace Agriis.Fornecedores.Aplicacao.DTOs;

/// <summary>
/// Request para criar um novo fornecedor
/// </summary>
public class CriarFornecedorRequest
{
    /// <summary>
    /// Nome/Razão social do fornecedor
    /// </summary>
    [Required(ErrorMessage = "Nome é obrigatório")]
    [StringLength(200, ErrorMessage = "Nome deve ter no máximo 200 caracteres")]
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// CNPJ do fornecedor
    /// </summary>
    [Required(ErrorMessage = "CNPJ é obrigatório")]
    [StringLength(18, ErrorMessage = "CNPJ deve ter no máximo 18 caracteres")]
    public string Cnpj { get; set; } = string.Empty;
    
    /// <summary>
    /// Inscrição estadual do fornecedor
    /// </summary>
    [StringLength(20, ErrorMessage = "Inscrição estadual deve ter no máximo 20 caracteres")]
    public string? InscricaoEstadual { get; set; }
    
    /// <summary>
    /// Endereço completo do fornecedor
    /// </summary>
    [StringLength(500, ErrorMessage = "Endereço deve ter no máximo 500 caracteres")]
    public string? Endereco { get; set; }
    
    /// <summary>
    /// Telefone de contato do fornecedor
    /// </summary>
    [StringLength(20, ErrorMessage = "Telefone deve ter no máximo 20 caracteres")]
    public string? Telefone { get; set; }
    
    /// <summary>
    /// Email de contato do fornecedor
    /// </summary>
    [EmailAddress(ErrorMessage = "Email deve ter um formato válido")]
    [StringLength(100, ErrorMessage = "Email deve ter no máximo 100 caracteres")]
    public string? Email { get; set; }
    
    /// <summary>
    /// Moeda padrão do fornecedor (0 = Real, 1 = Dólar)
    /// </summary>
    [Range(0, 1, ErrorMessage = "Moeda padrão deve ser 0 (Real) ou 1 (Dólar)")]
    public int MoedaPadrao { get; set; } = 0;
    
    /// <summary>
    /// Valor mínimo de pedido
    /// </summary>
    [Range(0, double.MaxValue, ErrorMessage = "Pedido mínimo deve ser maior ou igual a zero")]
    public decimal? PedidoMinimo { get; set; }
    
    /// <summary>
    /// Token para integração Lincros
    /// </summary>
    [StringLength(100, ErrorMessage = "Token Lincros deve ter no máximo 100 caracteres")]
    public string? TokenLincros { get; set; }
}
</CriarFornecedorRequest.cs>
<FornecedorDto.cs>
using System.Text.Json;

namespace Agriis.Fornecedores.Aplicacao.DTOs;

/// <summary>
/// DTO para dados do fornecedor
/// </summary>
public class FornecedorDto
{
    /// <summary>
    /// ID do fornecedor
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome/Razão social do fornecedor
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// CNPJ do fornecedor
    /// </summary>
    public string Cnpj { get; set; } = string.Empty;
    
    /// <summary>
    /// CNPJ formatado
    /// </summary>
    public string CnpjFormatado { get; set; } = string.Empty;
    
    /// <summary>
    /// Inscrição estadual do fornecedor
    /// </summary>
    public string? InscricaoEstadual { get; set; }
    
    /// <summary>
    /// Endereço completo do fornecedor
    /// </summary>
    public string? Endereco { get; set; }
    
    /// <summary>
    /// Telefone de contato do fornecedor
    /// </summary>
    public string? Telefone { get; set; }
    
    /// <summary>
    /// Email de contato do fornecedor
    /// </summary>
    public string? Email { get; set; }
    
    /// <summary>
    /// URL da logo do fornecedor
    /// </summary>
    public string? LogoUrl { get; set; }
    
    /// <summary>
    /// Moeda padrão do fornecedor (0 = Real, 1 = Dólar)
    /// </summary>
    public int MoedaPadrao { get; set; }
    
    /// <summary>
    /// Nome da moeda padrão
    /// </summary>
    public string MoedaPadraoNome { get; set; } = string.Empty;
    
    /// <summary>
    /// Valor mínimo de pedido
    /// </summary>
    public decimal? PedidoMinimo { get; set; }
    
    /// <summary>
    /// Token para integração Lincros
    /// </summary>
    public string? TokenLincros { get; set; }
    
    /// <summary>
    /// Indica se o fornecedor está ativo
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// Dados adicionais em formato JSON
    /// </summary>
    public JsonDocument? DadosAdicionais { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
    
    /// <summary>
    /// Lista de usuários associados ao fornecedor
    /// </summary>
    public List<UsuarioFornecedorDto> Usuarios { get; set; } = new();
}
</FornecedorDto.cs>
<UsuarioFornecedorDto.cs>
namespace Agriis.Fornecedores.Aplicacao.DTOs;

/// <summary>
/// DTO para associação usuário-fornecedor
/// </summary>
public class UsuarioFornecedorDto
{
    /// <summary>
    /// ID da associação
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// ID do usuário
    /// </summary>
    public int UsuarioId { get; set; }
    
    /// <summary>
    /// Nome do usuário
    /// </summary>
    public string UsuarioNome { get; set; } = string.Empty;
    
    /// <summary>
    /// Email do usuário
    /// </summary>
    public string UsuarioEmail { get; set; } = string.Empty;
    
    /// <summary>
    /// ID do fornecedor
    /// </summary>
    public int FornecedorId { get; set; }
    
    /// <summary>
    /// Nome do fornecedor
    /// </summary>
    public string FornecedorNome { get; set; } = string.Empty;
    
    /// <summary>
    /// Role/perfil do usuário no fornecedor
    /// </summary>
    public int Role { get; set; }
    
    /// <summary>
    /// Nome do role
    /// </summary>
    public string RoleNome { get; set; } = string.Empty;
    
    /// <summary>
    /// Indica se o usuário está ativo no fornecedor
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// Data de início da associação
    /// </summary>
    public DateTime DataInicio { get; set; }
    
    /// <summary>
    /// Data de fim da associação
    /// </summary>
    public DateTime? DataFim { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
    
    /// <summary>
    /// Lista de territórios de atuação
    /// </summary>
    public List<UsuarioFornecedorTerritorioDto> Territorios { get; set; } = new();
}
</UsuarioFornecedorDto.cs>
<UsuarioFornecedorTerritorioDto.cs>
using System.Text.Json;

namespace Agriis.Fornecedores.Aplicacao.DTOs;

/// <summary>
/// DTO para território de usuário fornecedor
/// </summary>
public class UsuarioFornecedorTerritorioDto
{
    /// <summary>
    /// ID do território
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// ID da associação usuário-fornecedor
    /// </summary>
    public int UsuarioFornecedorId { get; set; }
    
    /// <summary>
    /// Estados de atuação em formato JSON
    /// </summary>
    public JsonDocument Estados { get; set; } = null!;
    
    /// <summary>
    /// Lista de estados (para facilitar o uso)
    /// </summary>
    public List<string> EstadosLista { get; set; } = new();
    
    /// <summary>
    /// Municípios específicos em formato JSON
    /// </summary>
    public JsonDocument? Municipios { get; set; }
    
    /// <summary>
    /// Lista de municípios por estado (para facilitar o uso)
    /// </summary>
    public Dictionary<string, List<string>> MunicipiosLista { get; set; } = new();
    
    /// <summary>
    /// Indica se é território padrão
    /// </summary>
    public bool TerritorioPadrao { get; set; }
    
    /// <summary>
    /// Indica se o território está ativo
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
}
</UsuarioFornecedorTerritorioDto.cs>
<IFornecedorService.cs>
using Agriis.Fornecedores.Aplicacao.DTOs;

namespace Agriis.Fornecedores.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de aplicação de fornecedores
/// </summary>
public interface IFornecedorService
{
    /// <summary>
    /// Obtém todos os fornecedores
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de fornecedores</returns>
    Task<IEnumerable<FornecedorDto>> ObterTodosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém um fornecedor por ID
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Fornecedor encontrado ou null</returns>
    Task<FornecedorDto?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém um fornecedor por CNPJ
    /// </summary>
    /// <param name="cnpj">CNPJ do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Fornecedor encontrado ou null</returns>
    Task<FornecedorDto?> ObterPorCnpjAsync(string cnpj, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém fornecedores ativos
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de fornecedores ativos</returns>
    Task<IEnumerable<FornecedorDto>> ObterAtivosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém fornecedores por território
    /// </summary>
    /// <param name="uf">UF do estado</param>
    /// <param name="municipio">Nome do município (opcional)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de fornecedores que atendem o território</returns>
    Task<IEnumerable<FornecedorDto>> ObterPorTerritorioAsync(string uf, string? municipio = null, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém fornecedores com filtros avançados
    /// </summary>
    /// <param name="nome">Filtro por nome (opcional)</param>
    /// <param name="cnpj">Filtro por CNPJ (opcional)</param>
    /// <param name="ativo">Filtro por status ativo (opcional)</param>
    /// <param name="moedaPadrao">Filtro por moeda padrão (opcional)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de fornecedores filtrados</returns>
    Task<IEnumerable<FornecedorDto>> ObterComFiltrosAsync(
        string? nome = null,
        string? cnpj = null,
        bool? ativo = null,
        int? moedaPadrao = null,
        CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Cria um novo fornecedor
    /// </summary>
    /// <param name="request">Dados do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Fornecedor criado</returns>
    Task<FornecedorDto> CriarAsync(CriarFornecedorRequest request, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Atualiza um fornecedor existente
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <param name="request">Novos dados do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Fornecedor atualizado</returns>
    Task<FornecedorDto> AtualizarAsync(int id, AtualizarFornecedorRequest request, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Ativa um fornecedor
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task AtivarAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Desativa um fornecedor
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task DesativarAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Define a logo do fornecedor
    /// </summary>
    /// <param name="id">ID do fornecedor</param>
    /// <param name="logoUrl">URL da logo</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task DefinirLogoAsync(int id, string? logoUrl, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se um CNPJ está disponível
    /// </summary>
    /// <param name="cnpj">CNPJ a verificar</param>
    /// <param name="fornecedorIdExcluir">ID do fornecedor a excluir da verificação</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se disponível</returns>
    Task<bool> VerificarCnpjDisponivelAsync(string cnpj, int? fornecedorIdExcluir = null, CancellationToken cancellationToken = default);
}
</IFornecedorService.cs>
<FornecedorMappingProfile.cs>
using AutoMapper;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Fornecedores.Aplicacao.DTOs;
using Agriis.Fornecedores.Dominio.Entidades;

namespace Agriis.Fornecedores.Aplicacao.Mapeamentos;

/// <summary>
/// Profile do AutoMapper para mapeamento de entidades de fornecedores
/// </summary>
public class FornecedorMappingProfile : Profile
{
    public FornecedorMappingProfile()
    {
        // Mapeamento Fornecedor -> FornecedorDto
        CreateMap<Fornecedor, FornecedorDto>()
            .ForMember(dest => dest.Cnpj, opt => opt.MapFrom(src => src.Cnpj.Valor))
            .ForMember(dest => dest.CnpjFormatado, opt => opt.MapFrom(src => src.Cnpj.ValorFormatado))
            .ForMember(dest => dest.MoedaPadrao, opt => opt.MapFrom(src => (int)src.MoedaPadrao))
            .ForMember(dest => dest.MoedaPadraoNome, opt => opt.MapFrom(src => ObterNomeMoeda(src.MoedaPadrao)))
            .ForMember(dest => dest.Usuarios, opt => opt.MapFrom(src => src.UsuariosFornecedores));

        // Mapeamento UsuarioFornecedor -> UsuarioFornecedorDto
        CreateMap<UsuarioFornecedor, UsuarioFornecedorDto>()
            .ForMember(dest => dest.UsuarioNome, opt => opt.MapFrom(src => src.Usuario != null ? src.Usuario.Nome : string.Empty))
            .ForMember(dest => dest.UsuarioEmail, opt => opt.MapFrom(src => src.Usuario != null ? src.Usuario.Email : string.Empty))
            .ForMember(dest => dest.FornecedorNome, opt => opt.MapFrom(src => src.Fornecedor != null ? src.Fornecedor.Nome : string.Empty))
            .ForMember(dest => dest.Role, opt => opt.MapFrom(src => (int)src.Role))
            .ForMember(dest => dest.RoleNome, opt => opt.MapFrom(src => ObterNomeRole(src.Role)))
            .ForMember(dest => dest.Territorios, opt => opt.MapFrom(src => src.Territorios));

        // Mapeamento UsuarioFornecedorTerritorio -> UsuarioFornecedorTerritorioDto
        CreateMap<UsuarioFornecedorTerritorio, UsuarioFornecedorTerritorioDto>()
            .ForMember(dest => dest.EstadosLista, opt => opt.MapFrom(src => ExtrairEstadosLista(src)))
            .ForMember(dest => dest.MunicipiosLista, opt => opt.MapFrom(src => ExtrairMunicipiosLista(src)));
    }

    private static string ObterNomeMoeda(Moeda moeda)
    {
        return moeda switch
        {
            Moeda.Real => "Real",
            Moeda.Dolar => "Dólar",
            _ => "Desconhecido"
        };
    }

    private static string ObterNomeRole(Roles role)
    {
        return role switch
        {
            Roles.RoleFornecedorWebAdmin => "Administrador",
            Roles.RoleFornecedorWebRepresentante => "Representante Comercial",
            Roles.RoleComprador => "Comprador",
            Roles.RoleAdmin => "Administrador do Sistema",
            _ => "Desconhecido"
        };
    }   
 private static List<string> ExtrairEstadosLista(UsuarioFornecedorTerritorio territorio)
    {
        try
        {
            if (territorio.Estados == null)
                return new List<string>();

            return territorio.Estados.RootElement.EnumerateArray()
                .Select(e => e.GetString())
                .Where(e => !string.IsNullOrEmpty(e))
                .ToList()!;
        }
        catch
        {
            return new List<string>();
        }
    }

    private static Dictionary<string, List<string>> ExtrairMunicipiosLista(UsuarioFornecedorTerritorio territorio)
    {
        try
        {
            var resultado = new Dictionary<string, List<string>>();

            if (territorio.Municipios == null)
                return resultado;

            foreach (var item in territorio.Municipios.RootElement.EnumerateArray())
            {
                if (item.TryGetProperty("estado", out var estadoElement) &&
                    item.TryGetProperty("municipios", out var municipiosElement))
                {
                    var estado = estadoElement.GetString();
                    if (!string.IsNullOrEmpty(estado))
                    {
                        var municipios = municipiosElement.EnumerateArray()
                            .Select(m => m.GetString())
                            .Where(m => !string.IsNullOrEmpty(m))
                            .ToList()!;

                        resultado[estado] = municipios;
                    }
                }
            }

            return resultado;
        }
        catch
        {
            return new Dictionary<string, List<string>>();
        }
    }
}
</FornecedorMappingProfile.cs>
<FornecedorService.cs>
using AutoMapper;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Fornecedores.Aplicacao.DTOs;
using Agriis.Fornecedores.Aplicacao.Interfaces;
using Agriis.Fornecedores.Dominio.Entidades;
using Agriis.Fornecedores.Dominio.Interfaces;
using Agriis.Fornecedores.Dominio.Servicos;

namespace Agriis.Fornecedores.Aplicacao.Servicos;

/// <summary>
/// Serviço de aplicação para fornecedores
/// </summary>
public class FornecedorService : IFornecedorService
{
    private readonly IFornecedorRepository _fornecedorRepository;
    private readonly FornecedorDomainService _domainService;
    private readonly IMapper _mapper;

    public FornecedorService(
        IFornecedorRepository fornecedorRepository,
        FornecedorDomainService domainService,
        IMapper mapper)
    {
        _fornecedorRepository = fornecedorRepository ?? throw new ArgumentNullException(nameof(fornecedorRepository));
        _domainService = domainService ?? throw new ArgumentNullException(nameof(domainService));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
    }

    public async Task<IEnumerable<FornecedorDto>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        var fornecedores = await _fornecedorRepository.ObterTodosAsync(cancellationToken);
        return _mapper.Map<IEnumerable<FornecedorDto>>(fornecedores);
    }

    public async Task<FornecedorDto?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        var fornecedor = await _fornecedorRepository.ObterPorIdAsync(id, cancellationToken);
        return fornecedor != null ? _mapper.Map<FornecedorDto>(fornecedor) : null;
    }

    public async Task<FornecedorDto?> ObterPorCnpjAsync(string cnpj, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(cnpj))
            return null;

        var fornecedor = await _fornecedorRepository.ObterPorCnpjAsync(cnpj, cancellationToken);
        return fornecedor != null ? _mapper.Map<FornecedorDto>(fornecedor) : null;
    }

    public async Task<IEnumerable<FornecedorDto>> ObterAtivosAsync(CancellationToken cancellationToken = default)
    {
        var fornecedores = await _fornecedorRepository.ObterAtivosAsync(cancellationToken);
        return _mapper.Map<IEnumerable<FornecedorDto>>(fornecedores);
    }

    public async Task<IEnumerable<FornecedorDto>> ObterPorTerritorioAsync(string uf, string? municipio = null, CancellationToken cancellationToken = default)
    {
        var fornecedores = await _domainService.ObterFornecedoresPorTerritorioAsync(uf, municipio, cancellationToken);
        return _mapper.Map<IEnumerable<FornecedorDto>>(fornecedores);
    }

    public async Task<IEnumerable<FornecedorDto>> ObterComFiltrosAsync(
        string? nome = null,
        string? cnpj = null,
        bool? ativo = null,
        int? moedaPadrao = null,
        CancellationToken cancellationToken = default)
    {
        var fornecedores = await _fornecedorRepository.ObterComFiltrosAsync(nome, cnpj, ativo, moedaPadrao, cancellationToken);
        return _mapper.Map<IEnumerable<FornecedorDto>>(fornecedores);
    }

    public async Task<FornecedorDto> CriarAsync(CriarFornecedorRequest request, CancellationToken cancellationToken = default)
    {
        if (request == null)
            throw new ArgumentNullException(nameof(request));

        // Validar CNPJ
        var cnpj = new Cnpj(request.Cnpj);
        var cnpjDisponivel = await _domainService.ValidarCnpjDisponivelAsync(cnpj, null, cancellationToken);
        if (!cnpjDisponivel)
            throw new InvalidOperationException("CNPJ já está em uso por outro fornecedor");

        // Criar fornecedor
        var fornecedor = new Fornecedor(
            request.Nome,
            cnpj,
            request.InscricaoEstadual,
            request.Endereco,
            request.Telefone,
            request.Email,
            (Moeda)request.MoedaPadrao);

        if (request.PedidoMinimo.HasValue)
            fornecedor.DefinirPedidoMinimo(request.PedidoMinimo.Value);

        if (!string.IsNullOrWhiteSpace(request.TokenLincros))
            fornecedor.DefinirTokenLincros(request.TokenLincros);

        var fornecedorCriado = await _fornecedorRepository.AdicionarAsync(fornecedor, cancellationToken);
        return _mapper.Map<FornecedorDto>(fornecedorCriado);
    }

    public async Task<FornecedorDto> AtualizarAsync(int id, AtualizarFornecedorRequest request, CancellationToken cancellationToken = default)
    {
        if (request == null)
            throw new ArgumentNullException(nameof(request));

        var fornecedor = await _fornecedorRepository.ObterPorIdAsync(id, cancellationToken);
        if (fornecedor == null)
            throw new InvalidOperationException("Fornecedor não encontrado");

        // Atualizar dados
        fornecedor.AtualizarDados(
            request.Nome,
            request.InscricaoEstadual,
            request.Endereco,
            request.Telefone,
            request.Email);

        fornecedor.AlterarMoedaPadrao((Moeda)request.MoedaPadrao);
        fornecedor.DefinirPedidoMinimo(request.PedidoMinimo);
        fornecedor.DefinirTokenLincros(request.TokenLincros);

        await _fornecedorRepository.AtualizarAsync(fornecedor, cancellationToken);
        return _mapper.Map<FornecedorDto>(fornecedor);
    }   
 public async Task AtivarAsync(int id, CancellationToken cancellationToken = default)
    {
        var fornecedor = await _fornecedorRepository.ObterPorIdAsync(id, cancellationToken);
        if (fornecedor == null)
            throw new InvalidOperationException("Fornecedor não encontrado");

        fornecedor.Ativar();
        await _fornecedorRepository.AtualizarAsync(fornecedor, cancellationToken);
    }

    public async Task DesativarAsync(int id, CancellationToken cancellationToken = default)
    {
        var fornecedor = await _fornecedorRepository.ObterPorIdAsync(id, cancellationToken);
        if (fornecedor == null)
            throw new InvalidOperationException("Fornecedor não encontrado");

        fornecedor.Desativar();
        await _fornecedorRepository.AtualizarAsync(fornecedor, cancellationToken);
    }

    public async Task DefinirLogoAsync(int id, string? logoUrl, CancellationToken cancellationToken = default)
    {
        var fornecedor = await _fornecedorRepository.ObterPorIdAsync(id, cancellationToken);
        if (fornecedor == null)
            throw new InvalidOperationException("Fornecedor não encontrado");

        fornecedor.DefinirLogo(logoUrl);
        await _fornecedorRepository.AtualizarAsync(fornecedor, cancellationToken);
    }

    public async Task<bool> VerificarCnpjDisponivelAsync(string cnpj, int? fornecedorIdExcluir = null, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(cnpj))
            return false;

        try
        {
            var cnpjObj = new Cnpj(cnpj);
            return await _domainService.ValidarCnpjDisponivelAsync(cnpjObj, fornecedorIdExcluir, cancellationToken);
        }
        catch
        {
            return false; // CNPJ inválido
        }
    }
}
</FornecedorService.cs>
<Fornecedor.cs>
using System.Text.Json;
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Fornecedores.Dominio.Entidades;

/// <summary>
/// Entidade que representa um fornecedor de insumos agrícolas
/// </summary>
public class Fornecedor : EntidadeRaizAgregada
{
    /// <summary>
    /// Nome/Razão social do fornecedor
    /// </summary>
    public string Nome { get; private set; } = string.Empty;
    
    /// <summary>
    /// CNPJ do fornecedor
    /// </summary>
    public Cnpj Cnpj { get; private set; } = null!;
    
    /// <summary>
    /// Inscrição estadual do fornecedor
    /// </summary>
    public string? InscricaoEstadual { get; private set; }
    
    /// <summary>
    /// Endereço completo do fornecedor
    /// </summary>
    public string? Endereco { get; private set; }
    
    /// <summary>
    /// Telefone de contato do fornecedor
    /// </summary>
    public string? Telefone { get; private set; }
    
    /// <summary>
    /// Email de contato do fornecedor
    /// </summary>
    public string? Email { get; private set; }
    
    /// <summary>
    /// URL da logo do fornecedor (AWS S3)
    /// </summary>
    public string? LogoUrl { get; private set; }
    
    /// <summary>
    /// Moeda padrão do fornecedor
    /// </summary>
    public Moeda MoedaPadrao { get; private set; } = Moeda.Real;    
 
   /// <summary>
    /// Valor mínimo de pedido para este fornecedor
    /// </summary>
    public decimal? PedidoMinimo { get; private set; }
    
    /// <summary>
    /// Token para integração com sistema Lincros
    /// </summary>
    public string? TokenLincros { get; private set; }
    
    /// <summary>
    /// Indica se o fornecedor está ativo
    /// </summary>
    public bool Ativo { get; private set; } = true;
    
    /// <summary>
    /// Dados adicionais em formato JSON
    /// </summary>
    public JsonDocument? DadosAdicionais { get; private set; }
    
    // Navigation Properties
    /// <summary>
    /// Usuários associados ao fornecedor
    /// </summary>
    public virtual ICollection<UsuarioFornecedor> UsuariosFornecedores { get; private set; } = new List<UsuarioFornecedor>();
    
    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected Fornecedor() { }
    
    /// <summary>
    /// Construtor para criar um novo fornecedor
    /// </summary>
    /// <param name="nome">Nome/Razão social</param>
    /// <param name="cnpj">CNPJ do fornecedor</param>
    /// <param name="inscricaoEstadual">Inscrição estadual</param>
    /// <param name="endereco">Endereço</param>
    /// <param name="telefone">Telefone</param>
    /// <param name="email">Email</param>
    /// <param name="moedaPadrao">Moeda padrão</param>
    public Fornecedor(
        string nome,
        Cnpj cnpj,
        string? inscricaoEstadual = null,
        string? endereco = null,
        string? telefone = null,
        string? email = null,
        Moeda moedaPadrao = Moeda.Real)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome do fornecedor é obrigatório", nameof(nome));
            
        Nome = nome.Trim();
        Cnpj = cnpj ?? throw new ArgumentNullException(nameof(cnpj));
        InscricaoEstadual = inscricaoEstadual?.Trim();
        Endereco = endereco?.Trim();
        Telefone = telefone?.Trim();
        Email = email?.Trim();
        MoedaPadrao = moedaPadrao;
        Ativo = true;
        UsuariosFornecedores = new List<UsuarioFornecedor>();
    }    

    /// <summary>
    /// Atualiza os dados básicos do fornecedor
    /// </summary>
    /// <param name="nome">Nome/Razão social</param>
    /// <param name="inscricaoEstadual">Inscrição estadual</param>
    /// <param name="endereco">Endereço</param>
    /// <param name="telefone">Telefone</param>
    /// <param name="email">Email</param>
    public void AtualizarDados(
        string nome,
        string? inscricaoEstadual = null,
        string? endereco = null,
        string? telefone = null,
        string? email = null)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome do fornecedor é obrigatório", nameof(nome));
            
        Nome = nome.Trim();
        InscricaoEstadual = inscricaoEstadual?.Trim();
        Endereco = endereco?.Trim();
        Telefone = telefone?.Trim();
        Email = email?.Trim();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define a URL da logo do fornecedor
    /// </summary>
    /// <param name="logoUrl">URL da logo</param>
    public void DefinirLogo(string? logoUrl)
    {
        LogoUrl = logoUrl?.Trim();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define o pedido mínimo do fornecedor
    /// </summary>
    /// <param name="pedidoMinimo">Valor mínimo do pedido</param>
    public void DefinirPedidoMinimo(decimal? pedidoMinimo)
    {
        if (pedidoMinimo.HasValue && pedidoMinimo.Value < 0)
            throw new ArgumentException("Pedido mínimo não pode ser negativo", nameof(pedidoMinimo));
            
        PedidoMinimo = pedidoMinimo;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define o token Lincros para integração
    /// </summary>
    /// <param name="tokenLincros">Token de integração</param>
    public void DefinirTokenLincros(string? tokenLincros)
    {
        TokenLincros = tokenLincros?.Trim();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Ativa o fornecedor
    /// </summary>
    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Desativa o fornecedor
    /// </summary>
    public void Desativar()
    {
        if (Ativo)
        {
            Ativo = false;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Armazena dados adicionais em formato JSON
    /// </summary>
    /// <param name="dadosAdicionais">Dados em formato JSON</param>
    public void ArmazenarDadosAdicionais(JsonDocument? dadosAdicionais)
    {
        DadosAdicionais = dadosAdicionais;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Altera a moeda padrão do fornecedor
    /// </summary>
    /// <param name="moedaPadrao">Nova moeda padrão</param>
    public void AlterarMoedaPadrao(Moeda moedaPadrao)
    {
        MoedaPadrao = moedaPadrao;
        AtualizarDataModificacao();
    }
}
</Fornecedor.cs>
<UsuarioFornecedor.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Fornecedores.Dominio.Entidades;

/// <summary>
/// Entidade que representa a associação entre usuário e fornecedor
/// </summary>
public class UsuarioFornecedor : EntidadeBase
{
    /// <summary>
    /// ID do usuário
    /// </summary>
    public int UsuarioId { get; private set; }
    
    /// <summary>
    /// ID do fornecedor
    /// </summary>
    public int FornecedorId { get; private set; }
    
    /// <summary>
    /// Role/perfil do usuário no fornecedor
    /// </summary>
    public Roles Role { get; private set; }
    
    /// <summary>
    /// Indica se o usuário está ativo no fornecedor
    /// </summary>
    public bool Ativo { get; private set; } = true;
    
    /// <summary>
    /// Data de início da associação
    /// </summary>
    public DateTime DataInicio { get; private set; }
    
    /// <summary>
    /// Data de fim da associação (opcional)
    /// </summary>
    public DateTime? DataFim { get; private set; }
    
    // Navigation Properties
    /// <summary>
    /// Usuário associado
    /// </summary>
    public virtual Agriis.Usuarios.Dominio.Entidades.Usuario Usuario { get; private set; } = null!;
    
    /// <summary>
    /// Fornecedor associado
    /// </summary>
    public virtual Fornecedor Fornecedor { get; private set; } = null!;
    
    /// <summary>
    /// Territórios de atuação do usuário
    /// </summary>
    public virtual ICollection<UsuarioFornecedorTerritorio> Territorios { get; private set; } = new List<UsuarioFornecedorTerritorio>();    

    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected UsuarioFornecedor() { }
    
    /// <summary>
    /// Construtor para criar uma nova associação usuário-fornecedor
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="role">Role do usuário</param>
    /// <param name="dataInicio">Data de início da associação</param>
    public UsuarioFornecedor(
        int usuarioId,
        int fornecedorId,
        Roles role,
        DateTime? dataInicio = null)
    {
        if (usuarioId <= 0)
            throw new ArgumentException("ID do usuário deve ser maior que zero", nameof(usuarioId));
            
        if (fornecedorId <= 0)
            throw new ArgumentException("ID do fornecedor deve ser maior que zero", nameof(fornecedorId));
            
        UsuarioId = usuarioId;
        FornecedorId = fornecedorId;
        Role = role;
        DataInicio = dataInicio ?? DateTime.UtcNow;
        Ativo = true;
        Territorios = new List<UsuarioFornecedorTerritorio>();
    }
    
    /// <summary>
    /// Ativa a associação usuário-fornecedor
    /// </summary>
    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            DataFim = null;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Desativa a associação usuário-fornecedor
    /// </summary>
    /// <param name="dataFim">Data de fim da associação</param>
    public void Desativar(DateTime? dataFim = null)
    {
        if (Ativo)
        {
            Ativo = false;
            DataFim = dataFim ?? DateTime.UtcNow;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Altera o role do usuário no fornecedor
    /// </summary>
    /// <param name="novoRole">Novo role</param>
    public void AlterarRole(Roles novoRole)
    {
        Role = novoRole;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Verifica se o usuário é administrador do fornecedor
    /// </summary>
    /// <returns>True se é administrador</returns>
    public bool EhAdministrador()
    {
        return Role == Roles.RoleFornecedorWebAdmin;
    }
    
    /// <summary>
    /// Verifica se o usuário é representante comercial
    /// </summary>
    /// <returns>True se é representante</returns>
    public bool EhRepresentante()
    {
        return Role == Roles.RoleFornecedorWebRepresentante;
    }
}
</UsuarioFornecedor.cs>
<UsuarioFornecedorTerritorio.cs>
using System.Text.Json;
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Fornecedores.Dominio.Entidades;

/// <summary>
/// Entidade que representa o território de atuação de um usuário fornecedor
/// </summary>
public class UsuarioFornecedorTerritorio : EntidadeBase
{
    /// <summary>
    /// ID da associação usuário-fornecedor
    /// </summary>
    public int UsuarioFornecedorId { get; private set; }
    
    /// <summary>
    /// Estados de atuação em formato JSON
    /// Exemplo: ["SP", "MG", "RJ"]
    /// </summary>
    public JsonDocument Estados { get; private set; } = null!;
    
    /// <summary>
    /// Municípios específicos de atuação em formato JSON
    /// Exemplo: [{"estado": "SP", "municipios": ["São Paulo", "Campinas"]}, ...]
    /// </summary>
    public JsonDocument? Municipios { get; private set; }
    
    /// <summary>
    /// Indica se é território padrão (aplicado quando não há configuração específica)
    /// </summary>
    public bool TerritorioPadrao { get; private set; } = false;
    
    /// <summary>
    /// Indica se o território está ativo
    /// </summary>
    public bool Ativo { get; private set; } = true;
    
    // Navigation Properties
    /// <summary>
    /// Associação usuário-fornecedor
    /// </summary>
    public virtual UsuarioFornecedor UsuarioFornecedor { get; private set; } = null!;
    
    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected UsuarioFornecedorTerritorio() { }
    
    /// <summary>
    /// Construtor para criar um novo território
    /// </summary>
    /// <param name="usuarioFornecedorId">ID da associação usuário-fornecedor</param>
    /// <param name="estados">Estados de atuação</param>
    /// <param name="municipios">Municípios específicos (opcional)</param>
    /// <param name="territorioPadrao">Se é território padrão</param>
    public UsuarioFornecedorTerritorio(
        int usuarioFornecedorId,
        JsonDocument estados,
        JsonDocument? municipios = null,
        bool territorioPadrao = false)
    {
        if (usuarioFornecedorId <= 0)
            throw new ArgumentException("ID da associação usuário-fornecedor deve ser maior que zero", nameof(usuarioFornecedorId));
            
        UsuarioFornecedorId = usuarioFornecedorId;
        Estados = estados ?? throw new ArgumentNullException(nameof(estados));
        Municipios = municipios;
        TerritorioPadrao = territorioPadrao;
        Ativo = true;
    }    
  
  /// <summary>
    /// Atualiza os estados de atuação
    /// </summary>
    /// <param name="estados">Novos estados</param>
    public void AtualizarEstados(JsonDocument estados)
    {
        Estados = estados ?? throw new ArgumentNullException(nameof(estados));
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza os municípios específicos
    /// </summary>
    /// <param name="municipios">Novos municípios</param>
    public void AtualizarMunicipios(JsonDocument? municipios)
    {
        Municipios = municipios;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define como território padrão
    /// </summary>
    /// <param name="territorioPadrao">Se é território padrão</param>
    public void DefinirTerritorioPadrao(bool territorioPadrao)
    {
        TerritorioPadrao = territorioPadrao;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Ativa o território
    /// </summary>
    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Desativa o território
    /// </summary>
    public void Desativar()
    {
        if (Ativo)
        {
            Ativo = false;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Verifica se o território inclui um estado específico
    /// </summary>
    /// <param name="uf">UF do estado</param>
    /// <returns>True se inclui o estado</returns>
    public bool IncluiEstado(string uf)
    {
        if (string.IsNullOrWhiteSpace(uf) || Estados == null)
            return false;
            
        try
        {
            var estados = Estados.RootElement.EnumerateArray()
                .Select(e => e.GetString())
                .Where(e => !string.IsNullOrEmpty(e))
                .ToList();
                
            return estados.Contains(uf.ToUpper());
        }
        catch
        {
            return false;
        }
    }
    
    /// <summary>
    /// Verifica se o território inclui um município específico
    /// </summary>
    /// <param name="uf">UF do estado</param>
    /// <param name="municipio">Nome do município</param>
    /// <returns>True se inclui o município</returns>
    public bool IncluiMunicipio(string uf, string municipio)
    {
        if (string.IsNullOrWhiteSpace(uf) || string.IsNullOrWhiteSpace(municipio) || Municipios == null)
            return false;
            
        try
        {
            foreach (var item in Municipios.RootElement.EnumerateArray())
            {
                if (item.TryGetProperty("estado", out var estadoElement) &&
                    estadoElement.GetString()?.Equals(uf, StringComparison.OrdinalIgnoreCase) == true &&
                    item.TryGetProperty("municipios", out var municipiosElement))
                {
                    var municipiosLista = municipiosElement.EnumerateArray()
                        .Select(m => m.GetString())
                        .Where(m => !string.IsNullOrEmpty(m))
                        .ToList();
                        
                    return municipiosLista.Any(m => m.Equals(municipio, StringComparison.OrdinalIgnoreCase));
                }
            }
            
            return false;
        }
        catch
        {
            return false;
        }
    }
}
</UsuarioFornecedorTerritorio.cs>
<IFornecedorRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Fornecedores.Dominio.Entidades;

namespace Agriis.Fornecedores.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de fornecedores
/// </summary>
public interface IFornecedorRepository : IRepository<Fornecedor>
{
    /// <summary>
    /// Obtém um fornecedor por CNPJ
    /// </summary>
    /// <param name="cnpj">CNPJ do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Fornecedor encontrado ou null</returns>
    Task<Fornecedor?> ObterPorCnpjAsync(string cnpj, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém fornecedores ativos
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de fornecedores ativos</returns>
    Task<IEnumerable<Fornecedor>> ObterAtivosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém fornecedores por território (estado/município)
    /// </summary>
    /// <param name="uf">UF do estado</param>
    /// <param name="municipio">Nome do município (opcional)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de fornecedores que atendem o território</returns>
    Task<IEnumerable<Fornecedor>> ObterPorTerritorioAsync(string uf, string? municipio = null, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém fornecedores com filtros avançados
    /// </summary>
    /// <param name="nome">Filtro por nome (opcional)</param>
    /// <param name="cnpj">Filtro por CNPJ (opcional)</param>
    /// <param name="ativo">Filtro por status ativo (opcional)</param>
    /// <param name="moedaPadrao">Filtro por moeda padrão (opcional)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de fornecedores filtrados</returns>
    Task<IEnumerable<Fornecedor>> ObterComFiltrosAsync(
        string? nome = null,
        string? cnpj = null,
        bool? ativo = null,
        int? moedaPadrao = null,
        CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe um fornecedor com o CNPJ especificado
    /// </summary>
    /// <param name="cnpj">CNPJ a verificar</param>
    /// <param name="fornecedorIdExcluir">ID do fornecedor a excluir da verificação (para updates)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se existe</returns>
    Task<bool> ExisteCnpjAsync(string cnpj, int? fornecedorIdExcluir = null, CancellationToken cancellationToken = default);
}
</IFornecedorRepository.cs>
<IUsuarioFornecedorRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Fornecedores.Dominio.Entidades;

namespace Agriis.Fornecedores.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de usuários fornecedores
/// </summary>
public interface IUsuarioFornecedorRepository : IRepository<UsuarioFornecedor>
{
    /// <summary>
    /// Obtém associações por usuário
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="apenasAtivos">Se deve retornar apenas ativos</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de associações do usuário</returns>
    Task<IEnumerable<UsuarioFornecedor>> ObterPorUsuarioAsync(int usuarioId, bool apenasAtivos = true, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém associações por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="apenasAtivos">Se deve retornar apenas ativos</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de associações do fornecedor</returns>
    Task<IEnumerable<UsuarioFornecedor>> ObterPorFornecedorAsync(int fornecedorId, bool apenasAtivos = true, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém uma associação específica usuário-fornecedor
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Associação encontrada ou null</returns>
    Task<UsuarioFornecedor?> ObterPorUsuarioFornecedorAsync(int usuarioId, int fornecedorId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuários por role no fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="role">Role desejado</param>
    /// <param name="apenasAtivos">Se deve retornar apenas ativos</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de usuários com o role especificado</returns>
    Task<IEnumerable<UsuarioFornecedor>> ObterPorRoleAsync(int fornecedorId, Roles role, bool apenasAtivos = true, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuários com territórios incluindo dados de território
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de usuários com territórios</returns>
    Task<IEnumerable<UsuarioFornecedor>> ObterComTerritoriosAsync(int fornecedorId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe uma associação ativa entre usuário e fornecedor
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se existe associação ativa</returns>
    Task<bool> ExisteAssociacaoAtivaAsync(int usuarioId, int fornecedorId, CancellationToken cancellationToken = default);
}
</IUsuarioFornecedorRepository.cs>
<IUsuarioFornecedorTerritorioRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Fornecedores.Dominio.Entidades;

namespace Agriis.Fornecedores.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de territórios de usuários fornecedores
/// </summary>
public interface IUsuarioFornecedorTerritorioRepository : IRepository<UsuarioFornecedorTerritorio>
{
    /// <summary>
    /// Obtém territórios por associação usuário-fornecedor
    /// </summary>
    /// <param name="usuarioFornecedorId">ID da associação usuário-fornecedor</param>
    /// <param name="apenasAtivos">Se deve retornar apenas ativos</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de territórios</returns>
    Task<IEnumerable<UsuarioFornecedorTerritorio>> ObterPorUsuarioFornecedorAsync(int usuarioFornecedorId, bool apenasAtivos = true, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém territórios por estado
    /// </summary>
    /// <param name="uf">UF do estado</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de territórios que incluem o estado</returns>
    Task<IEnumerable<UsuarioFornecedorTerritorio>> ObterPorEstadoAsync(string uf, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém territórios por município
    /// </summary>
    /// <param name="uf">UF do estado</param>
    /// <param name="municipio">Nome do município</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de territórios que incluem o município</returns>
    Task<IEnumerable<UsuarioFornecedorTerritorio>> ObterPorMunicipioAsync(string uf, string municipio, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém território padrão de uma associação usuário-fornecedor
    /// </summary>
    /// <param name="usuarioFornecedorId">ID da associação usuário-fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Território padrão ou null</returns>
    Task<UsuarioFornecedorTerritorio?> ObterTerritorioPadraoAsync(int usuarioFornecedorId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuários fornecedores que atendem um território específico
    /// </summary>
    /// <param name="uf">UF do estado</param>
    /// <param name="municipio">Nome do município (opcional)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de usuários fornecedores que atendem o território</returns>
    Task<IEnumerable<UsuarioFornecedor>> ObterUsuariosFornecedoresPorTerritorioAsync(string uf, string? municipio = null, CancellationToken cancellationToken = default);
}
</IUsuarioFornecedorTerritorioRepository.cs>
<FornecedorDomainService.cs>
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Fornecedores.Dominio.Entidades;
using Agriis.Fornecedores.Dominio.Interfaces;

namespace Agriis.Fornecedores.Dominio.Servicos;

/// <summary>
/// Serviço de domínio para regras de negócio relacionadas a fornecedores
/// </summary>
public class FornecedorDomainService
{
    private readonly IFornecedorRepository _fornecedorRepository;
    private readonly IUsuarioFornecedorRepository _usuarioFornecedorRepository;
    private readonly IUsuarioFornecedorTerritorioRepository _territorioRepository;

    public FornecedorDomainService(
        IFornecedorRepository fornecedorRepository,
        IUsuarioFornecedorRepository usuarioFornecedorRepository,
        IUsuarioFornecedorTerritorioRepository territorioRepository)
    {
        _fornecedorRepository = fornecedorRepository ?? throw new ArgumentNullException(nameof(fornecedorRepository));
        _usuarioFornecedorRepository = usuarioFornecedorRepository ?? throw new ArgumentNullException(nameof(usuarioFornecedorRepository));
        _territorioRepository = territorioRepository ?? throw new ArgumentNullException(nameof(territorioRepository));
    }

    /// <summary>
    /// Valida se um CNPJ pode ser usado para um fornecedor
    /// </summary>
    /// <param name="cnpj">CNPJ a validar</param>
    /// <param name="fornecedorIdExcluir">ID do fornecedor a excluir da validação (para updates)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se o CNPJ é válido e disponível</returns>
    public async Task<bool> ValidarCnpjDisponivelAsync(Cnpj cnpj, int? fornecedorIdExcluir = null, CancellationToken cancellationToken = default)
    {
        if (cnpj == null)
            return false;

        return !await _fornecedorRepository.ExisteCnpjAsync(cnpj.Valor, fornecedorIdExcluir, cancellationToken);
    }

    /// <summary>
    /// Verifica se um usuário pode ser associado a um fornecedor
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se pode ser associado</returns>
    public async Task<bool> PodeAssociarUsuarioAsync(int usuarioId, int fornecedorId, CancellationToken cancellationToken = default)
    {
        // Verifica se já existe uma associação ativa
        var associacaoExistente = await _usuarioFornecedorRepository.ExisteAssociacaoAtivaAsync(usuarioId, fornecedorId, cancellationToken);
        return !associacaoExistente;
    }

    /// <summary>
    /// Obtém fornecedores que atendem um território específico
    /// </summary>
    /// <param name="uf">UF do estado</param>
    /// <param name="municipio">Nome do município (opcional)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de fornecedores que atendem o território</returns>
    public async Task<IEnumerable<Fornecedor>> ObterFornecedoresPorTerritorioAsync(string uf, string? municipio = null, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(uf))
            return Enumerable.Empty<Fornecedor>();

        return await _fornecedorRepository.ObterPorTerritorioAsync(uf, municipio, cancellationToken);
    }
    
/// <summary>
    /// Verifica se um território pode ser definido como padrão
    /// </summary>
    /// <param name="usuarioFornecedorId">ID da associação usuário-fornecedor</param>
    /// <param name="territorioId">ID do território a ser definido como padrão</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se pode ser definido como padrão</returns>
    public async Task<bool> PodeDefinirTerritorioPadraoAsync(int usuarioFornecedorId, int territorioId, CancellationToken cancellationToken = default)
    {
        // Verifica se o território existe e pertence à associação
        var territorio = await _territorioRepository.ObterPorIdAsync(territorioId, cancellationToken);
        return territorio != null && territorio.UsuarioFornecedorId == usuarioFornecedorId && territorio.Ativo;
    }

    /// <summary>
    /// Remove o status de território padrão de outros territórios antes de definir um novo
    /// </summary>
    /// <param name="usuarioFornecedorId">ID da associação usuário-fornecedor</param>
    /// <param name="novoTerritorioPadraoId">ID do novo território padrão</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    public async Task RemoverOutrosTerritoriosPadraoAsync(int usuarioFornecedorId, int novoTerritorioPadraoId, CancellationToken cancellationToken = default)
    {
        var territorios = await _territorioRepository.ObterPorUsuarioFornecedorAsync(usuarioFornecedorId, true, cancellationToken);
        
        foreach (var territorio in territorios.Where(t => t.Id != novoTerritorioPadraoId && t.TerritorioPadrao))
        {
            territorio.DefinirTerritorioPadrao(false);
            await _territorioRepository.AtualizarAsync(territorio, cancellationToken);
        }
    }

    /// <summary>
    /// Valida se um pedido atende ao valor mínimo do fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="valorPedido">Valor total do pedido</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se atende ao valor mínimo</returns>
    public async Task<bool> ValidarPedidoMinimoAsync(int fornecedorId, decimal valorPedido, CancellationToken cancellationToken = default)
    {
        var fornecedor = await _fornecedorRepository.ObterPorIdAsync(fornecedorId, cancellationToken);
        
        if (fornecedor == null || !fornecedor.PedidoMinimo.HasValue)
            return true; // Se não há pedido mínimo definido, qualquer valor é válido
            
        return valorPedido >= fornecedor.PedidoMinimo.Value;
    }

    /// <summary>
    /// Obtém representantes comerciais de um fornecedor para um território específico
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="uf">UF do estado</param>
    /// <param name="municipio">Nome do município (opcional)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de representantes que atendem o território</returns>
    public async Task<IEnumerable<UsuarioFornecedor>> ObterRepresentantesPorTerritorioAsync(int fornecedorId, string uf, string? municipio = null, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(uf))
            return Enumerable.Empty<UsuarioFornecedor>();

        // Obtém usuários fornecedores que atendem o território
        var usuariosFornecedores = await _territorioRepository.ObterUsuariosFornecedoresPorTerritorioAsync(uf, municipio, cancellationToken);
        
        // Filtra apenas representantes comerciais do fornecedor específico
        return usuariosFornecedores.Where(uf => uf.FornecedorId == fornecedorId && uf.EhRepresentante() && uf.Ativo);
    }
}
</FornecedorDomainService.cs>
<FornecedorConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Fornecedores.Dominio.Entidades;

namespace Agriis.Fornecedores.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Fornecedor
/// </summary>
public class FornecedorConfiguration : IEntityTypeConfiguration<Fornecedor>
{
    public void Configure(EntityTypeBuilder<Fornecedor> builder)
    {
        // Tabela
        builder.ToTable("Fornecedor");

        // Chave primária
        builder.HasKey(f => f.Id);

        // Propriedades básicas
        builder.Property(f => f.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(f => f.Nome)
            .HasColumnName("Nome")
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(f => f.InscricaoEstadual)
            .HasColumnName("InscricaoEstadual")
            .HasMaxLength(50);

        builder.Property(f => f.Endereco)
            .HasColumnName("Endereco")
            .HasMaxLength(500);

        builder.Property(f => f.Telefone)
            .HasColumnName("Telefone")
            .HasMaxLength(20);

        builder.Property(f => f.Email)
            .HasColumnName("Email")
            .HasMaxLength(100);

        builder.Property(f => f.LogoUrl)
            .HasColumnName("LogoUrl")
            .HasMaxLength(500);

        builder.Property(f => f.MoedaPadrao)
            .HasColumnName("MoedaPadrao")
            .HasConversion<int>()
            .IsRequired();

        builder.Property(f => f.PedidoMinimo)
            .HasColumnName("PedidoMinimo")
            .HasColumnType("decimal(18,2)");

        builder.Property(f => f.TokenLincros)
            .HasColumnName("TokenLincros")
            .HasMaxLength(100);

        builder.Property(f => f.Ativo)
            .HasColumnName("Ativo")
            .IsRequired();

        builder.Property(f => f.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();

        builder.Property(f => f.DataAtualizacao)
            .HasColumnName("DataAtualizacao");
            
        // Objeto de valor CNPJ
        builder.Property(f => f.Cnpj)
            .HasColumnName("Cnpj")
            .HasMaxLength(14)
            .IsRequired()
            .HasConversion(
                v => v.Valor,
                v => new Agriis.Compartilhado.Dominio.ObjetosValor.Cnpj(v));

        // Propriedades JSON
        builder.Property(f => f.DadosAdicionais)
            .HasColumnName("DadosAdicionais")
            .HasColumnType("jsonb");

        // Relacionamentos
        builder.HasMany(f => f.UsuariosFornecedores)
            .WithOne(uf => uf.Fornecedor)
            .HasForeignKey(uf => uf.FornecedorId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex("Cnpj")
            .HasDatabaseName("IX_Fornecedor_Cnpj")
            .IsUnique();

        builder.HasIndex(f => f.Nome)
            .HasDatabaseName("IX_Fornecedor_Nome");

        builder.HasIndex(f => f.Ativo)
            .HasDatabaseName("IX_Fornecedor_Ativo");

        builder.HasIndex(f => f.MoedaPadrao)
            .HasDatabaseName("IX_Fornecedor_MoedaPadrao");

        builder.HasIndex(f => f.DataCriacao)
            .HasDatabaseName("IX_Fornecedor_DataCriacao");

        builder.HasIndex(f => f.Email)
            .HasDatabaseName("IX_Fornecedor_Email")
            .HasFilter("\"Email\" IS NOT NULL");

        // Configurações adicionais
        builder.Navigation(f => f.UsuariosFornecedores)
            .EnableLazyLoading(false);
    }
}
</FornecedorConfiguration.cs>
<UsuarioFornecedorConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Fornecedores.Dominio.Entidades;

namespace Agriis.Fornecedores.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade UsuarioFornecedor
/// </summary>
public class UsuarioFornecedorConfiguration : IEntityTypeConfiguration<UsuarioFornecedor>
{
    public void Configure(EntityTypeBuilder<UsuarioFornecedor> builder)
    {
        // Tabela
        builder.ToTable("UsuarioFornecedor");

        // Chave primária
        builder.HasKey(uf => uf.Id);

        // Propriedades básicas
        builder.Property(uf => uf.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(uf => uf.UsuarioId)
            .HasColumnName("UsuarioId")
            .IsRequired();

        builder.Property(uf => uf.FornecedorId)
            .HasColumnName("FornecedorId")
            .IsRequired();

        builder.Property(uf => uf.Role)
            .HasColumnName("Role")
            .HasConversion<int>()
            .IsRequired();

        builder.Property(uf => uf.Ativo)
            .HasColumnName("Ativo")
            .IsRequired();

        builder.Property(uf => uf.DataInicio)
            .HasColumnName("DataInicio")
            .IsRequired();

        builder.Property(uf => uf.DataFim)
            .HasColumnName("DataFim");

        builder.Property(uf => uf.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();

        builder.Property(uf => uf.DataAtualizacao)
            .HasColumnName("DataAtualizacao");

        // Relacionamentos
        builder.HasOne(uf => uf.Usuario)
            .WithMany()
            .HasForeignKey(uf => uf.UsuarioId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasOne(uf => uf.Fornecedor)
            .WithMany(f => f.UsuariosFornecedores)
            .HasForeignKey(uf => uf.FornecedorId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasMany(uf => uf.Territorios)
            .WithOne(t => t.UsuarioFornecedor)
            .HasForeignKey(t => t.UsuarioFornecedorId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(uf => uf.UsuarioId)
            .HasDatabaseName("IX_UsuarioFornecedor_UsuarioId");

        builder.HasIndex(uf => uf.FornecedorId)
            .HasDatabaseName("IX_UsuarioFornecedor_FornecedorId");

        builder.HasIndex(uf => new { uf.UsuarioId, uf.FornecedorId })
            .HasDatabaseName("IX_UsuarioFornecedor_Usuario_Fornecedor")
            .IsUnique();

        builder.HasIndex(uf => uf.Role)
            .HasDatabaseName("IX_UsuarioFornecedor_Role");

        builder.HasIndex(uf => uf.Ativo)
            .HasDatabaseName("IX_UsuarioFornecedor_Ativo");

        builder.HasIndex(uf => uf.DataInicio)
            .HasDatabaseName("IX_UsuarioFornecedor_DataInicio");

        builder.HasIndex(uf => uf.DataCriacao)
            .HasDatabaseName("IX_UsuarioFornecedor_DataCriacao");

        // Configurações adicionais
        builder.Navigation(uf => uf.Usuario)
            .EnableLazyLoading(false);

        builder.Navigation(uf => uf.Fornecedor)
            .EnableLazyLoading(false);

        builder.Navigation(uf => uf.Territorios)
            .EnableLazyLoading(false);
    }
}
</UsuarioFornecedorConfiguration.cs>
<UsuarioFornecedorTerritorioConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Fornecedores.Dominio.Entidades;

namespace Agriis.Fornecedores.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade UsuarioFornecedorTerritorio
/// </summary>
public class UsuarioFornecedorTerritorioConfiguration : IEntityTypeConfiguration<UsuarioFornecedorTerritorio>
{
    public void Configure(EntityTypeBuilder<UsuarioFornecedorTerritorio> builder)
    {
        // Tabela
        builder.ToTable("UsuarioFornecedorTerritorio");

        // Chave primária
        builder.HasKey(t => t.Id);

        // Propriedades básicas
        builder.Property(t => t.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(t => t.UsuarioFornecedorId)
            .HasColumnName("UsuarioFornecedorId")
            .IsRequired();

        builder.Property(t => t.TerritorioPadrao)
            .HasColumnName("TerritorioPadrao")
            .IsRequired();

        builder.Property(t => t.Ativo)
            .HasColumnName("Ativo")
            .IsRequired();

        builder.Property(t => t.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();

        builder.Property(t => t.DataAtualizacao)
            .HasColumnName("DataAtualizacao");

        // Propriedades JSON
        builder.Property(t => t.Estados)
            .HasColumnName("Estados")
            .HasColumnType("jsonb")
            .IsRequired();

        builder.Property(t => t.Municipios)
            .HasColumnName("Municipios")
            .HasColumnType("jsonb");

        // Relacionamentos
        builder.HasOne(t => t.UsuarioFornecedor)
            .WithMany(uf => uf.Territorios)
            .HasForeignKey(t => t.UsuarioFornecedorId)
            .OnDelete(DeleteBehavior.Cascade);   
     // Índices
        builder.HasIndex(t => t.UsuarioFornecedorId)
            .HasDatabaseName("IX_UsuarioFornecedorTerritorio_UsuarioFornecedorId");

        builder.HasIndex(t => t.TerritorioPadrao)
            .HasDatabaseName("IX_UsuarioFornecedorTerritorio_TerritorioPadrao");

        builder.HasIndex(t => t.Ativo)
            .HasDatabaseName("IX_UsuarioFornecedorTerritorio_Ativo");

        builder.HasIndex(t => t.DataCriacao)
            .HasDatabaseName("IX_UsuarioFornecedorTerritorio_DataCriacao");

        // Índices GIN para consultas JSON
        builder.HasIndex(t => t.Estados)
            .HasDatabaseName("IX_UsuarioFornecedorTerritorio_Estados_GIN")
            .HasMethod("gin");

        builder.HasIndex(t => t.Municipios)
            .HasDatabaseName("IX_UsuarioFornecedorTerritorio_Municipios_GIN")
            .HasMethod("gin")
            .HasFilter("\"Municipios\" IS NOT NULL");

        // Configurações adicionais
        builder.Navigation(t => t.UsuarioFornecedor)
            .EnableLazyLoading(false);
    }
}
</UsuarioFornecedorTerritorioConfiguration.cs>
<FornecedorRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Fornecedores.Dominio.Entidades;
using Agriis.Fornecedores.Dominio.Interfaces;

namespace Agriis.Fornecedores.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de fornecedores
/// </summary>
public class FornecedorRepository : RepositoryBase<Fornecedor, DbContext>, IFornecedorRepository
{
    public FornecedorRepository(DbContext context) : base(context)
    {
    }

    public async Task<Fornecedor?> ObterPorCnpjAsync(string cnpj, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(cnpj))
            return null;

        // Remove formatação do CNPJ para busca
        var cnpjLimpo = cnpj.Replace(".", "").Replace("/", "").Replace("-", "");

        return await DbSet
            .FirstOrDefaultAsync(f => f.Cnpj.Valor == cnpjLimpo, cancellationToken);
    }

    public async Task<IEnumerable<Fornecedor>> ObterAtivosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Where(f => f.Ativo)
            .OrderBy(f => f.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Fornecedor>> ObterPorTerritorioAsync(string uf, string? municipio = null, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(uf))
            return Enumerable.Empty<Fornecedor>();

        var query = from f in DbSet
                    join uf_rel in Context.Set<UsuarioFornecedor>() on f.Id equals uf_rel.FornecedorId
                    join t in Context.Set<UsuarioFornecedorTerritorio>() on uf_rel.Id equals t.UsuarioFornecedorId
                    where f.Ativo && uf_rel.Ativo && t.Ativo
                    select new { Fornecedor = f, Territorio = t };

        // Filtrar por estado usando JSON
        query = query.Where(x => EF.Functions.JsonContains(x.Territorio.Estados, $"\"{uf.ToUpper()}\""));

        // Se município foi especificado, filtrar também por município
        if (!string.IsNullOrWhiteSpace(municipio))
        {
            // Esta é uma consulta mais complexa que requer verificação no JSON de municípios
            // Por simplicidade, vamos fazer a filtragem em memória após obter os resultados
            var resultados = await query.Select(x => x.Fornecedor).Distinct().ToListAsync(cancellationToken);
            
            var fornecedoresFiltrados = new List<Fornecedor>();
            foreach (var fornecedor in resultados)
            {
                var territorios = await Context.Set<UsuarioFornecedorTerritorio>()
                    .Where(t => t.UsuarioFornecedor.FornecedorId == fornecedor.Id && t.Ativo)
                    .ToListAsync(cancellationToken);

                if (territorios.Any(t => t.IncluiMunicipio(uf, municipio)))
                {
                    fornecedoresFiltrados.Add(fornecedor);
                }
            }

            return fornecedoresFiltrados.Distinct();
        }

        return await query.Select(x => x.Fornecedor).Distinct().ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Fornecedor>> ObterComFiltrosAsync(
        string? nome = null,
        string? cnpj = null,
        bool? ativo = null,
        int? moedaPadrao = null,
        CancellationToken cancellationToken = default)
    {
        var query = DbSet.AsQueryable();

        if (!string.IsNullOrWhiteSpace(nome))
        {
            query = query.Where(f => f.Nome.Contains(nome));
        }

        if (!string.IsNullOrWhiteSpace(cnpj))
        {
            var cnpjLimpo = cnpj.Replace(".", "").Replace("/", "").Replace("-", "");
            query = query.Where(f => f.Cnpj.Valor.Contains(cnpjLimpo));
        }

        if (ativo.HasValue)
        {
            query = query.Where(f => f.Ativo == ativo.Value);
        }

        if (moedaPadrao.HasValue)
        {
            query = query.Where(f => (int)f.MoedaPadrao == moedaPadrao.Value);
        }

        return await query
            .OrderBy(f => f.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<bool> ExisteCnpjAsync(string cnpj, int? fornecedorIdExcluir = null, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(cnpj))
            return false;

        var cnpjLimpo = cnpj.Replace(".", "").Replace("/", "").Replace("-", "");

        var query = DbSet.Where(f => f.Cnpj.Valor == cnpjLimpo);

        if (fornecedorIdExcluir.HasValue)
        {
            query = query.Where(f => f.Id != fornecedorIdExcluir.Value);
        }

        return await query.AnyAsync(cancellationToken);
    }

    public override async Task<Fornecedor?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(f => f.UsuariosFornecedores)
                .ThenInclude(uf => uf.Usuario)
            .Include(f => f.UsuariosFornecedores)
                .ThenInclude(uf => uf.Territorios)
            .FirstOrDefaultAsync(f => f.Id == id, cancellationToken);
    }

    public override async Task<IEnumerable<Fornecedor>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(f => f.UsuariosFornecedores)
                .ThenInclude(uf => uf.Usuario)
            .OrderBy(f => f.Nome)
            .ToListAsync(cancellationToken);
    }
}
</FornecedorRepository.cs>
<UsuarioFornecedorRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Fornecedores.Dominio.Entidades;
using Agriis.Fornecedores.Dominio.Interfaces;

namespace Agriis.Fornecedores.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de usuários fornecedores
/// </summary>
public class UsuarioFornecedorRepository : RepositoryBase<UsuarioFornecedor, DbContext>, IUsuarioFornecedorRepository
{
    public UsuarioFornecedorRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<UsuarioFornecedor>> ObterPorUsuarioAsync(int usuarioId, bool apenasAtivos = true, CancellationToken cancellationToken = default)
    {
        var query = DbSet
            .Include(uf => uf.Fornecedor)
            .Include(uf => uf.Usuario)
            .Include(uf => uf.Territorios)
            .Where(uf => uf.UsuarioId == usuarioId);

        if (apenasAtivos)
        {
            query = query.Where(uf => uf.Ativo);
        }

        return await query
            .OrderBy(uf => uf.Fornecedor.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<UsuarioFornecedor>> ObterPorFornecedorAsync(int fornecedorId, bool apenasAtivos = true, CancellationToken cancellationToken = default)
    {
        var query = DbSet
            .Include(uf => uf.Usuario)
            .Include(uf => uf.Fornecedor)
            .Include(uf => uf.Territorios)
            .Where(uf => uf.FornecedorId == fornecedorId);

        if (apenasAtivos)
        {
            query = query.Where(uf => uf.Ativo);
        }

        return await query
            .OrderBy(uf => uf.Usuario.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<UsuarioFornecedor?> ObterPorUsuarioFornecedorAsync(int usuarioId, int fornecedorId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(uf => uf.Usuario)
            .Include(uf => uf.Fornecedor)
            .Include(uf => uf.Territorios)
            .FirstOrDefaultAsync(uf => uf.UsuarioId == usuarioId && uf.FornecedorId == fornecedorId, cancellationToken);
    } 
   public async Task<IEnumerable<UsuarioFornecedor>> ObterPorRoleAsync(int fornecedorId, Roles role, bool apenasAtivos = true, CancellationToken cancellationToken = default)
    {
        var query = DbSet
            .Include(uf => uf.Usuario)
            .Include(uf => uf.Fornecedor)
            .Include(uf => uf.Territorios)
            .Where(uf => uf.FornecedorId == fornecedorId && uf.Role == role);

        if (apenasAtivos)
        {
            query = query.Where(uf => uf.Ativo);
        }

        return await query
            .OrderBy(uf => uf.Usuario.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<UsuarioFornecedor>> ObterComTerritoriosAsync(int fornecedorId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(uf => uf.Usuario)
            .Include(uf => uf.Fornecedor)
            .Include(uf => uf.Territorios.Where(t => t.Ativo))
            .Where(uf => uf.FornecedorId == fornecedorId && uf.Ativo)
            .OrderBy(uf => uf.Usuario.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<bool> ExisteAssociacaoAtivaAsync(int usuarioId, int fornecedorId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .AnyAsync(uf => uf.UsuarioId == usuarioId && uf.FornecedorId == fornecedorId && uf.Ativo, cancellationToken);
    }

    public override async Task<UsuarioFornecedor?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(uf => uf.Usuario)
            .Include(uf => uf.Fornecedor)
            .Include(uf => uf.Territorios)
            .FirstOrDefaultAsync(uf => uf.Id == id, cancellationToken);
    }
}
</UsuarioFornecedorRepository.cs>
<UsuarioFornecedorTerritorioRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Fornecedores.Dominio.Entidades;
using Agriis.Fornecedores.Dominio.Interfaces;

namespace Agriis.Fornecedores.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de territórios de usuários fornecedores
/// </summary>
public class UsuarioFornecedorTerritorioRepository : RepositoryBase<UsuarioFornecedorTerritorio, DbContext>, IUsuarioFornecedorTerritorioRepository
{
    public UsuarioFornecedorTerritorioRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<UsuarioFornecedorTerritorio>> ObterPorUsuarioFornecedorAsync(int usuarioFornecedorId, bool apenasAtivos = true, CancellationToken cancellationToken = default)
    {
        var query = DbSet
            .Include(t => t.UsuarioFornecedor)
                .ThenInclude(uf => uf.Usuario)
            .Include(t => t.UsuarioFornecedor)
                .ThenInclude(uf => uf.Fornecedor)
            .Where(t => t.UsuarioFornecedorId == usuarioFornecedorId);

        if (apenasAtivos)
        {
            query = query.Where(t => t.Ativo);
        }

        return await query
            .OrderByDescending(t => t.TerritorioPadrao)
            .ThenBy(t => t.DataCriacao)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<UsuarioFornecedorTerritorio>> ObterPorEstadoAsync(string uf, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(uf))
            return Enumerable.Empty<UsuarioFornecedorTerritorio>();

        return await DbSet
            .Include(t => t.UsuarioFornecedor)
                .ThenInclude(uf => uf.Usuario)
            .Include(t => t.UsuarioFornecedor)
                .ThenInclude(uf => uf.Fornecedor)
            .Where(t => t.Ativo && EF.Functions.JsonContains(t.Estados, $"\"{uf.ToUpper()}\""))
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<UsuarioFornecedorTerritorio>> ObterPorMunicipioAsync(string uf, string municipio, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(uf) || string.IsNullOrWhiteSpace(municipio))
            return Enumerable.Empty<UsuarioFornecedorTerritorio>();

        // Primeiro, obtém territórios que incluem o estado
        var territoriosEstado = await ObterPorEstadoAsync(uf, cancellationToken);

        // Filtra em memória aqueles que incluem o município específico
        var territoriosFiltrados = new List<UsuarioFornecedorTerritorio>();
        foreach (var territorio in territoriosEstado)
        {
            if (territorio.IncluiMunicipio(uf, municipio))
            {
                territoriosFiltrados.Add(territorio);
            }
        }

        return territoriosFiltrados;
    }

    public async Task<UsuarioFornecedorTerritorio?> ObterTerritorioPadraoAsync(int usuarioFornecedorId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(t => t.UsuarioFornecedor)
                .ThenInclude(uf => uf.Usuario)
            .Include(t => t.UsuarioFornecedor)
                .ThenInclude(uf => uf.Fornecedor)
            .FirstOrDefaultAsync(t => t.UsuarioFornecedorId == usuarioFornecedorId && t.TerritorioPadrao && t.Ativo, cancellationToken);
    }

    public async Task<IEnumerable<UsuarioFornecedor>> ObterUsuariosFornecedoresPorTerritorioAsync(string uf, string? municipio = null, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(uf))
            return Enumerable.Empty<UsuarioFornecedor>();

        var query = from t in DbSet
                    join uf_rel in Context.Set<UsuarioFornecedor>() on t.UsuarioFornecedorId equals uf_rel.Id
                    where t.Ativo && uf_rel.Ativo && EF.Functions.JsonContains(t.Estados, $"\"{uf.ToUpper()}\"")
                    select new { Territorio = t, UsuarioFornecedor = uf_rel };

        var resultados = await query
            .Include(x => x.UsuarioFornecedor.Usuario)
            .Include(x => x.UsuarioFornecedor.Fornecedor)
            .ToListAsync(cancellationToken);

        // Se município foi especificado, filtrar também por município
        if (!string.IsNullOrWhiteSpace(municipio))
        {
            var usuariosFornecedoresFiltrados = new List<UsuarioFornecedor>();
            foreach (var resultado in resultados)
            {
                if (resultado.Territorio.IncluiMunicipio(uf, municipio))
                {
                    usuariosFornecedoresFiltrados.Add(resultado.UsuarioFornecedor);
                }
            }

            return usuariosFornecedoresFiltrados.Distinct();
        }

        return resultados.Select(x => x.UsuarioFornecedor).Distinct();
    }

    public override async Task<UsuarioFornecedorTerritorio?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(t => t.UsuarioFornecedor)
                .ThenInclude(uf => uf.Usuario)
            .Include(t => t.UsuarioFornecedor)
                .ThenInclude(uf => uf.Fornecedor)
            .FirstOrDefaultAsync(t => t.Id == id, cancellationToken);
    }
}
</UsuarioFornecedorTerritorioRepository.cs>
<CulturaFormaPagamentoDto.cs>
namespace Agriis.Pagamentos.Aplicacao.DTOs;

/// <summary>
/// DTO para associação cultura-fornecedor-forma de pagamento
/// </summary>
public class CulturaFormaPagamentoDto
{
    /// <summary>
    /// ID da associação
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// ID do fornecedor
    /// </summary>
    public int FornecedorId { get; set; }
    
    /// <summary>
    /// ID da cultura
    /// </summary>
    public int CulturaId { get; set; }
    
    /// <summary>
    /// ID da forma de pagamento
    /// </summary>
    public int FormaPagamentoId { get; set; }
    
    /// <summary>
    /// Indica se a associação está ativa
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// Dados da forma de pagamento
    /// </summary>
    public FormaPagamentoDto? FormaPagamento { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criação de associação cultura-fornecedor-forma de pagamento
/// </summary>
public class CriarCulturaFormaPagamentoDto
{
    /// <summary>
    /// ID do fornecedor
    /// </summary>
    public int FornecedorId { get; set; }
    
    /// <summary>
    /// ID da cultura
    /// </summary>
    public int CulturaId { get; set; }
    
    /// <summary>
    /// ID da forma de pagamento
    /// </summary>
    public int FormaPagamentoId { get; set; }
}

/// <summary>
/// DTO para formas de pagamento disponíveis por pedido
/// </summary>
public class FormaPagamentoPedidoDto
{
    /// <summary>
    /// ID da forma de pagamento
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Descrição da forma de pagamento
    /// </summary>
    public string Descricao { get; set; } = string.Empty;
    
    /// <summary>
    /// ID da associação cultura-forma-pagamento
    /// </summary>
    public int CulturaFormaPagamentoId { get; set; }
}
</CulturaFormaPagamentoDto.cs>
<FormaPagamentoDto.cs>
namespace Agriis.Pagamentos.Aplicacao.DTOs;

/// <summary>
/// DTO para forma de pagamento
/// </summary>
public class FormaPagamentoDto
{
    /// <summary>
    /// ID da forma de pagamento
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Descrição da forma de pagamento
    /// </summary>
    public string Descricao { get; set; } = string.Empty;
    
    /// <summary>
    /// Indica se a forma de pagamento está ativa
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criação de forma de pagamento
/// </summary>
public class CriarFormaPagamentoDto
{
    /// <summary>
    /// Descrição da forma de pagamento
    /// </summary>
    public string Descricao { get; set; } = string.Empty;
}

/// <summary>
/// DTO para atualização de forma de pagamento
/// </summary>
public class AtualizarFormaPagamentoDto
{
    /// <summary>
    /// Descrição da forma de pagamento
    /// </summary>
    public string Descricao { get; set; } = string.Empty;
    
    /// <summary>
    /// Indica se a forma de pagamento está ativa
    /// </summary>
    public bool Ativo { get; set; }
}
</FormaPagamentoDto.cs>
<ICulturaFormaPagamentoService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Pagamentos.Aplicacao.DTOs;

namespace Agriis.Pagamentos.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de associação cultura-fornecedor-forma de pagamento
/// </summary>
public interface ICulturaFormaPagamentoService
{
    /// <summary>
    /// Obtém associações por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de associações do fornecedor</returns>
    Task<Result<IEnumerable<CulturaFormaPagamentoDto>>> ObterPorFornecedorAsync(int fornecedorId);
    
    /// <summary>
    /// Obtém formas de pagamento disponíveis para fornecedor e cultura
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="culturaId">ID da cultura</param>
    /// <returns>Lista de formas de pagamento disponíveis</returns>
    Task<Result<IEnumerable<FormaPagamentoDto>>> ObterFormasPagamentoPorFornecedorCulturaAsync(
        int fornecedorId, 
        int culturaId);
    
    /// <summary>
    /// Cria uma nova associação cultura-fornecedor-forma de pagamento
    /// </summary>
    /// <param name="dto">Dados da associação</param>
    /// <returns>Associação criada</returns>
    Task<Result<CulturaFormaPagamentoDto>> CriarAsync(CriarCulturaFormaPagamentoDto dto);
    
    /// <summary>
    /// Remove uma associação cultura-fornecedor-forma de pagamento
    /// </summary>
    /// <param name="id">ID da associação</param>
    /// <returns>Resultado da operação</returns>
    Task<Result> RemoverAsync(int id);
    
    /// <summary>
    /// Verifica se existe associação ativa
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="culturaId">ID da cultura</param>
    /// <param name="formaPagamentoId">ID da forma de pagamento</param>
    /// <returns>True se existe associação ativa</returns>
    Task<Result<bool>> ExisteAssociacaoAtivaAsync(int fornecedorId, int culturaId, int formaPagamentoId);
}
</ICulturaFormaPagamentoService.cs>
<IFormaPagamentoService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Pagamentos.Aplicacao.DTOs;

namespace Agriis.Pagamentos.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de forma de pagamento
/// </summary>
public interface IFormaPagamentoService
{
    /// <summary>
    /// Obtém todas as formas de pagamento ativas
    /// </summary>
    /// <returns>Lista de formas de pagamento ativas</returns>
    Task<Result<IEnumerable<FormaPagamentoDto>>> ObterAtivasAsync();
    
    /// <summary>
    /// Obtém forma de pagamento por ID
    /// </summary>
    /// <param name="id">ID da forma de pagamento</param>
    /// <returns>Forma de pagamento encontrada</returns>
    Task<Result<FormaPagamentoDto>> ObterPorIdAsync(int id);
    
    /// <summary>
    /// Obtém formas de pagamento disponíveis para um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Lista de formas de pagamento disponíveis</returns>
    Task<Result<IEnumerable<FormaPagamentoPedidoDto>>> ObterPorPedidoAsync(int pedidoId);
    
    /// <summary>
    /// Cria uma nova forma de pagamento
    /// </summary>
    /// <param name="dto">Dados da forma de pagamento</param>
    /// <returns>Forma de pagamento criada</returns>
    Task<Result<FormaPagamentoDto>> CriarAsync(CriarFormaPagamentoDto dto);
    
    /// <summary>
    /// Atualiza uma forma de pagamento
    /// </summary>
    /// <param name="id">ID da forma de pagamento</param>
    /// <param name="dto">Dados atualizados</param>
    /// <returns>Forma de pagamento atualizada</returns>
    Task<Result<FormaPagamentoDto>> AtualizarAsync(int id, AtualizarFormaPagamentoDto dto);
    
    /// <summary>
    /// Remove uma forma de pagamento
    /// </summary>
    /// <param name="id">ID da forma de pagamento</param>
    /// <returns>Resultado da operação</returns>
    Task<Result> RemoverAsync(int id);
}
</IFormaPagamentoService.cs>
<PagamentoMappingProfile.cs>
using AutoMapper;
using Agriis.Pagamentos.Aplicacao.DTOs;
using Agriis.Pagamentos.Dominio.Entidades;

namespace Agriis.Pagamentos.Aplicacao.Mapeamentos;

/// <summary>
/// Perfil de mapeamento para entidades de pagamento
/// </summary>
public class PagamentoMappingProfile : Profile
{
    public PagamentoMappingProfile()
    {
        // FormaPagamento mappings
        CreateMap<FormaPagamento, FormaPagamentoDto>();
        CreateMap<CriarFormaPagamentoDto, FormaPagamento>()
            .ConstructUsing(src => new FormaPagamento(src.Descricao));
        
        // CulturaFormaPagamento mappings
        CreateMap<CulturaFormaPagamento, CulturaFormaPagamentoDto>();
        CreateMap<CriarCulturaFormaPagamentoDto, CulturaFormaPagamento>()
            .ConstructUsing(src => new CulturaFormaPagamento(
                src.FornecedorId, 
                src.CulturaId, 
                src.FormaPagamentoId));
    }
}
</PagamentoMappingProfile.cs>
<CulturaFormaPagamentoService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Pagamentos.Aplicacao.DTOs;
using Agriis.Pagamentos.Aplicacao.Interfaces;
using Agriis.Pagamentos.Dominio.Entidades;
using Agriis.Pagamentos.Dominio.Interfaces;

namespace Agriis.Pagamentos.Aplicacao.Servicos;

/// <summary>
/// Serviço de aplicação para associações cultura-fornecedor-forma de pagamento
/// </summary>
public class CulturaFormaPagamentoService : ICulturaFormaPagamentoService
{
    private readonly ICulturaFormaPagamentoRepository _culturaFormaPagamentoRepository;
    private readonly IFormaPagamentoRepository _formaPagamentoRepository;
    private readonly IMapper _mapper;

    public CulturaFormaPagamentoService(
        ICulturaFormaPagamentoRepository culturaFormaPagamentoRepository,
        IFormaPagamentoRepository formaPagamentoRepository,
        IMapper mapper)
    {
        _culturaFormaPagamentoRepository = culturaFormaPagamentoRepository;
        _formaPagamentoRepository = formaPagamentoRepository;
        _mapper = mapper;
    }

    public async Task<Result<IEnumerable<CulturaFormaPagamentoDto>>> ObterPorFornecedorAsync(int fornecedorId)
    {
        try
        {
            var associacoes = await _culturaFormaPagamentoRepository.ObterPorFornecedorAsync(fornecedorId);
            var dtos = _mapper.Map<IEnumerable<CulturaFormaPagamentoDto>>(associacoes);
            
            return Result<IEnumerable<CulturaFormaPagamentoDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<CulturaFormaPagamentoDto>>.Failure($"Erro ao obter associações do fornecedor: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<FormaPagamentoDto>>> ObterFormasPagamentoPorFornecedorCulturaAsync(
        int fornecedorId, 
        int culturaId)
    {
        try
        {
            var formasPagamento = await _culturaFormaPagamentoRepository
                .ObterFormasPagamentoPorFornecedorCulturaAsync(fornecedorId, culturaId);
            
            var dtos = _mapper.Map<IEnumerable<FormaPagamentoDto>>(formasPagamento);
            return Result<IEnumerable<FormaPagamentoDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<FormaPagamentoDto>>.Failure($"Erro ao obter formas de pagamento: {ex.Message}");
        }
    }

    public async Task<Result<CulturaFormaPagamentoDto>> CriarAsync(CriarCulturaFormaPagamentoDto dto)
    {
        try
        {
            // Verificar se já existe associação
            var associacaoExistente = await _culturaFormaPagamentoRepository
                .ObterPorFornecedorCulturaFormaPagamentoAsync(dto.FornecedorId, dto.CulturaId, dto.FormaPagamentoId);
            
            if (associacaoExistente != null)
                return Result<CulturaFormaPagamentoDto>.Failure("Associação já existe para este fornecedor, cultura e forma de pagamento");

            // Verificar se a forma de pagamento existe e está ativa
            var formaPagamentoExiste = await _formaPagamentoRepository.ExisteAtivaAsync(dto.FormaPagamentoId);
            if (!formaPagamentoExiste)
                return Result<CulturaFormaPagamentoDto>.Failure("Forma de pagamento não encontrada ou inativa");

            var associacao = _mapper.Map<CulturaFormaPagamento>(dto);
            var associacaoCriada = await _culturaFormaPagamentoRepository.AdicionarAsync(associacao);
            
            var resultDto = _mapper.Map<CulturaFormaPagamentoDto>(associacaoCriada);
            return Result<CulturaFormaPagamentoDto>.Success(resultDto);
        }
        catch (Exception ex)
        {
            return Result<CulturaFormaPagamentoDto>.Failure($"Erro ao criar associação: {ex.Message}");
        }
    }

    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            var existe = await _culturaFormaPagamentoRepository.ExisteAsync(id);
            
            if (!existe)
                return Result.Failure("Associação não encontrada");

            await _culturaFormaPagamentoRepository.RemoverAsync(id);
            return Result.Success();
        }
        catch (Exception ex)
        {
            return Result.Failure($"Erro ao remover associação: {ex.Message}");
        }
    }

    public async Task<Result<bool>> ExisteAssociacaoAtivaAsync(int fornecedorId, int culturaId, int formaPagamentoId)
    {
        try
        {
            var existe = await _culturaFormaPagamentoRepository
                .ExisteAssociacaoAtivaAsync(fornecedorId, culturaId, formaPagamentoId);
            
            return Result<bool>.Success(existe);
        }
        catch (Exception ex)
        {
            return Result<bool>.Failure($"Erro ao verificar associação: {ex.Message}");
        }
    }
}
</CulturaFormaPagamentoService.cs>
<FormaPagamentoService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Pagamentos.Aplicacao.DTOs;
using Agriis.Pagamentos.Aplicacao.Interfaces;
using Agriis.Pagamentos.Dominio.Entidades;
using Agriis.Pagamentos.Dominio.Interfaces;

namespace Agriis.Pagamentos.Aplicacao.Servicos;

/// <summary>
/// Serviço de aplicação para formas de pagamento
/// </summary>
public class FormaPagamentoService : IFormaPagamentoService
{
    private readonly IFormaPagamentoRepository _formaPagamentoRepository;
    private readonly IMapper _mapper;

    public FormaPagamentoService(
        IFormaPagamentoRepository formaPagamentoRepository,
        IMapper mapper)
    {
        _formaPagamentoRepository = formaPagamentoRepository;
        _mapper = mapper;
    }

    public async Task<Result<IEnumerable<FormaPagamentoDto>>> ObterAtivasAsync()
    {
        try
        {
            var formasPagamento = await _formaPagamentoRepository.ObterAtivasAsync();
            var dtos = _mapper.Map<IEnumerable<FormaPagamentoDto>>(formasPagamento);
            
            return Result<IEnumerable<FormaPagamentoDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<FormaPagamentoDto>>.Failure($"Erro ao obter formas de pagamento: {ex.Message}");
        }
    }

    public async Task<Result<FormaPagamentoDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var formaPagamento = await _formaPagamentoRepository.ObterPorIdAsync(id);
            
            if (formaPagamento == null)
                return Result<FormaPagamentoDto>.Failure("Forma de pagamento não encontrada");

            var dto = _mapper.Map<FormaPagamentoDto>(formaPagamento);
            return Result<FormaPagamentoDto>.Success(dto);
        }
        catch (Exception ex)
        {
            return Result<FormaPagamentoDto>.Failure($"Erro ao obter forma de pagamento: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<FormaPagamentoPedidoDto>>> ObterPorPedidoAsync(int pedidoId)
    {
        try
        {
            var formasPagamento = await _formaPagamentoRepository.ObterPorPedidoIdAsync(pedidoId);
            
            // Mapear para DTO específico de pedido (implementação simplificada)
            var dtos = formasPagamento.Select(fp => new FormaPagamentoPedidoDto
            {
                Id = fp.Id,
                Descricao = fp.Descricao,
                CulturaFormaPagamentoId = 0 // Será preenchido pela consulta específica
            });
            
            return Result<IEnumerable<FormaPagamentoPedidoDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<FormaPagamentoPedidoDto>>.Failure($"Erro ao obter formas de pagamento do pedido: {ex.Message}");
        }
    }

    public async Task<Result<FormaPagamentoDto>> CriarAsync(CriarFormaPagamentoDto dto)
    {
        try
        {
            var formaPagamento = _mapper.Map<FormaPagamento>(dto);
            var formaPagamentoCriada = await _formaPagamentoRepository.AdicionarAsync(formaPagamento);
            
            var resultDto = _mapper.Map<FormaPagamentoDto>(formaPagamentoCriada);
            return Result<FormaPagamentoDto>.Success(resultDto);
        }
        catch (Exception ex)
        {
            return Result<FormaPagamentoDto>.Failure($"Erro ao criar forma de pagamento: {ex.Message}");
        }
    }

    public async Task<Result<FormaPagamentoDto>> AtualizarAsync(int id, AtualizarFormaPagamentoDto dto)
    {
        try
        {
            var formaPagamento = await _formaPagamentoRepository.ObterPorIdAsync(id);
            
            if (formaPagamento == null)
                return Result<FormaPagamentoDto>.Failure("Forma de pagamento não encontrada");

            formaPagamento.AtualizarDescricao(dto.Descricao);
            
            if (dto.Ativo)
                formaPagamento.Ativar();
            else
                formaPagamento.Desativar();

            await _formaPagamentoRepository.AtualizarAsync(formaPagamento);
            
            var resultDto = _mapper.Map<FormaPagamentoDto>(formaPagamento);
            return Result<FormaPagamentoDto>.Success(resultDto);
        }
        catch (Exception ex)
        {
            return Result<FormaPagamentoDto>.Failure($"Erro ao atualizar forma de pagamento: {ex.Message}");
        }
    }

    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            var existe = await _formaPagamentoRepository.ExisteAsync(id);
            
            if (!existe)
                return Result.Failure("Forma de pagamento não encontrada");

            await _formaPagamentoRepository.RemoverAsync(id);
            return Result.Success();
        }
        catch (Exception ex)
        {
            return Result.Failure($"Erro ao remover forma de pagamento: {ex.Message}");
        }
    }
}
</FormaPagamentoService.cs>
<CriarCulturaFormaPagamentoDtoValidator.cs>
using FluentValidation;
using Agriis.Pagamentos.Aplicacao.DTOs;

namespace Agriis.Pagamentos.Aplicacao.Validadores;

/// <summary>
/// Validador para criação de associação cultura-fornecedor-forma de pagamento
/// </summary>
public class CriarCulturaFormaPagamentoDtoValidator : AbstractValidator<CriarCulturaFormaPagamentoDto>
{
    public CriarCulturaFormaPagamentoDtoValidator()
    {
        RuleFor(x => x.FornecedorId)
            .GreaterThan(0)
            .WithMessage("ID do fornecedor deve ser maior que zero");
            
        RuleFor(x => x.CulturaId)
            .GreaterThan(0)
            .WithMessage("ID da cultura deve ser maior que zero");
            
        RuleFor(x => x.FormaPagamentoId)
            .GreaterThan(0)
            .WithMessage("ID da forma de pagamento deve ser maior que zero");
    }
}
</CriarCulturaFormaPagamentoDtoValidator.cs>
<CriarFormaPagamentoDtoValidator.cs>
using FluentValidation;
using Agriis.Pagamentos.Aplicacao.DTOs;

namespace Agriis.Pagamentos.Aplicacao.Validadores;

/// <summary>
/// Validador para criação de forma de pagamento
/// </summary>
public class CriarFormaPagamentoDtoValidator : AbstractValidator<CriarFormaPagamentoDto>
{
    public CriarFormaPagamentoDtoValidator()
    {
        RuleFor(x => x.Descricao)
            .NotEmpty()
            .WithMessage("Descrição da forma de pagamento é obrigatória")
            .MaximumLength(45)
            .WithMessage("Descrição da forma de pagamento deve ter no máximo 45 caracteres");
    }
}
</CriarFormaPagamentoDtoValidator.cs>
<CulturaFormaPagamento.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Pagamentos.Dominio.Entidades;

/// <summary>
/// Entidade que representa a associação entre cultura, fornecedor e forma de pagamento
/// </summary>
public class CulturaFormaPagamento : EntidadeBase
{
    /// <summary>
    /// ID do fornecedor
    /// </summary>
    public int FornecedorId { get; private set; }
    
    /// <summary>
    /// ID da cultura
    /// </summary>
    public int CulturaId { get; private set; }
    
    /// <summary>
    /// ID da forma de pagamento
    /// </summary>
    public int FormaPagamentoId { get; private set; }
    
    /// <summary>
    /// Indica se a associação está ativa
    /// </summary>
    public bool Ativo { get; private set; } = true;
    
    // Navigation Properties
    /// <summary>
    /// Forma de pagamento associada
    /// </summary>
    public virtual FormaPagamento FormaPagamento { get; private set; } = null!;
    
    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected CulturaFormaPagamento() { }
    
    /// <summary>
    /// Construtor para criar uma nova associação cultura-fornecedor-forma de pagamento
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="culturaId">ID da cultura</param>
    /// <param name="formaPagamentoId">ID da forma de pagamento</param>
    public CulturaFormaPagamento(int fornecedorId, int culturaId, int formaPagamentoId)
    {
        if (fornecedorId <= 0)
            throw new ArgumentException("ID do fornecedor deve ser maior que zero", nameof(fornecedorId));
            
        if (culturaId <= 0)
            throw new ArgumentException("ID da cultura deve ser maior que zero", nameof(culturaId));
            
        if (formaPagamentoId <= 0)
            throw new ArgumentException("ID da forma de pagamento deve ser maior que zero", nameof(formaPagamentoId));
            
        FornecedorId = fornecedorId;
        CulturaId = culturaId;
        FormaPagamentoId = formaPagamentoId;
        Ativo = true;
    }
    
    /// <summary>
    /// Ativa a associação
    /// </summary>
    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Desativa a associação
    /// </summary>
    public void Desativar()
    {
        if (Ativo)
        {
            Ativo = false;
            AtualizarDataModificacao();
        }
    }
}
</CulturaFormaPagamento.cs>
<FormaPagamento.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Pagamentos.Dominio.Entidades;

/// <summary>
/// Entidade que representa uma forma de pagamento disponível no sistema
/// </summary>
public class FormaPagamento : EntidadeBase
{
    /// <summary>
    /// Descrição da forma de pagamento
    /// </summary>
    public string Descricao { get; private set; } = string.Empty;
    
    /// <summary>
    /// Indica se a forma de pagamento está ativa
    /// </summary>
    public bool Ativo { get; private set; } = true;
    
    // Navigation Properties
    /// <summary>
    /// Relacionamentos com culturas e fornecedores
    /// </summary>
    public virtual ICollection<CulturaFormaPagamento> CulturaFormasPagamento { get; private set; } = new List<CulturaFormaPagamento>();
    
    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected FormaPagamento() { }
    
    /// <summary>
    /// Construtor para criar uma nova forma de pagamento
    /// </summary>
    /// <param name="descricao">Descrição da forma de pagamento</param>
    public FormaPagamento(string descricao)
    {
        if (string.IsNullOrWhiteSpace(descricao))
            throw new ArgumentException("Descrição da forma de pagamento é obrigatória", nameof(descricao));
            
        Descricao = descricao.Trim();
        Ativo = true;
        CulturaFormasPagamento = new List<CulturaFormaPagamento>();
    }
    
    /// <summary>
    /// Atualiza a descrição da forma de pagamento
    /// </summary>
    /// <param name="descricao">Nova descrição</param>
    public void AtualizarDescricao(string descricao)
    {
        if (string.IsNullOrWhiteSpace(descricao))
            throw new ArgumentException("Descrição da forma de pagamento é obrigatória", nameof(descricao));
            
        Descricao = descricao.Trim();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Ativa a forma de pagamento
    /// </summary>
    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Desativa a forma de pagamento
    /// </summary>
    public void Desativar()
    {
        if (Ativo)
        {
            Ativo = false;
            AtualizarDataModificacao();
        }
    }
}
</FormaPagamento.cs>
<ICulturaFormaPagamentoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Pagamentos.Dominio.Entidades;

namespace Agriis.Pagamentos.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de associações cultura-fornecedor-forma de pagamento
/// </summary>
public interface ICulturaFormaPagamentoRepository : IRepository<CulturaFormaPagamento>
{
    /// <summary>
    /// Busca associação específica por fornecedor, cultura e forma de pagamento
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="culturaId">ID da cultura</param>
    /// <param name="formaPagamentoId">ID da forma de pagamento</param>
    /// <returns>Associação encontrada ou null</returns>
    Task<CulturaFormaPagamento?> ObterPorFornecedorCulturaFormaPagamentoAsync(
        int fornecedorId, 
        int culturaId, 
        int formaPagamentoId);
    
    /// <summary>
    /// Obtém todas as associações de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de associações do fornecedor</returns>
    Task<IEnumerable<CulturaFormaPagamento>> ObterPorFornecedorAsync(int fornecedorId);
    
    /// <summary>
    /// Obtém todas as associações de uma cultura
    /// </summary>
    /// <param name="culturaId">ID da cultura</param>
    /// <returns>Lista de associações da cultura</returns>
    Task<IEnumerable<CulturaFormaPagamento>> ObterPorCulturaAsync(int culturaId);
    
    /// <summary>
    /// Obtém formas de pagamento disponíveis para um fornecedor e cultura específicos
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="culturaId">ID da cultura</param>
    /// <returns>Lista de formas de pagamento disponíveis</returns>
    Task<IEnumerable<FormaPagamento>> ObterFormasPagamentoPorFornecedorCulturaAsync(
        int fornecedorId, 
        int culturaId);
    
    /// <summary>
    /// Verifica se existe associação ativa entre fornecedor, cultura e forma de pagamento
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="culturaId">ID da cultura</param>
    /// <param name="formaPagamentoId">ID da forma de pagamento</param>
    /// <returns>True se existe associação ativa</returns>
    Task<bool> ExisteAssociacaoAtivaAsync(int fornecedorId, int culturaId, int formaPagamentoId);
}
</ICulturaFormaPagamentoRepository.cs>
<IFormaPagamentoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Pagamentos.Dominio.Entidades;

namespace Agriis.Pagamentos.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de formas de pagamento
/// </summary>
public interface IFormaPagamentoRepository : IRepository<FormaPagamento>
{
    /// <summary>
    /// Obtém todas as formas de pagamento ativas ordenadas por descrição
    /// </summary>
    /// <returns>Lista de formas de pagamento ativas</returns>
    Task<IEnumerable<FormaPagamento>> ObterAtivasAsync();
    
    /// <summary>
    /// Obtém formas de pagamento por pedido ID
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Lista de formas de pagamento disponíveis para o pedido</returns>
    Task<IEnumerable<FormaPagamento>> ObterPorPedidoIdAsync(int pedidoId);
    
    /// <summary>
    /// Verifica se uma forma de pagamento existe e está ativa
    /// </summary>
    /// <param name="id">ID da forma de pagamento</param>
    /// <returns>True se existe e está ativa</returns>
    Task<bool> ExisteAtivaAsync(int id);
}
</IFormaPagamentoRepository.cs>
<CulturaFormaPagamentoConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Pagamentos.Dominio.Entidades;

namespace Agriis.Pagamentos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade CulturaFormaPagamento
/// </summary>
public class CulturaFormaPagamentoConfiguration : IEntityTypeConfiguration<CulturaFormaPagamento>
{
    public void Configure(EntityTypeBuilder<CulturaFormaPagamento> builder)
    {
        // Tabela
        builder.ToTable("cultura_forma_pagamento");
        
        // Chave primária
        builder.HasKey(x => x.Id);
        builder.Property(x => x.Id)
            .HasColumnName("id")
            .ValueGeneratedOnAdd();
        
        // Propriedades
        builder.Property(x => x.FornecedorId)
            .HasColumnName("fornecedor_id")
            .IsRequired();
            
        builder.Property(x => x.CulturaId)
            .HasColumnName("cultura_id")
            .IsRequired();
            
        builder.Property(x => x.FormaPagamentoId)
            .HasColumnName("forma_pagamento_id")
            .IsRequired();
            
        builder.Property(x => x.Ativo)
            .HasColumnName("ativo")
            .HasDefaultValue(true);
        
        // Campos de auditoria
        builder.Property(x => x.DataCriacao)
            .HasColumnName("data_criacao")
            .HasDefaultValueSql("CURRENT_TIMESTAMP");
            
        builder.Property(x => x.DataAtualizacao)
            .HasColumnName("data_atualizacao");
        
        // Relacionamentos
        builder.HasOne(x => x.FormaPagamento)
            .WithMany(x => x.CulturaFormasPagamento)
            .HasForeignKey(x => x.FormaPagamentoId)
            .OnDelete(DeleteBehavior.Restrict);
        
        // Índices
        builder.HasIndex(x => x.FornecedorId)
            .HasDatabaseName("ix_cultura_forma_pagamento_fornecedor_id");
            
        builder.HasIndex(x => x.CulturaId)
            .HasDatabaseName("ix_cultura_forma_pagamento_cultura_id");
            
        builder.HasIndex(x => x.FormaPagamentoId)
            .HasDatabaseName("ix_cultura_forma_pagamento_forma_pagamento_id");
            
        builder.HasIndex(x => new { x.FornecedorId, x.CulturaId, x.FormaPagamentoId })
            .HasDatabaseName("ix_cultura_forma_pagamento_unique")
            .IsUnique();
            
        builder.HasIndex(x => x.Ativo)
            .HasDatabaseName("ix_cultura_forma_pagamento_ativo");
    }
}
</CulturaFormaPagamentoConfiguration.cs>
<FormaPagamentoConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Pagamentos.Dominio.Entidades;

namespace Agriis.Pagamentos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade FormaPagamento
/// </summary>
public class FormaPagamentoConfiguration : IEntityTypeConfiguration<FormaPagamento>
{
    public void Configure(EntityTypeBuilder<FormaPagamento> builder)
    {
        // Tabela
        builder.ToTable("forma_pagamento");
        
        // Chave primária
        builder.HasKey(x => x.Id);
        builder.Property(x => x.Id)
            .HasColumnName("id")
            .ValueGeneratedOnAdd();
        
        // Propriedades
        builder.Property(x => x.Descricao)
            .HasColumnName("descricao")
            .HasMaxLength(45)
            .IsRequired();
            
        builder.Property(x => x.Ativo)
            .HasColumnName("ativo")
            .HasDefaultValue(true);
        
        // Campos de auditoria
        builder.Property(x => x.DataCriacao)
            .HasColumnName("data_criacao")
            .HasDefaultValueSql("CURRENT_TIMESTAMP");
            
        builder.Property(x => x.DataAtualizacao)
            .HasColumnName("data_atualizacao");
        
        // Relacionamentos
        builder.HasMany(x => x.CulturaFormasPagamento)
            .WithOne(x => x.FormaPagamento)
            .HasForeignKey(x => x.FormaPagamentoId)
            .OnDelete(DeleteBehavior.Restrict);
        
        // Índices
        builder.HasIndex(x => x.Descricao)
            .HasDatabaseName("ix_forma_pagamento_descricao");
            
        builder.HasIndex(x => x.Ativo)
            .HasDatabaseName("ix_forma_pagamento_ativo");
    }
}
</FormaPagamentoConfiguration.cs>
<CulturaFormaPagamentoRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Pagamentos.Dominio.Entidades;
using Agriis.Pagamentos.Dominio.Interfaces;

namespace Agriis.Pagamentos.Infraestrutura.Repositorios;

/// <summary>
/// Repositório para associações cultura-fornecedor-forma de pagamento
/// </summary>
public class CulturaFormaPagamentoRepository : RepositoryBase<CulturaFormaPagamento, DbContext>, ICulturaFormaPagamentoRepository
{
    public CulturaFormaPagamentoRepository(DbContext context) : base(context)
    {
    }

    public async Task<CulturaFormaPagamento?> ObterPorFornecedorCulturaFormaPagamentoAsync(
        int fornecedorId, 
        int culturaId, 
        int formaPagamentoId)
    {
        return await DbSet
            .Include(x => x.FormaPagamento)
            .FirstOrDefaultAsync(x => 
                x.FornecedorId == fornecedorId && 
                x.CulturaId == culturaId && 
                x.FormaPagamentoId == formaPagamentoId);
    }

    public async Task<IEnumerable<CulturaFormaPagamento>> ObterPorFornecedorAsync(int fornecedorId)
    {
        return await DbSet
            .Include(x => x.FormaPagamento)
            .Where(x => x.FornecedorId == fornecedorId && x.Ativo)
            .OrderBy(x => x.FormaPagamento.Descricao)
            .ToListAsync();
    }

    public async Task<IEnumerable<CulturaFormaPagamento>> ObterPorCulturaAsync(int culturaId)
    {
        return await DbSet
            .Include(x => x.FormaPagamento)
            .Where(x => x.CulturaId == culturaId && x.Ativo)
            .OrderBy(x => x.FormaPagamento.Descricao)
            .ToListAsync();
    }

    public async Task<IEnumerable<FormaPagamento>> ObterFormasPagamentoPorFornecedorCulturaAsync(
        int fornecedorId, 
        int culturaId)
    {
        return await DbSet
            .Include(x => x.FormaPagamento)
            .Where(x => x.FornecedorId == fornecedorId && 
                       x.CulturaId == culturaId && 
                       x.Ativo && 
                       x.FormaPagamento.Ativo)
            .Select(x => x.FormaPagamento)
            .OrderBy(x => x.Descricao)
            .ToListAsync();
    }

    public async Task<bool> ExisteAssociacaoAtivaAsync(int fornecedorId, int culturaId, int formaPagamentoId)
    {
        return await DbSet
            .AnyAsync(x => x.FornecedorId == fornecedorId && 
                          x.CulturaId == culturaId && 
                          x.FormaPagamentoId == formaPagamentoId && 
                          x.Ativo);
    }
}
</CulturaFormaPagamentoRepository.cs>
<FormaPagamentoRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Pagamentos.Dominio.Entidades;
using Agriis.Pagamentos.Dominio.Interfaces;

namespace Agriis.Pagamentos.Infraestrutura.Repositorios;

/// <summary>
/// Repositório para formas de pagamento
/// </summary>
public class FormaPagamentoRepository : RepositoryBase<FormaPagamento, DbContext>, IFormaPagamentoRepository
{
    public FormaPagamentoRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<FormaPagamento>> ObterAtivasAsync()
    {
        return await DbSet
            .Where(x => x.Ativo)
            .OrderBy(x => x.Descricao)
            .ToListAsync();
    }

    public async Task<IEnumerable<FormaPagamento>> ObterPorPedidoIdAsync(int pedidoId)
    {
        // Esta consulta replica a lógica do Python que busca formas de pagamento
        // baseadas nos itens do pedido e suas culturas/fornecedores
        var query = @"
            SELECT DISTINCT fp.id, fp.descricao, fp.ativo, fp.data_criacao, fp.data_atualizacao
            FROM forma_pagamento fp
            INNER JOIN cultura_forma_pagamento cfp ON cfp.forma_pagamento_id = fp.id
            INNER JOIN catalogo c ON c.cultura_id = cfp.cultura_id
            INNER JOIN ponto_distribuicao pd ON pd.id = c.ponto_distribuicao_id
            INNER JOIN catalogo_item ci ON ci.catalogo_id = c.id
            INNER JOIN pedido_item pi ON pi.catalogo_item_id = ci.id
            WHERE pi.pedido_id = {0}
              AND cfp.fornecedor_id = pd.fornecedor_id
              AND cfp.ativo = true
              AND fp.ativo = true
            ORDER BY fp.descricao";

        return await DbSet
            .FromSqlRaw(query, pedidoId)
            .ToListAsync();
    }

    public async Task<bool> ExisteAtivaAsync(int id)
    {
        return await DbSet
            .AnyAsync(x => x.Id == id && x.Ativo);
    }
}
</FormaPagamentoRepository.cs>
<AgendarTransporteDto.cs>
namespace Agriis.Pedidos.Aplicacao.DTOs;

/// <summary>
/// DTO para agendamento de transporte
/// </summary>
public class AgendarTransporteDto
{
    /// <summary>
    /// ID do item de pedido
    /// </summary>
    public int PedidoItemId { get; set; }

    /// <summary>
    /// Quantidade a ser transportada
    /// </summary>
    public decimal Quantidade { get; set; }

    /// <summary>
    /// Data e hora do agendamento
    /// </summary>
    public DateTime DataAgendamento { get; set; }

    /// <summary>
    /// Endereço de origem (opcional)
    /// </summary>
    public string? EnderecoOrigem { get; set; }

    /// <summary>
    /// Endereço de destino (opcional)
    /// </summary>
    public string? EnderecoDestino { get; set; }

    /// <summary>
    /// Distância em quilômetros (opcional)
    /// </summary>
    public decimal? DistanciaKm { get; set; }

    /// <summary>
    /// Observações sobre o transporte (opcional)
    /// </summary>
    public string? Observacoes { get; set; }
}

/// <summary>
/// DTO para reagendamento de transporte
/// </summary>
public class ReagendarTransporteDto
{
    /// <summary>
    /// Nova data e hora do agendamento
    /// </summary>
    public DateTime NovaDataAgendamento { get; set; }

    /// <summary>
    /// Observações sobre o reagendamento (opcional)
    /// </summary>
    public string? Observacoes { get; set; }
}

/// <summary>
/// DTO para atualização de valor de frete
/// </summary>
public class AtualizarValorFreteDto
{
    /// <summary>
    /// Novo valor do frete
    /// </summary>
    public decimal NovoValorFrete { get; set; }

    /// <summary>
    /// Motivo da alteração (opcional)
    /// </summary>
    public string? Motivo { get; set; }
}

/// <summary>
/// DTO para validação de múltiplos agendamentos
/// </summary>
public class ValidarAgendamentosDto
{
    /// <summary>
    /// Lista de agendamentos a serem validados
    /// </summary>
    public List<SolicitacaoAgendamentoDto> Agendamentos { get; set; } = new();
}

/// <summary>
/// DTO para solicitação de agendamento
/// </summary>
public class SolicitacaoAgendamentoDto
{
    /// <summary>
    /// ID do item de pedido
    /// </summary>
    public int PedidoItemId { get; set; }

    /// <summary>
    /// Quantidade a ser transportada
    /// </summary>
    public decimal Quantidade { get; set; }

    /// <summary>
    /// Data do agendamento
    /// </summary>
    public DateTime DataAgendamento { get; set; }

    /// <summary>
    /// Endereço de origem (opcional)
    /// </summary>
    public string? EnderecoOrigem { get; set; }

    /// <summary>
    /// Endereço de destino (opcional)
    /// </summary>
    public string? EnderecoDestino { get; set; }

    /// <summary>
    /// Distância em quilômetros (opcional)
    /// </summary>
    public decimal? DistanciaKm { get; set; }

    /// <summary>
    /// Observações (opcional)
    /// </summary>
    public string? Observacoes { get; set; }
}

/// <summary>
/// DTO com resultado da validação de agendamentos
/// </summary>
public class ValidacaoAgendamentoDto
{
    /// <summary>
    /// Indica se a validação foi bem-sucedida
    /// </summary>
    public bool EhValido { get; set; }

    /// <summary>
    /// Lista de erros encontrados
    /// </summary>
    public List<string> Erros { get; set; } = new();
}

/// <summary>
/// DTO com resumo de transporte de um pedido
/// </summary>
public class ResumoTransportePedidoDto
{
    /// <summary>
    /// Total de itens no pedido
    /// </summary>
    public int TotalItens { get; set; }

    /// <summary>
    /// Itens que possuem transporte agendado
    /// </summary>
    public int ItensComTransporte { get; set; }

    /// <summary>
    /// Total de transportes agendados
    /// </summary>
    public int TotalTransportes { get; set; }

    /// <summary>
    /// Transportes com data agendada
    /// </summary>
    public int TransportesAgendados { get; set; }

    /// <summary>
    /// Peso total de todos os transportes
    /// </summary>
    public decimal PesoTotal { get; set; }

    /// <summary>
    /// Volume total de todos os transportes
    /// </summary>
    public decimal VolumeTotal { get; set; }

    /// <summary>
    /// Valor total do frete
    /// </summary>
    public decimal ValorFreteTotal { get; set; }

    /// <summary>
    /// Data do próximo agendamento
    /// </summary>
    public DateTime? ProximoAgendamento { get; set; }
}
</AgendarTransporteDto.cs>
<CalcularFreteDto.cs>
namespace Agriis.Pedidos.Aplicacao.DTOs;

/// <summary>
/// DTO para cálculo de frete
/// </summary>
public class CalcularFreteDto
{
    /// <summary>
    /// ID do produto
    /// </summary>
    public int ProdutoId { get; set; }

    /// <summary>
    /// Quantidade do produto
    /// </summary>
    public decimal Quantidade { get; set; }

    /// <summary>
    /// Distância em quilômetros
    /// </summary>
    public decimal DistanciaKm { get; set; }

    /// <summary>
    /// Valor por quilograma por quilômetro (opcional)
    /// </summary>
    public decimal? ValorPorKgKm { get; set; }

    /// <summary>
    /// Valor mínimo de frete (opcional)
    /// </summary>
    public decimal? ValorMinimoFrete { get; set; }
}

/// <summary>
/// DTO para cálculo de frete consolidado
/// </summary>
public class CalcularFreteConsolidadoDto
{
    /// <summary>
    /// Lista de itens para cálculo
    /// </summary>
    public List<ItemFreteDto> Itens { get; set; } = new();

    /// <summary>
    /// Distância em quilômetros
    /// </summary>
    public decimal DistanciaKm { get; set; }

    /// <summary>
    /// Valor por quilograma por quilômetro (opcional)
    /// </summary>
    public decimal? ValorPorKgKm { get; set; }

    /// <summary>
    /// Valor mínimo de frete (opcional)
    /// </summary>
    public decimal? ValorMinimoFrete { get; set; }
}

/// <summary>
/// DTO para item de frete
/// </summary>
public class ItemFreteDto
{
    /// <summary>
    /// ID do produto
    /// </summary>
    public int ProdutoId { get; set; }

    /// <summary>
    /// Quantidade do produto
    /// </summary>
    public decimal Quantidade { get; set; }
}

/// <summary>
/// DTO com resultado do cálculo de frete
/// </summary>
public class CalculoFreteDto
{
    /// <summary>
    /// Peso total em quilogramas
    /// </summary>
    public decimal PesoTotal { get; set; }

    /// <summary>
    /// Volume total em metros cúbicos
    /// </summary>
    public decimal VolumeTotal { get; set; }

    /// <summary>
    /// Peso cúbico total (se aplicável)
    /// </summary>
    public decimal? PesoCubadoTotal { get; set; }

    /// <summary>
    /// Peso utilizado para cálculo do frete
    /// </summary>
    public decimal PesoParaFrete { get; set; }

    /// <summary>
    /// Valor do frete calculado
    /// </summary>
    public decimal ValorFrete { get; set; }

    /// <summary>
    /// Distância utilizada no cálculo
    /// </summary>
    public decimal DistanciaKm { get; set; }

    /// <summary>
    /// Tipo de cálculo utilizado
    /// </summary>
    public string TipoCalculoUtilizado { get; set; } = string.Empty;
}

/// <summary>
/// DTO com resultado do cálculo de frete consolidado
/// </summary>
public class CalculoFreteConsolidadoDto
{
    /// <summary>
    /// Cálculos individuais por item
    /// </summary>
    public List<CalculoFreteDto> CalculosIndividuais { get; set; } = new();

    /// <summary>
    /// Peso total consolidado
    /// </summary>
    public decimal PesoTotalConsolidado { get; set; }

    /// <summary>
    /// Volume total consolidado
    /// </summary>
    public decimal VolumeTotalConsolidado { get; set; }

    /// <summary>
    /// Peso cúbico total consolidado (se aplicável)
    /// </summary>
    public decimal? PesoCubadoTotalConsolidado { get; set; }

    /// <summary>
    /// Valor do frete consolidado
    /// </summary>
    public decimal ValorFreteConsolidado { get; set; }

    /// <summary>
    /// Distância utilizada no cálculo
    /// </summary>
    public decimal DistanciaKm { get; set; }
}
</CalcularFreteDto.cs>
<CriarPropostaDto.cs>
using Agriis.Pedidos.Dominio.Enums;

namespace Agriis.Pedidos.Aplicacao.DTOs;

/// <summary>
/// DTO para criação de proposta
/// </summary>
public class CriarPropostaDto
{
    /// <summary>
    /// Ação do comprador (quando aplicável)
    /// </summary>
    public AcaoCompradorPedido? AcaoComprador { get; set; }
    
    /// <summary>
    /// Observação da proposta
    /// </summary>
    public string? Observacao { get; set; }
}

/// <summary>
/// DTO para listagem de propostas
/// </summary>
public class ListarPropostasDto
{
    /// <summary>
    /// Número da página
    /// </summary>
    public int Page { get; set; }
    
    /// <summary>
    /// Máximo de itens por página
    /// </summary>
    public int MaxPerPage { get; set; }
    
    /// <summary>
    /// Campo de ordenação
    /// </summary>
    public string? Sorting { get; set; }
}
</CriarPropostaDto.cs>
<PedidoDto.cs>
using System.Text.Json;
using Agriis.Pedidos.Dominio.Enums;

namespace Agriis.Pedidos.Aplicacao.DTOs;

/// <summary>
/// DTO para representar um pedido
/// </summary>
public class PedidoDto
{
    public int Id { get; set; }
    public StatusPedido Status { get; set; }
    public StatusCarrinho StatusCarrinho { get; set; }
    public int QuantidadeItens { get; set; }
    public JsonDocument? Totais { get; set; }
    public bool PermiteContato { get; set; }
    public bool NegociarPedido { get; set; }
    public DateTime DataLimiteInteracao { get; set; }
    public int FornecedorId { get; set; }
    public int ProdutorId { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
    public List<PedidoItemDto> Itens { get; set; } = new();
}

/// <summary>
/// DTO para criar um novo pedido
/// </summary>
public class CriarPedidoDto
{
    public int FornecedorId { get; set; }
    public int ProdutorId { get; set; }
    public bool PermiteContato { get; set; }
    public bool NegociarPedido { get; set; }
    public int DiasLimiteInteracao { get; set; } = 7;
}

/// <summary>
/// DTO para atualizar um pedido
/// </summary>
public class AtualizarPedidoDto
{
    public bool? PermiteContato { get; set; }
    public bool? NegociarPedido { get; set; }
    public JsonDocument? Totais { get; set; }
}
</PedidoDto.cs>
<PedidoItemDto.cs>
using System.Text.Json;

namespace Agriis.Pedidos.Aplicacao.DTOs;

/// <summary>
/// DTO para representar um item de pedido
/// </summary>
public class PedidoItemDto
{
    public int Id { get; set; }
    public int PedidoId { get; set; }
    public int ProdutoId { get; set; }
    public decimal Quantidade { get; set; }
    public decimal PrecoUnitario { get; set; }
    public decimal ValorTotal { get; set; }
    public decimal PercentualDesconto { get; set; }
    public decimal ValorDesconto { get; set; }
    public decimal ValorFinal { get; set; }
    public JsonDocument? DadosAdicionais { get; set; }
    public string? Observacoes { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
    public List<PedidoItemTransporteDto> ItensTransporte { get; set; } = new();
}

/// <summary>
/// DTO para criar um novo item de pedido
/// </summary>
public class CriarPedidoItemDto
{
    public int PedidoId { get; set; }
    public int ProdutoId { get; set; }
    public decimal Quantidade { get; set; }
    public decimal PrecoUnitario { get; set; }
    public decimal PercentualDesconto { get; set; } = 0;
    public string? Observacoes { get; set; }
}

/// <summary>
/// DTO para atualizar um item de pedido
/// </summary>
public class AtualizarPedidoItemDto
{
    public decimal? Quantidade { get; set; }
    public decimal? PrecoUnitario { get; set; }
    public decimal? PercentualDesconto { get; set; }
    public string? Observacoes { get; set; }
    public JsonDocument? DadosAdicionais { get; set; }
}

/// <summary>
/// DTO para adicionar item ao carrinho
/// </summary>
public class AdicionarItemCarrinhoDto
{
    public int ProdutoId { get; set; }
    public decimal Quantidade { get; set; }
    public int CatalogoId { get; set; }
    public string? Observacoes { get; set; }
}

/// <summary>
/// DTO para atualizar quantidade de item no carrinho
/// </summary>
public class AtualizarQuantidadeItemDto
{
    public decimal Quantidade { get; set; }
}
</PedidoItemDto.cs>
<PedidoItemTransporteDto.cs>
using System.Text.Json;

namespace Agriis.Pedidos.Aplicacao.DTOs;

/// <summary>
/// DTO para representar um transporte de item de pedido
/// </summary>
public class PedidoItemTransporteDto
{
    public int Id { get; set; }
    public int PedidoItemId { get; set; }
    public decimal Quantidade { get; set; }
    public DateTime? DataAgendamento { get; set; }
    public decimal ValorFrete { get; set; }
    public decimal? PesoTotal { get; set; }
    public decimal? VolumeTotal { get; set; }
    public string? EnderecoOrigem { get; set; }
    public string? EnderecoDestino { get; set; }
    public JsonDocument? InformacoesTransporte { get; set; }
    public string? Observacoes { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criar um novo transporte de item
/// </summary>
public class CriarPedidoItemTransporteDto
{
    public int PedidoItemId { get; set; }
    public decimal Quantidade { get; set; }
    public decimal ValorFrete { get; set; }
    public string? EnderecoOrigem { get; set; }
    public string? EnderecoDestino { get; set; }
    public DateTime? DataAgendamento { get; set; }
}

/// <summary>
/// DTO para atualizar um transporte de item
/// </summary>
public class AtualizarPedidoItemTransporteDto
{
    public decimal? Quantidade { get; set; }
    public decimal? ValorFrete { get; set; }
    public decimal? PesoTotal { get; set; }
    public decimal? VolumeTotal { get; set; }
    public string? EnderecoOrigem { get; set; }
    public string? EnderecoDestino { get; set; }
    public DateTime? DataAgendamento { get; set; }
    public JsonDocument? InformacoesTransporte { get; set; }
    public string? Observacoes { get; set; }
}
</PedidoItemTransporteDto.cs>
<PropostaDto.cs>
using Agriis.Pedidos.Dominio.Enums;

namespace Agriis.Pedidos.Aplicacao.DTOs;

/// <summary>
/// DTO para proposta
/// </summary>
public class PropostaDto
{
    /// <summary>
    /// ID da proposta
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// ID do pedido
    /// </summary>
    public int PedidoId { get; set; }
    
    /// <summary>
    /// Data de criação da proposta
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Ação realizada pelo comprador
    /// </summary>
    public AcaoCompradorPedido? AcaoComprador { get; set; }
    
    /// <summary>
    /// Observação da proposta
    /// </summary>
    public string? Observacao { get; set; }
    
    /// <summary>
    /// Informações do usuário fornecedor (quando aplicável)
    /// </summary>
    public UsuarioFornecedorPropostaDto? UsuarioFornecedor { get; set; }
    
    /// <summary>
    /// Informações do usuário produtor (quando aplicável)
    /// </summary>
    public UsuarioProdutorPropostaDto? UsuarioProdutor { get; set; }
}

/// <summary>
/// DTO para informações do usuário fornecedor na proposta
/// </summary>
public class UsuarioFornecedorPropostaDto
{
    /// <summary>
    /// ID do usuário fornecedor
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome do usuário fornecedor
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Cargo do usuário fornecedor
    /// </summary>
    public string? Cargo { get; set; }
    
    /// <summary>
    /// URL da foto pequena
    /// </summary>
    public string? FotoSmall { get; set; }
}

/// <summary>
/// DTO para informações do usuário produtor na proposta
/// </summary>
public class UsuarioProdutorPropostaDto
{
    /// <summary>
    /// ID do usuário produtor
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Informações do usuário
    /// </summary>
    public UsuarioPropostaDto Usuario { get; set; } = new();
}

/// <summary>
/// DTO para informações básicas do usuário na proposta
/// </summary>
public class UsuarioPropostaDto
{
    /// <summary>
    /// ID do usuário
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome do usuário
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// URL do logo pequeno
    /// </summary>
    public string? UrlLogoSmall { get; set; }
}
</PropostaDto.cs>
<INotificacaoService.cs>
using Agriis.Pedidos.Dominio.Entidades;

namespace Agriis.Pedidos.Aplicacao.Interfaces;

/// <summary>
/// Interface do serviço de notificações
/// </summary>
public interface INotificacaoService
{
    /// <summary>
    /// Envia notificação sobre nova proposta
    /// </summary>
    /// <param name="proposta">Proposta criada</param>
    /// <param name="pedido">Pedido relacionado</param>
    /// <returns>Task</returns>
    Task NotificarNovaPropostaAsync(Proposta proposta, Pedido pedido);
    
    /// <summary>
    /// Envia notificação sobre alteração no carrinho
    /// </summary>
    /// <param name="pedido">Pedido alterado</param>
    /// <param name="descricaoAlteracao">Descrição da alteração</param>
    /// <returns>Task</returns>
    Task NotificarAlteracaoCarrinhoAsync(Pedido pedido, string descricaoAlteracao);
}
</INotificacaoService.cs>
<IPedidoService.cs>
using Agriis.Pedidos.Aplicacao.DTOs;
using Agriis.Pedidos.Dominio.Enums;

namespace Agriis.Pedidos.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de pedidos
/// </summary>
public interface IPedidoService
{
    /// <summary>
    /// Obtém um pedido por ID
    /// </summary>
    /// <param name="id">ID do pedido</param>
    /// <returns>DTO do pedido</returns>
    Task<PedidoDto?> ObterPorIdAsync(int id);
    
    /// <summary>
    /// Obtém um pedido com todos os seus itens
    /// </summary>
    /// <param name="id">ID do pedido</param>
    /// <returns>DTO do pedido com itens</returns>
    Task<PedidoDto?> ObterComItensAsync(int id);
    
    /// <summary>
    /// Obtém pedidos por produtor
    /// </summary>
    /// <param name="produtorId">ID do produtor</param>
    /// <returns>Lista de DTOs de pedidos</returns>
    Task<IEnumerable<PedidoDto>> ObterPorProdutorAsync(int produtorId);
    
    /// <summary>
    /// Obtém pedidos por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de DTOs de pedidos</returns>
    Task<IEnumerable<PedidoDto>> ObterPorFornecedorAsync(int fornecedorId);
    
    /// <summary>
    /// Obtém pedidos por status
    /// </summary>
    /// <param name="status">Status do pedido</param>
    /// <returns>Lista de DTOs de pedidos</returns>
    Task<IEnumerable<PedidoDto>> ObterPorStatusAsync(StatusPedido status);
    
    /// <summary>
    /// Cria um novo pedido
    /// </summary>
    /// <param name="dto">DTO para criação do pedido</param>
    /// <returns>DTO do pedido criado</returns>
    Task<PedidoDto> CriarAsync(CriarPedidoDto dto);
    
    /// <summary>
    /// Atualiza um pedido
    /// </summary>
    /// <param name="id">ID do pedido</param>
    /// <param name="dto">DTO com dados para atualização</param>
    /// <returns>DTO do pedido atualizado</returns>
    Task<PedidoDto?> AtualizarAsync(int id, AtualizarPedidoDto dto);
    
    /// <summary>
    /// Fecha um pedido
    /// </summary>
    /// <param name="id">ID do pedido</param>
    /// <returns>DTO do pedido fechado</returns>
    Task<PedidoDto?> FecharPedidoAsync(int id);
    
    /// <summary>
    /// Cancela um pedido pelo comprador
    /// </summary>
    /// <param name="id">ID do pedido</param>
    /// <returns>DTO do pedido cancelado</returns>
    Task<PedidoDto?> CancelarPorCompradorAsync(int id);
    
    /// <summary>
    /// Obtém pedidos próximos do prazo limite
    /// </summary>
    /// <param name="diasAntes">Quantos dias antes do prazo</param>
    /// <returns>Lista de DTOs de pedidos</returns>
    Task<IEnumerable<PedidoDto>> ObterProximosPrazoLimiteAsync(int diasAntes = 1);
    
    /// <summary>
    /// Obtém pedidos com prazo ultrapassado
    /// </summary>
    /// <returns>Lista de DTOs de pedidos</returns>
    Task<IEnumerable<PedidoDto>> ObterComPrazoUltrapassadoAsync();
    
    /// <summary>
    /// Cancela pedidos com prazo ultrapassado
    /// </summary>
    /// <returns>Quantidade de pedidos cancelados</returns>
    Task<int> CancelarPedidosComPrazoUltrapassadoAsync();
    
    /// <summary>
    /// Adiciona um item ao carrinho de compras
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="dto">Dados do item</param>
    /// <param name="catalogoId">ID do catálogo para consulta de preços</param>
    /// <returns>Item adicionado</returns>
    Task<PedidoItemDto> AdicionarItemCarrinhoAsync(int pedidoId, CriarPedidoItemDto dto, int catalogoId);
    
    /// <summary>
    /// Remove um item do carrinho de compras
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="itemId">ID do item</param>
    Task RemoverItemCarrinhoAsync(int pedidoId, int itemId);
    
    /// <summary>
    /// Atualiza a quantidade de um item no carrinho
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="itemId">ID do item</param>
    /// <param name="novaQuantidade">Nova quantidade</param>
    Task<PedidoItemDto> AtualizarQuantidadeItemAsync(int pedidoId, int itemId, decimal novaQuantidade);
    
    /// <summary>
    /// Recalcula todos os totais do pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Pedido com totais atualizados</returns>
    Task<PedidoDto> RecalcularTotaisAsync(int pedidoId);
    
    /// <summary>
    /// Atualiza o prazo limite de interação do pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="novosDias">Novos dias a partir de agora</param>
    Task<PedidoDto> AtualizarPrazoLimiteAsync(int pedidoId, int novosDias);
}
</IPedidoService.cs>
<IPropostaService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Pedidos.Aplicacao.DTOs;

namespace Agriis.Pedidos.Aplicacao.Interfaces;

/// <summary>
/// Interface do serviço de propostas
/// </summary>
public interface IPropostaService
{
    /// <summary>
    /// Cria uma nova proposta
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="clientId">ID do cliente (PRODUTOR_MOBILE ou FORNECEDOR_WEB)</param>
    /// <param name="dto">Dados da proposta</param>
    /// <returns>Resultado da operação</returns>
    Task<Result> CriarPropostaAsync(int pedidoId, int usuarioId, string clientId, CriarPropostaDto dto);
    
    /// <summary>
    /// Lista todas as propostas de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="dto">Parâmetros de listagem</param>
    /// <returns>Lista paginada de propostas</returns>
    Task<Result<PagedResult<PropostaDto>>> ListarPropostasAsync(int pedidoId, ListarPropostasDto dto);
    
    /// <summary>
    /// Obtém a última proposta de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Última proposta ou null</returns>
    Task<Result<PropostaDto?>> ObterUltimaPropostaAsync(int pedidoId);
}
</IPropostaService.cs>
<ITransporteService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Pedidos.Aplicacao.DTOs;

namespace Agriis.Pedidos.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de transporte
/// </summary>
public interface ITransporteService
{
    /// <summary>
    /// Calcula o frete para um item de pedido
    /// </summary>
    /// <param name="dto">Dados para cálculo do frete</param>
    /// <returns>Resultado do cálculo de frete</returns>
    Task<Result<CalculoFreteDto>> CalcularFreteAsync(CalcularFreteDto dto);

    /// <summary>
    /// Calcula o frete consolidado para múltiplos itens
    /// </summary>
    /// <param name="dto">Dados para cálculo consolidado</param>
    /// <returns>Resultado do cálculo consolidado</returns>
    Task<Result<CalculoFreteConsolidadoDto>> CalcularFreteConsolidadoAsync(CalcularFreteConsolidadoDto dto);

    /// <summary>
    /// Agenda um transporte para um item de pedido
    /// </summary>
    /// <param name="dto">Dados do agendamento</param>
    /// <returns>Transporte agendado</returns>
    Task<Result<PedidoItemTransporteDto>> AgendarTransporteAsync(AgendarTransporteDto dto);

    /// <summary>
    /// Reagenda um transporte existente
    /// </summary>
    /// <param name="transporteId">ID do transporte</param>
    /// <param name="dto">Dados do reagendamento</param>
    /// <returns>Transporte reagendado</returns>
    Task<Result<PedidoItemTransporteDto>> ReagendarTransporteAsync(int transporteId, ReagendarTransporteDto dto);

    /// <summary>
    /// Atualiza o valor do frete de um transporte
    /// </summary>
    /// <param name="transporteId">ID do transporte</param>
    /// <param name="dto">Dados da atualização</param>
    /// <returns>Transporte atualizado</returns>
    Task<Result<PedidoItemTransporteDto>> AtualizarValorFreteAsync(int transporteId, AtualizarValorFreteDto dto);

    /// <summary>
    /// Lista os transportes de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Lista de transportes</returns>
    Task<Result<IEnumerable<PedidoItemTransporteDto>>> ListarTransportesPedidoAsync(int pedidoId);

    /// <summary>
    /// Obtém um transporte por ID
    /// </summary>
    /// <param name="transporteId">ID do transporte</param>
    /// <returns>Dados do transporte</returns>
    Task<Result<PedidoItemTransporteDto>> ObterTransportePorIdAsync(int transporteId);

    /// <summary>
    /// Valida múltiplos agendamentos
    /// </summary>
    /// <param name="dto">Dados dos agendamentos</param>
    /// <returns>Resultado da validação</returns>
    Task<Result<ValidacaoAgendamentoDto>> ValidarMultiplosAgendamentosAsync(ValidarAgendamentosDto dto);

    /// <summary>
    /// Obtém o resumo de transporte de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Resumo do transporte</returns>
    Task<Result<ResumoTransportePedidoDto>> ObterResumoTransporteAsync(int pedidoId);

    /// <summary>
    /// Cancela um transporte agendado
    /// </summary>
    /// <param name="transporteId">ID do transporte</param>
    /// <param name="motivo">Motivo do cancelamento</param>
    /// <returns>Resultado da operação</returns>
    Task<Result<bool>> CancelarTransporteAsync(int transporteId, string? motivo = null);
}
</ITransporteService.cs>
<PedidoMappingProfile.cs>
using AutoMapper;
using Agriis.Pedidos.Aplicacao.DTOs;
using Agriis.Pedidos.Dominio.Entidades;

namespace Agriis.Pedidos.Aplicacao.Mapeamentos;

/// <summary>
/// Perfil de mapeamento para entidades de pedidos
/// </summary>
public class PedidoMappingProfile : Profile
{
    public PedidoMappingProfile()
    {
        CreateMap<Pedido, PedidoDto>();
        CreateMap<CriarPedidoDto, Pedido>();
        
        CreateMap<PedidoItem, PedidoItemDto>();
        CreateMap<CriarPedidoItemDto, PedidoItem>();
        
        CreateMap<PedidoItemTransporte, PedidoItemTransporteDto>();
        
        // Mapeamentos para Proposta
        CreateMap<Proposta, PropostaDto>()
            .ForMember(dest => dest.UsuarioFornecedor, opt => opt.Ignore()) // Será mapeado manualmente quando necessário
            .ForMember(dest => dest.UsuarioProdutor, opt => opt.Ignore()); // Será mapeado manualmente quando necessário
    }
}
</PedidoMappingProfile.cs>
<NotificacaoService.cs>
using Agriis.Pedidos.Aplicacao.Interfaces;
using Agriis.Pedidos.Dominio.Entidades;
using Microsoft.Extensions.Logging;

namespace Agriis.Pedidos.Aplicacao.Servicos;

/// <summary>
/// Serviço de notificações para propostas
/// </summary>
public class NotificacaoService : INotificacaoService
{
    private readonly ILogger<NotificacaoService> _logger;
    
    /// <summary>
    /// Construtor do serviço de notificações
    /// </summary>
    public NotificacaoService(ILogger<NotificacaoService> logger)
    {
        _logger = logger;
    }
    
    /// <summary>
    /// Envia notificação sobre nova proposta
    /// </summary>
    /// <param name="proposta">Proposta criada</param>
    /// <param name="pedido">Pedido relacionado</param>
    /// <returns>Task</returns>
    public async Task NotificarNovaPropostaAsync(Proposta proposta, Pedido pedido)
    {
        // TODO: Implementar notificação por email/push/SignalR
        _logger.LogInformation("Nova proposta criada para pedido {PedidoId} - Proposta {PropostaId}", 
            pedido.Id, proposta.Id);
        
        await Task.CompletedTask;
    }
    
    /// <summary>
    /// Envia notificação sobre alteração no carrinho
    /// </summary>
    /// <param name="pedido">Pedido alterado</param>
    /// <param name="descricaoAlteracao">Descrição da alteração</param>
    /// <returns>Task</returns>
    public async Task NotificarAlteracaoCarrinhoAsync(Pedido pedido, string descricaoAlteracao)
    {
        // TODO: Implementar notificação por email/push/SignalR
        _logger.LogInformation("Carrinho alterado para pedido {PedidoId}: {Descricao}", 
            pedido.Id, descricaoAlteracao);
        
        await Task.CompletedTask;
    }
}
</NotificacaoService.cs>
<PedidoService.cs>
using Agriis.Pedidos.Aplicacao.DTOs;
using Agriis.Pedidos.Aplicacao.Interfaces;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Enums;
using Agriis.Pedidos.Dominio.Interfaces;
using Agriis.Pedidos.Dominio.Servicos;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Compartilhado.Dominio.Interfaces;
using AutoMapper;

namespace Agriis.Pedidos.Aplicacao.Servicos;

/// <summary>
/// Implementação do serviço de aplicação de pedidos
/// </summary>
public class PedidoService : IPedidoService
{
    private readonly IPedidoRepository _pedidoRepository;
    private readonly IPedidoItemRepository _pedidoItemRepository;
    private readonly CarrinhoComprasService _carrinhoService;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public PedidoService(
        IPedidoRepository pedidoRepository,
        IPedidoItemRepository pedidoItemRepository,
        CarrinhoComprasService carrinhoService,
        IUnitOfWork unitOfWork,
        IMapper mapper)
    {
        _pedidoRepository = pedidoRepository;
        _pedidoItemRepository = pedidoItemRepository;
        _carrinhoService = carrinhoService;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<PedidoDto?> ObterPorIdAsync(int id)
    {
        var pedido = await _pedidoRepository.ObterPorIdAsync(id);
        return pedido != null ? _mapper.Map<PedidoDto>(pedido) : null;
    }

    public async Task<PedidoDto?> ObterComItensAsync(int id)
    {
        var pedido = await _pedidoRepository.ObterComItensAsync(id);
        return pedido != null ? _mapper.Map<PedidoDto>(pedido) : null;
    }

    public async Task<IEnumerable<PedidoDto>> ObterPorProdutorAsync(int produtorId)
    {
        var pedidos = await _pedidoRepository.ObterPorProdutorAsync(produtorId);
        return _mapper.Map<IEnumerable<PedidoDto>>(pedidos);
    }

    public async Task<IEnumerable<PedidoDto>> ObterPorFornecedorAsync(int fornecedorId)
    {
        var pedidos = await _pedidoRepository.ObterPorFornecedorAsync(fornecedorId);
        return _mapper.Map<IEnumerable<PedidoDto>>(pedidos);
    }

    public async Task<IEnumerable<PedidoDto>> ObterPorStatusAsync(StatusPedido status)
    {
        var pedidos = await _pedidoRepository.ObterPorStatusAsync(status);
        return _mapper.Map<IEnumerable<PedidoDto>>(pedidos);
    }

    public async Task<PedidoDto> CriarAsync(CriarPedidoDto dto)
    {
        var pedido = new Pedido(
            dto.FornecedorId,
            dto.ProdutorId,
            dto.PermiteContato,
            dto.NegociarPedido,
            dto.DiasLimiteInteracao);

        await _pedidoRepository.AdicionarAsync(pedido);
        await _unitOfWork.SalvarAlteracoesAsync();

        return _mapper.Map<PedidoDto>(pedido);
    }

    public async Task<PedidoDto?> AtualizarAsync(int id, AtualizarPedidoDto dto)
    {
        var pedido = await _pedidoRepository.ObterPorIdAsync(id);
        if (pedido == null)
            return null;

        if (dto.PermiteContato.HasValue)
        {
            // TODO: Implementar método na entidade para atualizar PermiteContato
        }

        if (dto.NegociarPedido.HasValue)
        {
            // TODO: Implementar método na entidade para atualizar NegociarPedido
        }

        if (dto.Totais != null)
        {
            pedido.AtualizarTotais(dto.Totais);
        }

        await _unitOfWork.SalvarAlteracoesAsync();
        return _mapper.Map<PedidoDto>(pedido);
    }

    public async Task<PedidoDto?> FecharPedidoAsync(int id)
    {
        var pedido = await _pedidoRepository.ObterPorIdAsync(id);
        if (pedido == null)
            return null;

        pedido.FecharPedido();
        await _unitOfWork.SalvarAlteracoesAsync();

        return _mapper.Map<PedidoDto>(pedido);
    }

    public async Task<PedidoDto?> CancelarPorCompradorAsync(int id)
    {
        var pedido = await _pedidoRepository.ObterPorIdAsync(id);
        if (pedido == null)
            return null;

        pedido.CancelarPorComprador();
        await _unitOfWork.SalvarAlteracoesAsync();

        return _mapper.Map<PedidoDto>(pedido);
    }

    public async Task<IEnumerable<PedidoDto>> ObterProximosPrazoLimiteAsync(int diasAntes = 1)
    {
        var pedidos = await _pedidoRepository.ObterProximosPrazoLimiteAsync(diasAntes);
        return _mapper.Map<IEnumerable<PedidoDto>>(pedidos);
    }

    public async Task<IEnumerable<PedidoDto>> ObterComPrazoUltrapassadoAsync()
    {
        var pedidos = await _pedidoRepository.ObterComPrazoUltrapassadoAsync();
        return _mapper.Map<IEnumerable<PedidoDto>>(pedidos);
    }

    public async Task<int> CancelarPedidosComPrazoUltrapassadoAsync()
    {
        var pedidos = await _pedidoRepository.ObterComPrazoUltrapassadoAsync();
        var contador = 0;

        foreach (var pedido in pedidos)
        {
            if (pedido.Status == StatusPedido.EmNegociacao)
            {
                pedido.CancelarPorTempoLimite();
                contador++;
            }
        }

        if (contador > 0)
        {
            await _unitOfWork.SalvarAlteracoesAsync();
        }

        return contador;
    }

    /// <summary>
    /// Adiciona um item ao carrinho de compras
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="dto">Dados do item</param>
    /// <param name="catalogoId">ID do catálogo para consulta de preços</param>
    /// <returns>Item adicionado</returns>
    public async Task<PedidoItemDto> AdicionarItemCarrinhoAsync(int pedidoId, CriarPedidoItemDto dto, int catalogoId)
    {
        var pedido = await _pedidoRepository.ObterComItensAsync(pedidoId);
        if (pedido == null)
            throw new InvalidOperationException($"Pedido com ID {pedidoId} não encontrado");

        if (!_carrinhoService.VerificarPrazoLimite(pedido))
            throw new InvalidOperationException("Pedido fora do prazo limite para modificações");

        var item = await _carrinhoService.AdicionarItemAsync(
            pedido, 
            dto.ProdutoId, 
            dto.Quantidade, 
            catalogoId, 
            dto.Observacoes);

        pedido.AdicionarItem(item);

        // Recalcular totais
        var totais = _carrinhoService.CalcularTotais(pedido);
        pedido.AtualizarTotais(totais.ToJsonDocument());

        await _unitOfWork.SalvarAlteracoesAsync();

        return _mapper.Map<PedidoItemDto>(item);
    }

    /// <summary>
    /// Remove um item do carrinho de compras
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="itemId">ID do item</param>
    public async Task RemoverItemCarrinhoAsync(int pedidoId, int itemId)
    {
        var pedido = await _pedidoRepository.ObterComItensAsync(pedidoId);
        if (pedido == null)
            throw new InvalidOperationException($"Pedido com ID {pedidoId} não encontrado");

        if (!_carrinhoService.VerificarPrazoLimite(pedido))
            throw new InvalidOperationException("Pedido fora do prazo limite para modificações");

        pedido.RemoverItem(itemId);

        // Recalcular totais
        var totais = _carrinhoService.CalcularTotais(pedido);
        pedido.AtualizarTotais(totais.ToJsonDocument());

        await _unitOfWork.SalvarAlteracoesAsync();
    }

    /// <summary>
    /// Atualiza a quantidade de um item no carrinho
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="itemId">ID do item</param>
    /// <param name="novaQuantidade">Nova quantidade</param>
    public async Task<PedidoItemDto> AtualizarQuantidadeItemAsync(int pedidoId, int itemId, decimal novaQuantidade)
    {
        var pedido = await _pedidoRepository.ObterComItensAsync(pedidoId);
        if (pedido == null)
            throw new InvalidOperationException($"Pedido com ID {pedidoId} não encontrado");

        if (!_carrinhoService.VerificarPrazoLimite(pedido))
            throw new InvalidOperationException("Pedido fora do prazo limite para modificações");

        var item = pedido.Itens.FirstOrDefault(i => i.Id == itemId);
        if (item == null)
            throw new InvalidOperationException($"Item com ID {itemId} não encontrado no pedido");

        await _carrinhoService.AtualizarQuantidadeItemAsync(item, novaQuantidade, pedido);

        // Recalcular totais
        var totais = _carrinhoService.CalcularTotais(pedido);
        pedido.AtualizarTotais(totais.ToJsonDocument());

        await _unitOfWork.SalvarAlteracoesAsync();

        return _mapper.Map<PedidoItemDto>(item);
    }

    /// <summary>
    /// Recalcula todos os totais do pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Pedido com totais atualizados</returns>
    public async Task<PedidoDto> RecalcularTotaisAsync(int pedidoId)
    {
        var pedido = await _pedidoRepository.ObterComItensAsync(pedidoId);
        if (pedido == null)
            throw new InvalidOperationException($"Pedido com ID {pedidoId} não encontrado");

        var totais = _carrinhoService.CalcularTotais(pedido);
        pedido.AtualizarTotais(totais.ToJsonDocument());

        await _unitOfWork.SalvarAlteracoesAsync();

        return _mapper.Map<PedidoDto>(pedido);
    }

    /// <summary>
    /// Atualiza o prazo limite de interação do pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="novosDias">Novos dias a partir de agora</param>
    public async Task<PedidoDto> AtualizarPrazoLimiteAsync(int pedidoId, int novosDias)
    {
        var pedido = await _pedidoRepository.ObterPorIdAsync(pedidoId);
        if (pedido == null)
            throw new InvalidOperationException($"Pedido com ID {pedidoId} não encontrado");

        pedido.AtualizarPrazoLimite(novosDias);
        await _unitOfWork.SalvarAlteracoesAsync();

        return _mapper.Map<PedidoDto>(pedido);
    }
}
</PedidoService.cs>
<PrazoLimiteBackgroundService.cs>
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;
using Agriis.Pedidos.Aplicacao.Interfaces;

namespace Agriis.Pedidos.Aplicacao.Servicos;

/// <summary>
/// Serviço em background para gerenciar prazos limite de pedidos
/// </summary>
public class PrazoLimiteBackgroundService : BackgroundService
{
    private readonly IServiceProvider _serviceProvider;
    private readonly ILogger<PrazoLimiteBackgroundService> _logger;
    private readonly TimeSpan _intervaloExecucao = TimeSpan.FromHours(1); // Executa a cada hora

    public PrazoLimiteBackgroundService(
        IServiceProvider serviceProvider,
        ILogger<PrazoLimiteBackgroundService> logger)
    {
        _serviceProvider = serviceProvider;
        _logger = logger;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("Serviço de prazo limite iniciado");

        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                await ProcessarPrazosLimiteAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao processar prazos limite de pedidos");
            }

            await Task.Delay(_intervaloExecucao, stoppingToken);
        }

        _logger.LogInformation("Serviço de prazo limite finalizado");
    }

    private async Task ProcessarPrazosLimiteAsync()
    {
        using var scope = _serviceProvider.CreateScope();
        var pedidoService = scope.ServiceProvider.GetRequiredService<IPedidoService>();

        try
        {
            // Cancelar pedidos com prazo ultrapassado
            var pedidosCancelados = await pedidoService.CancelarPedidosComPrazoUltrapassadoAsync();
            
            if (pedidosCancelados > 0)
            {
                _logger.LogInformation("Cancelados {Count} pedidos por prazo ultrapassado", pedidosCancelados);
            }

            // Notificar sobre pedidos próximos do prazo (1 dia antes)
            var pedidosProximos = await pedidoService.ObterProximosPrazoLimiteAsync(1);
            var countProximos = pedidosProximos.Count();
            
            if (countProximos > 0)
            {
                _logger.LogInformation("Encontrados {Count} pedidos próximos do prazo limite", countProximos);
                
                // TODO: Implementar notificações para produtores e fornecedores
                // sobre pedidos próximos do prazo limite
                foreach (var pedido in pedidosProximos)
                {
                    _logger.LogDebug("Pedido {PedidoId} próximo do prazo limite: {DataLimite}", 
                        pedido.Id, pedido.DataLimiteInteracao);
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao processar prazos limite");
            throw;
        }
    }
}
</PrazoLimiteBackgroundService.cs>
<PropostaService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Pedidos.Aplicacao.DTOs;
using Agriis.Pedidos.Aplicacao.Interfaces;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Enums;
using Agriis.Pedidos.Dominio.Interfaces;
using AutoMapper;
using Microsoft.Extensions.Logging;

namespace Agriis.Pedidos.Aplicacao.Servicos;

/// <summary>
/// Serviço de propostas
/// </summary>
public class PropostaService : IPropostaService
{
    private readonly IPropostaRepository _propostaRepository;
    private readonly IPedidoRepository _pedidoRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly ILogger<PropostaService> _logger;
    
    // Constantes para identificação de clientes
    private const string PRODUTOR_MOBILE = "PRODUTOR_MOBILE";
    private const string FORNECEDOR_WEB = "FORNECEDOR_WEB";
    
    /// <summary>
    /// Construtor do serviço de propostas
    /// </summary>
    public PropostaService(
        IPropostaRepository propostaRepository,
        IPedidoRepository pedidoRepository,
        IUnitOfWork unitOfWork,
        IMapper mapper,
        ILogger<PropostaService> logger)
    {
        _propostaRepository = propostaRepository;
        _pedidoRepository = pedidoRepository;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        _logger = logger;
    }
    
    /// <summary>
    /// Cria uma nova proposta
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="clientId">ID do cliente (PRODUTOR_MOBILE ou FORNECEDOR_WEB)</param>
    /// <param name="dto">Dados da proposta</param>
    /// <returns>Resultado da operação</returns>
    public async Task<Result> CriarPropostaAsync(int pedidoId, int usuarioId, string clientId, CriarPropostaDto dto)
    {
        try
        {
            // Buscar o pedido
            var pedido = await _pedidoRepository.ObterPorIdAsync(pedidoId);
            if (pedido == null)
            {
                return Result.Failure("O pedido não pode ser encontrado");
            }
            
            // Validações de negócio
            if (pedido.Status == StatusPedido.CanceladoPeloComprador || pedido.Status == StatusPedido.CanceladoPorTempoLimite)
            {
                return Result.Failure("Não é possível continuar com a proposta, pois este pedido encontra-se cancelado.");
            }
            
            if (pedido.Status == StatusPedido.Fechado)
            {
                return Result.Failure("Não é possível continuar com a proposta, pois este pedido encontra-se negociado.");
            }
            
            if (clientId == FORNECEDOR_WEB && pedido.Status != StatusPedido.EmNegociacao)
            {
                return Result.Failure("A negociação só pode ser iniciada pelo comprador.");
            }
            
            await _unitOfWork.IniciarTransacaoAsync();
            
            try
            {
                if (clientId == PRODUTOR_MOBILE)
                {
                    await AlterarPropostaProdutorAsync(dto.AcaoComprador, pedido, usuarioId);
                }
                else if (clientId == FORNECEDOR_WEB)
                {
                    await AlterarPropostaFornecedorAsync(pedido, usuarioId, dto.Observacao);
                }
                else
                {
                    return Result.Failure($"Tipo de cliente não implementado: {clientId}");
                }
                
                await _unitOfWork.SalvarAlteracoesAsync();
                await _unitOfWork.ConfirmarTransacaoAsync();
                
                _logger.LogInformation("Proposta criada com sucesso para pedido {PedidoId} por usuário {UsuarioId}", pedidoId, usuarioId);
                return Result.Success();
            }
            catch
            {
                await _unitOfWork.ReverterTransacaoAsync();
                throw;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar proposta para pedido {PedidoId}", pedidoId);
            return Result.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Lista todas as propostas de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="dto">Parâmetros de listagem</param>
    /// <returns>Lista paginada de propostas</returns>
    public async Task<Result<PagedResult<PropostaDto>>> ListarPropostasAsync(int pedidoId, ListarPropostasDto dto)
    {
        try
        {
            var propostas = await _propostaRepository.ListarPorPedidoAsync(pedidoId, dto.Page, dto.MaxPerPage, dto.Sorting);
            var propostasDto = _mapper.Map<PagedResult<PropostaDto>>(propostas);
            
            return Result<PagedResult<PropostaDto>>.Success(propostasDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao listar propostas do pedido {PedidoId}", pedidoId);
            return Result<PagedResult<PropostaDto>>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Obtém a última proposta de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Última proposta ou null</returns>
    public async Task<Result<PropostaDto?>> ObterUltimaPropostaAsync(int pedidoId)
    {
        try
        {
            var proposta = await _propostaRepository.ObterUltimaPorPedidoAsync(pedidoId);
            var propostaDto = _mapper.Map<PropostaDto?>(proposta);
            
            return Result<PropostaDto?>.Success(propostaDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter última proposta do pedido {PedidoId}", pedidoId);
            return Result<PropostaDto?>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Altera proposta do produtor (comprador)
    /// </summary>
    private async Task AlterarPropostaProdutorAsync(AcaoCompradorPedido? acaoComprador, Pedido pedido, int usuarioId)
    {
        var ultimaProposta = await _propostaRepository.ObterUltimaPorPedidoAsync(pedido.Id);
        
        if (ultimaProposta != null && acaoComprador == null)
        {
            throw new ArgumentException("Informar uma ação.");
        }
        
        var acao = acaoComprador;
        string? observacao = null;
        
        if (ultimaProposta == null)
        {
            // Inicia proposta
            pedido.AtualizarStatus(StatusPedido.EmNegociacao);
            acao = AcaoCompradorPedido.Iniciou;
            observacao = "Iniciou a negociação";
        }
        else if (acaoComprador == AcaoCompradorPedido.Aceitou)
        {
            pedido.FecharPedido();
        }
        else if (acaoComprador == AcaoCompradorPedido.Cancelou)
        {
            pedido.CancelarPorComprador();
        }
        
        if (acao == null)
        {
            throw new ArgumentException("Não foi possível identificar a ação informada");
        }
        
        // Evitar inserir muitos registros com a mesma ação de forma contínua
        if (ultimaProposta == null || ultimaProposta.AcaoComprador != acao)
        {
            var proposta = new Proposta(pedido.Id, acao.Value, usuarioId, observacao);
            await SalvarPropostaENotificarAsync(proposta, usuarioId, pedido.ProdutorId);
            await _pedidoRepository.AtualizarAsync(pedido);
        }
    }
    
    /// <summary>
    /// Altera proposta do fornecedor
    /// </summary>
    private async Task AlterarPropostaFornecedorAsync(Pedido pedido, int usuarioId, string? observacao)
    {
        if (string.IsNullOrWhiteSpace(observacao))
        {
            throw new ArgumentException("Informar uma observação");
        }
        
        var proposta = new Proposta(pedido.Id, observacao, usuarioId);
        await SalvarPropostaENotificarAsync(proposta, usuarioId, null, pedido.FornecedorId);
        await _pedidoRepository.AtualizarAsync(pedido);
    }
    
    /// <summary>
    /// Salva proposta e envia notificação
    /// </summary>
    private async Task SalvarPropostaENotificarAsync(Proposta proposta, int usuarioId, int? produtorId = null, int? fornecedorId = null)
    {
        // TODO: Implementar validação de permissões do usuário
        // TODO: Implementar notificações por email/push
        
        await _propostaRepository.AdicionarAsync(proposta);
        
        _logger.LogInformation("Proposta salva para pedido {PedidoId} por usuário {UsuarioId}", proposta.PedidoId, usuarioId);
    }
}
</PropostaService.cs>
<TransporteService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Pedidos.Aplicacao.DTOs;
using Agriis.Pedidos.Aplicacao.Interfaces;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Interfaces;
using Agriis.Pedidos.Dominio.Servicos;
using Agriis.Produtos.Dominio.Interfaces;
using Microsoft.Extensions.Logging;

namespace Agriis.Pedidos.Aplicacao.Servicos;

/// <summary>
/// Serviço de aplicação para gerenciamento de transportes
/// </summary>
public class TransporteService : ITransporteService
{
    private readonly IPedidoItemRepository _pedidoItemRepository;
    private readonly IPedidoItemTransporteRepository _transporteRepository;
    private readonly IPedidoRepository _pedidoRepository;
    private readonly IProdutoRepository _produtoRepository;
    private readonly FreteCalculoService _freteCalculoService;
    private readonly TransporteAgendamentoService _transporteAgendamentoService;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly ILogger<TransporteService> _logger;

    public TransporteService(
        IPedidoItemRepository pedidoItemRepository,
        IPedidoItemTransporteRepository transporteRepository,
        IPedidoRepository pedidoRepository,
        IProdutoRepository produtoRepository,
        FreteCalculoService freteCalculoService,
        TransporteAgendamentoService transporteAgendamentoService,
        IUnitOfWork unitOfWork,
        IMapper mapper,
        ILogger<TransporteService> logger)
    {
        _pedidoItemRepository = pedidoItemRepository ?? throw new ArgumentNullException(nameof(pedidoItemRepository));
        _transporteRepository = transporteRepository ?? throw new ArgumentNullException(nameof(transporteRepository));
        _pedidoRepository = pedidoRepository ?? throw new ArgumentNullException(nameof(pedidoRepository));
        _produtoRepository = produtoRepository ?? throw new ArgumentNullException(nameof(produtoRepository));
        _freteCalculoService = freteCalculoService ?? throw new ArgumentNullException(nameof(freteCalculoService));
        _transporteAgendamentoService = transporteAgendamentoService ?? throw new ArgumentNullException(nameof(transporteAgendamentoService));
        _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<Result<CalculoFreteDto>> CalcularFreteAsync(CalcularFreteDto dto)
    {
        try
        {
            _logger.LogInformation("Calculando frete para produto {ProdutoId}, quantidade {Quantidade}, distância {DistanciaKm}km",
                dto.ProdutoId, dto.Quantidade, dto.DistanciaKm);

            var produto = await _produtoRepository.ObterPorIdAsync(dto.ProdutoId);
            if (produto == null)
            {
                return Result<CalculoFreteDto>.Failure("Produto não encontrado");
            }

            var valorPorKgKm = dto.ValorPorKgKm ?? 0.05m;
            var valorMinimoFrete = dto.ValorMinimoFrete ?? 50.00m;

            var resultado = _freteCalculoService.CalcularFrete(
                produto, 
                dto.Quantidade, 
                dto.DistanciaKm,
                valorPorKgKm,
                valorMinimoFrete);

            var calculoDto = new CalculoFreteDto
            {
                PesoTotal = resultado.PesoTotal,
                VolumeTotal = resultado.VolumeTotal,
                PesoCubadoTotal = resultado.PesoCubadoTotal,
                PesoParaFrete = resultado.PesoParaFrete,
                ValorFrete = resultado.ValorFrete,
                DistanciaKm = resultado.DistanciaKm,
                TipoCalculoUtilizado = resultado.TipoCalculoUtilizado.ToString()
            };

            _logger.LogInformation("Frete calculado: R$ {ValorFrete} para peso {PesoParaFrete}kg",
                calculoDto.ValorFrete, calculoDto.PesoParaFrete);

            return Result<CalculoFreteDto>.Success(calculoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao calcular frete para produto {ProdutoId}", dto.ProdutoId);
            return Result<CalculoFreteDto>.Failure($"Erro ao calcular frete: {ex.Message}");
        }
    }

    public async Task<Result<CalculoFreteConsolidadoDto>> CalcularFreteConsolidadoAsync(CalcularFreteConsolidadoDto dto)
    {
        try
        {
            _logger.LogInformation("Calculando frete consolidado para {TotalItens} itens, distância {DistanciaKm}km",
                dto.Itens.Count, dto.DistanciaKm);

            var itensComProdutos = new List<(Produtos.Dominio.Entidades.Produto produto, decimal quantidade)>();

            foreach (var item in dto.Itens)
            {
                var produto = await _produtoRepository.ObterPorIdAsync(item.ProdutoId);
                if (produto == null)
                {
                    return Result<CalculoFreteConsolidadoDto>.Failure($"Produto {item.ProdutoId} não encontrado");
                }
                itensComProdutos.Add((produto, item.Quantidade));
            }

            var valorPorKgKm = dto.ValorPorKgKm ?? 0.05m;
            var valorMinimoFrete = dto.ValorMinimoFrete ?? 50.00m;

            var resultado = _freteCalculoService.CalcularFreteConsolidado(
                itensComProdutos,
                dto.DistanciaKm,
                valorPorKgKm,
                valorMinimoFrete);

            var calculoDto = new CalculoFreteConsolidadoDto
            {
                CalculosIndividuais = resultado.CalculosIndividuais.Select(c => new CalculoFreteDto
                {
                    PesoTotal = c.PesoTotal,
                    VolumeTotal = c.VolumeTotal,
                    PesoCubadoTotal = c.PesoCubadoTotal,
                    PesoParaFrete = c.PesoParaFrete,
                    ValorFrete = c.ValorFrete,
                    DistanciaKm = c.DistanciaKm,
                    TipoCalculoUtilizado = c.TipoCalculoUtilizado.ToString()
                }).ToList(),
                PesoTotalConsolidado = resultado.PesoTotalConsolidado,
                VolumeTotalConsolidado = resultado.VolumeTotalConsolidado,
                PesoCubadoTotalConsolidado = resultado.PesoCubadoTotalConsolidado,
                ValorFreteConsolidado = resultado.ValorFreteConsolidado,
                DistanciaKm = resultado.DistanciaKm
            };

            _logger.LogInformation("Frete consolidado calculado: R$ {ValorFrete} para peso total {PesoTotal}kg",
                calculoDto.ValorFreteConsolidado, calculoDto.PesoTotalConsolidado);

            return Result<CalculoFreteConsolidadoDto>.Success(calculoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao calcular frete consolidado");
            return Result<CalculoFreteConsolidadoDto>.Failure($"Erro ao calcular frete consolidado: {ex.Message}");
        }
    }

    public async Task<Result<PedidoItemTransporteDto>> AgendarTransporteAsync(AgendarTransporteDto dto)
    {
        try
        {
            _logger.LogInformation("Agendando transporte para item {PedidoItemId}, quantidade {Quantidade}, data {DataAgendamento}",
                dto.PedidoItemId, dto.Quantidade, dto.DataAgendamento);

            var pedidoItem = await _pedidoItemRepository.ObterComTransportesAsync(dto.PedidoItemId);
            if (pedidoItem == null)
            {
                return Result<PedidoItemTransporteDto>.Failure("Item de pedido não encontrado");
            }

            var transporte = _transporteAgendamentoService.CriarAgendamentoTransporte(
                pedidoItem,
                dto.Quantidade,
                dto.DataAgendamento,
                dto.EnderecoOrigem,
                dto.EnderecoDestino,
                dto.DistanciaKm ?? 0,
                dto.Observacoes);

            await _transporteRepository.AdicionarAsync(transporte);
            await _unitOfWork.SalvarAlteracoesAsync();

            var transporteDto = _mapper.Map<PedidoItemTransporteDto>(transporte);

            _logger.LogInformation("Transporte agendado com sucesso. ID: {TransporteId}", transporte.Id);

            return Result<PedidoItemTransporteDto>.Success(transporteDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao agendar transporte para item {PedidoItemId}", dto.PedidoItemId);
            return Result<PedidoItemTransporteDto>.Failure($"Erro ao agendar transporte: {ex.Message}");
        }
    }

    public async Task<Result<PedidoItemTransporteDto>> ReagendarTransporteAsync(int transporteId, ReagendarTransporteDto dto)
    {
        try
        {
            _logger.LogInformation("Reagendando transporte {TransporteId} para {NovaDataAgendamento}",
                transporteId, dto.NovaDataAgendamento);

            var transporte = await _transporteRepository.ObterPorIdAsync(transporteId);
            if (transporte == null)
            {
                return Result<PedidoItemTransporteDto>.Failure("Transporte não encontrado");
            }

            _transporteAgendamentoService.ReagendarTransporte(
                transporte,
                dto.NovaDataAgendamento,
                dto.Observacoes);

            await _transporteRepository.AtualizarAsync(transporte);
            await _unitOfWork.SalvarAlteracoesAsync();

            var transporteDto = _mapper.Map<PedidoItemTransporteDto>(transporte);

            _logger.LogInformation("Transporte reagendado com sucesso. ID: {TransporteId}", transporteId);

            return Result<PedidoItemTransporteDto>.Success(transporteDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao reagendar transporte {TransporteId}", transporteId);
            return Result<PedidoItemTransporteDto>.Failure($"Erro ao reagendar transporte: {ex.Message}");
        }
    }

    public async Task<Result<PedidoItemTransporteDto>> AtualizarValorFreteAsync(int transporteId, AtualizarValorFreteDto dto)
    {
        try
        {
            _logger.LogInformation("Atualizando valor do frete do transporte {TransporteId} para R$ {NovoValor}",
                transporteId, dto.NovoValorFrete);

            var transporte = await _transporteRepository.ObterPorIdAsync(transporteId);
            if (transporte == null)
            {
                return Result<PedidoItemTransporteDto>.Failure("Transporte não encontrado");
            }

            _transporteAgendamentoService.AtualizarValorFrete(
                transporte,
                dto.NovoValorFrete,
                dto.Motivo);

            await _transporteRepository.AtualizarAsync(transporte);
            await _unitOfWork.SalvarAlteracoesAsync();

            var transporteDto = _mapper.Map<PedidoItemTransporteDto>(transporte);

            _logger.LogInformation("Valor do frete atualizado com sucesso. ID: {TransporteId}", transporteId);

            return Result<PedidoItemTransporteDto>.Success(transporteDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar valor do frete do transporte {TransporteId}", transporteId);
            return Result<PedidoItemTransporteDto>.Failure($"Erro ao atualizar valor do frete: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<PedidoItemTransporteDto>>> ListarTransportesPedidoAsync(int pedidoId)
    {
        try
        {
            _logger.LogInformation("Listando transportes do pedido {PedidoId}", pedidoId);

            var transportes = await _transporteRepository.ObterPorPedidoIdAsync(pedidoId);
            var transportesDto = _mapper.Map<IEnumerable<PedidoItemTransporteDto>>(transportes);

            return Result<IEnumerable<PedidoItemTransporteDto>>.Success(transportesDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao listar transportes do pedido {PedidoId}", pedidoId);
            return Result<IEnumerable<PedidoItemTransporteDto>>.Failure($"Erro ao listar transportes: {ex.Message}");
        }
    }

    public async Task<Result<PedidoItemTransporteDto>> ObterTransportePorIdAsync(int transporteId)
    {
        try
        {
            var transporte = await _transporteRepository.ObterPorIdAsync(transporteId);
            if (transporte == null)
            {
                return Result<PedidoItemTransporteDto>.Failure("Transporte não encontrado");
            }

            var transporteDto = _mapper.Map<PedidoItemTransporteDto>(transporte);
            return Result<PedidoItemTransporteDto>.Success(transporteDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter transporte {TransporteId}", transporteId);
            return Result<PedidoItemTransporteDto>.Failure($"Erro ao obter transporte: {ex.Message}");
        }
    }

    public async Task<Result<ValidacaoAgendamentoDto>> ValidarMultiplosAgendamentosAsync(ValidarAgendamentosDto dto)
    {
        try
        {
            _logger.LogInformation("Validando {TotalAgendamentos} agendamentos", dto.Agendamentos.Count);

            var solicitacoes = new List<SolicitacaoAgendamento>();

            foreach (var agendamento in dto.Agendamentos)
            {
                var pedidoItem = await _pedidoItemRepository.ObterComTransportesAsync(agendamento.PedidoItemId);
                if (pedidoItem == null)
                {
                    return Result<ValidacaoAgendamentoDto>.Failure($"Item de pedido {agendamento.PedidoItemId} não encontrado");
                }

                solicitacoes.Add(new SolicitacaoAgendamento(
                    pedidoItem,
                    agendamento.Quantidade,
                    agendamento.DataAgendamento,
                    agendamento.EnderecoOrigem,
                    agendamento.EnderecoDestino,
                    agendamento.DistanciaKm ?? 0,
                    agendamento.Observacoes));
            }

            var resultado = _transporteAgendamentoService.ValidarMultiplosAgendamentos(solicitacoes);

            var validacaoDto = new ValidacaoAgendamentoDto
            {
                EhValido = resultado.EhValido,
                Erros = resultado.Erros.ToList()
            };

            return Result<ValidacaoAgendamentoDto>.Success(validacaoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao validar múltiplos agendamentos");
            return Result<ValidacaoAgendamentoDto>.Failure($"Erro ao validar agendamentos: {ex.Message}");
        }
    }

    public async Task<Result<ResumoTransportePedidoDto>> ObterResumoTransporteAsync(int pedidoId)
    {
        try
        {
            _logger.LogInformation("Obtendo resumo de transporte do pedido {PedidoId}", pedidoId);

            var pedido = await _pedidoRepository.ObterComItensETransportesAsync(pedidoId);
            if (pedido == null)
            {
                return Result<ResumoTransportePedidoDto>.Failure("Pedido não encontrado");
            }

            var resumo = _transporteAgendamentoService.CalcularResumoTransporte(pedido);

            var resumoDto = new ResumoTransportePedidoDto
            {
                TotalItens = resumo.TotalItens,
                ItensComTransporte = resumo.ItensComTransporte,
                TotalTransportes = resumo.TotalTransportes,
                TransportesAgendados = resumo.TransportesAgendados,
                PesoTotal = resumo.PesoTotal,
                VolumeTotal = resumo.VolumeTotal,
                ValorFreteTotal = resumo.ValorFreteTotal,
                ProximoAgendamento = resumo.ProximoAgendamento
            };

            return Result<ResumoTransportePedidoDto>.Success(resumoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter resumo de transporte do pedido {PedidoId}", pedidoId);
            return Result<ResumoTransportePedidoDto>.Failure($"Erro ao obter resumo de transporte: {ex.Message}");
        }
    }

    public async Task<Result<bool>> CancelarTransporteAsync(int transporteId, string? motivo = null)
    {
        try
        {
            _logger.LogInformation("Cancelando transporte {TransporteId}. Motivo: {Motivo}", transporteId, motivo);

            var transporte = await _transporteRepository.ObterPorIdAsync(transporteId);
            if (transporte == null)
            {
                return Result<bool>.Failure("Transporte não encontrado");
            }

            // Adicionar observação sobre cancelamento
            var observacaoCancelamento = $"Transporte cancelado em {DateTime.UtcNow:dd/MM/yyyy HH:mm}";
            if (!string.IsNullOrWhiteSpace(motivo))
            {
                observacaoCancelamento += $" - Motivo: {motivo}";
            }

            var observacoesAtuais = transporte.Observacoes ?? string.Empty;
            var observacoesCombinadas = string.IsNullOrWhiteSpace(observacoesAtuais) 
                ? observacaoCancelamento 
                : $"{observacoesAtuais}\n{observacaoCancelamento}";

            transporte.AtualizarObservacoes(observacoesCombinadas);

            // Remover o transporte
            await _transporteRepository.RemoverAsync(transporteId);
            await _unitOfWork.SalvarAlteracoesAsync();

            _logger.LogInformation("Transporte {TransporteId} cancelado com sucesso", transporteId);

            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao cancelar transporte {TransporteId}", transporteId);
            return Result<bool>.Failure($"Erro ao cancelar transporte: {ex.Message}");
        }
    }
}
</TransporteService.cs>
<AdicionarItemCarrinhoDtoValidator.cs>
using FluentValidation;
using Agriis.Pedidos.Aplicacao.DTOs;

namespace Agriis.Pedidos.Aplicacao.Validadores;

/// <summary>
/// Validador para DTO de adicionar item ao carrinho
/// </summary>
public class AdicionarItemCarrinhoDtoValidator : AbstractValidator<AdicionarItemCarrinhoDto>
{
    public AdicionarItemCarrinhoDtoValidator()
    {
        RuleFor(x => x.ProdutoId)
            .GreaterThan(0)
            .WithMessage("ID do produto deve ser maior que zero");

        RuleFor(x => x.Quantidade)
            .GreaterThan(0)
            .WithMessage("Quantidade deve ser maior que zero");

        RuleFor(x => x.CatalogoId)
            .GreaterThan(0)
            .WithMessage("ID do catálogo deve ser maior que zero");

        RuleFor(x => x.Observacoes)
            .MaximumLength(500)
            .WithMessage("Observações não podem exceder 500 caracteres");
    }
}
</AdicionarItemCarrinhoDtoValidator.cs>
<AgendarTransporteDtoValidator.cs>
using FluentValidation;
using Agriis.Pedidos.Aplicacao.DTOs;

namespace Agriis.Pedidos.Aplicacao.Validadores;

/// <summary>
/// Validador para AgendarTransporteDto
/// </summary>
public class AgendarTransporteDtoValidator : AbstractValidator<AgendarTransporteDto>
{
    public AgendarTransporteDtoValidator()
    {
        RuleFor(x => x.PedidoItemId)
            .GreaterThan(0)
            .WithMessage("ID do item de pedido deve ser maior que zero");

        RuleFor(x => x.Quantidade)
            .GreaterThan(0)
            .WithMessage("Quantidade deve ser maior que zero");

        RuleFor(x => x.DataAgendamento)
            .GreaterThan(DateTime.UtcNow)
            .WithMessage("Data de agendamento deve ser futura");

        RuleFor(x => x.DistanciaKm)
            .GreaterThanOrEqualTo(0)
            .When(x => x.DistanciaKm.HasValue)
            .WithMessage("Distância não pode ser negativa");

        RuleFor(x => x.EnderecoOrigem)
            .MaximumLength(500)
            .When(x => !string.IsNullOrWhiteSpace(x.EnderecoOrigem))
            .WithMessage("Endereço de origem não pode ter mais que 500 caracteres");

        RuleFor(x => x.EnderecoDestino)
            .MaximumLength(500)
            .When(x => !string.IsNullOrWhiteSpace(x.EnderecoDestino))
            .WithMessage("Endereço de destino não pode ter mais que 500 caracteres");

        RuleFor(x => x.Observacoes)
            .MaximumLength(1000)
            .When(x => !string.IsNullOrWhiteSpace(x.Observacoes))
            .WithMessage("Observações não podem ter mais que 1000 caracteres");
    }
}

/// <summary>
/// Validador para ReagendarTransporteDto
/// </summary>
public class ReagendarTransporteDtoValidator : AbstractValidator<ReagendarTransporteDto>
{
    public ReagendarTransporteDtoValidator()
    {
        RuleFor(x => x.NovaDataAgendamento)
            .GreaterThan(DateTime.UtcNow)
            .WithMessage("Nova data de agendamento deve ser futura");

        RuleFor(x => x.Observacoes)
            .MaximumLength(1000)
            .When(x => !string.IsNullOrWhiteSpace(x.Observacoes))
            .WithMessage("Observações não podem ter mais que 1000 caracteres");
    }
}

/// <summary>
/// Validador para AtualizarValorFreteDto
/// </summary>
public class AtualizarValorFreteDtoValidator : AbstractValidator<AtualizarValorFreteDto>
{
    public AtualizarValorFreteDtoValidator()
    {
        RuleFor(x => x.NovoValorFrete)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Valor do frete não pode ser negativo");

        RuleFor(x => x.Motivo)
            .MaximumLength(500)
            .When(x => !string.IsNullOrWhiteSpace(x.Motivo))
            .WithMessage("Motivo não pode ter mais que 500 caracteres");
    }
}

/// <summary>
/// Validador para ValidarAgendamentosDto
/// </summary>
public class ValidarAgendamentosDtoValidator : AbstractValidator<ValidarAgendamentosDto>
{
    public ValidarAgendamentosDtoValidator()
    {
        RuleFor(x => x.Agendamentos)
            .NotEmpty()
            .WithMessage("Lista de agendamentos não pode estar vazia");

        RuleForEach(x => x.Agendamentos)
            .SetValidator(new SolicitacaoAgendamentoDtoValidator());
    }
}

/// <summary>
/// Validador para SolicitacaoAgendamentoDto
/// </summary>
public class SolicitacaoAgendamentoDtoValidator : AbstractValidator<SolicitacaoAgendamentoDto>
{
    public SolicitacaoAgendamentoDtoValidator()
    {
        RuleFor(x => x.PedidoItemId)
            .GreaterThan(0)
            .WithMessage("ID do item de pedido deve ser maior que zero");

        RuleFor(x => x.Quantidade)
            .GreaterThan(0)
            .WithMessage("Quantidade deve ser maior que zero");

        RuleFor(x => x.DataAgendamento)
            .GreaterThan(DateTime.UtcNow)
            .WithMessage("Data de agendamento deve ser futura");

        RuleFor(x => x.DistanciaKm)
            .GreaterThanOrEqualTo(0)
            .When(x => x.DistanciaKm.HasValue)
            .WithMessage("Distância não pode ser negativa");

        RuleFor(x => x.EnderecoOrigem)
            .MaximumLength(500)
            .When(x => !string.IsNullOrWhiteSpace(x.EnderecoOrigem))
            .WithMessage("Endereço de origem não pode ter mais que 500 caracteres");

        RuleFor(x => x.EnderecoDestino)
            .MaximumLength(500)
            .When(x => !string.IsNullOrWhiteSpace(x.EnderecoDestino))
            .WithMessage("Endereço de destino não pode ter mais que 500 caracteres");

        RuleFor(x => x.Observacoes)
            .MaximumLength(1000)
            .When(x => !string.IsNullOrWhiteSpace(x.Observacoes))
            .WithMessage("Observações não podem ter mais que 1000 caracteres");
    }
}
</AgendarTransporteDtoValidator.cs>
<AtualizarQuantidadeItemDtoValidator.cs>
using FluentValidation;
using Agriis.Pedidos.Aplicacao.DTOs;

namespace Agriis.Pedidos.Aplicacao.Validadores;

/// <summary>
/// Validador para DTO de atualizar quantidade de item
/// </summary>
public class AtualizarQuantidadeItemDtoValidator : AbstractValidator<AtualizarQuantidadeItemDto>
{
    public AtualizarQuantidadeItemDtoValidator()
    {
        RuleFor(x => x.Quantidade)
            .GreaterThan(0)
            .WithMessage("Quantidade deve ser maior que zero");
    }
}
</AtualizarQuantidadeItemDtoValidator.cs>
<CalcularFreteDtoValidator.cs>
using FluentValidation;
using Agriis.Pedidos.Aplicacao.DTOs;

namespace Agriis.Pedidos.Aplicacao.Validadores;

/// <summary>
/// Validador para CalcularFreteDto
/// </summary>
public class CalcularFreteDtoValidator : AbstractValidator<CalcularFreteDto>
{
    public CalcularFreteDtoValidator()
    {
        RuleFor(x => x.ProdutoId)
            .GreaterThan(0)
            .WithMessage("ID do produto deve ser maior que zero");

        RuleFor(x => x.Quantidade)
            .GreaterThan(0)
            .WithMessage("Quantidade deve ser maior que zero");

        RuleFor(x => x.DistanciaKm)
            .GreaterThan(0)
            .WithMessage("Distância deve ser maior que zero");

        RuleFor(x => x.ValorPorKgKm)
            .GreaterThanOrEqualTo(0)
            .When(x => x.ValorPorKgKm.HasValue)
            .WithMessage("Valor por kg/km não pode ser negativo");

        RuleFor(x => x.ValorMinimoFrete)
            .GreaterThanOrEqualTo(0)
            .When(x => x.ValorMinimoFrete.HasValue)
            .WithMessage("Valor mínimo de frete não pode ser negativo");
    }
}

/// <summary>
/// Validador para CalcularFreteConsolidadoDto
/// </summary>
public class CalcularFreteConsolidadoDtoValidator : AbstractValidator<CalcularFreteConsolidadoDto>
{
    public CalcularFreteConsolidadoDtoValidator()
    {
        RuleFor(x => x.Itens)
            .NotEmpty()
            .WithMessage("Lista de itens não pode estar vazia");

        RuleForEach(x => x.Itens)
            .SetValidator(new ItemFreteDtoValidator());

        RuleFor(x => x.DistanciaKm)
            .GreaterThan(0)
            .WithMessage("Distância deve ser maior que zero");

        RuleFor(x => x.ValorPorKgKm)
            .GreaterThanOrEqualTo(0)
            .When(x => x.ValorPorKgKm.HasValue)
            .WithMessage("Valor por kg/km não pode ser negativo");

        RuleFor(x => x.ValorMinimoFrete)
            .GreaterThanOrEqualTo(0)
            .When(x => x.ValorMinimoFrete.HasValue)
            .WithMessage("Valor mínimo de frete não pode ser negativo");
    }
}

/// <summary>
/// Validador para ItemFreteDto
/// </summary>
public class ItemFreteDtoValidator : AbstractValidator<ItemFreteDto>
{
    public ItemFreteDtoValidator()
    {
        RuleFor(x => x.ProdutoId)
            .GreaterThan(0)
            .WithMessage("ID do produto deve ser maior que zero");

        RuleFor(x => x.Quantidade)
            .GreaterThan(0)
            .WithMessage("Quantidade deve ser maior que zero");
    }
}
</CalcularFreteDtoValidator.cs>
<CriarPedidoDtoValidator.cs>
using FluentValidation;
using Agriis.Pedidos.Aplicacao.DTOs;

namespace Agriis.Pedidos.Aplicacao.Validadores;

/// <summary>
/// Validador para o DTO de criação de pedido
/// </summary>
public class CriarPedidoDtoValidator : AbstractValidator<CriarPedidoDto>
{
    public CriarPedidoDtoValidator()
    {
        RuleFor(x => x.FornecedorId)
            .GreaterThan(0)
            .WithMessage("ID do fornecedor deve ser maior que zero");
            
        RuleFor(x => x.ProdutorId)
            .GreaterThan(0)
            .WithMessage("ID do produtor deve ser maior que zero");
            
        RuleFor(x => x.DiasLimiteInteracao)
            .GreaterThan(0)
            .WithMessage("Dias limite de interação deve ser maior que zero")
            .LessThanOrEqualTo(365)
            .WithMessage("Dias limite de interação não pode ser maior que 365 dias");
    }
}

/// <summary>
/// Validador para o DTO de criação de item de pedido
/// </summary>
public class CriarPedidoItemDtoValidator : AbstractValidator<CriarPedidoItemDto>
{
    public CriarPedidoItemDtoValidator()
    {
        RuleFor(x => x.PedidoId)
            .GreaterThan(0)
            .WithMessage("ID do pedido deve ser maior que zero");
            
        RuleFor(x => x.ProdutoId)
            .GreaterThan(0)
            .WithMessage("ID do produto deve ser maior que zero");
            
        RuleFor(x => x.Quantidade)
            .GreaterThan(0)
            .WithMessage("Quantidade deve ser maior que zero");
            
        RuleFor(x => x.PrecoUnitario)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Preço unitário não pode ser negativo");
            
        RuleFor(x => x.PercentualDesconto)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Percentual de desconto não pode ser negativo")
            .LessThanOrEqualTo(100)
            .WithMessage("Percentual de desconto não pode ser maior que 100%");
            
        RuleFor(x => x.Observacoes)
            .MaximumLength(1000)
            .WithMessage("Observações não podem ter mais que 1000 caracteres");
    }
}

/// <summary>
/// Validador para o DTO de criação de transporte de item
/// </summary>
public class CriarPedidoItemTransporteDtoValidator : AbstractValidator<CriarPedidoItemTransporteDto>
{
    public CriarPedidoItemTransporteDtoValidator()
    {
        RuleFor(x => x.PedidoItemId)
            .GreaterThan(0)
            .WithMessage("ID do item de pedido deve ser maior que zero");
            
        RuleFor(x => x.Quantidade)
            .GreaterThan(0)
            .WithMessage("Quantidade deve ser maior que zero");
            
        RuleFor(x => x.ValorFrete)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Valor do frete não pode ser negativo");
            
        RuleFor(x => x.DataAgendamento)
            .GreaterThan(DateTime.UtcNow)
            .WithMessage("Data de agendamento deve ser futura")
            .When(x => x.DataAgendamento.HasValue);
            
        RuleFor(x => x.EnderecoOrigem)
            .MaximumLength(500)
            .WithMessage("Endereço de origem não pode ter mais que 500 caracteres");
            
        RuleFor(x => x.EnderecoDestino)
            .MaximumLength(500)
            .WithMessage("Endereço de destino não pode ter mais que 500 caracteres");
    }
}
</CriarPedidoDtoValidator.cs>
<CriarPropostaDtoValidator.cs>
using Agriis.Pedidos.Aplicacao.DTOs;
using FluentValidation;

namespace Agriis.Pedidos.Aplicacao.Validadores;

/// <summary>
/// Validador para o DTO de criação de proposta
/// </summary>
public class CriarPropostaDtoValidator : AbstractValidator<CriarPropostaDto>
{
    /// <summary>
    /// Construtor do validador
    /// </summary>
    public CriarPropostaDtoValidator()
    {
        RuleFor(x => x.Observacao)
            .MaximumLength(1024)
            .WithMessage("A observação não pode ter mais de 1024 caracteres");
            
        RuleFor(x => x.AcaoComprador)
            .IsInEnum()
            .When(x => x.AcaoComprador.HasValue)
            .WithMessage("Ação do comprador inválida");
    }
}
</CriarPropostaDtoValidator.cs>
<ListarPropostasDtoValidator.cs>
using Agriis.Pedidos.Aplicacao.DTOs;
using FluentValidation;

namespace Agriis.Pedidos.Aplicacao.Validadores;

/// <summary>
/// Validador para o DTO de listagem de propostas
/// </summary>
public class ListarPropostasDtoValidator : AbstractValidator<ListarPropostasDto>
{
    /// <summary>
    /// Construtor do validador
    /// </summary>
    public ListarPropostasDtoValidator()
    {
        RuleFor(x => x.Page)
            .GreaterThanOrEqualTo(0)
            .WithMessage("A página deve ser maior ou igual a 0");
            
        RuleFor(x => x.MaxPerPage)
            .GreaterThan(0)
            .LessThanOrEqualTo(100)
            .WithMessage("O máximo de itens por página deve estar entre 1 e 100");
            
        RuleFor(x => x.Sorting)
            .Must(BeValidSorting)
            .When(x => !string.IsNullOrWhiteSpace(x.Sorting))
            .WithMessage("Campo de ordenação inválido");
    }
    
    /// <summary>
    /// Valida se o campo de ordenação é válido
    /// </summary>
    /// <param name="sorting">Campo de ordenação</param>
    /// <returns>True se válido</returns>
    private static bool BeValidSorting(string? sorting)
    {
        if (string.IsNullOrWhiteSpace(sorting))
            return true;
            
        var validSortings = new[] { "datacriacao", "datacriacao desc" };
        return validSortings.Contains(sorting.ToLower());
    }
}
</ListarPropostasDtoValidator.cs>
<Pedido.cs>
using System.Text.Json;
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Enums;

namespace Agriis.Pedidos.Dominio.Entidades;

/// <summary>
/// Entidade que representa um pedido no sistema
/// </summary>
public class Pedido : EntidadeRaizAgregada
{
    /// <summary>
    /// Status atual do pedido
    /// </summary>
    public StatusPedido Status { get; private set; }
    
    /// <summary>
    /// Status do carrinho de compras
    /// </summary>
    public StatusCarrinho StatusCarrinho { get; private set; }
    
    /// <summary>
    /// Quantidade total de itens no pedido
    /// </summary>
    public int QuantidadeItens { get; private set; }
    
    /// <summary>
    /// Totais do pedido em formato JSON (valores, descontos, etc.)
    /// </summary>
    public JsonDocument? Totais { get; private set; }
    
    /// <summary>
    /// Indica se o produtor permite contato direto
    /// </summary>
    public bool PermiteContato { get; private set; }
    
    /// <summary>
    /// Indica se o pedido pode ser negociado
    /// </summary>
    public bool NegociarPedido { get; private set; }
    
    /// <summary>
    /// Data limite para interação no pedido
    /// </summary>
    public DateTime DataLimiteInteracao { get; private set; }
    
    /// <summary>
    /// ID do fornecedor responsável pelo pedido
    /// </summary>
    public int FornecedorId { get; private set; }
    
    /// <summary>
    /// ID do produtor que fez o pedido
    /// </summary>
    public int ProdutorId { get; private set; }
    
    /// <summary>
    /// Coleção de itens do pedido
    /// </summary>
    public virtual ICollection<PedidoItem> Itens { get; private set; } = new List<PedidoItem>();
    
    /// <summary>
    /// Coleção de propostas do pedido
    /// </summary>
    public virtual ICollection<Proposta> Propostas { get; private set; } = new List<Proposta>();
    
    /// <summary>
    /// Construtor protegido para uso do Entity Framework
    /// </summary>
    protected Pedido() { }
    
    /// <summary>
    /// Construtor para criação de um novo pedido
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="produtorId">ID do produtor</param>
    /// <param name="permiteContato">Se permite contato direto</param>
    /// <param name="negociarPedido">Se permite negociação</param>
    /// <param name="diasLimiteInteracao">Dias limite para interação (padrão 7)</param>
    public Pedido(int fornecedorId, int produtorId, bool permiteContato, bool negociarPedido, int diasLimiteInteracao = 7)
    {
        if (fornecedorId <= 0)
            throw new ArgumentException("ID do fornecedor deve ser maior que zero", nameof(fornecedorId));
            
        if (produtorId <= 0)
            throw new ArgumentException("ID do produtor deve ser maior que zero", nameof(produtorId));
            
        if (diasLimiteInteracao <= 0)
            throw new ArgumentException("Dias limite deve ser maior que zero", nameof(diasLimiteInteracao));
        
        FornecedorId = fornecedorId;
        ProdutorId = produtorId;
        PermiteContato = permiteContato;
        NegociarPedido = negociarPedido;
        Status = StatusPedido.EmNegociacao;
        StatusCarrinho = StatusCarrinho.EmAberto;
        DataLimiteInteracao = DateTime.UtcNow.AddDays(diasLimiteInteracao);
        QuantidadeItens = 0;
    }
    
    /// <summary>
    /// Adiciona um item ao pedido
    /// </summary>
    /// <param name="item">Item a ser adicionado</param>
    public void AdicionarItem(PedidoItem item)
    {
        if (item == null)
            throw new ArgumentNullException(nameof(item));
            
        if (Status != StatusPedido.EmNegociacao)
            throw new InvalidOperationException("Não é possível adicionar itens a um pedido que não está em negociação");
        
        Itens.Add(item);
        RecalcularQuantidadeItens();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Remove um item do pedido
    /// </summary>
    /// <param name="itemId">ID do item a ser removido</param>
    public void RemoverItem(int itemId)
    {
        if (Status != StatusPedido.EmNegociacao)
            throw new InvalidOperationException("Não é possível remover itens de um pedido que não está em negociação");
        
        var item = Itens.FirstOrDefault(i => i.Id == itemId);
        if (item != null)
        {
            Itens.Remove(item);
            RecalcularQuantidadeItens();
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Fecha o pedido
    /// </summary>
    public void FecharPedido()
    {
        if (Status != StatusPedido.EmNegociacao)
            throw new InvalidOperationException("Apenas pedidos em negociação podem ser fechados");
            
        if (!Itens.Any())
            throw new InvalidOperationException("Não é possível fechar um pedido sem itens");
        
        Status = StatusPedido.Fechado;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Cancela o pedido pelo comprador
    /// </summary>
    public void CancelarPorComprador()
    {
        if (Status == StatusPedido.Fechado)
            throw new InvalidOperationException("Não é possível cancelar um pedido já fechado");
        
        Status = StatusPedido.CanceladoPeloComprador;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Cancela o pedido por tempo limite
    /// </summary>
    public void CancelarPorTempoLimite()
    {
        if (Status == StatusPedido.Fechado)
            throw new InvalidOperationException("Não é possível cancelar um pedido já fechado");
        
        Status = StatusPedido.CanceladoPorTempoLimite;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza o status do pedido
    /// </summary>
    /// <param name="novoStatus">Novo status</param>
    public void AtualizarStatus(StatusPedido novoStatus)
    {
        Status = novoStatus;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza os totais do pedido
    /// </summary>
    /// <param name="totais">Dados dos totais em formato JSON</param>
    public void AtualizarTotais(JsonDocument totais)
    {
        Totais = totais;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Verifica se o pedido está dentro do prazo limite
    /// </summary>
    /// <returns>True se está dentro do prazo</returns>
    public bool EstaDentroPrazoLimite()
    {
        return DateTime.UtcNow <= DataLimiteInteracao;
    }
    
    /// <summary>
    /// Atualiza a data limite de interação
    /// </summary>
    /// <param name="novosDias">Número de dias a partir de agora</param>
    public void AtualizarPrazoLimite(int novosDias)
    {
        if (novosDias <= 0)
            throw new ArgumentException("Dias deve ser maior que zero", nameof(novosDias));
            
        DataLimiteInteracao = DateTime.UtcNow.AddDays(novosDias);
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Recalcula a quantidade de itens do pedido
    /// </summary>
    private void RecalcularQuantidadeItens()
    {
        QuantidadeItens = Itens.Count;
    }
}
</Pedido.cs>
<PedidoItem.cs>
using System.Text.Json;
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Pedidos.Dominio.Entidades;

/// <summary>
/// Entidade que representa um item de pedido
/// </summary>
public class PedidoItem : EntidadeBase
{
    /// <summary>
    /// ID do pedido ao qual este item pertence
    /// </summary>
    public int PedidoId { get; private set; }
    
    /// <summary>
    /// ID do produto
    /// </summary>
    public int ProdutoId { get; private set; }
    
    /// <summary>
    /// Quantidade do produto solicitada
    /// </summary>
    public decimal Quantidade { get; private set; }
    
    /// <summary>
    /// Preço unitário do produto
    /// </summary>
    public decimal PrecoUnitario { get; private set; }
    
    /// <summary>
    /// Valor total do item (quantidade * preço unitário)
    /// </summary>
    public decimal ValorTotal { get; private set; }
    
    /// <summary>
    /// Percentual de desconto aplicado
    /// </summary>
    public decimal PercentualDesconto { get; private set; }
    
    /// <summary>
    /// Valor do desconto aplicado
    /// </summary>
    public decimal ValorDesconto { get; private set; }
    
    /// <summary>
    /// Valor final após desconto
    /// </summary>
    public decimal ValorFinal { get; private set; }
    
    /// <summary>
    /// Dados adicionais do item em formato JSON
    /// </summary>
    public JsonDocument? DadosAdicionais { get; private set; }
    
    /// <summary>
    /// Observações sobre o item
    /// </summary>
    public string? Observacoes { get; private set; }
    
    /// <summary>
    /// Referência de navegação para o pedido
    /// </summary>
    public virtual Pedido Pedido { get; private set; } = null!;
    
    /// <summary>
    /// Referência de navegação para o produto
    /// </summary>
    public virtual Produtos.Dominio.Entidades.Produto? Produto { get; private set; }
    
    /// <summary>
    /// Coleção de itens de transporte relacionados
    /// </summary>
    public virtual ICollection<PedidoItemTransporte> ItensTransporte { get; private set; } = new List<PedidoItemTransporte>();
    
    /// <summary>
    /// Alias para ItensTransporte para compatibilidade com serviços de domínio
    /// </summary>
    public virtual ICollection<PedidoItemTransporte> Transportes => ItensTransporte;
    
    /// <summary>
    /// Construtor protegido para uso do Entity Framework
    /// </summary>
    protected PedidoItem() { }
    
    /// <summary>
    /// Construtor para criação de um novo item de pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="produtoId">ID do produto</param>
    /// <param name="quantidade">Quantidade solicitada</param>
    /// <param name="precoUnitario">Preço unitário</param>
    /// <param name="percentualDesconto">Percentual de desconto (opcional)</param>
    /// <param name="observacoes">Observações (opcional)</param>
    public PedidoItem(int pedidoId, int produtoId, decimal quantidade, decimal precoUnitario, 
                     decimal percentualDesconto = 0, string? observacoes = null)
    {
        if (pedidoId <= 0)
            throw new ArgumentException("ID do pedido deve ser maior que zero", nameof(pedidoId));
            
        if (produtoId <= 0)
            throw new ArgumentException("ID do produto deve ser maior que zero", nameof(produtoId));
            
        if (quantidade <= 0)
            throw new ArgumentException("Quantidade deve ser maior que zero", nameof(quantidade));
            
        if (precoUnitario < 0)
            throw new ArgumentException("Preço unitário não pode ser negativo", nameof(precoUnitario));
            
        if (percentualDesconto < 0 || percentualDesconto > 100)
            throw new ArgumentException("Percentual de desconto deve estar entre 0 e 100", nameof(percentualDesconto));
        
        PedidoId = pedidoId;
        ProdutoId = produtoId;
        Quantidade = quantidade;
        PrecoUnitario = precoUnitario;
        PercentualDesconto = percentualDesconto;
        Observacoes = observacoes;
        
        CalcularValores();
    }
    
    /// <summary>
    /// Atualiza a quantidade do item
    /// </summary>
    /// <param name="novaQuantidade">Nova quantidade</param>
    public void AtualizarQuantidade(decimal novaQuantidade)
    {
        if (novaQuantidade <= 0)
            throw new ArgumentException("Quantidade deve ser maior que zero", nameof(novaQuantidade));
        
        Quantidade = novaQuantidade;
        CalcularValores();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza o preço unitário do item
    /// </summary>
    /// <param name="novoPreco">Novo preço unitário</param>
    public void AtualizarPrecoUnitario(decimal novoPreco)
    {
        if (novoPreco < 0)
            throw new ArgumentException("Preço unitário não pode ser negativo", nameof(novoPreco));
        
        PrecoUnitario = novoPreco;
        CalcularValores();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza o percentual de desconto
    /// </summary>
    /// <param name="novoPercentual">Novo percentual de desconto</param>
    public void AtualizarDesconto(decimal novoPercentual)
    {
        if (novoPercentual < 0 || novoPercentual > 100)
            throw new ArgumentException("Percentual de desconto deve estar entre 0 e 100", nameof(novoPercentual));
        
        PercentualDesconto = novoPercentual;
        CalcularValores();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza as observações do item
    /// </summary>
    /// <param name="novasObservacoes">Novas observações</param>
    public void AtualizarObservacoes(string? novasObservacoes)
    {
        Observacoes = novasObservacoes;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza os dados adicionais do item
    /// </summary>
    /// <param name="dadosAdicionais">Dados adicionais em formato JSON</param>
    public void AtualizarDadosAdicionais(JsonDocument? dadosAdicionais)
    {
        DadosAdicionais = dadosAdicionais;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Calcula os valores do item (total, desconto, final)
    /// </summary>
    private void CalcularValores()
    {
        ValorTotal = Quantidade * PrecoUnitario;
        ValorDesconto = ValorTotal * (PercentualDesconto / 100);
        ValorFinal = ValorTotal - ValorDesconto;
    }
}
</PedidoItem.cs>
<PedidoItemTransporte.cs>
using System.Text.Json;
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Pedidos.Dominio.Entidades;

/// <summary>
/// Entidade que representa informações de transporte para um item de pedido
/// </summary>
public class PedidoItemTransporte : EntidadeBase
{
    /// <summary>
    /// ID do item de pedido ao qual este transporte pertence
    /// </summary>
    public int PedidoItemId { get; private set; }
    
    /// <summary>
    /// Quantidade a ser transportada
    /// </summary>
    public decimal Quantidade { get; private set; }
    
    /// <summary>
    /// Data agendada para o transporte
    /// </summary>
    public DateTime? DataAgendamento { get; private set; }
    
    /// <summary>
    /// Valor do frete para este transporte
    /// </summary>
    public decimal ValorFrete { get; private set; }
    
    /// <summary>
    /// Peso total da carga
    /// </summary>
    public decimal? PesoTotal { get; private set; }
    
    /// <summary>
    /// Volume total da carga (cubagem)
    /// </summary>
    public decimal? VolumeTotal { get; private set; }
    
    /// <summary>
    /// Endereço de origem do transporte
    /// </summary>
    public string? EnderecoOrigem { get; private set; }
    
    /// <summary>
    /// Endereço de destino do transporte
    /// </summary>
    public string? EnderecoDestino { get; private set; }
    
    /// <summary>
    /// Informações adicionais do transporte em formato JSON
    /// </summary>
    public JsonDocument? InformacoesTransporte { get; private set; }
    
    /// <summary>
    /// Observações sobre o transporte
    /// </summary>
    public string? Observacoes { get; private set; }
    
    /// <summary>
    /// Referência de navegação para o item de pedido
    /// </summary>
    public virtual PedidoItem PedidoItem { get; private set; } = null!;
    
    /// <summary>
    /// Construtor protegido para uso do Entity Framework
    /// </summary>
    protected PedidoItemTransporte() { }
    
    /// <summary>
    /// Construtor para criação de um novo transporte de item
    /// </summary>
    /// <param name="pedidoItemId">ID do item de pedido</param>
    /// <param name="quantidade">Quantidade a ser transportada</param>
    /// <param name="valorFrete">Valor do frete</param>
    /// <param name="enderecoOrigem">Endereço de origem (opcional)</param>
    /// <param name="enderecoDestino">Endereço de destino (opcional)</param>
    public PedidoItemTransporte(int pedidoItemId, decimal quantidade, decimal valorFrete, 
                               string? enderecoOrigem = null, string? enderecoDestino = null)
    {
        if (pedidoItemId <= 0)
            throw new ArgumentException("ID do item de pedido deve ser maior que zero", nameof(pedidoItemId));
            
        if (quantidade <= 0)
            throw new ArgumentException("Quantidade deve ser maior que zero", nameof(quantidade));
            
        if (valorFrete < 0)
            throw new ArgumentException("Valor do frete não pode ser negativo", nameof(valorFrete));
        
        PedidoItemId = pedidoItemId;
        Quantidade = quantidade;
        ValorFrete = valorFrete;
        EnderecoOrigem = enderecoOrigem;
        EnderecoDestino = enderecoDestino;
    }
    
    /// <summary>
    /// Agenda uma data para o transporte
    /// </summary>
    /// <param name="dataAgendamento">Data do agendamento</param>
    public void AgendarTransporte(DateTime dataAgendamento)
    {
        if (dataAgendamento <= DateTime.UtcNow)
            throw new ArgumentException("Data de agendamento deve ser futura", nameof(dataAgendamento));
        
        DataAgendamento = dataAgendamento;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza as informações de peso e volume
    /// </summary>
    /// <param name="pesoTotal">Peso total da carga</param>
    /// <param name="volumeTotal">Volume total da carga</param>
    public void AtualizarPesoVolume(decimal? pesoTotal, decimal? volumeTotal)
    {
        if (pesoTotal.HasValue && pesoTotal.Value < 0)
            throw new ArgumentException("Peso total não pode ser negativo", nameof(pesoTotal));
            
        if (volumeTotal.HasValue && volumeTotal.Value < 0)
            throw new ArgumentException("Volume total não pode ser negativo", nameof(volumeTotal));
        
        PesoTotal = pesoTotal;
        VolumeTotal = volumeTotal;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza o valor do frete
    /// </summary>
    /// <param name="novoValorFrete">Novo valor do frete</param>
    public void AtualizarValorFrete(decimal novoValorFrete)
    {
        if (novoValorFrete < 0)
            throw new ArgumentException("Valor do frete não pode ser negativo", nameof(novoValorFrete));
        
        ValorFrete = novoValorFrete;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza os endereços de origem e destino
    /// </summary>
    /// <param name="enderecoOrigem">Endereço de origem</param>
    /// <param name="enderecoDestino">Endereço de destino</param>
    public void AtualizarEnderecos(string? enderecoOrigem, string? enderecoDestino)
    {
        EnderecoOrigem = enderecoOrigem;
        EnderecoDestino = enderecoDestino;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza as informações adicionais do transporte
    /// </summary>
    /// <param name="informacoesTransporte">Informações em formato JSON</param>
    public void AtualizarInformacoesTransporte(JsonDocument? informacoesTransporte)
    {
        InformacoesTransporte = informacoesTransporte;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza as observações do transporte
    /// </summary>
    /// <param name="observacoes">Novas observações</param>
    public void AtualizarObservacoes(string? observacoes)
    {
        Observacoes = observacoes;
        AtualizarDataModificacao();
    }
}
</PedidoItemTransporte.cs>
<Proposta.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Enums;

namespace Agriis.Pedidos.Dominio.Entidades;

/// <summary>
/// Entidade que representa uma proposta de negociação em um pedido
/// </summary>
public class Proposta : EntidadeBase
{
    /// <summary>
    /// ID do pedido ao qual a proposta pertence
    /// </summary>
    public int PedidoId { get; private set; }
    
    /// <summary>
    /// Ação realizada pelo comprador (produtor)
    /// </summary>
    public AcaoCompradorPedido? AcaoComprador { get; private set; }
    
    /// <summary>
    /// Observação da proposta (geralmente do fornecedor)
    /// </summary>
    public string? Observacao { get; private set; }
    
    /// <summary>
    /// ID do usuário produtor que criou a proposta (quando ação do comprador)
    /// </summary>
    public int? UsuarioProdutorId { get; private set; }
    
    /// <summary>
    /// ID do usuário fornecedor que criou a proposta (quando observação do fornecedor)
    /// </summary>
    public int? UsuarioFornecedorId { get; private set; }
    
    /// <summary>
    /// Navegação para o pedido
    /// </summary>
    public virtual Pedido Pedido { get; private set; } = null!;
    
    /// <summary>
    /// Construtor protegido para uso do Entity Framework
    /// </summary>
    protected Proposta() { }
    
    /// <summary>
    /// Construtor para proposta de ação do comprador (produtor)
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="acaoComprador">Ação realizada pelo comprador</param>
    /// <param name="usuarioProdutorId">ID do usuário produtor</param>
    /// <param name="observacao">Observação opcional</param>
    public Proposta(int pedidoId, AcaoCompradorPedido acaoComprador, int usuarioProdutorId, string? observacao = null)
    {
        if (pedidoId <= 0)
            throw new ArgumentException("ID do pedido deve ser maior que zero", nameof(pedidoId));
            
        if (usuarioProdutorId <= 0)
            throw new ArgumentException("ID do usuário produtor deve ser maior que zero", nameof(usuarioProdutorId));
        
        PedidoId = pedidoId;
        AcaoComprador = acaoComprador;
        UsuarioProdutorId = usuarioProdutorId;
        Observacao = observacao;
    }
    
    /// <summary>
    /// Construtor para proposta de observação do fornecedor
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="observacao">Observação do fornecedor</param>
    /// <param name="usuarioFornecedorId">ID do usuário fornecedor</param>
    public Proposta(int pedidoId, string observacao, int usuarioFornecedorId)
    {
        if (pedidoId <= 0)
            throw new ArgumentException("ID do pedido deve ser maior que zero", nameof(pedidoId));
            
        if (string.IsNullOrWhiteSpace(observacao))
            throw new ArgumentException("Observação não pode ser vazia", nameof(observacao));
            
        if (usuarioFornecedorId <= 0)
            throw new ArgumentException("ID do usuário fornecedor deve ser maior que zero", nameof(usuarioFornecedorId));
        
        PedidoId = pedidoId;
        Observacao = observacao;
        UsuarioFornecedorId = usuarioFornecedorId;
    }
    
    /// <summary>
    /// Verifica se a proposta é de um produtor (comprador)
    /// </summary>
    /// <returns>True se é proposta de produtor</returns>
    public bool EhPropostaProdutor()
    {
        return UsuarioProdutorId.HasValue;
    }
    
    /// <summary>
    /// Verifica se a proposta é de um fornecedor
    /// </summary>
    /// <returns>True se é proposta de fornecedor</returns>
    public bool EhPropostaFornecedor()
    {
        return UsuarioFornecedorId.HasValue;
    }
}
</Proposta.cs>
<AcaoCompradorPedido.cs>
namespace Agriis.Pedidos.Dominio.Enums;

/// <summary>
/// Ações que o comprador (produtor) pode realizar em uma proposta
/// </summary>
public enum AcaoCompradorPedido
{
    /// <summary>
    /// Iniciou a negociação
    /// </summary>
    Iniciou = 0,
    
    /// <summary>
    /// Aceitou a proposta/pedido
    /// </summary>
    Aceitou = 1,
    
    /// <summary>
    /// Alterou o carrinho de compras
    /// </summary>
    AlterouCarrinho = 2,
    
    /// <summary>
    /// Cancelou o pedido
    /// </summary>
    Cancelou = 3
}
</AcaoCompradorPedido.cs>
<StatusCarrinho.cs>
namespace Agriis.Pedidos.Dominio.Enums;

/// <summary>
/// Status possíveis para o carrinho de compras
/// </summary>
public enum StatusCarrinho
{
    /// <summary>
    /// Carrinho em aberto, permitindo modificações
    /// </summary>
    EmAberto = 1
}
</StatusCarrinho.cs>
<StatusPedido.cs>
namespace Agriis.Pedidos.Dominio.Enums;

/// <summary>
/// Status possíveis para um pedido
/// </summary>
public enum StatusPedido
{
    /// <summary>
    /// Pedido em negociação entre produtor e fornecedor
    /// </summary>
    EmNegociacao = 1,
    
    /// <summary>
    /// Pedido fechado e confirmado
    /// </summary>
    Fechado = 2,
    
    /// <summary>
    /// Pedido cancelado por tempo limite de interação
    /// </summary>
    CanceladoPorTempoLimite = 3,
    
    /// <summary>
    /// Pedido cancelado pelo comprador (produtor)
    /// </summary>
    CanceladoPeloComprador = 4
}
</StatusPedido.cs>
<IPedidoItemRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Pedidos.Dominio.Entidades;

namespace Agriis.Pedidos.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de itens de pedido
/// </summary>
public interface IPedidoItemRepository : IRepository<PedidoItem>
{
    /// <summary>
    /// Obtém itens por pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Lista de itens do pedido</returns>
    Task<IEnumerable<PedidoItem>> ObterPorPedidoAsync(int pedidoId);
    
    /// <summary>
    /// Obtém itens por produto
    /// </summary>
    /// <param name="produtoId">ID do produto</param>
    /// <returns>Lista de itens do produto</returns>
    Task<IEnumerable<PedidoItem>> ObterPorProdutoAsync(int produtoId);
    
    /// <summary>
    /// Obtém um item com seus transportes
    /// </summary>
    /// <param name="itemId">ID do item</param>
    /// <returns>Item com transportes</returns>
    Task<PedidoItem?> ObterComTransportesAsync(int itemId);
    
    /// <summary>
    /// Obtém itens por faixa de valor
    /// </summary>
    /// <param name="valorMinimo">Valor mínimo</param>
    /// <param name="valorMaximo">Valor máximo</param>
    /// <returns>Lista de itens na faixa de valor</returns>
    Task<IEnumerable<PedidoItem>> ObterPorFaixaValorAsync(decimal valorMinimo, decimal valorMaximo);
}
</IPedidoItemRepository.cs>
<IPedidoItemTransporteRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Pedidos.Dominio.Entidades;

namespace Agriis.Pedidos.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de transportes de itens de pedido
/// </summary>
public interface IPedidoItemTransporteRepository : IRepository<PedidoItemTransporte>
{
    /// <summary>
    /// Obtém transportes por item de pedido
    /// </summary>
    /// <param name="pedidoItemId">ID do item de pedido</param>
    /// <returns>Lista de transportes do item</returns>
    Task<IEnumerable<PedidoItemTransporte>> ObterPorPedidoItemAsync(int pedidoItemId);
    
    /// <summary>
    /// Obtém transportes agendados para uma data específica
    /// </summary>
    /// <param name="data">Data do agendamento</param>
    /// <returns>Lista de transportes agendados</returns>
    Task<IEnumerable<PedidoItemTransporte>> ObterPorDataAgendamentoAsync(DateTime data);
    
    /// <summary>
    /// Obtém transportes por período de agendamento
    /// </summary>
    /// <param name="dataInicio">Data de início</param>
    /// <param name="dataFim">Data de fim</param>
    /// <returns>Lista de transportes no período</returns>
    Task<IEnumerable<PedidoItemTransporte>> ObterPorPeriodoAgendamentoAsync(DateTime dataInicio, DateTime dataFim);
    
    /// <summary>
    /// Obtém transportes sem agendamento
    /// </summary>
    /// <returns>Lista de transportes sem data agendada</returns>
    Task<IEnumerable<PedidoItemTransporte>> ObterSemAgendamentoAsync();
    
    /// <summary>
    /// Obtém transportes por faixa de valor de frete
    /// </summary>
    /// <param name="valorMinimo">Valor mínimo do frete</param>
    /// <param name="valorMaximo">Valor máximo do frete</param>
    /// <returns>Lista de transportes na faixa de valor</returns>
    Task<IEnumerable<PedidoItemTransporte>> ObterPorFaixaValorFreteAsync(decimal valorMinimo, decimal valorMaximo);
    
    /// <summary>
    /// Obtém todos os transportes de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Lista de transportes do pedido</returns>
    Task<IEnumerable<PedidoItemTransporte>> ObterPorPedidoIdAsync(int pedidoId);
}
</IPedidoItemTransporteRepository.cs>
<IPedidoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Enums;

namespace Agriis.Pedidos.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de pedidos
/// </summary>
public interface IPedidoRepository : IRepository<Pedido>
{
    /// <summary>
    /// Obtém pedidos por produtor
    /// </summary>
    /// <param name="produtorId">ID do produtor</param>
    /// <returns>Lista de pedidos do produtor</returns>
    Task<IEnumerable<Pedido>> ObterPorProdutorAsync(int produtorId);
    
    /// <summary>
    /// Obtém pedidos por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de pedidos do fornecedor</returns>
    Task<IEnumerable<Pedido>> ObterPorFornecedorAsync(int fornecedorId);
    
    /// <summary>
    /// Obtém pedidos por status
    /// </summary>
    /// <param name="status">Status do pedido</param>
    /// <returns>Lista de pedidos com o status especificado</returns>
    Task<IEnumerable<Pedido>> ObterPorStatusAsync(StatusPedido status);
    
    /// <summary>
    /// Obtém pedidos por produtor e fornecedor
    /// </summary>
    /// <param name="produtorId">ID do produtor</param>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de pedidos entre o produtor e fornecedor</returns>
    Task<IEnumerable<Pedido>> ObterPorProdutorFornecedorAsync(int produtorId, int fornecedorId);
    
    /// <summary>
    /// Obtém pedidos que estão próximos do prazo limite
    /// </summary>
    /// <param name="diasAntes">Quantos dias antes do prazo limite</param>
    /// <returns>Lista de pedidos próximos do prazo</returns>
    Task<IEnumerable<Pedido>> ObterProximosPrazoLimiteAsync(int diasAntes = 1);
    
    /// <summary>
    /// Obtém pedidos que ultrapassaram o prazo limite
    /// </summary>
    /// <returns>Lista de pedidos com prazo ultrapassado</returns>
    Task<IEnumerable<Pedido>> ObterComPrazoUltrapassadoAsync();
    
    /// <summary>
    /// Obtém um pedido com todos os seus itens e transportes
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Pedido completo com itens e transportes</returns>
    Task<Pedido?> ObterComItensAsync(int pedidoId);
    
    /// <summary>
    /// Obtém um pedido com todos os seus itens e transportes
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Pedido completo com itens e transportes</returns>
    Task<Pedido?> ObterComItensETransportesAsync(int pedidoId);
    
    /// <summary>
    /// Obtém pedidos por período
    /// </summary>
    /// <param name="dataInicio">Data de início</param>
    /// <param name="dataFim">Data de fim</param>
    /// <returns>Lista de pedidos no período</returns>
    Task<IEnumerable<Pedido>> ObterPorPeriodoAsync(DateTime dataInicio, DateTime dataFim);
}
</IPedidoRepository.cs>
<IPropostaRepository.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Pedidos.Dominio.Entidades;

namespace Agriis.Pedidos.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de propostas
/// </summary>
public interface IPropostaRepository : IRepository<Proposta>
{
    /// <summary>
    /// Obtém a última proposta de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Última proposta ou null se não existir</returns>
    Task<Proposta?> ObterUltimaPorPedidoAsync(int pedidoId);
    
    /// <summary>
    /// Lista todas as propostas de um pedido com paginação
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="pagina">Número da página</param>
    /// <param name="tamanhoPagina">Tamanho da página</param>
    /// <param name="ordenacao">Campo de ordenação</param>
    /// <returns>Lista paginada de propostas</returns>
    Task<PagedResult<Proposta>> ListarPorPedidoAsync(int pedidoId, int pagina, int tamanhoPagina, string? ordenacao = null);
    
    /// <summary>
    /// Verifica se existe alguma proposta para o pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>True se existe proposta</returns>
    Task<bool> ExistePropostaPorPedidoAsync(int pedidoId);
}
</IPropostaRepository.cs>
<CarrinhoComprasService.cs>
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Interfaces;
using Agriis.Pedidos.Dominio.Enums;
using Agriis.Segmentacoes.Dominio.Servicos;
using Agriis.Produtos.Aplicacao.Interfaces;
using Agriis.Produtores.Aplicacao.Interfaces;
using Agriis.Catalogos.Aplicacao.Interfaces;
using System.Text.Json;

namespace Agriis.Pedidos.Dominio.Servicos;

/// <summary>
/// Serviço de domínio para lógica de carrinho de compras
/// </summary>
public class CarrinhoComprasService
{
    private readonly CalculoDescontoSegmentadoService _calculoDescontoService;
    private readonly IProdutoService _produtoService;
    private readonly IProdutorService _produtorService;
    private readonly ICatalogoService _catalogoService;
    private readonly IPropostaRepository _propostaRepository;

    public CarrinhoComprasService(
        CalculoDescontoSegmentadoService calculoDescontoService,
        IProdutoService produtoService,
        IProdutorService produtorService,
        ICatalogoService catalogoService,
        IPropostaRepository propostaRepository)
    {
        _calculoDescontoService = calculoDescontoService;
        _produtoService = produtoService;
        _produtorService = produtorService;
        _catalogoService = catalogoService;
        _propostaRepository = propostaRepository;
    }

    /// <summary>
    /// Adiciona um item ao carrinho com cálculo de preços e descontos
    /// </summary>
    /// <param name="pedido">Pedido (carrinho)</param>
    /// <param name="produtoId">ID do produto</param>
    /// <param name="quantidade">Quantidade solicitada</param>
    /// <param name="catalogoId">ID do catálogo para consulta de preços</param>
    /// <param name="observacoes">Observações opcionais</param>
    /// <returns>Item criado com preços calculados</returns>
    public async Task<PedidoItem> AdicionarItemAsync(
        Pedido pedido, 
        int produtoId, 
        decimal quantidade, 
        int catalogoId,
        string? observacoes = null)
    {
        // Validar se o produto existe e está ativo
        var produto = await _produtoService.ObterPorIdAsync(produtoId);
        if (produto == null)
            throw new InvalidOperationException($"Produto com ID {produtoId} não encontrado");

        // Validar quantidade mínima
        await ValidarQuantidadeMinimaAsync(produtoId, quantidade);

        // Obter preço do catálogo
        var precoResult = await _catalogoService.ConsultarPrecoAsync(catalogoId, produtoId, new Catalogos.Aplicacao.DTOs.ConsultarPrecoDto
        {
            Data = DateTime.UtcNow,
            Uf = string.Empty // TODO: Obter do endereço do produtor se necessário
        });

        if (!precoResult.IsSuccess || !precoResult.Value.HasValue)
            throw new InvalidOperationException($"Preço não encontrado para o produto {produtoId} no catálogo {catalogoId}");

        var precoUnitario = precoResult.Value.Value;

        // Calcular desconto segmentado
        var produtor = await _produtorService.ObterPorIdAsync(pedido.ProdutorId);
        if (produtor == null)
            throw new InvalidOperationException($"Produtor com ID {pedido.ProdutorId} não encontrado");

        var resultadoDesconto = await _calculoDescontoService.CalcularDescontoAsync(
            pedido.ProdutorId,
            pedido.FornecedorId,
            produto.CategoriaId,
            produtor.AreaPlantio,
            precoUnitario * quantidade);

        // Criar item com valores calculados
        var item = new PedidoItem(
            pedido.Id,
            produtoId,
            quantidade,
            precoUnitario,
            resultadoDesconto.PercentualDesconto,
            observacoes);

        // Adicionar dados adicionais sobre o desconto
        var dadosDesconto = JsonSerializer.SerializeToDocument(new
        {
            segmentacao_aplicada = resultadoDesconto.SegmentacaoAplicada,
            grupo_aplicado = resultadoDesconto.GrupoAplicado,
            observacoes_desconto = resultadoDesconto.Observacoes,
            area_produtor = produtor.AreaPlantio,
            categoria_id = produto.CategoriaId
        });

        item.AtualizarDadosAdicionais(dadosDesconto);

        // Criar proposta de alteração do carrinho se o pedido estiver em negociação
        if (pedido.Status == StatusPedido.EmNegociacao)
        {
            await CriarPropostaAlteracaoCarrinhoAsync(pedido, $"Adicionou o produto ({produtoId}) - {produto.Nome} no pedido.");
        }

        return item;
    }

    /// <summary>
    /// Atualiza a quantidade de um item e recalcula preços
    /// </summary>
    /// <param name="item">Item a ser atualizado</param>
    /// <param name="novaQuantidade">Nova quantidade</param>
    /// <param name="pedido">Pedido para recálculo de descontos</param>
    public async Task AtualizarQuantidadeItemAsync(PedidoItem item, decimal novaQuantidade, Pedido pedido)
    {
        // Validar quantidade mínima
        await ValidarQuantidadeMinimaAsync(item.ProdutoId, novaQuantidade);

        // Obter dados do produto e produtor para recálculo
        var produto = await _produtoService.ObterPorIdAsync(item.ProdutoId);
        var produtor = await _produtorService.ObterPorIdAsync(pedido.ProdutorId);

        if (produto == null || produtor == null)
            throw new InvalidOperationException("Dados necessários para recálculo não encontrados");

        // Recalcular desconto com nova quantidade
        var resultadoDesconto = await _calculoDescontoService.CalcularDescontoAsync(
            pedido.ProdutorId,
            pedido.FornecedorId,
            produto.CategoriaId,
            produtor.AreaPlantio,
            item.PrecoUnitario * novaQuantidade);

        // Atualizar item
        item.AtualizarQuantidade(novaQuantidade);
        item.AtualizarDesconto(resultadoDesconto.PercentualDesconto);

        // Atualizar dados adicionais
        var dadosDesconto = JsonSerializer.SerializeToDocument(new
        {
            segmentacao_aplicada = resultadoDesconto.SegmentacaoAplicada,
            grupo_aplicado = resultadoDesconto.GrupoAplicado,
            observacoes_desconto = resultadoDesconto.Observacoes,
            area_produtor = produtor.AreaPlantio,
            categoria_id = produto.CategoriaId
        });

        item.AtualizarDadosAdicionais(dadosDesconto);

        // Criar proposta de alteração do carrinho se o pedido estiver em negociação
        if (pedido.Status == StatusPedido.EmNegociacao)
        {
            await CriarPropostaAlteracaoCarrinhoAsync(pedido, $"Alterou o produto ({item.ProdutoId}) - {produto.Nome} no pedido.");
        }
    }

    /// <summary>
    /// Calcula os totais do pedido
    /// </summary>
    /// <param name="pedido">Pedido para cálculo</param>
    /// <returns>Totais calculados</returns>
    public TotaisPedido CalcularTotais(Pedido pedido)
    {
        var totais = new TotaisPedido();

        foreach (var item in pedido.Itens)
        {
            totais.ValorBruto += item.ValorTotal;
            totais.ValorDesconto += item.ValorDesconto;
            totais.ValorLiquido += item.ValorFinal;
            totais.QuantidadeItens++;
        }

        totais.PercentualDescontoMedio = totais.ValorBruto > 0 
            ? (totais.ValorDesconto / totais.ValorBruto) * 100 
            : 0;

        return totais;
    }

    /// <summary>
    /// Valida se a quantidade atende ao mínimo exigido pelo produto
    /// </summary>
    /// <param name="produtoId">ID do produto</param>
    /// <param name="quantidade">Quantidade solicitada</param>
    private async Task ValidarQuantidadeMinimaAsync(int produtoId, decimal quantidade)
    {
        var produto = await _produtoService.ObterPorIdAsync(produtoId);
        if (produto == null)
            throw new InvalidOperationException($"Produto com ID {produtoId} não encontrado");

        // TODO: Implementar validação de quantidade mínima quando o campo estiver disponível no produto
        // Por enquanto, apenas validar que a quantidade é positiva
        if (quantidade <= 0)
            throw new ArgumentException("Quantidade deve ser maior que zero", nameof(quantidade));
    }

    /// <summary>
    /// Verifica se o pedido ainda está dentro do prazo limite para modificações
    /// </summary>
    /// <param name="pedido">Pedido a ser verificado</param>
    /// <returns>True se está dentro do prazo</returns>
    public bool VerificarPrazoLimite(Pedido pedido)
    {
        return pedido.EstaDentroPrazoLimite();
    }

    /// <summary>
    /// Atualiza a data limite de interação do pedido
    /// </summary>
    /// <param name="pedido">Pedido a ser atualizado</param>
    /// <param name="novosDias">Novos dias a partir de agora</param>
    public void AtualizarPrazoLimite(Pedido pedido, int novosDias)
    {
        if (novosDias <= 0)
            throw new ArgumentException("Dias deve ser maior que zero", nameof(novosDias));

        pedido.AtualizarPrazoLimite(novosDias);
    }

    /// <summary>
    /// Remove um item do carrinho e cria proposta se necessário
    /// </summary>
    /// <param name="pedido">Pedido</param>
    /// <param name="itemId">ID do item a ser removido</param>
    /// <param name="usuarioId">ID do usuário que está removendo</param>
    public async Task RemoverItemAsync(Pedido pedido, int itemId, int usuarioId)
    {
        var item = pedido.Itens.FirstOrDefault(i => i.Id == itemId);
        if (item == null)
            throw new InvalidOperationException($"Item com ID {itemId} não encontrado no pedido");

        var produto = await _produtoService.ObterPorIdAsync(item.ProdutoId);
        
        pedido.RemoverItem(itemId);

        // Criar proposta de alteração do carrinho se o pedido estiver em negociação
        if (pedido.Status == StatusPedido.EmNegociacao)
        {
            var nomeProduto = produto?.Nome ?? "Produto não encontrado";
            await CriarPropostaAlteracaoCarrinhoAsync(pedido, $"Removeu o produto ({item.ProdutoId}) - {nomeProduto} do pedido.", usuarioId);
        }
    }

    /// <summary>
    /// Cria uma proposta de alteração do carrinho
    /// </summary>
    /// <param name="pedido">Pedido alterado</param>
    /// <param name="observacao">Observação da alteração</param>
    /// <param name="usuarioId">ID do usuário (opcional)</param>
    private async Task CriarPropostaAlteracaoCarrinhoAsync(Pedido pedido, string observacao, int? usuarioId = null)
    {
        if (usuarioId.HasValue)
        {
            var proposta = new Proposta(pedido.Id, AcaoCompradorPedido.AlterouCarrinho, usuarioId.Value, observacao);
            await _propostaRepository.AdicionarAsync(proposta);
        }
    }
}

/// <summary>
/// Classe para representar os totais calculados de um pedido
/// </summary>
public class TotaisPedido
{
    /// <summary>
    /// Valor bruto total (sem descontos)
    /// </summary>
    public decimal ValorBruto { get; set; }

    /// <summary>
    /// Valor total de descontos aplicados
    /// </summary>
    public decimal ValorDesconto { get; set; }

    /// <summary>
    /// Valor líquido total (com descontos)
    /// </summary>
    public decimal ValorLiquido { get; set; }

    /// <summary>
    /// Quantidade total de itens
    /// </summary>
    public int QuantidadeItens { get; set; }

    /// <summary>
    /// Percentual médio de desconto aplicado
    /// </summary>
    public decimal PercentualDescontoMedio { get; set; }

    /// <summary>
    /// Converte para JsonDocument para armazenamento
    /// </summary>
    /// <returns>JsonDocument com os totais</returns>
    public JsonDocument ToJsonDocument()
    {
        return JsonSerializer.SerializeToDocument(new
        {
            valor_bruto = ValorBruto,
            valor_desconto = ValorDesconto,
            valor_liquido = ValorLiquido,
            quantidade_itens = QuantidadeItens,
            percentual_desconto_medio = PercentualDescontoMedio,
            data_calculo = DateTime.UtcNow
        });
    }
}
</CarrinhoComprasService.cs>
<FreteCalculoService.cs>
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.Enums;

namespace Agriis.Pedidos.Dominio.Servicos;

/// <summary>
/// Serviço de domínio para cálculos de frete
/// </summary>
public class FreteCalculoService
{
    /// <summary>
    /// Calcula o frete para um item de pedido baseado em peso e cubagem
    /// </summary>
    /// <param name="produto">Produto para calcular o frete</param>
    /// <param name="quantidade">Quantidade do produto</param>
    /// <param name="distanciaKm">Distância em quilômetros</param>
    /// <param name="valorPorKgKm">Valor por quilograma por quilômetro</param>
    /// <param name="valorMinimoFrete">Valor mínimo de frete</param>
    /// <returns>Informações do cálculo de frete</returns>
    public CalculoFreteResult CalcularFrete(
        Produto produto, 
        decimal quantidade, 
        decimal distanciaKm,
        decimal valorPorKgKm = 0.05m,
        decimal valorMinimoFrete = 50.00m)
    {
        if (produto == null)
            throw new ArgumentNullException(nameof(produto));
        if (quantidade <= 0)
            throw new ArgumentException("Quantidade deve ser maior que zero", nameof(quantidade));
        if (distanciaKm <= 0)
            throw new ArgumentException("Distância deve ser maior que zero", nameof(distanciaKm));

        // Calcula peso total baseado no tipo de cálculo do produto
        var pesoUnitario = produto.CalcularPesoParaFrete();
        var pesoTotal = pesoUnitario * quantidade;

        // Calcula volume total
        var volumeUnitario = produto.Dimensoes.CalcularVolume();
        var volumeTotal = volumeUnitario * quantidade;

        // Calcula peso cúbico se houver densidade
        decimal? pesoCubadoTotal = null;
        if (produto.Dimensoes.Densidade.HasValue)
        {
            pesoCubadoTotal = volumeTotal * produto.Dimensoes.Densidade.Value;
        }

        // Determina o peso para cálculo de frete
        var pesoParaFrete = produto.TipoCalculoPeso switch
        {
            TipoCalculoPeso.PesoNominal => produto.Dimensoes.PesoNominal * quantidade,
            TipoCalculoPeso.PesoCubado => pesoCubadoTotal ?? (produto.Dimensoes.PesoNominal * quantidade),
            _ => produto.Dimensoes.PesoNominal * quantidade
        };

        // Calcula valor do frete
        var valorCalculado = pesoParaFrete * distanciaKm * valorPorKgKm;
        var valorFrete = Math.Max(valorCalculado, valorMinimoFrete);

        return new CalculoFreteResult(
            pesoTotal,
            volumeTotal,
            pesoCubadoTotal,
            pesoParaFrete,
            valorFrete,
            distanciaKm,
            produto.TipoCalculoPeso
        );
    }

    /// <summary>
    /// Calcula o frete consolidado para múltiplos itens
    /// </summary>
    /// <param name="itens">Lista de itens com produtos e quantidades</param>
    /// <param name="distanciaKm">Distância em quilômetros</param>
    /// <param name="valorPorKgKm">Valor por quilograma por quilômetro</param>
    /// <param name="valorMinimoFrete">Valor mínimo de frete</param>
    /// <returns>Informações consolidadas do cálculo de frete</returns>
    public CalculoFreteConsolidadoResult CalcularFreteConsolidado(
        IEnumerable<(Produto produto, decimal quantidade)> itens,
        decimal distanciaKm,
        decimal valorPorKgKm = 0.05m,
        decimal valorMinimoFrete = 50.00m)
    {
        if (itens == null || !itens.Any())
            throw new ArgumentException("Lista de itens não pode ser vazia", nameof(itens));

        var calculosIndividuais = new List<CalculoFreteResult>();
        decimal pesoTotalConsolidado = 0;
        decimal volumeTotalConsolidado = 0;
        decimal? pesoCubadoTotalConsolidado = 0;
        bool temDensidade = false;

        foreach (var (produto, quantidade) in itens)
        {
            var calculo = CalcularFrete(produto, quantidade, distanciaKm, valorPorKgKm, 0); // Sem mínimo individual
            calculosIndividuais.Add(calculo);

            pesoTotalConsolidado += calculo.PesoTotal;
            volumeTotalConsolidado += calculo.VolumeTotal;
            
            if (calculo.PesoCubadoTotal.HasValue)
            {
                pesoCubadoTotalConsolidado += calculo.PesoCubadoTotal.Value;
                temDensidade = true;
            }
        }

        // Se nenhum produto tem densidade, não calcular peso cúbico consolidado
        if (!temDensidade)
            pesoCubadoTotalConsolidado = null;

        // Calcula valor consolidado (soma dos valores individuais, mas respeitando mínimo global)
        var valorTotalCalculado = calculosIndividuais.Sum(c => c.ValorFrete);
        var valorFreteConsolidado = Math.Max(valorTotalCalculado, valorMinimoFrete);

        return new CalculoFreteConsolidadoResult(
            calculosIndividuais,
            pesoTotalConsolidado,
            volumeTotalConsolidado,
            pesoCubadoTotalConsolidado,
            valorFreteConsolidado,
            distanciaKm
        );
    }

    /// <summary>
    /// Valida se a quantidade está disponível para transporte
    /// </summary>
    /// <param name="pedidoItem">Item do pedido</param>
    /// <param name="quantidadeTransporte">Quantidade a ser transportada</param>
    /// <returns>True se a quantidade está disponível</returns>
    public bool ValidarDisponibilidadeQuantidade(PedidoItem pedidoItem, decimal quantidadeTransporte)
    {
        if (pedidoItem == null)
            throw new ArgumentNullException(nameof(pedidoItem));

        // Calcula quantidade já agendada para transporte
        var quantidadeJaAgendada = pedidoItem.Transportes.Sum(t => t.Quantidade);
        var quantidadeDisponivel = pedidoItem.Quantidade - quantidadeJaAgendada;

        return quantidadeTransporte <= quantidadeDisponivel;
    }

    /// <summary>
    /// Calcula a quantidade disponível para agendamento de transporte
    /// </summary>
    /// <param name="pedidoItem">Item do pedido</param>
    /// <returns>Quantidade disponível</returns>
    public decimal CalcularQuantidadeDisponivel(PedidoItem pedidoItem)
    {
        if (pedidoItem == null)
            throw new ArgumentNullException(nameof(pedidoItem));

        var quantidadeJaAgendada = pedidoItem.Transportes.Sum(t => t.Quantidade);
        return Math.Max(0, pedidoItem.Quantidade - quantidadeJaAgendada);
    }
}

/// <summary>
/// Resultado do cálculo de frete para um item
/// </summary>
public record CalculoFreteResult(
    decimal PesoTotal,
    decimal VolumeTotal,
    decimal? PesoCubadoTotal,
    decimal PesoParaFrete,
    decimal ValorFrete,
    decimal DistanciaKm,
    TipoCalculoPeso TipoCalculoUtilizado
);

/// <summary>
/// Resultado do cálculo de frete consolidado para múltiplos itens
/// </summary>
public record CalculoFreteConsolidadoResult(
    IEnumerable<CalculoFreteResult> CalculosIndividuais,
    decimal PesoTotalConsolidado,
    decimal VolumeTotalConsolidado,
    decimal? PesoCubadoTotalConsolidado,
    decimal ValorFreteConsolidado,
    decimal DistanciaKm
);
</FreteCalculoService.cs>
<TransporteAgendamentoService.cs>
using Agriis.Pedidos.Dominio.Entidades;
using System.Text.Json;

namespace Agriis.Pedidos.Dominio.Servicos;

/// <summary>
/// Serviço de domínio para agendamento de transportes
/// </summary>
public class TransporteAgendamentoService
{
    private readonly FreteCalculoService _freteCalculoService;

    public TransporteAgendamentoService(FreteCalculoService freteCalculoService)
    {
        _freteCalculoService = freteCalculoService ?? throw new ArgumentNullException(nameof(freteCalculoService));
    }

    /// <summary>
    /// Cria um agendamento de transporte para um item de pedido
    /// </summary>
    /// <param name="pedidoItem">Item do pedido</param>
    /// <param name="quantidade">Quantidade a ser transportada</param>
    /// <param name="dataAgendamento">Data do agendamento</param>
    /// <param name="enderecoOrigem">Endereço de origem</param>
    /// <param name="enderecoDestino">Endereço de destino</param>
    /// <param name="distanciaKm">Distância em quilômetros</param>
    /// <param name="observacoes">Observações do transporte</param>
    /// <returns>Transporte criado</returns>
    public PedidoItemTransporte CriarAgendamentoTransporte(
        PedidoItem pedidoItem,
        decimal quantidade,
        DateTime dataAgendamento,
        string? enderecoOrigem = null,
        string? enderecoDestino = null,
        decimal distanciaKm = 0,
        string? observacoes = null)
    {
        if (pedidoItem == null)
            throw new ArgumentNullException(nameof(pedidoItem));

        // Validar disponibilidade de quantidade
        if (!_freteCalculoService.ValidarDisponibilidadeQuantidade(pedidoItem, quantidade))
        {
            var quantidadeDisponivel = _freteCalculoService.CalcularQuantidadeDisponivel(pedidoItem);
            throw new InvalidOperationException(
                $"Quantidade solicitada ({quantidade}) excede a disponível ({quantidadeDisponivel})");
        }

        // Validar data de agendamento
        ValidarDataAgendamento(dataAgendamento);

        // Calcular frete se distância foi informada
        decimal valorFrete = 0;
        if (distanciaKm > 0 && pedidoItem.Produto != null)
        {
            var calculoFrete = _freteCalculoService.CalcularFrete(
                pedidoItem.Produto, 
                quantidade, 
                distanciaKm);
            valorFrete = calculoFrete.ValorFrete;
        }

        // Criar transporte
        var transporte = new PedidoItemTransporte(
            pedidoItem.Id,
            quantidade,
            valorFrete,
            enderecoOrigem,
            enderecoDestino);

        // Agendar data
        transporte.AgendarTransporte(dataAgendamento);

        // Adicionar observações se fornecidas
        if (!string.IsNullOrWhiteSpace(observacoes))
        {
            transporte.AtualizarObservacoes(observacoes);
        }

        // Calcular e atualizar peso/volume se produto disponível
        if (pedidoItem.Produto != null)
        {
            var calculoFrete = _freteCalculoService.CalcularFrete(
                pedidoItem.Produto, 
                quantidade, 
                distanciaKm > 0 ? distanciaKm : 1); // Usar 1km como padrão para cálculo de peso/volume

            transporte.AtualizarPesoVolume(calculoFrete.PesoTotal, calculoFrete.VolumeTotal);

            // Adicionar informações detalhadas do cálculo
            var informacoesTransporte = JsonDocument.Parse(JsonSerializer.Serialize(new
            {
                calculo_frete = new
                {
                    peso_total = calculoFrete.PesoTotal,
                    volume_total = calculoFrete.VolumeTotal,
                    peso_cubado_total = calculoFrete.PesoCubadoTotal,
                    peso_para_frete = calculoFrete.PesoParaFrete,
                    distancia_km = calculoFrete.DistanciaKm,
                    tipo_calculo = calculoFrete.TipoCalculoUtilizado.ToString()
                },
                agendamento = new
                {
                    data_criacao = DateTime.UtcNow,
                    data_agendamento = dataAgendamento,
                    endereco_origem = enderecoOrigem,
                    endereco_destino = enderecoDestino
                }
            }));

            transporte.AtualizarInformacoesTransporte(informacoesTransporte);
        }

        return transporte;
    }

    /// <summary>
    /// Reagenda um transporte existente
    /// </summary>
    /// <param name="transporte">Transporte a ser reagendado</param>
    /// <param name="novaDataAgendamento">Nova data de agendamento</param>
    /// <param name="observacoes">Observações sobre o reagendamento</param>
    public void ReagendarTransporte(
        PedidoItemTransporte transporte, 
        DateTime novaDataAgendamento,
        string? observacoes = null)
    {
        if (transporte == null)
            throw new ArgumentNullException(nameof(transporte));

        ValidarDataAgendamento(novaDataAgendamento);

        transporte.AgendarTransporte(novaDataAgendamento);

        // Atualizar observações com histórico de reagendamento
        var observacoesAtuais = transporte.Observacoes ?? string.Empty;
        var novaObservacao = $"Reagendado para {novaDataAgendamento:dd/MM/yyyy HH:mm}";
        
        if (!string.IsNullOrWhiteSpace(observacoes))
        {
            novaObservacao += $" - {observacoes}";
        }

        var observacoesCombinadas = string.IsNullOrWhiteSpace(observacoesAtuais) 
            ? novaObservacao 
            : $"{observacoesAtuais}\n{novaObservacao}";

        transporte.AtualizarObservacoes(observacoesCombinadas);

        // Atualizar informações de transporte com histórico
        if (transporte.InformacoesTransporte != null)
        {
            var informacoesAtuais = JsonSerializer.Deserialize<Dictionary<string, object>>(
                transporte.InformacoesTransporte.RootElement.GetRawText()) ?? new Dictionary<string, object>();

            if (!informacoesAtuais.ContainsKey("historico_reagendamentos"))
            {
                informacoesAtuais["historico_reagendamentos"] = new List<object>();
            }

            var historico = JsonSerializer.Deserialize<List<object>>(
                JsonSerializer.Serialize(informacoesAtuais["historico_reagendamentos"])) ?? new List<object>();

            historico.Add(new
            {
                data_reagendamento = DateTime.UtcNow,
                nova_data_agendamento = novaDataAgendamento,
                observacoes = observacoes
            });

            informacoesAtuais["historico_reagendamentos"] = historico;

            var novasInformacoes = JsonDocument.Parse(JsonSerializer.Serialize(informacoesAtuais));
            transporte.AtualizarInformacoesTransporte(novasInformacoes);
        }
    }

    /// <summary>
    /// Atualiza o valor do frete de um transporte
    /// </summary>
    /// <param name="transporte">Transporte a ser atualizado</param>
    /// <param name="novoValorFrete">Novo valor do frete</param>
    /// <param name="motivo">Motivo da alteração</param>
    public void AtualizarValorFrete(
        PedidoItemTransporte transporte, 
        decimal novoValorFrete,
        string? motivo = null)
    {
        if (transporte == null)
            throw new ArgumentNullException(nameof(transporte));

        var valorAnterior = transporte.ValorFrete;
        transporte.AtualizarValorFrete(novoValorFrete);

        // Registrar alteração nas observações
        var observacao = $"Valor do frete alterado de R$ {valorAnterior:F2} para R$ {novoValorFrete:F2}";
        if (!string.IsNullOrWhiteSpace(motivo))
        {
            observacao += $" - Motivo: {motivo}";
        }

        var observacoesAtuais = transporte.Observacoes ?? string.Empty;
        var observacoesCombinadas = string.IsNullOrWhiteSpace(observacoesAtuais) 
            ? observacao 
            : $"{observacoesAtuais}\n{observacao}";

        transporte.AtualizarObservacoes(observacoesCombinadas);
    }

    /// <summary>
    /// Valida se múltiplos transportes podem ser agendados para as datas especificadas
    /// </summary>
    /// <param name="agendamentos">Lista de agendamentos solicitados</param>
    /// <returns>Resultado da validação</returns>
    public ValidacaoAgendamentoResult ValidarMultiplosAgendamentos(
        IEnumerable<SolicitacaoAgendamento> agendamentos)
    {
        if (agendamentos == null || !agendamentos.Any())
            return new ValidacaoAgendamentoResult(true, new List<string>());

        var erros = new List<string>();

        foreach (var agendamento in agendamentos)
        {
            try
            {
                ValidarDataAgendamento(agendamento.DataAgendamento);

                if (!_freteCalculoService.ValidarDisponibilidadeQuantidade(
                    agendamento.PedidoItem, agendamento.Quantidade))
                {
                    var quantidadeDisponivel = _freteCalculoService.CalcularQuantidadeDisponivel(
                        agendamento.PedidoItem);
                    erros.Add($"Item {agendamento.PedidoItem.Id}: Quantidade solicitada ({agendamento.Quantidade}) " +
                             $"excede a disponível ({quantidadeDisponivel})");
                }
            }
            catch (Exception ex)
            {
                erros.Add($"Item {agendamento.PedidoItem.Id}: {ex.Message}");
            }
        }

        return new ValidacaoAgendamentoResult(erros.Count == 0, erros);
    }

    /// <summary>
    /// Calcula o resumo de transporte para um pedido
    /// </summary>
    /// <param name="pedido">Pedido para calcular resumo</param>
    /// <returns>Resumo do transporte</returns>
    public ResumoTransportePedido CalcularResumoTransporte(Pedido pedido)
    {
        if (pedido == null)
            throw new ArgumentNullException(nameof(pedido));

        var itensComTransporte = pedido.Itens.Where(i => i.Transportes.Any()).ToList();
        var totalTransportes = pedido.Itens.SelectMany(i => i.Transportes).ToList();

        var pesoTotal = totalTransportes.Sum(t => t.PesoTotal ?? 0);
        var volumeTotal = totalTransportes.Sum(t => t.VolumeTotal ?? 0);
        var valorFreteTotal = totalTransportes.Sum(t => t.ValorFrete);

        var transportesAgendados = totalTransportes.Where(t => t.DataAgendamento.HasValue).ToList();
        var proximoAgendamento = transportesAgendados
            .Where(t => t.DataAgendamento > DateTime.UtcNow)
            .OrderBy(t => t.DataAgendamento)
            .FirstOrDefault();

        return new ResumoTransportePedido(
            pedido.Itens.Count,
            itensComTransporte.Count,
            totalTransportes.Count,
            transportesAgendados.Count,
            pesoTotal,
            volumeTotal,
            valorFreteTotal,
            proximoAgendamento?.DataAgendamento
        );
    }

    private static void ValidarDataAgendamento(DateTime dataAgendamento)
    {
        if (dataAgendamento <= DateTime.UtcNow)
            throw new ArgumentException("Data de agendamento deve ser futura", nameof(dataAgendamento));

        // Validar se não é fim de semana (opcional - pode ser configurável)
        if (dataAgendamento.DayOfWeek == DayOfWeek.Sunday || dataAgendamento.DayOfWeek == DayOfWeek.Saturday)
        {
            // Por enquanto apenas um aviso, não um erro
            // throw new ArgumentException("Agendamentos não são permitidos em fins de semana", nameof(dataAgendamento));
        }

        // Validar se não é muito distante no futuro (ex: máximo 90 dias)
        if (dataAgendamento > DateTime.UtcNow.AddDays(90))
            throw new ArgumentException("Data de agendamento não pode ser superior a 90 dias", nameof(dataAgendamento));
    }
}

/// <summary>
/// Solicitação de agendamento de transporte
/// </summary>
public record SolicitacaoAgendamento(
    PedidoItem PedidoItem,
    decimal Quantidade,
    DateTime DataAgendamento,
    string? EnderecoOrigem = null,
    string? EnderecoDestino = null,
    decimal DistanciaKm = 0,
    string? Observacoes = null
);

/// <summary>
/// Resultado da validação de agendamentos
/// </summary>
public record ValidacaoAgendamentoResult(
    bool EhValido,
    IEnumerable<string> Erros
);

/// <summary>
/// Resumo de transporte para um pedido
/// </summary>
public record ResumoTransportePedido(
    int TotalItens,
    int ItensComTransporte,
    int TotalTransportes,
    int TransportesAgendados,
    decimal PesoTotal,
    decimal VolumeTotal,
    decimal ValorFreteTotal,
    DateTime? ProximoAgendamento
);
</TransporteAgendamentoService.cs>
<PedidoConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Enums;

namespace Agriis.Pedidos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Pedido
/// </summary>
public class PedidoConfiguration : IEntityTypeConfiguration<Pedido>
{
    public void Configure(EntityTypeBuilder<Pedido> builder)
    {
        // Configuração da tabela
        builder.ToTable("Pedido");
        
        // Chave primária
        builder.HasKey(p => p.Id);
        
        // Configuração das propriedades
        builder.Property(p => p.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();
            
        builder.Property(p => p.Status)
            .HasColumnName("Status")
            .HasConversion<int>()
            .IsRequired();
            
        builder.Property(p => p.StatusCarrinho)
            .HasColumnName("StatusCarrinho")
            .HasConversion<int>()
            .IsRequired();
            
        builder.Property(p => p.QuantidadeItens)
            .HasColumnName("QuantidadeItens")
            .IsRequired();
            
        builder.Property(p => p.Totais)
            .HasColumnName("Totais")
            .HasColumnType("jsonb");
            
        builder.Property(p => p.PermiteContato)
            .HasColumnName("PermiteContato")
            .IsRequired();
            
        builder.Property(p => p.NegociarPedido)
            .HasColumnName("NegociarPedido")
            .IsRequired();
            
        builder.Property(p => p.DataLimiteInteracao)
            .HasColumnName("DataLimiteInteracao")
            .IsRequired();
            
        builder.Property(p => p.FornecedorId)
            .HasColumnName("FornecedorId")
            .IsRequired();
            
        builder.Property(p => p.ProdutorId)
            .HasColumnName("ProdutorId")
            .IsRequired();
            
        builder.Property(p => p.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();
            
        builder.Property(p => p.DataAtualizacao)
            .HasColumnName("DataAtualizacao");
        
        // Relacionamentos
        builder.HasMany(p => p.Itens)
            .WithOne(i => i.Pedido)
            .HasForeignKey(i => i.PedidoId)
            .OnDelete(DeleteBehavior.Cascade);
        
        // Índices
        builder.HasIndex(p => p.FornecedorId)
            .HasDatabaseName("IX_Pedido_FornecedorId");
            
        builder.HasIndex(p => p.ProdutorId)
            .HasDatabaseName("IX_Pedido_ProdutorId");
            
        builder.HasIndex(p => p.Status)
            .HasDatabaseName("IX_Pedido_Status");
            
        builder.HasIndex(p => p.DataLimiteInteracao)
            .HasDatabaseName("IX_Pedido_DataLimiteInteracao");
            
        builder.HasIndex(p => new { p.ProdutorId, p.FornecedorId })
            .HasDatabaseName("IX_Pedido_ProdutorId_FornecedorId");
    }
}
</PedidoConfiguration.cs>
<PedidoItemConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Pedidos.Dominio.Entidades;

namespace Agriis.Pedidos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade PedidoItem
/// </summary>
public class PedidoItemConfiguration : IEntityTypeConfiguration<PedidoItem>
{
    public void Configure(EntityTypeBuilder<PedidoItem> builder)
    {
        // Configuração da tabela
        builder.ToTable("PedidoItem");
        
        // Chave primária
        builder.HasKey(pi => pi.Id);
        
        // Configuração das propriedades
        builder.Property(pi => pi.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();
            
        builder.Property(pi => pi.PedidoId)
            .HasColumnName("PedidoId")
            .IsRequired();
            
        builder.Property(pi => pi.ProdutoId)
            .HasColumnName("ProdutoId")
            .IsRequired();
            
        builder.Property(pi => pi.Quantidade)
            .HasColumnName("Quantidade")
            .HasColumnType("decimal(18,4)")
            .IsRequired();
            
        builder.Property(pi => pi.PrecoUnitario)
            .HasColumnName("PrecoUnitario")
            .HasColumnType("decimal(18,4)")
            .IsRequired();
            
        builder.Property(pi => pi.ValorTotal)
            .HasColumnName("ValorTotal")
            .HasColumnType("decimal(18,4)")
            .IsRequired();
            
        builder.Property(pi => pi.PercentualDesconto)
            .HasColumnName("PercentualDesconto")
            .HasColumnType("decimal(5,2)")
            .IsRequired();
            
        builder.Property(pi => pi.ValorDesconto)
            .HasColumnName("ValorDesconto")
            .HasColumnType("decimal(18,4)")
            .IsRequired();
            
        builder.Property(pi => pi.ValorFinal)
            .HasColumnName("ValorFinal")
            .HasColumnType("decimal(18,4)")
            .IsRequired();
            
        builder.Property(pi => pi.DadosAdicionais)
            .HasColumnName("DadosAdicionais")
            .HasColumnType("jsonb");
            
        builder.Property(pi => pi.Observacoes)
            .HasColumnName("Observacoes")
            .HasMaxLength(1000);
            
        builder.Property(pi => pi.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();
            
        builder.Property(pi => pi.DataAtualizacao)
            .HasColumnName("DataAtualizacao");
        
        // Relacionamentos
        builder.HasOne(pi => pi.Pedido)
            .WithMany(p => p.Itens)
            .HasForeignKey(pi => pi.PedidoId)
            .OnDelete(DeleteBehavior.Cascade);
            
        builder.HasMany(pi => pi.ItensTransporte)
            .WithOne(pit => pit.PedidoItem)
            .HasForeignKey(pit => pit.PedidoItemId)
            .OnDelete(DeleteBehavior.Cascade);
        
        // Índices
        builder.HasIndex(pi => pi.PedidoId)
            .HasDatabaseName("IX_PedidoItem_PedidoId");
            
        builder.HasIndex(pi => pi.ProdutoId)
            .HasDatabaseName("IX_PedidoItem_ProdutoId");
            
        builder.HasIndex(pi => pi.ValorFinal)
            .HasDatabaseName("IX_PedidoItem_ValorFinal");
    }
}
</PedidoItemConfiguration.cs>
<PedidoItemTransporteConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Pedidos.Dominio.Entidades;

namespace Agriis.Pedidos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade PedidoItemTransporte
/// </summary>
public class PedidoItemTransporteConfiguration : IEntityTypeConfiguration<PedidoItemTransporte>
{
    public void Configure(EntityTypeBuilder<PedidoItemTransporte> builder)
    {
        // Configuração da tabela
        builder.ToTable("PedidoItemTransporte");
        
        // Chave primária
        builder.HasKey(pit => pit.Id);
        
        // Configuração das propriedades
        builder.Property(pit => pit.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();
            
        builder.Property(pit => pit.PedidoItemId)
            .HasColumnName("PedidoItemId")
            .IsRequired();
            
        builder.Property(pit => pit.Quantidade)
            .HasColumnName("Quantidade")
            .HasColumnType("decimal(18,4)")
            .IsRequired();
            
        builder.Property(pit => pit.DataAgendamento)
            .HasColumnName("DataAgendamento");
            
        builder.Property(pit => pit.ValorFrete)
            .HasColumnName("ValorFrete")
            .HasColumnType("decimal(18,4)")
            .IsRequired();
            
        builder.Property(pit => pit.PesoTotal)
            .HasColumnName("PesoTotal")
            .HasColumnType("decimal(18,4)");
            
        builder.Property(pit => pit.VolumeTotal)
            .HasColumnName("VolumeTotal")
            .HasColumnType("decimal(18,4)");
            
        builder.Property(pit => pit.EnderecoOrigem)
            .HasColumnName("EnderecoOrigem")
            .HasMaxLength(500);
            
        builder.Property(pit => pit.EnderecoDestino)
            .HasColumnName("EnderecoDestino")
            .HasMaxLength(500);
            
        builder.Property(pit => pit.InformacoesTransporte)
            .HasColumnName("InformacoesTransporte")
            .HasColumnType("jsonb");
            
        builder.Property(pit => pit.Observacoes)
            .HasColumnName("Observacoes")
            .HasMaxLength(1000);
            
        builder.Property(pit => pit.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();
            
        builder.Property(pit => pit.DataAtualizacao)
            .HasColumnName("DataAtualizacao");
        
        // Relacionamentos
        builder.HasOne(pit => pit.PedidoItem)
            .WithMany(pi => pi.ItensTransporte)
            .HasForeignKey(pit => pit.PedidoItemId)
            .OnDelete(DeleteBehavior.Cascade);
        
        // Índices
        builder.HasIndex(pit => pit.PedidoItemId)
            .HasDatabaseName("IX_PedidoItemTransporte_PedidoItemId");
            
        builder.HasIndex(pit => pit.DataAgendamento)
            .HasDatabaseName("IX_PedidoItemTransporte_DataAgendamento");
            
        builder.HasIndex(pit => pit.ValorFrete)
            .HasDatabaseName("IX_PedidoItemTransporte_ValorFrete");
    }
}
</PedidoItemTransporteConfiguration.cs>
<PropostaConfiguration.cs>
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Pedidos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Proposta
/// </summary>
public class PropostaConfiguration : IEntityTypeConfiguration<Proposta>
{
    /// <summary>
    /// Configura a entidade Proposta
    /// </summary>
    /// <param name="builder">Builder de configuração</param>
    public void Configure(EntityTypeBuilder<Proposta> builder)
    {
        // Configuração da tabela
        builder.ToTable("Proposta");
        
        // Chave primária
        builder.HasKey(p => p.Id);
        
        // Configuração das propriedades
        builder.Property(p => p.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();
            
        builder.Property(p => p.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();
            
        builder.Property(p => p.DataAtualizacao)
            .HasColumnName("DataAtualizacao");
            
        builder.Property(p => p.PedidoId)
            .HasColumnName("PedidoId")
            .IsRequired();
            
        builder.Property(p => p.AcaoComprador)
            .HasColumnName("AcaoComprador")
            .HasConversion<int>()
            .IsRequired(false);
            
        builder.Property(p => p.Observacao)
            .HasColumnName("Observacao")
            .HasMaxLength(1024)
            .IsRequired(false);
            
        builder.Property(p => p.UsuarioProdutorId)
            .HasColumnName("UsuarioProdutorId")
            .IsRequired(false);
            
        builder.Property(p => p.UsuarioFornecedorId)
            .HasColumnName("UsuarioFornecedorId")
            .IsRequired(false);
        
        // Relacionamentos
        builder.HasOne(p => p.Pedido)
            .WithMany(pe => pe.Propostas)
            .HasForeignKey(p => p.PedidoId)
            .OnDelete(DeleteBehavior.Cascade);
        
        // Índices
        builder.HasIndex(p => p.PedidoId)
            .HasDatabaseName("IX_Proposta_PedidoId");
            
        builder.HasIndex(p => p.DataCriacao)
            .HasDatabaseName("IX_Proposta_DataCriacao");
            
        builder.HasIndex(p => p.UsuarioProdutorId)
            .HasDatabaseName("IX_Proposta_UsuarioProdutorId");
            
        builder.HasIndex(p => p.UsuarioFornecedorId)
            .HasDatabaseName("IX_Proposta_UsuarioFornecedorId");
    }
}
</PropostaConfiguration.cs>
<PedidoItemRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Interfaces;

namespace Agriis.Pedidos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de itens de pedido
/// </summary>
public class PedidoItemRepository : RepositoryBase<PedidoItem, DbContext>, IPedidoItemRepository
{
    public PedidoItemRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<PedidoItem>> ObterPorPedidoAsync(int pedidoId)
    {
        return await DbSet
            .Where(pi => pi.PedidoId == pedidoId)
            .OrderBy(pi => pi.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<PedidoItem>> ObterPorProdutoAsync(int produtoId)
    {
        return await DbSet
            .Where(pi => pi.ProdutoId == produtoId)
            .OrderByDescending(pi => pi.DataCriacao)
            .ToListAsync();
    }

    public async Task<PedidoItem?> ObterComTransportesAsync(int itemId)
    {
        return await DbSet
            .Include(pi => pi.ItensTransporte)
            .Include(pi => pi.Produto)
            .FirstOrDefaultAsync(pi => pi.Id == itemId);
    }

    public async Task<IEnumerable<PedidoItem>> ObterPorFaixaValorAsync(decimal valorMinimo, decimal valorMaximo)
    {
        return await DbSet
            .Where(pi => pi.ValorFinal >= valorMinimo && pi.ValorFinal <= valorMaximo)
            .OrderByDescending(pi => pi.ValorFinal)
            .ToListAsync();
    }
}
</PedidoItemRepository.cs>
<PedidoItemTransporteRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Interfaces;

namespace Agriis.Pedidos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de transportes de itens de pedido
/// </summary>
public class PedidoItemTransporteRepository : RepositoryBase<PedidoItemTransporte, DbContext>, IPedidoItemTransporteRepository
{
    public PedidoItemTransporteRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<PedidoItemTransporte>> ObterPorPedidoItemAsync(int pedidoItemId)
    {
        return await DbSet
            .Where(pit => pit.PedidoItemId == pedidoItemId)
            .OrderBy(pit => pit.DataAgendamento ?? DateTime.MaxValue)
            .ToListAsync();
    }

    public async Task<IEnumerable<PedidoItemTransporte>> ObterPorDataAgendamentoAsync(DateTime data)
    {
        var dataInicio = data.Date;
        var dataFim = dataInicio.AddDays(1);
        
        return await DbSet
            .Where(pit => pit.DataAgendamento >= dataInicio && pit.DataAgendamento < dataFim)
            .OrderBy(pit => pit.DataAgendamento)
            .ToListAsync();
    }

    public async Task<IEnumerable<PedidoItemTransporte>> ObterPorPeriodoAgendamentoAsync(DateTime dataInicio, DateTime dataFim)
    {
        return await DbSet
            .Where(pit => pit.DataAgendamento >= dataInicio && pit.DataAgendamento <= dataFim)
            .OrderBy(pit => pit.DataAgendamento)
            .ToListAsync();
    }

    public async Task<IEnumerable<PedidoItemTransporte>> ObterSemAgendamentoAsync()
    {
        return await DbSet
            .Where(pit => pit.DataAgendamento == null)
            .OrderByDescending(pit => pit.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<PedidoItemTransporte>> ObterPorFaixaValorFreteAsync(decimal valorMinimo, decimal valorMaximo)
    {
        return await DbSet
            .Where(pit => pit.ValorFrete >= valorMinimo && pit.ValorFrete <= valorMaximo)
            .OrderByDescending(pit => pit.ValorFrete)
            .ToListAsync();
    }

    public async Task<IEnumerable<PedidoItemTransporte>> ObterPorPedidoIdAsync(int pedidoId)
    {
        return await DbSet
            .Include(pit => pit.PedidoItem)
            .Where(pit => pit.PedidoItem.PedidoId == pedidoId)
            .OrderBy(pit => pit.DataAgendamento ?? DateTime.MaxValue)
            .ThenBy(pit => pit.DataCriacao)
            .ToListAsync();
    }
}
</PedidoItemTransporteRepository.cs>
<PedidoRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Interfaces;
using Agriis.Pedidos.Dominio.Enums;

namespace Agriis.Pedidos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de pedidos
/// </summary>
public class PedidoRepository : RepositoryBase<Pedido, DbContext>, IPedidoRepository
{
    public PedidoRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<Pedido>> ObterPorProdutorAsync(int produtorId)
    {
        return await DbSet
            .Where(p => p.ProdutorId == produtorId)
            .OrderByDescending(p => p.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Pedido>> ObterPorFornecedorAsync(int fornecedorId)
    {
        return await DbSet
            .Where(p => p.FornecedorId == fornecedorId)
            .OrderByDescending(p => p.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Pedido>> ObterPorStatusAsync(StatusPedido status)
    {
        return await DbSet
            .Where(p => p.Status == status)
            .OrderByDescending(p => p.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Pedido>> ObterPorProdutorFornecedorAsync(int produtorId, int fornecedorId)
    {
        return await DbSet
            .Where(p => p.ProdutorId == produtorId && p.FornecedorId == fornecedorId)
            .OrderByDescending(p => p.DataCriacao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Pedido>> ObterProximosPrazoLimiteAsync(int diasAntes = 1)
    {
        var dataLimite = DateTime.UtcNow.AddDays(diasAntes);
        
        return await DbSet
            .Where(p => p.Status == StatusPedido.EmNegociacao && 
                       p.DataLimiteInteracao <= dataLimite &&
                       p.DataLimiteInteracao > DateTime.UtcNow)
            .OrderBy(p => p.DataLimiteInteracao)
            .ToListAsync();
    }

    public async Task<IEnumerable<Pedido>> ObterComPrazoUltrapassadoAsync()
    {
        return await DbSet
            .Where(p => p.Status == StatusPedido.EmNegociacao && 
                       p.DataLimiteInteracao < DateTime.UtcNow)
            .OrderBy(p => p.DataLimiteInteracao)
            .ToListAsync();
    }

    public async Task<Pedido?> ObterComItensAsync(int pedidoId)
    {
        return await DbSet
            .Include(p => p.Itens)
                .ThenInclude(i => i.ItensTransporte)
            .FirstOrDefaultAsync(p => p.Id == pedidoId);
    }

    public async Task<Pedido?> ObterComItensETransportesAsync(int pedidoId)
    {
        return await DbSet
            .Include(p => p.Itens)
                .ThenInclude(i => i.ItensTransporte)
            .FirstOrDefaultAsync(p => p.Id == pedidoId);
    }

    public async Task<IEnumerable<Pedido>> ObterPorPeriodoAsync(DateTime dataInicio, DateTime dataFim)
    {
        return await DbSet
            .Where(p => p.DataCriacao >= dataInicio && p.DataCriacao <= dataFim)
            .OrderByDescending(p => p.DataCriacao)
            .ToListAsync();
    }
}
</PedidoRepository.cs>
<PropostaRepository.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Pedidos.Dominio.Entidades;
using Agriis.Pedidos.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Pedidos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de propostas
/// </summary>
public class PropostaRepository : RepositoryBase<Proposta, DbContext>, IPropostaRepository
{
    /// <summary>
    /// Construtor do repositório de propostas
    /// </summary>
    /// <param name="context">Contexto do banco de dados</param>
    public PropostaRepository(DbContext context) : base(context)
    {
    }
    
    /// <summary>
    /// Obtém a última proposta de um pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>Última proposta ou null se não existir</returns>
    public async Task<Proposta?> ObterUltimaPorPedidoAsync(int pedidoId)
    {
        return await DbSet
            .Where(p => p.PedidoId == pedidoId)
            .OrderByDescending(p => p.DataCriacao)
            .FirstOrDefaultAsync();
    }
    
    /// <summary>
    /// Lista todas as propostas de um pedido com paginação
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <param name="pagina">Número da página</param>
    /// <param name="tamanhoPagina">Tamanho da página</param>
    /// <param name="ordenacao">Campo de ordenação</param>
    /// <returns>Lista paginada de propostas</returns>
    public async Task<PagedResult<Proposta>> ListarPorPedidoAsync(int pedidoId, int pagina, int tamanhoPagina, string? ordenacao = null)
    {
        var query = DbSet.Where(p => p.PedidoId == pedidoId);
        
        // Aplicar ordenação
        query = ordenacao?.ToLower() switch
        {
            "datacriacao" => query.OrderBy(p => p.DataCriacao),
            "datacriacao desc" => query.OrderByDescending(p => p.DataCriacao),
            _ => query.OrderByDescending(p => p.DataCriacao) // Padrão: mais recente primeiro
        };
        
        var totalItens = await query.CountAsync();
        var itens = await query
            .Skip(pagina * tamanhoPagina)
            .Take(tamanhoPagina)
            .ToListAsync();
        
        return new PagedResult<Proposta>(itens, pagina + 1, tamanhoPagina, totalItens);
    }
    
    /// <summary>
    /// Verifica se existe alguma proposta para o pedido
    /// </summary>
    /// <param name="pedidoId">ID do pedido</param>
    /// <returns>True se existe proposta</returns>
    public async Task<bool> ExistePropostaPorPedidoAsync(int pedidoId)
    {
        return await DbSet.AnyAsync(p => p.PedidoId == pedidoId);
    }
}
</PropostaRepository.cs>
<PontoDistribuicaoDto.cs>
using Agriis.Enderecos.Aplicacao.DTOs;

namespace Agriis.PontosDistribuicao.Aplicacao.DTOs;

/// <summary>
/// DTO para ponto de distribuição
/// </summary>
public class PontoDistribuicaoDto
{
    /// <summary>
    /// ID do ponto de distribuição
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome do ponto de distribuição
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Descrição do ponto de distribuição
    /// </summary>
    public string? Descricao { get; set; }
    
    /// <summary>
    /// Indica se o ponto está ativo
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// ID do fornecedor proprietário do ponto
    /// </summary>
    public int FornecedorId { get; set; }
    
    /// <summary>
    /// Endereço do ponto de distribuição
    /// </summary>
    public EnderecoDto? Endereco { get; set; }
    
    /// <summary>
    /// Lista de IDs dos estados atendidos
    /// </summary>
    public List<int> EstadosAtendidos { get; set; } = new();
    
    /// <summary>
    /// Lista de IDs dos municípios atendidos
    /// </summary>
    public List<int> MunicipiosAtendidos { get; set; } = new();
    
    /// <summary>
    /// Raio de cobertura em quilômetros
    /// </summary>
    public double? RaioCobertura { get; set; }
    
    /// <summary>
    /// Capacidade máxima de armazenamento
    /// </summary>
    public decimal? CapacidadeMaxima { get; set; }
    
    /// <summary>
    /// Unidade da capacidade
    /// </summary>
    public string? UnidadeCapacidade { get; set; }
    
    /// <summary>
    /// Horário de funcionamento por dia da semana
    /// </summary>
    public Dictionary<string, string> HorarioFuncionamento { get; set; } = new();
    
    /// <summary>
    /// Observações adicionais
    /// </summary>
    public string? Observacoes { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
    
    /// <summary>
    /// Distância em quilômetros (preenchida em consultas por localização)
    /// </summary>
    public double? DistanciaKm { get; set; }
}

/// <summary>
/// DTO para criação de ponto de distribuição
/// </summary>
public class CriarPontoDistribuicaoDto
{
    /// <summary>
    /// Nome do ponto de distribuição
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Descrição do ponto de distribuição
    /// </summary>
    public string? Descricao { get; set; }
    
    /// <summary>
    /// ID do fornecedor proprietário do ponto
    /// </summary>
    public int FornecedorId { get; set; }
    
    /// <summary>
    /// ID do endereço do ponto de distribuição
    /// </summary>
    public int EnderecoId { get; set; }
    
    /// <summary>
    /// Lista de IDs dos estados atendidos
    /// </summary>
    public List<int> EstadosAtendidos { get; set; } = new();
    
    /// <summary>
    /// Lista de IDs dos municípios atendidos
    /// </summary>
    public List<int> MunicipiosAtendidos { get; set; } = new();
    
    /// <summary>
    /// Raio de cobertura em quilômetros
    /// </summary>
    public double? RaioCobertura { get; set; }
    
    /// <summary>
    /// Capacidade máxima de armazenamento
    /// </summary>
    public decimal? CapacidadeMaxima { get; set; }
    
    /// <summary>
    /// Unidade da capacidade
    /// </summary>
    public string? UnidadeCapacidade { get; set; }
    
    /// <summary>
    /// Horário de funcionamento por dia da semana
    /// </summary>
    public Dictionary<string, string> HorarioFuncionamento { get; set; } = new();
    
    /// <summary>
    /// Observações adicionais
    /// </summary>
    public string? Observacoes { get; set; }
}

/// <summary>
/// DTO para atualização de ponto de distribuição
/// </summary>
public class AtualizarPontoDistribuicaoDto
{
    /// <summary>
    /// Nome do ponto de distribuição
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Descrição do ponto de distribuição
    /// </summary>
    public string? Descricao { get; set; }
    
    /// <summary>
    /// Lista de IDs dos estados atendidos
    /// </summary>
    public List<int> EstadosAtendidos { get; set; } = new();
    
    /// <summary>
    /// Lista de IDs dos municípios atendidos
    /// </summary>
    public List<int> MunicipiosAtendidos { get; set; } = new();
    
    /// <summary>
    /// Raio de cobertura em quilômetros
    /// </summary>
    public double? RaioCobertura { get; set; }
    
    /// <summary>
    /// Capacidade máxima de armazenamento
    /// </summary>
    public decimal? CapacidadeMaxima { get; set; }
    
    /// <summary>
    /// Unidade da capacidade
    /// </summary>
    public string? UnidadeCapacidade { get; set; }
    
    /// <summary>
    /// Horário de funcionamento por dia da semana
    /// </summary>
    public Dictionary<string, string> HorarioFuncionamento { get; set; } = new();
    
    /// <summary>
    /// Observações adicionais
    /// </summary>
    public string? Observacoes { get; set; }
}

/// <summary>
/// DTO para consulta de pontos por localização
/// </summary>
public class ConsultaPontosPorLocalizacaoDto
{
    /// <summary>
    /// ID do estado (opcional)
    /// </summary>
    public int? EstadoId { get; set; }
    
    /// <summary>
    /// ID do município (opcional)
    /// </summary>
    public int? MunicipioId { get; set; }
    
    /// <summary>
    /// Latitude para busca por proximidade (opcional)
    /// </summary>
    public double? Latitude { get; set; }
    
    /// <summary>
    /// Longitude para busca por proximidade (opcional)
    /// </summary>
    public double? Longitude { get; set; }
    
    /// <summary>
    /// Raio de busca em quilômetros (padrão: 50km)
    /// </summary>
    public double RaioKm { get; set; } = 50;
    
    /// <summary>
    /// ID do fornecedor para filtrar (opcional)
    /// </summary>
    public int? FornecedorId { get; set; }
    
    /// <summary>
    /// Se deve retornar apenas pontos ativos (padrão: true)
    /// </summary>
    public bool ApenasAtivos { get; set; } = true;
}

/// <summary>
/// DTO para estatísticas de pontos de distribuição
/// </summary>
public class EstatisticasPontosDistribuicaoDto
{
    /// <summary>
    /// Total de pontos
    /// </summary>
    public int Total { get; set; }
    
    /// <summary>
    /// Pontos ativos
    /// </summary>
    public int Ativos { get; set; }
    
    /// <summary>
    /// Pontos inativos
    /// </summary>
    public int Inativos { get; set; }
    
    /// <summary>
    /// Percentual de pontos ativos
    /// </summary>
    public double PercentualAtivos => Total > 0 ? (double)Ativos / Total * 100 : 0;
}
</PontoDistribuicaoDto.cs>
<PontoDistribuicaoMappingProfile.cs>
using AutoMapper;
using Agriis.PontosDistribuicao.Aplicacao.DTOs;
using Agriis.PontosDistribuicao.Dominio.Entidades;

namespace Agriis.PontosDistribuicao.Aplicacao.Mapeamentos;

/// <summary>
/// Perfil de mapeamento para pontos de distribuição
/// </summary>
public class PontoDistribuicaoMappingProfile : Profile
{
    public PontoDistribuicaoMappingProfile()
    {
        CreateMap<PontoDistribuicao, PontoDistribuicaoDto>()
            .ForMember(dest => dest.EstadosAtendidos, opt => opt.MapFrom(src => src.ObterEstadosAtendidos()))
            .ForMember(dest => dest.MunicipiosAtendidos, opt => opt.MapFrom(src => src.ObterMunicipiosAtendidos()))
            .ForMember(dest => dest.HorarioFuncionamento, opt => opt.MapFrom(src => src.ObterHorarioFuncionamento()))
            .ForMember(dest => dest.DistanciaKm, opt => opt.Ignore()); // Será preenchida manualmente quando necessário
        
        CreateMap<CriarPontoDistribuicaoDto, PontoDistribuicao>()
            .ConstructUsing(src => new PontoDistribuicao(
                src.Nome,
                src.FornecedorId,
                src.EnderecoId,
                src.Descricao,
                src.RaioCobertura,
                src.CapacidadeMaxima,
                src.UnidadeCapacidade,
                src.Observacoes))
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.DataCriacao, opt => opt.Ignore())
            .ForMember(dest => dest.DataAtualizacao, opt => opt.Ignore())
            .ForMember(dest => dest.Endereco, opt => opt.Ignore())
            .ForMember(dest => dest.CoberturaTerritorios, opt => opt.Ignore())
            .ForMember(dest => dest.HorarioFuncionamento, opt => opt.Ignore())
            .AfterMap((src, dest) =>
            {
                // Configurar cobertura territorial após a criação
                dest.DefinirCoberturaTerritorios(src.EstadosAtendidos, src.MunicipiosAtendidos);
                
                // Configurar horário de funcionamento se fornecido
                if (src.HorarioFuncionamento.Any())
                {
                    dest.DefinirHorarioFuncionamento(src.HorarioFuncionamento);
                }
            });
        
        CreateMap<(int Total, int Ativos, int Inativos), EstatisticasPontosDistribuicaoDto>()
            .ForMember(dest => dest.Total, opt => opt.MapFrom(src => src.Total))
            .ForMember(dest => dest.Ativos, opt => opt.MapFrom(src => src.Ativos))
            .ForMember(dest => dest.Inativos, opt => opt.MapFrom(src => src.Inativos));
    }
}
</PontoDistribuicaoMappingProfile.cs>
<PontoDistribuicaoService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.PontosDistribuicao.Aplicacao.DTOs;
using Agriis.PontosDistribuicao.Dominio.Entidades;
using Agriis.PontosDistribuicao.Dominio.Interfaces;
using Agriis.Enderecos.Dominio.Interfaces;
using Microsoft.Extensions.Logging;

namespace Agriis.PontosDistribuicao.Aplicacao.Servicos;

/// <summary>
/// Serviço de aplicação para pontos de distribuição
/// </summary>
public class PontoDistribuicaoService
{
    private readonly IPontoDistribuicaoRepository _pontoDistribuicaoRepository;
    private readonly IEnderecoRepository _enderecoRepository;
    private readonly IMunicipioRepository _municipioRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<PontoDistribuicaoService> _logger;
    
    public PontoDistribuicaoService(
        IPontoDistribuicaoRepository pontoDistribuicaoRepository,
        IEnderecoRepository enderecoRepository,
        IMunicipioRepository municipioRepository,
        IMapper mapper,
        ILogger<PontoDistribuicaoService> logger)
    {
        _pontoDistribuicaoRepository = pontoDistribuicaoRepository;
        _enderecoRepository = enderecoRepository;
        _municipioRepository = municipioRepository;
        _mapper = mapper;
        _logger = logger;
    }
    
    /// <summary>
    /// Cria um novo ponto de distribuição
    /// </summary>
    /// <param name="dto">Dados do ponto de distribuição</param>
    /// <returns>Ponto de distribuição criado</returns>
    public async Task<Result<PontoDistribuicaoDto>> CriarAsync(CriarPontoDistribuicaoDto dto)
    {
        try
        {
            _logger.LogInformation("Criando ponto de distribuição {Nome} para fornecedor {FornecedorId}", 
                                 dto.Nome, dto.FornecedorId);
            
            // Verificar se já existe ponto com o mesmo nome para o fornecedor
            var existeNome = await _pontoDistribuicaoRepository.ExisteComMesmoNomeAsync(dto.FornecedorId, dto.Nome);
            if (existeNome)
            {
                return Result<PontoDistribuicaoDto>.Failure("Já existe um ponto de distribuição com este nome para o fornecedor");
            }
            
            // Verificar se o endereço existe
            var endereco = await _enderecoRepository.ObterPorIdAsync(dto.EnderecoId);
            if (endereco == null)
            {
                return Result<PontoDistribuicaoDto>.Failure("Endereço não encontrado");
            }
            
            // Criar o ponto de distribuição
            var ponto = _mapper.Map<PontoDistribuicao>(dto);
            
            // Salvar no repositório
            var pontoSalvo = await _pontoDistribuicaoRepository.AdicionarAsync(ponto);
            
            // Carregar o ponto com relacionamentos para retorno
            var pontoCompleto = await _pontoDistribuicaoRepository.ObterPorIdAsync(pontoSalvo.Id);
            var pontoDto = _mapper.Map<PontoDistribuicaoDto>(pontoCompleto);
            
            _logger.LogInformation("Ponto de distribuição {Id} criado com sucesso", pontoSalvo.Id);
            
            return Result<PontoDistribuicaoDto>.Success(pontoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar ponto de distribuição {Nome}", dto.Nome);
            return Result<PontoDistribuicaoDto>.Failure("Erro interno ao criar ponto de distribuição");
        }
    }
    
    /// <summary>
    /// Atualiza um ponto de distribuição
    /// </summary>
    /// <param name="id">ID do ponto de distribuição</param>
    /// <param name="dto">Dados atualizados</param>
    /// <returns>Ponto de distribuição atualizado</returns>
    public async Task<Result<PontoDistribuicaoDto>> AtualizarAsync(int id, AtualizarPontoDistribuicaoDto dto)
    {
        try
        {
            _logger.LogInformation("Atualizando ponto de distribuição {Id}", id);
            
            var ponto = await _pontoDistribuicaoRepository.ObterPorIdAsync(id);
            if (ponto == null)
            {
                return Result<PontoDistribuicaoDto>.Failure("Ponto de distribuição não encontrado");
            }
            
            // Verificar se já existe ponto com o mesmo nome para o fornecedor (excluindo o atual)
            var existeNome = await _pontoDistribuicaoRepository.ExisteComMesmoNomeAsync(
                ponto.FornecedorId, dto.Nome, id);
            if (existeNome)
            {
                return Result<PontoDistribuicaoDto>.Failure("Já existe um ponto de distribuição com este nome para o fornecedor");
            }
            
            // Atualizar dados básicos
            ponto.Atualizar(dto.Nome, dto.Descricao, dto.RaioCobertura, 
                           dto.CapacidadeMaxima, dto.UnidadeCapacidade, dto.Observacoes);
            
            // Atualizar cobertura territorial
            ponto.DefinirCoberturaTerritorios(dto.EstadosAtendidos, dto.MunicipiosAtendidos);
            
            // Atualizar horário de funcionamento
            if (dto.HorarioFuncionamento.Any())
            {
                ponto.DefinirHorarioFuncionamento(dto.HorarioFuncionamento);
            }
            
            // Salvar alterações
            await _pontoDistribuicaoRepository.AtualizarAsync(ponto);
            
            // Retornar ponto atualizado
            var pontoAtualizado = await _pontoDistribuicaoRepository.ObterPorIdAsync(id);
            var pontoDto = _mapper.Map<PontoDistribuicaoDto>(pontoAtualizado);
            
            _logger.LogInformation("Ponto de distribuição {Id} atualizado com sucesso", id);
            
            return Result<PontoDistribuicaoDto>.Success(pontoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar ponto de distribuição {Id}", id);
            return Result<PontoDistribuicaoDto>.Failure("Erro interno ao atualizar ponto de distribuição");
        }
    }
    
    /// <summary>
    /// Obtém um ponto de distribuição por ID
    /// </summary>
    /// <param name="id">ID do ponto de distribuição</param>
    /// <returns>Ponto de distribuição</returns>
    public async Task<Result<PontoDistribuicaoDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var ponto = await _pontoDistribuicaoRepository.ObterPorIdAsync(id);
            if (ponto == null)
            {
                return Result<PontoDistribuicaoDto>.Failure("Ponto de distribuição não encontrado");
            }
            
            var pontoDto = _mapper.Map<PontoDistribuicaoDto>(ponto);
            return Result<PontoDistribuicaoDto>.Success(pontoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter ponto de distribuição {Id}", id);
            return Result<PontoDistribuicaoDto>.Failure("Erro interno ao obter ponto de distribuição");
        }
    }
    
    /// <summary>
    /// Obtém pontos de distribuição por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="apenasAtivos">Se deve retornar apenas pontos ativos</param>
    /// <returns>Lista de pontos de distribuição</returns>
    public async Task<Result<IEnumerable<PontoDistribuicaoDto>>> ObterPorFornecedorAsync(int fornecedorId, bool apenasAtivos = true)
    {
        try
        {
            var pontos = await _pontoDistribuicaoRepository.ObterPorFornecedorAsync(fornecedorId, apenasAtivos);
            var pontosDto = _mapper.Map<IEnumerable<PontoDistribuicaoDto>>(pontos);
            
            return Result<IEnumerable<PontoDistribuicaoDto>>.Success(pontosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter pontos de distribuição do fornecedor {FornecedorId}", fornecedorId);
            return Result<IEnumerable<PontoDistribuicaoDto>>.Failure("Erro interno ao obter pontos de distribuição");
        }
    }
    
    /// <summary>
    /// Busca pontos de distribuição por localização
    /// </summary>
    /// <param name="consulta">Parâmetros da consulta</param>
    /// <returns>Lista de pontos de distribuição com distâncias</returns>
    public async Task<Result<IEnumerable<PontoDistribuicaoDto>>> BuscarPorLocalizacaoAsync(ConsultaPontosPorLocalizacaoDto consulta)
    {
        try
        {
            _logger.LogInformation("Buscando pontos de distribuição por localização");
            
            IEnumerable<PontoDistribuicao> pontos;
            
            // Se tem coordenadas, buscar por proximidade
            if (consulta.Latitude.HasValue && consulta.Longitude.HasValue)
            {
                pontos = await _pontoDistribuicaoRepository.ObterProximosAsync(
                    consulta.Latitude.Value, consulta.Longitude.Value, consulta.RaioKm, consulta.ApenasAtivos);
            }
            // Se tem estado e município, buscar por cobertura territorial
            else if (consulta.EstadoId.HasValue && consulta.MunicipioId.HasValue)
            {
                pontos = await _pontoDistribuicaoRepository.ObterQueAtendemLocalizacaoAsync(
                    consulta.EstadoId.Value, consulta.MunicipioId.Value, null, consulta.ApenasAtivos);
            }
            // Se tem apenas estado, buscar por estado
            else if (consulta.EstadoId.HasValue)
            {
                pontos = await _pontoDistribuicaoRepository.ObterPorEstadoAsync(consulta.EstadoId.Value, consulta.ApenasAtivos);
            }
            // Se tem apenas município, buscar por município
            else if (consulta.MunicipioId.HasValue)
            {
                pontos = await _pontoDistribuicaoRepository.ObterPorMunicipioAsync(consulta.MunicipioId.Value, consulta.ApenasAtivos);
            }
            else
            {
                return Result<IEnumerable<PontoDistribuicaoDto>>.Failure("Parâmetros de localização insuficientes");
            }
            
            // Filtrar por fornecedor se especificado
            if (consulta.FornecedorId.HasValue)
            {
                pontos = pontos.Where(p => p.FornecedorId == consulta.FornecedorId.Value);
            }
            
            var pontosDto = _mapper.Map<IEnumerable<PontoDistribuicaoDto>>(pontos);
            
            // Calcular distâncias se tem coordenadas
            if (consulta.Latitude.HasValue && consulta.Longitude.HasValue)
            {
                var pontosIds = pontosDto.Select(p => p.Id).ToList();
                var distancias = await _pontoDistribuicaoRepository.CalcularDistanciasAsync(
                    pontosIds, consulta.Latitude.Value, consulta.Longitude.Value);
                
                foreach (var pontoDto in pontosDto)
                {
                    if (distancias.TryGetValue(pontoDto.Id, out var distancia))
                    {
                        pontoDto.DistanciaKm = distancia;
                    }
                }
                
                // Ordenar por distância
                pontosDto = pontosDto.OrderBy(p => p.DistanciaKm ?? double.MaxValue);
            }
            
            return Result<IEnumerable<PontoDistribuicaoDto>>.Success(pontosDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao buscar pontos de distribuição por localização");
            return Result<IEnumerable<PontoDistribuicaoDto>>.Failure("Erro interno ao buscar pontos de distribuição");
        }
    }
    
    /// <summary>
    /// Ativa um ponto de distribuição
    /// </summary>
    /// <param name="id">ID do ponto de distribuição</param>
    /// <returns>Resultado da operação</returns>
    public async Task<Result<bool>> AtivarAsync(int id)
    {
        try
        {
            var ponto = await _pontoDistribuicaoRepository.ObterPorIdAsync(id);
            if (ponto == null)
            {
                return Result<bool>.Failure("Ponto de distribuição não encontrado");
            }
            
            ponto.Ativar();
            await _pontoDistribuicaoRepository.AtualizarAsync(ponto);
            
            _logger.LogInformation("Ponto de distribuição {Id} ativado", id);
            
            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao ativar ponto de distribuição {Id}", id);
            return Result<bool>.Failure("Erro interno ao ativar ponto de distribuição");
        }
    }
    
    /// <summary>
    /// Desativa um ponto de distribuição
    /// </summary>
    /// <param name="id">ID do ponto de distribuição</param>
    /// <returns>Resultado da operação</returns>
    public async Task<Result<bool>> DesativarAsync(int id)
    {
        try
        {
            var ponto = await _pontoDistribuicaoRepository.ObterPorIdAsync(id);
            if (ponto == null)
            {
                return Result<bool>.Failure("Ponto de distribuição não encontrado");
            }
            
            ponto.Desativar();
            await _pontoDistribuicaoRepository.AtualizarAsync(ponto);
            
            _logger.LogInformation("Ponto de distribuição {Id} desativado", id);
            
            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao desativar ponto de distribuição {Id}", id);
            return Result<bool>.Failure("Erro interno ao desativar ponto de distribuição");
        }
    }
    
    /// <summary>
    /// Remove um ponto de distribuição
    /// </summary>
    /// <param name="id">ID do ponto de distribuição</param>
    /// <returns>Resultado da operação</returns>
    public async Task<Result<bool>> RemoverAsync(int id)
    {
        try
        {
            var ponto = await _pontoDistribuicaoRepository.ObterPorIdAsync(id);
            if (ponto == null)
            {
                return Result<bool>.Failure("Ponto de distribuição não encontrado");
            }
            
            await _pontoDistribuicaoRepository.RemoverAsync(id);
            
            _logger.LogInformation("Ponto de distribuição {Id} removido", id);
            
            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover ponto de distribuição {Id}", id);
            return Result<bool>.Failure("Erro interno ao remover ponto de distribuição");
        }
    }
    
    /// <summary>
    /// Obtém estatísticas de pontos de distribuição por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Estatísticas dos pontos</returns>
    public async Task<Result<EstatisticasPontosDistribuicaoDto>> ObterEstatisticasAsync(int fornecedorId)
    {
        try
        {
            var estatisticas = await _pontoDistribuicaoRepository.ObterEstatisticasPorFornecedorAsync(fornecedorId);
            var estatisticasDto = _mapper.Map<EstatisticasPontosDistribuicaoDto>(estatisticas);
            
            return Result<EstatisticasPontosDistribuicaoDto>.Success(estatisticasDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter estatísticas de pontos do fornecedor {FornecedorId}", fornecedorId);
            return Result<EstatisticasPontosDistribuicaoDto>.Failure("Erro interno ao obter estatísticas");
        }
    }
}
</PontoDistribuicaoService.cs>
<PontoDistribuicao.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Enderecos.Dominio.Entidades;
using NetTopologySuite.Geometries;
using System.Text.Json;

namespace Agriis.PontosDistribuicao.Dominio.Entidades;

/// <summary>
/// Entidade que representa um ponto de distribuição de produtos
/// </summary>
public class PontoDistribuicao : EntidadeBase
{
    /// <summary>
    /// Nome do ponto de distribuição
    /// </summary>
    public string Nome { get; private set; } = string.Empty;
    
    /// <summary>
    /// Descrição do ponto de distribuição
    /// </summary>
    public string? Descricao { get; private set; }
    
    /// <summary>
    /// Indica se o ponto está ativo
    /// </summary>
    public bool Ativo { get; private set; }
    
    /// <summary>
    /// ID do fornecedor proprietário do ponto
    /// </summary>
    public int FornecedorId { get; private set; }
    
    /// <summary>
    /// ID do endereço do ponto de distribuição
    /// </summary>
    public int EnderecoId { get; private set; }
    
    /// <summary>
    /// Endereço do ponto de distribuição
    /// </summary>
    public virtual Endereco Endereco { get; private set; } = null!;
    
    /// <summary>
    /// Estrutura JSON com cobertura territorial (estados e municípios atendidos)
    /// Formato: { "estados": [1, 2, 3], "municipios": [100, 200, 300] }
    /// </summary>
    public JsonDocument? CoberturaTerritorios { get; private set; }
    
    /// <summary>
    /// Raio de cobertura em quilômetros (opcional)
    /// </summary>
    public double? RaioCobertura { get; private set; }
    
    /// <summary>
    /// Capacidade máxima de armazenamento (opcional)
    /// </summary>
    public decimal? CapacidadeMaxima { get; private set; }
    
    /// <summary>
    /// Unidade da capacidade (toneladas, m³, etc.)
    /// </summary>
    public string? UnidadeCapacidade { get; private set; }
    
    /// <summary>
    /// Horário de funcionamento (JSON)
    /// Formato: { "segunda": "08:00-18:00", "terca": "08:00-18:00", ... }
    /// </summary>
    public JsonDocument? HorarioFuncionamento { get; private set; }
    
    /// <summary>
    /// Observações adicionais
    /// </summary>
    public string? Observacoes { get; private set; }
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected PontoDistribuicao() { }
    
    /// <summary>
    /// Construtor para criar um novo ponto de distribuição
    /// </summary>
    /// <param name="nome">Nome do ponto</param>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="enderecoId">ID do endereço</param>
    /// <param name="descricao">Descrição do ponto</param>
    /// <param name="raioCobertura">Raio de cobertura em km</param>
    /// <param name="capacidadeMaxima">Capacidade máxima</param>
    /// <param name="unidadeCapacidade">Unidade da capacidade</param>
    /// <param name="observacoes">Observações</param>
    public PontoDistribuicao(string nome, int fornecedorId, int enderecoId, 
                           string? descricao = null, double? raioCobertura = null,
                           decimal? capacidadeMaxima = null, string? unidadeCapacidade = null,
                           string? observacoes = null)
    {
        ValidarParametros(nome, fornecedorId, enderecoId);
        
        Nome = nome;
        FornecedorId = fornecedorId;
        EnderecoId = enderecoId;
        Descricao = descricao;
        RaioCobertura = raioCobertura;
        CapacidadeMaxima = capacidadeMaxima;
        UnidadeCapacidade = unidadeCapacidade;
        Observacoes = observacoes;
        Ativo = true;
    }
    
    /// <summary>
    /// Atualiza os dados básicos do ponto de distribuição
    /// </summary>
    /// <param name="nome">Nome do ponto</param>
    /// <param name="descricao">Descrição do ponto</param>
    /// <param name="raioCobertura">Raio de cobertura em km</param>
    /// <param name="capacidadeMaxima">Capacidade máxima</param>
    /// <param name="unidadeCapacidade">Unidade da capacidade</param>
    /// <param name="observacoes">Observações</param>
    public void Atualizar(string nome, string? descricao = null, double? raioCobertura = null,
                         decimal? capacidadeMaxima = null, string? unidadeCapacidade = null,
                         string? observacoes = null)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome é obrigatório", nameof(nome));
            
        Nome = nome;
        Descricao = descricao;
        RaioCobertura = raioCobertura;
        CapacidadeMaxima = capacidadeMaxima;
        UnidadeCapacidade = unidadeCapacidade;
        Observacoes = observacoes;
        
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define a cobertura territorial do ponto de distribuição
    /// </summary>
    /// <param name="estadosIds">Lista de IDs dos estados atendidos</param>
    /// <param name="municipiosIds">Lista de IDs dos municípios atendidos</param>
    public void DefinirCoberturaTerritorios(IEnumerable<int>? estadosIds = null, IEnumerable<int>? municipiosIds = null)
    {
        var cobertura = new
        {
            estados = estadosIds?.ToList() ?? new List<int>(),
            municipios = municipiosIds?.ToList() ?? new List<int>()
        };
        
        CoberturaTerritorios = JsonSerializer.SerializeToDocument(cobertura);
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define o horário de funcionamento do ponto
    /// </summary>
    /// <param name="horarios">Dicionário com os horários por dia da semana</param>
    public void DefinirHorarioFuncionamento(Dictionary<string, string> horarios)
    {
        if (horarios == null || !horarios.Any())
        {
            HorarioFuncionamento = null;
            AtualizarDataModificacao();
            return;
        }
        
        // Validar dias da semana válidos
        var diasValidos = new[] { "segunda", "terca", "quarta", "quinta", "sexta", "sabado", "domingo" };
        var diasInvalidos = horarios.Keys.Where(dia => !diasValidos.Contains(dia.ToLower())).ToList();
        
        if (diasInvalidos.Any())
            throw new ArgumentException($"Dias inválidos: {string.Join(", ", diasInvalidos)}");
        
        HorarioFuncionamento = JsonSerializer.SerializeToDocument(horarios);
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Ativa o ponto de distribuição
    /// </summary>
    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Desativa o ponto de distribuição
    /// </summary>
    public void Desativar()
    {
        if (Ativo)
        {
            Ativo = false;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Verifica se o ponto atende um estado específico
    /// </summary>
    /// <param name="estadoId">ID do estado</param>
    /// <returns>True se atende o estado</returns>
    public bool AtendeEstado(int estadoId)
    {
        if (CoberturaTerritorios == null)
            return false;
            
        try
        {
            var estados = CoberturaTerritorios.RootElement.GetProperty("estados");
            return estados.EnumerateArray().Any(e => e.GetInt32() == estadoId);
        }
        catch
        {
            return false;
        }
    }
    
    /// <summary>
    /// Verifica se o ponto atende um município específico
    /// </summary>
    /// <param name="municipioId">ID do município</param>
    /// <returns>True se atende o município</returns>
    public bool AtendeMunicipio(int municipioId)
    {
        if (CoberturaTerritorios == null)
            return false;
            
        try
        {
            var municipios = CoberturaTerritorios.RootElement.GetProperty("municipios");
            return municipios.EnumerateArray().Any(m => m.GetInt32() == municipioId);
        }
        catch
        {
            return false;
        }
    }
    
    /// <summary>
    /// Calcula a distância em quilômetros para um endereço
    /// </summary>
    /// <param name="endereco">Endereço de destino</param>
    /// <returns>Distância em quilômetros ou null se não houver localização</returns>
    public double? CalcularDistanciaKm(Endereco endereco)
    {
        return Endereco?.CalcularDistanciaKm(endereco);
    }
    
    /// <summary>
    /// Calcula a distância em quilômetros para um município
    /// </summary>
    /// <param name="municipio">Município de destino</param>
    /// <returns>Distância em quilômetros ou null se não houver localização</returns>
    public double? CalcularDistanciaKm(Municipio municipio)
    {
        return Endereco?.CalcularDistanciaKm(municipio);
    }
    
    /// <summary>
    /// Verifica se o ponto está dentro do raio de cobertura para um endereço
    /// </summary>
    /// <param name="endereco">Endereço a verificar</param>
    /// <returns>True se está dentro do raio de cobertura</returns>
    public bool EstaDentroRaioCobertura(Endereco endereco)
    {
        if (!RaioCobertura.HasValue)
            return true; // Se não tem raio definido, considera que atende
            
        var distancia = CalcularDistanciaKm(endereco);
        return distancia.HasValue && distancia.Value <= RaioCobertura.Value;
    }
    
    /// <summary>
    /// Verifica se o ponto está dentro do raio de cobertura para um município
    /// </summary>
    /// <param name="municipio">Município a verificar</param>
    /// <returns>True se está dentro do raio de cobertura</returns>
    public bool EstaDentroRaioCobertura(Municipio municipio)
    {
        if (!RaioCobertura.HasValue)
            return true; // Se não tem raio definido, considera que atende
            
        var distancia = CalcularDistanciaKm(municipio);
        return distancia.HasValue && distancia.Value <= RaioCobertura.Value;
    }
    
    /// <summary>
    /// Obtém a lista de IDs dos estados atendidos
    /// </summary>
    /// <returns>Lista de IDs dos estados</returns>
    public List<int> ObterEstadosAtendidos()
    {
        if (CoberturaTerritorios == null)
            return new List<int>();
            
        try
        {
            var estados = CoberturaTerritorios.RootElement.GetProperty("estados");
            return estados.EnumerateArray().Select(e => e.GetInt32()).ToList();
        }
        catch
        {
            return new List<int>();
        }
    }
    
    /// <summary>
    /// Obtém a lista de IDs dos municípios atendidos
    /// </summary>
    /// <returns>Lista de IDs dos municípios</returns>
    public List<int> ObterMunicipiosAtendidos()
    {
        if (CoberturaTerritorios == null)
            return new List<int>();
            
        try
        {
            var municipios = CoberturaTerritorios.RootElement.GetProperty("municipios");
            return municipios.EnumerateArray().Select(m => m.GetInt32()).ToList();
        }
        catch
        {
            return new List<int>();
        }
    }
    
    /// <summary>
    /// Obtém o horário de funcionamento formatado
    /// </summary>
    /// <returns>Dicionário com os horários por dia da semana</returns>
    public Dictionary<string, string> ObterHorarioFuncionamento()
    {
        if (HorarioFuncionamento == null)
            return new Dictionary<string, string>();
            
        try
        {
            return JsonSerializer.Deserialize<Dictionary<string, string>>(HorarioFuncionamento) 
                   ?? new Dictionary<string, string>();
        }
        catch
        {
            return new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Verifica se o ponto possui capacidade definida
    /// </summary>
    /// <returns>True se possui capacidade máxima definida</returns>
    public bool PossuiCapacidadeDefinida()
    {
        return CapacidadeMaxima.HasValue && CapacidadeMaxima.Value > 0;
    }
    
    private static void ValidarParametros(string nome, int fornecedorId, int enderecoId)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome é obrigatório", nameof(nome));
            
        if (fornecedorId <= 0)
            throw new ArgumentException("ID do fornecedor deve ser maior que zero", nameof(fornecedorId));
            
        if (enderecoId <= 0)
            throw new ArgumentException("ID do endereço deve ser maior que zero", nameof(enderecoId));
    }
}
</PontoDistribuicao.cs>
<IPontoDistribuicaoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.PontosDistribuicao.Dominio.Entidades;
using Agriis.Enderecos.Dominio.Entidades;

namespace Agriis.PontosDistribuicao.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de pontos de distribuição
/// </summary>
public interface IPontoDistribuicaoRepository : IRepository<PontoDistribuicao>
{
    /// <summary>
    /// Obtém pontos de distribuição por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="apenasAtivos">Se deve retornar apenas pontos ativos</param>
    /// <returns>Lista de pontos de distribuição</returns>
    Task<IEnumerable<PontoDistribuicao>> ObterPorFornecedorAsync(int fornecedorId, bool apenasAtivos = true);
    
    /// <summary>
    /// Obtém pontos de distribuição que atendem um estado específico
    /// </summary>
    /// <param name="estadoId">ID do estado</param>
    /// <param name="apenasAtivos">Se deve retornar apenas pontos ativos</param>
    /// <returns>Lista de pontos de distribuição</returns>
    Task<IEnumerable<PontoDistribuicao>> ObterPorEstadoAsync(int estadoId, bool apenasAtivos = true);
    
    /// <summary>
    /// Obtém pontos de distribuição que atendem um município específico
    /// </summary>
    /// <param name="municipioId">ID do município</param>
    /// <param name="apenasAtivos">Se deve retornar apenas pontos ativos</param>
    /// <returns>Lista de pontos de distribuição</returns>
    Task<IEnumerable<PontoDistribuicao>> ObterPorMunicipioAsync(int municipioId, bool apenasAtivos = true);
    
    /// <summary>
    /// Obtém pontos de distribuição próximos a uma localização
    /// </summary>
    /// <param name="latitude">Latitude da localização</param>
    /// <param name="longitude">Longitude da localização</param>
    /// <param name="raioKm">Raio de busca em quilômetros</param>
    /// <param name="apenasAtivos">Se deve retornar apenas pontos ativos</param>
    /// <returns>Lista de pontos de distribuição ordenados por distância</returns>
    Task<IEnumerable<PontoDistribuicao>> ObterProximosAsync(double latitude, double longitude, 
                                                           double raioKm, bool apenasAtivos = true);
    
    /// <summary>
    /// Obtém pontos de distribuição próximos a um endereço
    /// </summary>
    /// <param name="endereco">Endereço de referência</param>
    /// <param name="raioKm">Raio de busca em quilômetros</param>
    /// <param name="apenasAtivos">Se deve retornar apenas pontos ativos</param>
    /// <returns>Lista de pontos de distribuição ordenados por distância</returns>
    Task<IEnumerable<PontoDistribuicao>> ObterProximosAsync(Endereco endereco, double raioKm, 
                                                           bool apenasAtivos = true);
    
    /// <summary>
    /// Obtém pontos de distribuição próximos a um município
    /// </summary>
    /// <param name="municipio">Município de referência</param>
    /// <param name="raioKm">Raio de busca em quilômetros</param>
    /// <param name="apenasAtivos">Se deve retornar apenas pontos ativos</param>
    /// <returns>Lista de pontos de distribuição ordenados por distância</returns>
    Task<IEnumerable<PontoDistribuicao>> ObterProximosAsync(Municipio municipio, double raioKm, 
                                                           bool apenasAtivos = true);
    
    /// <summary>
    /// Obtém pontos de distribuição que atendem uma localização específica
    /// Considera tanto cobertura territorial quanto raio de cobertura
    /// </summary>
    /// <param name="estadoId">ID do estado</param>
    /// <param name="municipioId">ID do município</param>
    /// <param name="endereco">Endereço específico (opcional)</param>
    /// <param name="apenasAtivos">Se deve retornar apenas pontos ativos</param>
    /// <returns>Lista de pontos de distribuição que atendem a localização</returns>
    Task<IEnumerable<PontoDistribuicao>> ObterQueAtendemLocalizacaoAsync(int estadoId, int municipioId, 
                                                                        Endereco? endereco = null, 
                                                                        bool apenasAtivos = true);
    
    /// <summary>
    /// Calcula distâncias de pontos de distribuição para uma localização
    /// </summary>
    /// <param name="pontosIds">IDs dos pontos de distribuição</param>
    /// <param name="latitude">Latitude da localização</param>
    /// <param name="longitude">Longitude da localização</param>
    /// <returns>Dicionário com ID do ponto e distância em km</returns>
    Task<Dictionary<int, double>> CalcularDistanciasAsync(IEnumerable<int> pontosIds, 
                                                         double latitude, double longitude);
    
    /// <summary>
    /// Verifica se existe ponto de distribuição com o mesmo nome para o fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="nome">Nome do ponto</param>
    /// <param name="pontoId">ID do ponto a excluir da verificação (para edição)</param>
    /// <returns>True se existe ponto com o mesmo nome</returns>
    Task<bool> ExisteComMesmoNomeAsync(int fornecedorId, string nome, int? pontoId = null);
    
    /// <summary>
    /// Obtém estatísticas de pontos de distribuição por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Estatísticas dos pontos</returns>
    Task<(int Total, int Ativos, int Inativos)> ObterEstatisticasPorFornecedorAsync(int fornecedorId);
}
</IPontoDistribuicaoRepository.cs>
<PontoDistribuicaoConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.PontosDistribuicao.Dominio.Entidades;

namespace Agriis.PontosDistribuicao.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade PontoDistribuicao
/// </summary>
public class PontoDistribuicaoConfiguration : IEntityTypeConfiguration<PontoDistribuicao>
{
    public void Configure(EntityTypeBuilder<PontoDistribuicao> builder)
    {
        // Configuração da tabela
        builder.ToTable("PontoDistribuicao");
        
        // Chave primária
        builder.HasKey(p => p.Id);
        builder.Property(p => p.Id)
               .ValueGeneratedOnAdd();
        
        // Propriedades obrigatórias
        builder.Property(p => p.Nome)
               .IsRequired()
               .HasMaxLength(200);
        
        builder.Property(p => p.FornecedorId)
               .IsRequired();
        
        builder.Property(p => p.EnderecoId)
               .IsRequired();
        
        builder.Property(p => p.Ativo)
               .IsRequired()
               .HasDefaultValue(true);
        
        // Propriedades opcionais
        builder.Property(p => p.Descricao)
               .HasMaxLength(1000);
        
        builder.Property(p => p.RaioCobertura)
               .HasPrecision(10, 2);
        
        builder.Property(p => p.CapacidadeMaxima)
               .HasPrecision(18, 4);
        
        builder.Property(p => p.UnidadeCapacidade)
               .HasMaxLength(50);
        
        builder.Property(p => p.Observacoes)
               .HasMaxLength(2000);
        
        // Campos JSON
        builder.Property(p => p.CoberturaTerritorios)
               .HasColumnType("jsonb");
        
        builder.Property(p => p.HorarioFuncionamento)
               .HasColumnType("jsonb");
        
        // Campos de auditoria
        builder.Property(p => p.DataCriacao)
               .IsRequired()
               .HasDefaultValueSql("CURRENT_TIMESTAMP");
        
        builder.Property(p => p.DataAtualizacao);
        
        // Relacionamentos
        builder.HasOne(p => p.Endereco)
               .WithMany()
               .HasForeignKey(p => p.EnderecoId)
               .OnDelete(DeleteBehavior.Restrict);
        
        // Índices
        builder.HasIndex(p => p.FornecedorId)
               .HasDatabaseName("IX_PontoDistribuicao_FornecedorId");
        
        builder.HasIndex(p => p.EnderecoId)
               .HasDatabaseName("IX_PontoDistribuicao_EnderecoId");
        
        builder.HasIndex(p => p.Ativo)
               .HasDatabaseName("IX_PontoDistribuicao_Ativo");
        
        builder.HasIndex(p => new { p.FornecedorId, p.Nome })
               .HasDatabaseName("IX_PontoDistribuicao_FornecedorId_Nome")
               .IsUnique();
        
        // Índice GIN para campos JSON (para consultas eficientes)
        builder.HasIndex(p => p.CoberturaTerritorios)
               .HasDatabaseName("IX_PontoDistribuicao_CoberturaTerritorios")
               .HasMethod("gin");
        
        // Configurações específicas do PostgreSQL
        builder.Property(p => p.Nome)
               .UseCollation("pt_BR");
        
        builder.Property(p => p.Descricao)
               .UseCollation("pt_BR");
        
        builder.Property(p => p.Observacoes)
               .UseCollation("pt_BR");
    }
}
</PontoDistribuicaoConfiguration.cs>
<PontoDistribuicaoRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.PontosDistribuicao.Dominio.Entidades;
using Agriis.PontosDistribuicao.Dominio.Interfaces;
using Agriis.Enderecos.Dominio.Entidades;
using NetTopologySuite.Geometries;

namespace Agriis.PontosDistribuicao.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de pontos de distribuição
/// </summary>
public class PontoDistribuicaoRepository : RepositoryBase<PontoDistribuicao, DbContext>, IPontoDistribuicaoRepository
{
    public PontoDistribuicaoRepository(DbContext context) : base(context)
    {
    }
    
    /// <summary>
    /// Obtém pontos de distribuição por fornecedor
    /// </summary>
    public async Task<IEnumerable<PontoDistribuicao>> ObterPorFornecedorAsync(int fornecedorId, bool apenasAtivos = true)
    {
        var query = Context.Set<PontoDistribuicao>()
                          .Include(p => p.Endereco)
                          .ThenInclude(e => e.Municipio)
                          .ThenInclude(m => m.Estado)
                          .Where(p => p.FornecedorId == fornecedorId);
        
        if (apenasAtivos)
        {
            query = query.Where(p => p.Ativo);
        }
        
        return await query.OrderBy(p => p.Nome).ToListAsync();
    }
    
    /// <summary>
    /// Obtém pontos de distribuição que atendem um estado específico
    /// </summary>
    public async Task<IEnumerable<PontoDistribuicao>> ObterPorEstadoAsync(int estadoId, bool apenasAtivos = true)
    {
        var query = Context.Set<PontoDistribuicao>()
                          .Include(p => p.Endereco)
                          .ThenInclude(e => e.Municipio)
                          .ThenInclude(m => m.Estado)
                          .Where(p => p.CoberturaTerritorios != null &&
                                     EF.Functions.JsonContains(p.CoberturaTerritorios, $"{{\"estados\": [{estadoId}]}}"));
        
        if (apenasAtivos)
        {
            query = query.Where(p => p.Ativo);
        }
        
        return await query.OrderBy(p => p.Nome).ToListAsync();
    }
    
    /// <summary>
    /// Obtém pontos de distribuição que atendem um município específico
    /// </summary>
    public async Task<IEnumerable<PontoDistribuicao>> ObterPorMunicipioAsync(int municipioId, bool apenasAtivos = true)
    {
        var query = Context.Set<PontoDistribuicao>()
                          .Include(p => p.Endereco)
                          .ThenInclude(e => e.Municipio)
                          .ThenInclude(m => m.Estado)
                          .Where(p => p.CoberturaTerritorios != null &&
                                     EF.Functions.JsonContains(p.CoberturaTerritorios, $"{{\"municipios\": [{municipioId}]}}"));
        
        if (apenasAtivos)
        {
            query = query.Where(p => p.Ativo);
        }
        
        return await query.OrderBy(p => p.Nome).ToListAsync();
    }
    
    /// <summary>
    /// Obtém pontos de distribuição próximos a uma localização
    /// </summary>
    public async Task<IEnumerable<PontoDistribuicao>> ObterProximosAsync(double latitude, double longitude, 
                                                                        double raioKm, bool apenasAtivos = true)
    {
        // Criar ponto de referência
        var geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);
        var pontoReferencia = geometryFactory.CreatePoint(new Coordinate(longitude, latitude));
        
        var query = Context.Set<PontoDistribuicao>()
                          .Include(p => p.Endereco)
                          .ThenInclude(e => e.Municipio)
                          .ThenInclude(m => m.Estado)
                          .Where(p => p.Endereco.Localizacao != null &&
                                     p.Endereco.Localizacao.Distance(pontoReferencia) <= raioKm * 1000); // Converter km para metros
        
        if (apenasAtivos)
        {
            query = query.Where(p => p.Ativo);
        }
        
        // Ordenar por distância
        return await query.OrderBy(p => p.Endereco.Localizacao!.Distance(pontoReferencia))
                         .ToListAsync();
    }
    
    /// <summary>
    /// Obtém pontos de distribuição próximos a um endereço
    /// </summary>
    public async Task<IEnumerable<PontoDistribuicao>> ObterProximosAsync(Endereco endereco, double raioKm, 
                                                                        bool apenasAtivos = true)
    {
        if (endereco.Localizacao == null)
        {
            return new List<PontoDistribuicao>();
        }
        
        return await ObterProximosAsync(endereco.Latitude!.Value, endereco.Longitude!.Value, raioKm, apenasAtivos);
    }
    
    /// <summary>
    /// Obtém pontos de distribuição próximos a um município
    /// </summary>
    public async Task<IEnumerable<PontoDistribuicao>> ObterProximosAsync(Municipio municipio, double raioKm, 
                                                                        bool apenasAtivos = true)
    {
        if (municipio.Localizacao == null)
        {
            return new List<PontoDistribuicao>();
        }
        
        return await ObterProximosAsync(municipio.Latitude!.Value, municipio.Longitude!.Value, raioKm, apenasAtivos);
    }
    
    /// <summary>
    /// Obtém pontos de distribuição que atendem uma localização específica
    /// </summary>
    public async Task<IEnumerable<PontoDistribuicao>> ObterQueAtendemLocalizacaoAsync(int estadoId, int municipioId, 
                                                                                     Endereco? endereco = null, 
                                                                                     bool apenasAtivos = true)
    {
        var query = Context.Set<PontoDistribuicao>()
                          .Include(p => p.Endereco)
                          .ThenInclude(e => e.Municipio)
                          .ThenInclude(m => m.Estado)
                          .Where(p => p.CoberturaTerritorios != null);
        
        if (apenasAtivos)
        {
            query = query.Where(p => p.Ativo);
        }
        
        // Filtrar por cobertura territorial (estado ou município)
        query = query.Where(p => 
            EF.Functions.JsonContains(p.CoberturaTerritorios, $"{{\"estados\": [{estadoId}]}}") ||
            EF.Functions.JsonContains(p.CoberturaTerritorios, $"{{\"municipios\": [{municipioId}]}}"));
        
        var pontos = await query.ToListAsync();
        
        // Se tem endereço específico, filtrar também por raio de cobertura
        if (endereco != null)
        {
            pontos = pontos.Where(p => p.EstaDentroRaioCobertura(endereco)).ToList();
        }
        
        return pontos.OrderBy(p => p.Nome);
    }
    
    /// <summary>
    /// Calcula distâncias de pontos de distribuição para uma localização
    /// </summary>
    public async Task<Dictionary<int, double>> CalcularDistanciasAsync(IEnumerable<int> pontosIds, 
                                                                      double latitude, double longitude)
    {
        var geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);
        var pontoReferencia = geometryFactory.CreatePoint(new Coordinate(longitude, latitude));
        
        var pontos = await Context.Set<PontoDistribuicao>()
                                 .Include(p => p.Endereco)
                                 .Where(p => pontosIds.Contains(p.Id) && p.Endereco.Localizacao != null)
                                 .Select(p => new { p.Id, p.Endereco.Localizacao })
                                 .ToListAsync();
        
        var distancias = new Dictionary<int, double>();
        
        foreach (var ponto in pontos)
        {
            if (ponto.Localizacao != null)
            {
                var distanciaMetros = ponto.Localizacao.Distance(pontoReferencia);
                distancias[ponto.Id] = distanciaMetros / 1000.0; // Converter para km
            }
        }
        
        return distancias;
    }
    
    /// <summary>
    /// Verifica se existe ponto de distribuição com o mesmo nome para o fornecedor
    /// </summary>
    public async Task<bool> ExisteComMesmoNomeAsync(int fornecedorId, string nome, int? pontoId = null)
    {
        var query = Context.Set<PontoDistribuicao>()
                          .Where(p => p.FornecedorId == fornecedorId && 
                                     p.Nome.ToLower() == nome.ToLower());
        
        if (pontoId.HasValue)
        {
            query = query.Where(p => p.Id != pontoId.Value);
        }
        
        return await query.AnyAsync();
    }
    
    /// <summary>
    /// Obtém estatísticas de pontos de distribuição por fornecedor
    /// </summary>
    public async Task<(int Total, int Ativos, int Inativos)> ObterEstatisticasPorFornecedorAsync(int fornecedorId)
    {
        var pontos = await Context.Set<PontoDistribuicao>()
                                 .Where(p => p.FornecedorId == fornecedorId)
                                 .GroupBy(p => p.Ativo)
                                 .Select(g => new { Ativo = g.Key, Quantidade = g.Count() })
                                 .ToListAsync();
        
        var total = pontos.Sum(p => p.Quantidade);
        var ativos = pontos.Where(p => p.Ativo).Sum(p => p.Quantidade);
        var inativos = pontos.Where(p => !p.Ativo).Sum(p => p.Quantidade);
        
        return (total, ativos, inativos);
    }
    
    /// <summary>
    /// Override do método base para incluir relacionamentos
    /// </summary>
    public override async Task<PontoDistribuicao?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await Context.Set<PontoDistribuicao>()
                           .Include(p => p.Endereco)
                           .ThenInclude(e => e.Municipio)
                           .ThenInclude(m => m.Estado)
                           .FirstOrDefaultAsync(p => p.Id == id, cancellationToken);
    }
    
    /// <summary>
    /// Override do método base para incluir relacionamentos
    /// </summary>
    public override async Task<IEnumerable<PontoDistribuicao>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await Context.Set<PontoDistribuicao>()
                           .Include(p => p.Endereco)
                           .ThenInclude(e => e.Municipio)
                           .ThenInclude(m => m.Estado)
                           .OrderBy(p => p.Nome)
                           .ToListAsync(cancellationToken);
    }
}
</PontoDistribuicaoRepository.cs>
<ProdutorDto.cs>
using Agriis.Produtores.Dominio.Enums;

namespace Agriis.Produtores.Aplicacao.DTOs;

/// <summary>
/// DTO para transferência de dados do produtor
/// </summary>
public class ProdutorDto
{
    public int Id { get; set; }
    public string Nome { get; set; } = string.Empty;
    public string? Cpf { get; set; }
    public string? CpfFormatado { get; set; }
    public string? Cnpj { get; set; }
    public string? CnpjFormatado { get; set; }
    public string? InscricaoEstadual { get; set; }
    public string? TipoAtividade { get; set; }
    public decimal AreaPlantio { get; set; }
    public string AreaPlantioFormatada { get; set; } = string.Empty;
    public DateTime DataAutorizacao { get; set; }
    public StatusProdutor Status { get; set; }
    public string StatusDescricao { get; set; } = string.Empty;
    public int? UsuarioAutorizacaoId { get; set; }
    public List<int> Culturas { get; set; } = new();
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
    
    // Propriedades calculadas
    public bool EstaAutorizado { get; set; }
    public bool EhPessoaFisica { get; set; }
    public bool EhPessoaJuridica { get; set; }
    public string DocumentoPrincipal { get; set; } = string.Empty;
}

/// <summary>
/// DTO para criação de produtor
/// </summary>
public class CriarProdutorDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Cpf { get; set; }
    public string? Cnpj { get; set; }
    public string? InscricaoEstadual { get; set; }
    public string? TipoAtividade { get; set; }
    public decimal AreaPlantio { get; set; }
    public List<int> Culturas { get; set; } = new();
}

/// <summary>
/// DTO para atualização de produtor
/// </summary>
public class AtualizarProdutorDto
{
    public string Nome { get; set; } = string.Empty;
    public string? InscricaoEstadual { get; set; }
    public string? TipoAtividade { get; set; }
    public decimal AreaPlantio { get; set; }
    public List<int> Culturas { get; set; } = new();
}

/// <summary>
/// DTO para filtros de busca de produtores
/// </summary>
public class FiltrosProdutorDto
{
    public string? Filtro { get; set; }
    public StatusProdutor? Status { get; set; }
    public int? CulturaId { get; set; }
    public decimal? AreaMinima { get; set; }
    public decimal? AreaMaxima { get; set; }
    public int Pagina { get; set; } = 1;
    public int TamanhoPagina { get; set; } = 20;
}

/// <summary>
/// DTO para estatísticas de produtores
/// </summary>
public class ProdutorEstatisticasDto
{
    public int TotalProdutores { get; set; }
    public int ProdutoresAutorizados { get; set; }
    public int ProdutoresPendentes { get; set; }
    public int ProdutoresNegados { get; set; }
    public decimal AreaTotalPlantio { get; set; }
    public decimal AreaMediaPlantio { get; set; }
    public string AreaTotalFormatada { get; set; } = string.Empty;
    public string AreaMediaFormatada { get; set; } = string.Empty;
}
</ProdutorDto.cs>
<UsuarioProdutorDto.cs>
namespace Agriis.Produtores.Aplicacao.DTOs;

/// <summary>
/// DTO para relacionamento usuário-produtor
/// </summary>
public class UsuarioProdutorDto
{
    public int Id { get; set; }
    public int UsuarioId { get; set; }
    public int ProdutorId { get; set; }
    public bool EhProprietario { get; set; }
    public bool Ativo { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
    
    // Dados do usuário
    public string NomeUsuario { get; set; } = string.Empty;
    public string EmailUsuario { get; set; } = string.Empty;
    
    // Dados do produtor
    public string NomeProdutor { get; set; } = string.Empty;
    public string DocumentoProdutor { get; set; } = string.Empty;
}

/// <summary>
/// DTO para criação de relacionamento usuário-produtor
/// </summary>
public class CriarUsuarioProdutorDto
{
    public int UsuarioId { get; set; }
    public int ProdutorId { get; set; }
    public bool EhProprietario { get; set; } = false;
}

/// <summary>
/// DTO para atualização de relacionamento usuário-produtor
/// </summary>
public class AtualizarUsuarioProdutorDto
{
    public bool EhProprietario { get; set; }
    public bool Ativo { get; set; }
}
</UsuarioProdutorDto.cs>
<IProdutorService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Produtores.Aplicacao.DTOs;

namespace Agriis.Produtores.Aplicacao.Interfaces;

/// <summary>
/// Interface do serviço de aplicação de produtores
/// </summary>
public interface IProdutorService
{
    /// <summary>
    /// Obtém um produtor por ID
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <returns>Produtor encontrado ou null</returns>
    Task<ProdutorDto?> ObterPorIdAsync(int id);
    
    /// <summary>
    /// Obtém um produtor por CPF
    /// </summary>
    /// <param name="cpf">CPF do produtor</param>
    /// <returns>Produtor encontrado ou null</returns>
    Task<ProdutorDto?> ObterPorCpfAsync(string cpf);
    
    /// <summary>
    /// Obtém um produtor por CNPJ
    /// </summary>
    /// <param name="cnpj">CNPJ do produtor</param>
    /// <returns>Produtor encontrado ou null</returns>
    Task<ProdutorDto?> ObterPorCnpjAsync(string cnpj);
    
    /// <summary>
    /// Obtém produtores paginados com filtros
    /// </summary>
    /// <param name="filtros">Filtros de busca</param>
    /// <returns>Resultado paginado</returns>
    Task<PagedResult<ProdutorDto>> ObterPaginadoAsync(FiltrosProdutorDto filtros);
    
    /// <summary>
    /// Cria um novo produtor
    /// </summary>
    /// <param name="dto">Dados do produtor</param>
    /// <returns>Produtor criado</returns>
    Task<Result<ProdutorDto>> CriarAsync(CriarProdutorDto dto);
    
    /// <summary>
    /// Atualiza um produtor existente
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <param name="dto">Dados atualizados</param>
    /// <returns>Produtor atualizado</returns>
    Task<Result<ProdutorDto>> AtualizarAsync(int id, AtualizarProdutorDto dto);
    
    /// <summary>
    /// Remove um produtor
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <returns>Resultado da operação</returns>
    Task<Result<bool>> RemoverAsync(int id);
    
    /// <summary>
    /// Valida um produtor automaticamente via SERPRO
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <returns>Resultado da validação</returns>
    Task<Result<ProdutorDto>> ValidarAutomaticamenteAsync(int id);
    
    /// <summary>
    /// Autoriza um produtor manualmente
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <param name="usuarioAutorizacaoId">ID do usuário que está autorizando</param>
    /// <returns>Resultado da operação</returns>
    Task<Result<ProdutorDto>> AutorizarManualmenteAsync(int id, int usuarioAutorizacaoId);
    
    /// <summary>
    /// Nega um produtor
    /// </summary>
    /// <param name="id">ID do produtor</param>
    /// <param name="usuarioAutorizacaoId">ID do usuário que está negando</param>
    /// <returns>Resultado da operação</returns>
    Task<Result<ProdutorDto>> NegarAsync(int id, int usuarioAutorizacaoId);
    
    /// <summary>
    /// Obtém estatísticas dos produtores
    /// </summary>
    /// <returns>Estatísticas</returns>
    Task<ProdutorEstatisticasDto> ObterEstatisticasAsync();
    
    /// <summary>
    /// Obtém produtores por fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de produtores</returns>
    Task<IEnumerable<ProdutorDto>> ObterPorFornecedorAsync(int fornecedorId);
}
</IProdutorService.cs>
<ProdutorMappingProfile.cs>
using AutoMapper;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Produtores.Aplicacao.DTOs;
using Agriis.Produtores.Dominio.Entidades;
using Agriis.Produtores.Dominio.Enums;
using Agriis.Produtores.Dominio.Interfaces;

namespace Agriis.Produtores.Aplicacao.Mapeamentos;

/// <summary>
/// Perfil de mapeamento do AutoMapper para Produtores
/// </summary>
public class ProdutorMappingProfile : Profile
{
    public ProdutorMappingProfile()
    {
        // Produtor -> ProdutorDto
        CreateMap<Produtor, ProdutorDto>()
            .ForMember(dest => dest.Cpf, opt => opt.MapFrom(src => src.Cpf != null ? src.Cpf.Valor : null))
            .ForMember(dest => dest.CpfFormatado, opt => opt.MapFrom(src => src.Cpf != null ? src.Cpf.ValorFormatado : null))
            .ForMember(dest => dest.Cnpj, opt => opt.MapFrom(src => src.Cnpj != null ? src.Cnpj.Valor : null))
            .ForMember(dest => dest.CnpjFormatado, opt => opt.MapFrom(src => src.Cnpj != null ? src.Cnpj.ValorFormatado : null))
            .ForMember(dest => dest.AreaPlantio, opt => opt.MapFrom(src => src.AreaPlantio.Valor))
            .ForMember(dest => dest.AreaPlantioFormatada, opt => opt.MapFrom(src => src.AreaPlantio.ValorFormatado))
            .ForMember(dest => dest.StatusDescricao, opt => opt.MapFrom(src => ObterDescricaoStatus(src.Status)))
            .ForMember(dest => dest.EstaAutorizado, opt => opt.MapFrom(src => src.EstaAutorizado()))
            .ForMember(dest => dest.EhPessoaFisica, opt => opt.MapFrom(src => src.EhPessoaFisica()))
            .ForMember(dest => dest.EhPessoaJuridica, opt => opt.MapFrom(src => src.EhPessoaJuridica()))
            .ForMember(dest => dest.DocumentoPrincipal, opt => opt.MapFrom(src => src.ObterDocumentoPrincipal()));

        // CriarProdutorDto -> Produtor
        CreateMap<CriarProdutorDto, Produtor>()
            .ConstructUsing(src => new Produtor(
                src.Nome,
                !string.IsNullOrEmpty(src.Cpf) ? new Cpf(src.Cpf) : null,
                !string.IsNullOrEmpty(src.Cnpj) ? new Cnpj(src.Cnpj) : null,
                src.InscricaoEstadual,
                src.TipoAtividade,
                new AreaPlantio(src.AreaPlantio)))
            .ForMember(dest => dest.Culturas, opt => opt.MapFrom(src => src.Culturas));

        // UsuarioProdutor -> UsuarioProdutorDto
        CreateMap<UsuarioProdutor, UsuarioProdutorDto>()
            .ForMember(dest => dest.NomeUsuario, opt => opt.MapFrom(src => src.Usuario.Nome))
            .ForMember(dest => dest.EmailUsuario, opt => opt.MapFrom(src => src.Usuario.Email))
            .ForMember(dest => dest.NomeProdutor, opt => opt.MapFrom(src => src.Produtor.Nome))
            .ForMember(dest => dest.DocumentoProdutor, opt => opt.MapFrom(src => src.Produtor.ObterDocumentoPrincipal()));

        // CriarUsuarioProdutorDto -> UsuarioProdutor
        CreateMap<CriarUsuarioProdutorDto, UsuarioProdutor>()
            .ConstructUsing(src => new UsuarioProdutor(src.UsuarioId, src.ProdutorId, src.EhProprietario));

        // ProdutorEstatisticas -> ProdutorEstatisticasDto
        CreateMap<ProdutorEstatisticas, ProdutorEstatisticasDto>()
            .ForMember(dest => dest.AreaTotalFormatada, opt => opt.MapFrom(src => $"{src.AreaTotalPlantio:N2} ha"))
            .ForMember(dest => dest.AreaMediaFormatada, opt => opt.MapFrom(src => $"{src.AreaMediaPlantio:N2} ha"));
    }

    /// <summary>
    /// Obtém a descrição do status do produtor
    /// </summary>
    /// <param name="status">Status do produtor</param>
    /// <returns>Descrição do status</returns>
    private static string ObterDescricaoStatus(StatusProdutor status)
    {
        return status switch
        {
            StatusProdutor.PendenteValidacaoAutomatica => "Pendente de Validação Automática",
            StatusProdutor.PendenteValidacaoManual => "Pendente de Validação Manual",
            StatusProdutor.PendenteCnpj => "Pendente de CNPJ",
            StatusProdutor.AutorizadoAutomaticamente => "Autorizado Automaticamente",
            StatusProdutor.AutorizadoManualmente => "Autorizado Manualmente",
            StatusProdutor.Negado => "Negado",
            _ => "Status Desconhecido"
        };
    }
}
</ProdutorMappingProfile.cs>
<ProdutorService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Produtores.Aplicacao.DTOs;
using Agriis.Produtores.Aplicacao.Interfaces;
using Agriis.Produtores.Dominio.Entidades;
using Agriis.Produtores.Dominio.Enums;
using Agriis.Produtores.Dominio.Interfaces;
using Agriis.Produtores.Dominio.Servicos;

namespace Agriis.Produtores.Aplicacao.Servicos;

/// <summary>
/// Serviço de aplicação para produtores
/// </summary>
public class ProdutorService : IProdutorService
{
    private readonly IProdutorRepository _produtorRepository;
    private readonly IMapper _mapper;
    private readonly ProdutorDomainService _domainService;

    public ProdutorService(
        IProdutorRepository produtorRepository,
        IMapper mapper,
        ProdutorDomainService domainService)
    {
        _produtorRepository = produtorRepository ?? throw new ArgumentNullException(nameof(produtorRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _domainService = domainService ?? throw new ArgumentNullException(nameof(domainService));
    }

    /// <inheritdoc />
    public async Task<ProdutorDto?> ObterPorIdAsync(int id)
    {
        var produtor = await _produtorRepository.ObterPorIdAsync(id);
        return produtor != null ? _mapper.Map<ProdutorDto>(produtor) : null;
    }

    /// <inheritdoc />
    public async Task<ProdutorDto?> ObterPorCpfAsync(string cpf)
    {
        if (string.IsNullOrWhiteSpace(cpf))
            return null;

        var produtor = await _produtorRepository.ObterPorCpfAsync(cpf);
        return produtor != null ? _mapper.Map<ProdutorDto>(produtor) : null;
    }

    /// <inheritdoc />
    public async Task<ProdutorDto?> ObterPorCnpjAsync(string cnpj)
    {
        if (string.IsNullOrWhiteSpace(cnpj))
            return null;

        var produtor = await _produtorRepository.ObterPorCnpjAsync(cnpj);
        return produtor != null ? _mapper.Map<ProdutorDto>(produtor) : null;
    }

    /// <inheritdoc />
    public async Task<PagedResult<ProdutorDto>> ObterPaginadoAsync(FiltrosProdutorDto filtros)
    {
        var resultado = await _produtorRepository.ObterPaginadoAsync(
            filtros.Pagina,
            filtros.TamanhoPagina,
            filtros.Filtro,
            filtros.Status,
            filtros.CulturaId);

        var produtoresDto = _mapper.Map<IEnumerable<ProdutorDto>>(resultado.Items);

        return new PagedResult<ProdutorDto>(
            produtoresDto,
            resultado.PageNumber,
            resultado.PageSize,
            resultado.TotalCount);
    }

    /// <inheritdoc />
    public async Task<Result<ProdutorDto>> CriarAsync(CriarProdutorDto dto)
    {
        try
        {
            // Validações de negócio
            if (string.IsNullOrWhiteSpace(dto.Nome))
                return Result<ProdutorDto>.Failure("Nome do produtor é obrigatório");

            if (string.IsNullOrWhiteSpace(dto.Cpf) && string.IsNullOrWhiteSpace(dto.Cnpj))
                return Result<ProdutorDto>.Failure("CPF ou CNPJ deve ser informado");

            // Verifica se já existe produtor com o mesmo documento
            if (!string.IsNullOrWhiteSpace(dto.Cpf))
            {
                var existeCpf = await _produtorRepository.ExistePorCpfAsync(dto.Cpf);
                if (existeCpf)
                    return Result<ProdutorDto>.Failure("Já existe um produtor cadastrado com este CPF");
            }

            if (!string.IsNullOrWhiteSpace(dto.Cnpj))
            {
                var existeCnpj = await _produtorRepository.ExistePorCnpjAsync(dto.Cnpj);
                if (existeCnpj)
                    return Result<ProdutorDto>.Failure("Já existe um produtor cadastrado com este CNPJ");
            }

            // Cria o produtor
            var produtor = new Produtor(
                dto.Nome,
                !string.IsNullOrWhiteSpace(dto.Cpf) ? new Cpf(dto.Cpf) : null,
                !string.IsNullOrWhiteSpace(dto.Cnpj) ? new Cnpj(dto.Cnpj) : null,
                dto.InscricaoEstadual,
                dto.TipoAtividade,
                new AreaPlantio(dto.AreaPlantio));

            // Adiciona culturas
            foreach (var culturaId in dto.Culturas)
            {
                produtor.AdicionarCultura(culturaId);
            }

            // Salva no repositório
            var produtorSalvo = await _produtorRepository.AdicionarAsync(produtor);

            // Tenta validação automática
            await _domainService.ValidarAutomaticamenteAsync(produtorSalvo);

            var produtorDto = _mapper.Map<ProdutorDto>(produtorSalvo);
            return Result<ProdutorDto>.Success(produtorDto);
        }
        catch (ArgumentException ex)
        {
            return Result<ProdutorDto>.Failure(ex.Message);
        }
        catch (Exception ex)
        {
            return Result<ProdutorDto>.Failure($"Erro interno: {ex.Message}");
        }
    }

    /// <inheritdoc />
    public async Task<Result<ProdutorDto>> AtualizarAsync(int id, AtualizarProdutorDto dto)
    {
        try
        {
            var produtor = await _produtorRepository.ObterPorIdAsync(id);
            if (produtor == null)
                return Result<ProdutorDto>.Failure("Produtor não encontrado");

            if (!_domainService.PodeSerEditado(produtor))
                return Result<ProdutorDto>.Failure("Este produtor não pode ser editado");

            // Atualiza os dados
            if (!string.IsNullOrWhiteSpace(dto.Nome))
            {
                // Usar reflection para atualizar o nome (já que é private set)
                var nomeProperty = typeof(Produtor).GetProperty("Nome");
                nomeProperty?.SetValue(produtor, dto.Nome.Trim());
            }

            if (!string.IsNullOrWhiteSpace(dto.InscricaoEstadual))
            {
                var inscricaoProperty = typeof(Produtor).GetProperty("InscricaoEstadual");
                inscricaoProperty?.SetValue(produtor, dto.InscricaoEstadual.Trim());
            }

            if (!string.IsNullOrWhiteSpace(dto.TipoAtividade))
            {
                var tipoAtividadeProperty = typeof(Produtor).GetProperty("TipoAtividade");
                tipoAtividadeProperty?.SetValue(produtor, dto.TipoAtividade.Trim());
            }

            // Atualiza área de plantio
            produtor.AtualizarAreaPlantio(new AreaPlantio(dto.AreaPlantio));

            // Atualiza culturas
            var culturasProperty = typeof(Produtor).GetProperty("Culturas");
            culturasProperty?.SetValue(produtor, dto.Culturas);

            await _produtorRepository.AtualizarAsync(produtor);

            var produtorDto = _mapper.Map<ProdutorDto>(produtor);
            return Result<ProdutorDto>.Success(produtorDto);
        }
        catch (Exception ex)
        {
            return Result<ProdutorDto>.Failure($"Erro interno: {ex.Message}");
        }
    }

    /// <inheritdoc />
    public async Task<Result<bool>> RemoverAsync(int id)
    {
        try
        {
            var produtor = await _produtorRepository.ObterPorIdAsync(id);
            if (produtor == null)
                return Result<bool>.Failure("Produtor não encontrado");

            await _produtorRepository.RemoverAsync(id);
            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            return Result<bool>.Failure($"Erro interno: {ex.Message}");
        }
    }

    /// <inheritdoc />
    public async Task<Result<ProdutorDto>> ValidarAutomaticamenteAsync(int id)
    {
        try
        {
            var produtor = await _produtorRepository.ObterPorIdAsync(id);
            if (produtor == null)
                return Result<ProdutorDto>.Failure("Produtor não encontrado");

            var resultado = await _domainService.ValidarAutomaticamenteAsync(produtor);
            await _produtorRepository.AtualizarAsync(produtor);

            var produtorDto = _mapper.Map<ProdutorDto>(produtor);
            
            if (resultado.Sucesso)
                return Result<ProdutorDto>.Success(produtorDto);
            else
                return Result<ProdutorDto>.Failure(resultado.Mensagem);
        }
        catch (Exception ex)
        {
            return Result<ProdutorDto>.Failure($"Erro interno: {ex.Message}");
        }
    }

    /// <inheritdoc />
    public async Task<Result<ProdutorDto>> AutorizarManualmenteAsync(int id, int usuarioAutorizacaoId)
    {
        try
        {
            var produtor = await _produtorRepository.ObterPorIdAsync(id);
            if (produtor == null)
                return Result<ProdutorDto>.Failure("Produtor não encontrado");

            produtor.AtualizarStatus(StatusProdutor.AutorizadoManualmente, usuarioAutorizacaoId);
            await _produtorRepository.AtualizarAsync(produtor);

            var produtorDto = _mapper.Map<ProdutorDto>(produtor);
            return Result<ProdutorDto>.Success(produtorDto);
        }
        catch (Exception ex)
        {
            return Result<ProdutorDto>.Failure($"Erro interno: {ex.Message}");
        }
    }

    /// <inheritdoc />
    public async Task<Result<ProdutorDto>> NegarAsync(int id, int usuarioAutorizacaoId)
    {
        try
        {
            var produtor = await _produtorRepository.ObterPorIdAsync(id);
            if (produtor == null)
                return Result<ProdutorDto>.Failure("Produtor não encontrado");

            produtor.AtualizarStatus(StatusProdutor.Negado, usuarioAutorizacaoId);
            await _produtorRepository.AtualizarAsync(produtor);

            var produtorDto = _mapper.Map<ProdutorDto>(produtor);
            return Result<ProdutorDto>.Success(produtorDto);
        }
        catch (Exception ex)
        {
            return Result<ProdutorDto>.Failure($"Erro interno: {ex.Message}");
        }
    }

    /// <inheritdoc />
    public async Task<ProdutorEstatisticasDto> ObterEstatisticasAsync()
    {
        var estatisticas = await _produtorRepository.ObterEstatisticasAsync();
        return _mapper.Map<ProdutorEstatisticasDto>(estatisticas);
    }

    /// <inheritdoc />
    public async Task<IEnumerable<ProdutorDto>> ObterPorFornecedorAsync(int fornecedorId)
    {
        var produtores = await _produtorRepository.ObterPorFornecedorAsync(fornecedorId);
        return _mapper.Map<IEnumerable<ProdutorDto>>(produtores);
    }
}
</ProdutorService.cs>
<Produtor.cs>
using System.Text.Json;
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Produtores.Dominio.Enums;

namespace Agriis.Produtores.Dominio.Entidades;

/// <summary>
/// Entidade que representa um produtor rural no sistema
/// </summary>
public class Produtor : EntidadeRaizAgregada
{
    /// <summary>
    /// Nome completo do produtor
    /// </summary>
    public string Nome { get; private set; } = string.Empty;
    
    /// <summary>
    /// CPF do produtor (pessoa física)
    /// </summary>
    public Cpf? Cpf { get; private set; }
    
    /// <summary>
    /// CNPJ do produtor (pessoa jurídica)
    /// </summary>
    public Cnpj? Cnpj { get; private set; }
    
    /// <summary>
    /// Inscrição estadual do produtor
    /// </summary>
    public string? InscricaoEstadual { get; private set; }
    
    /// <summary>
    /// Tipo de atividade desenvolvida pelo produtor
    /// </summary>
    public string? TipoAtividade { get; private set; }
    
    /// <summary>
    /// Área total de plantio do produtor em hectares
    /// </summary>
    public AreaPlantio AreaPlantio { get; private set; } = new(0);
    
    /// <summary>
    /// Data de autorização do produtor
    /// </summary>
    public DateTime DataAutorizacao { get; private set; }
    
    /// <summary>
    /// Status atual do produtor
    /// </summary>
    public StatusProdutor Status { get; private set; }
    
    /// <summary>
    /// Retornos das APIs de validação (SERPRO) em formato JSON
    /// </summary>
    public JsonDocument? RetornosApiCheckProdutor { get; private set; }
    
    /// <summary>
    /// ID do usuário que autorizou o produtor (quando autorização manual)
    /// </summary>
    public int? UsuarioAutorizacaoId { get; private set; }
    
    /// <summary>
    /// Lista de IDs das culturas associadas ao produtor
    /// </summary>
    public List<int> Culturas { get; private set; } = new();
    
    // Navigation Properties
    /// <summary>
    /// Usuário que autorizou o produtor
    /// </summary>
    public virtual Agriis.Usuarios.Dominio.Entidades.Usuario? UsuarioAutorizacao { get; private set; }
    
    /// <summary>
    /// Relacionamentos com usuários do produtor
    /// </summary>
    public virtual ICollection<UsuarioProdutor> UsuariosProdutores { get; private set; } = new List<UsuarioProdutor>();
    
    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected Produtor() { }
    
    /// <summary>
    /// Construtor para criar um novo produtor
    /// </summary>
    /// <param name="nome">Nome do produtor</param>
    /// <param name="cpf">CPF do produtor (opcional)</param>
    /// <param name="cnpj">CNPJ do produtor (opcional)</param>
    /// <param name="inscricaoEstadual">Inscrição estadual</param>
    /// <param name="tipoAtividade">Tipo de atividade</param>
    /// <param name="areaPlantio">Área de plantio</param>
    public Produtor(
        string nome, 
        Cpf? cpf = null, 
        Cnpj? cnpj = null, 
        string? inscricaoEstadual = null,
        string? tipoAtividade = null, 
        AreaPlantio? areaPlantio = null)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome do produtor é obrigatório", nameof(nome));
            
        if (cpf == null && cnpj == null)
            throw new ArgumentException("CPF ou CNPJ deve ser informado");
            
        Nome = nome.Trim();
        Cpf = cpf;
        Cnpj = cnpj;
        InscricaoEstadual = inscricaoEstadual?.Trim();
        TipoAtividade = tipoAtividade?.Trim();
        AreaPlantio = areaPlantio ?? new AreaPlantio(0);
        Status = StatusProdutor.PendenteValidacaoAutomatica;
        DataAutorizacao = DateTime.UtcNow;
        Culturas = new List<int>();
        UsuariosProdutores = new List<UsuarioProdutor>();
    }
    
    /// <summary>
    /// Atualiza o status do produtor
    /// </summary>
    /// <param name="novoStatus">Novo status</param>
    /// <param name="usuarioAutorizacaoId">ID do usuário que autorizou (opcional)</param>
    public void AtualizarStatus(StatusProdutor novoStatus, int? usuarioAutorizacaoId = null)
    {
        Status = novoStatus;
        
        if (usuarioAutorizacaoId.HasValue)
            UsuarioAutorizacaoId = usuarioAutorizacaoId.Value;
            
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Adiciona uma cultura à lista de culturas do produtor
    /// </summary>
    /// <param name="culturaId">ID da cultura</param>
    public void AdicionarCultura(int culturaId)
    {
        if (culturaId <= 0)
            throw new ArgumentException("ID da cultura deve ser maior que zero", nameof(culturaId));
            
        if (!Culturas.Contains(culturaId))
        {
            Culturas.Add(culturaId);
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Remove uma cultura da lista de culturas do produtor
    /// </summary>
    /// <param name="culturaId">ID da cultura</param>
    public void RemoverCultura(int culturaId)
    {
        if (Culturas.Remove(culturaId))
        {
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Atualiza a área de plantio do produtor
    /// </summary>
    /// <param name="novaArea">Nova área de plantio</param>
    public void AtualizarAreaPlantio(AreaPlantio novaArea)
    {
        AreaPlantio = novaArea ?? throw new ArgumentNullException(nameof(novaArea));
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Armazena os retornos das APIs de validação
    /// </summary>
    /// <param name="retornos">Dados JSON dos retornos das APIs</param>
    public void ArmazenarRetornosApiCheck(JsonDocument retornos)
    {
        RetornosApiCheckProdutor = retornos;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Verifica se o produtor está autorizado
    /// </summary>
    /// <returns>True se autorizado</returns>
    public bool EstaAutorizado()
    {
        return Status == StatusProdutor.AutorizadoAutomaticamente || 
               Status == StatusProdutor.AutorizadoManualmente;
    }
    
    /// <summary>
    /// Verifica se o produtor é pessoa física
    /// </summary>
    /// <returns>True se pessoa física</returns>
    public bool EhPessoaFisica()
    {
        return Cpf != null;
    }
    
    /// <summary>
    /// Verifica se o produtor é pessoa jurídica
    /// </summary>
    /// <returns>True se pessoa jurídica</returns>
    public bool EhPessoaJuridica()
    {
        return Cnpj != null;
    }
    
    /// <summary>
    /// Obtém o documento principal (CPF ou CNPJ)
    /// </summary>
    /// <returns>Documento formatado</returns>
    public string ObterDocumentoPrincipal()
    {
        return EhPessoaFisica() ? Cpf!.ValorFormatado : Cnpj!.ValorFormatado;
    }
}
</Produtor.cs>
<UsuarioProdutor.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Produtores.Dominio.Entidades;

/// <summary>
/// Entidade que representa o relacionamento entre usuário e produtor
/// </summary>
public class UsuarioProdutor : EntidadeBase
{
    /// <summary>
    /// ID do usuário
    /// </summary>
    public int UsuarioId { get; private set; }
    
    /// <summary>
    /// ID do produtor
    /// </summary>
    public int ProdutorId { get; private set; }
    
    /// <summary>
    /// Indica se o usuário é o proprietário principal do produtor
    /// </summary>
    public bool EhProprietario { get; private set; }
    
    /// <summary>
    /// Indica se o relacionamento está ativo
    /// </summary>
    public bool Ativo { get; private set; }
    
    // Navigation Properties
    /// <summary>
    /// Usuário associado
    /// </summary>
    public virtual Agriis.Usuarios.Dominio.Entidades.Usuario Usuario { get; private set; } = null!;
    
    /// <summary>
    /// Produtor associado
    /// </summary>
    public virtual Produtor Produtor { get; private set; } = null!;
    
    /// <summary>
    /// Construtor protegido para Entity Framework
    /// </summary>
    protected UsuarioProdutor() { }
    
    /// <summary>
    /// Construtor para criar um novo relacionamento usuário-produtor
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="produtorId">ID do produtor</param>
    /// <param name="ehProprietario">Se é proprietário principal</param>
    public UsuarioProdutor(int usuarioId, int produtorId, bool ehProprietario = false)
    {
        if (usuarioId <= 0)
            throw new ArgumentException("ID do usuário deve ser maior que zero", nameof(usuarioId));
            
        if (produtorId <= 0)
            throw new ArgumentException("ID do produtor deve ser maior que zero", nameof(produtorId));
            
        UsuarioId = usuarioId;
        ProdutorId = produtorId;
        EhProprietario = ehProprietario;
        Ativo = true;
    }
    
    /// <summary>
    /// Ativa o relacionamento
    /// </summary>
    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Desativa o relacionamento
    /// </summary>
    public void Desativar()
    {
        if (Ativo)
        {
            Ativo = false;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Define como proprietário principal
    /// </summary>
    public void DefinirComoProprietario()
    {
        if (!EhProprietario)
        {
            EhProprietario = true;
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Remove como proprietário principal
    /// </summary>
    public void RemoverComoProprietario()
    {
        if (EhProprietario)
        {
            EhProprietario = false;
            AtualizarDataModificacao();
        }
    }
}
</UsuarioProdutor.cs>
<StatusProdutor.cs>
namespace Agriis.Produtores.Dominio.Enums;

/// <summary>
/// Status do produtor no sistema
/// </summary>
public enum StatusProdutor
{
    /// <summary>
    /// Aguardando validação automática via SERPRO
    /// </summary>
    PendenteValidacaoAutomatica = 0,
    
    /// <summary>
    /// Aguardando validação manual por administrador
    /// </summary>
    PendenteValidacaoManual = 1,
    
    /// <summary>
    /// Pendente de validação de CNPJ
    /// </summary>
    PendenteCnpj = 2,
    
    /// <summary>
    /// Autorizado automaticamente pelo sistema
    /// </summary>
    AutorizadoAutomaticamente = 3,
    
    /// <summary>
    /// Autorizado manualmente por administrador
    /// </summary>
    AutorizadoManualmente = 4,
    
    /// <summary>
    /// Negado pelo sistema ou administrador
    /// </summary>
    Negado = 5
}
</StatusProdutor.cs>
<IProdutorRepository.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Produtores.Dominio.Entidades;
using Agriis.Produtores.Dominio.Enums;

namespace Agriis.Produtores.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de produtores
/// </summary>
public interface IProdutorRepository : IRepository<Produtor>
{
    /// <summary>
    /// Obtém um produtor pelo CPF
    /// </summary>
    /// <param name="cpf">CPF do produtor</param>
    /// <returns>Produtor encontrado ou null</returns>
    Task<Produtor?> ObterPorCpfAsync(string cpf);
    
    /// <summary>
    /// Obtém um produtor pelo CNPJ
    /// </summary>
    /// <param name="cnpj">CNPJ do produtor</param>
    /// <returns>Produtor encontrado ou null</returns>
    Task<Produtor?> ObterPorCnpjAsync(string cnpj);
    
    /// <summary>
    /// Obtém produtores por fornecedor (baseado na área de atuação territorial)
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de produtores</returns>
    Task<IEnumerable<Produtor>> ObterPorFornecedorAsync(int fornecedorId);
    
    /// <summary>
    /// Obtém produtores paginados com filtros
    /// </summary>
    /// <param name="pagina">Número da página</param>
    /// <param name="tamanhoPagina">Tamanho da página</param>
    /// <param name="filtro">Filtro de busca (nome, CPF, CNPJ)</param>
    /// <param name="status">Status do produtor (opcional)</param>
    /// <param name="culturaId">ID da cultura (opcional)</param>
    /// <returns>Resultado paginado</returns>
    Task<PagedResult<Produtor>> ObterPaginadoAsync(
        int pagina, 
        int tamanhoPagina, 
        string? filtro = null,
        StatusProdutor? status = null,
        int? culturaId = null);
    
    /// <summary>
    /// Obtém produtores por status
    /// </summary>
    /// <param name="status">Status do produtor</param>
    /// <returns>Lista de produtores</returns>
    Task<IEnumerable<Produtor>> ObterPorStatusAsync(StatusProdutor status);
    
    /// <summary>
    /// Obtém produtores por cultura
    /// </summary>
    /// <param name="culturaId">ID da cultura</param>
    /// <returns>Lista de produtores</returns>
    Task<IEnumerable<Produtor>> ObterPorCulturaAsync(int culturaId);
    
    /// <summary>
    /// Obtém produtores por área de plantio (faixa)
    /// </summary>
    /// <param name="areaMinima">Área mínima em hectares</param>
    /// <param name="areaMaxima">Área máxima em hectares</param>
    /// <returns>Lista de produtores</returns>
    Task<IEnumerable<Produtor>> ObterPorFaixaAreaAsync(decimal areaMinima, decimal areaMaxima);
    
    /// <summary>
    /// Verifica se existe um produtor com o CPF informado
    /// </summary>
    /// <param name="cpf">CPF a verificar</param>
    /// <param name="produtorIdExcluir">ID do produtor a excluir da verificação (para updates)</param>
    /// <returns>True se existe</returns>
    Task<bool> ExistePorCpfAsync(string cpf, int? produtorIdExcluir = null);
    
    /// <summary>
    /// Verifica se existe um produtor com o CNPJ informado
    /// </summary>
    /// <param name="cnpj">CNPJ a verificar</param>
    /// <param name="produtorIdExcluir">ID do produtor a excluir da verificação (para updates)</param>
    /// <returns>True se existe</returns>
    Task<bool> ExistePorCnpjAsync(string cnpj, int? produtorIdExcluir = null);
    
    /// <summary>
    /// Obtém estatísticas dos produtores
    /// </summary>
    /// <returns>Estatísticas</returns>
    Task<ProdutorEstatisticas> ObterEstatisticasAsync();
}

/// <summary>
/// Estatísticas dos produtores
/// </summary>
public class ProdutorEstatisticas
{
    public int TotalProdutores { get; set; }
    public int ProdutoresAutorizados { get; set; }
    public int ProdutoresPendentes { get; set; }
    public int ProdutoresNegados { get; set; }
    public decimal AreaTotalPlantio { get; set; }
    public decimal AreaMediaPlantio { get; set; }
}
</IProdutorRepository.cs>
<ISerproService.cs>
using System.Text.Json;

namespace Agriis.Produtores.Dominio.Interfaces;

/// <summary>
/// Interface para integração com SERPRO
/// </summary>
public interface ISerproService
{
    /// <summary>
    /// Valida um CPF no SERPRO
    /// </summary>
    /// <param name="cpf">CPF a ser validado</param>
    /// <returns>Resultado da validação</returns>
    Task<SerproValidationResult> ValidarCpfAsync(string cpf);
    
    /// <summary>
    /// Valida um CNPJ no SERPRO
    /// </summary>
    /// <param name="cnpj">CNPJ a ser validado</param>
    /// <returns>Resultado da validação</returns>
    Task<SerproValidationResult> ValidarCnpjAsync(string cnpj);
}

/// <summary>
/// Resultado da validação no SERPRO
/// </summary>
public class SerproValidationResult
{
    /// <summary>
    /// Indica se a validação foi bem-sucedida
    /// </summary>
    public bool Sucesso { get; set; }
    
    /// <summary>
    /// Indica se o documento é válido
    /// </summary>
    public bool DocumentoValido { get; set; }
    
    /// <summary>
    /// Mensagem de erro (se houver)
    /// </summary>
    public string? MensagemErro { get; set; }
    
    /// <summary>
    /// Dados retornados pela API do SERPRO
    /// </summary>
    public JsonDocument? DadosRetorno { get; set; }
    
    /// <summary>
    /// Nome da pessoa/empresa (se disponível)
    /// </summary>
    public string? Nome { get; set; }
    
    /// <summary>
    /// Situação cadastral (se disponível)
    /// </summary>
    public string? SituacaoCadastral { get; set; }
}
</ISerproService.cs>
<IUsuarioProdutorRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Produtores.Dominio.Entidades;

namespace Agriis.Produtores.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de relacionamentos usuário-produtor
/// </summary>
public interface IUsuarioProdutorRepository : IRepository<UsuarioProdutor>
{
    /// <summary>
    /// Obtém relacionamentos por usuário
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="apenasAtivos">Se deve retornar apenas relacionamentos ativos</param>
    /// <returns>Lista de relacionamentos</returns>
    Task<IEnumerable<UsuarioProdutor>> ObterPorUsuarioAsync(int usuarioId, bool apenasAtivos = true);
    
    /// <summary>
    /// Obtém relacionamentos por produtor
    /// </summary>
    /// <param name="produtorId">ID do produtor</param>
    /// <param name="apenasAtivos">Se deve retornar apenas relacionamentos ativos</param>
    /// <returns>Lista de relacionamentos</returns>
    Task<IEnumerable<UsuarioProdutor>> ObterPorProdutorAsync(int produtorId, bool apenasAtivos = true);
    
    /// <summary>
    /// Obtém um relacionamento específico
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="produtorId">ID do produtor</param>
    /// <returns>Relacionamento encontrado ou null</returns>
    Task<UsuarioProdutor?> ObterPorUsuarioEProdutorAsync(int usuarioId, int produtorId);
    
    /// <summary>
    /// Obtém o proprietário principal de um produtor
    /// </summary>
    /// <param name="produtorId">ID do produtor</param>
    /// <returns>Relacionamento do proprietário ou null</returns>
    Task<UsuarioProdutor?> ObterProprietarioPrincipalAsync(int produtorId);
    
    /// <summary>
    /// Verifica se um usuário tem acesso a um produtor
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="produtorId">ID do produtor</param>
    /// <returns>True se tem acesso</returns>
    Task<bool> UsuarioTemAcessoAoProdutorAsync(int usuarioId, int produtorId);
    
    /// <summary>
    /// Obtém todos os produtores que um usuário tem acesso
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <returns>Lista de produtores</returns>
    Task<IEnumerable<Produtor>> ObterProdutoresDoUsuarioAsync(int usuarioId);
}
</IUsuarioProdutorRepository.cs>
<ProdutorDomainService.cs>
using Agriis.Produtores.Dominio.Entidades;
using Agriis.Produtores.Dominio.Enums;
using Agriis.Produtores.Dominio.Interfaces;

namespace Agriis.Produtores.Dominio.Servicos;

/// <summary>
/// Serviço de domínio para regras de negócio dos produtores
/// </summary>
public class ProdutorDomainService
{
    private readonly ISerproService _serproService;
    
    public ProdutorDomainService(ISerproService serproService)
    {
        _serproService = serproService ?? throw new ArgumentNullException(nameof(serproService));
    }
    
    /// <summary>
    /// Valida um produtor automaticamente via SERPRO
    /// </summary>
    /// <param name="produtor">Produtor a ser validado</param>
    /// <returns>Resultado da validação</returns>
    public async Task<ValidacaoAutomaticaResult> ValidarAutomaticamenteAsync(Produtor produtor)
    {
        if (produtor == null)
            throw new ArgumentNullException(nameof(produtor));
            
        try
        {
            SerproValidationResult resultado;
            
            if (produtor.EhPessoaFisica())
            {
                resultado = await _serproService.ValidarCpfAsync(produtor.Cpf!.Valor);
            }
            else
            {
                resultado = await _serproService.ValidarCnpjAsync(produtor.Cnpj!.Valor);
            }
            
            // Armazena o retorno da API
            if (resultado.DadosRetorno != null)
            {
                produtor.ArmazenarRetornosApiCheck(resultado.DadosRetorno);
            }
            
            // Define o status baseado no resultado
            if (resultado.Sucesso && resultado.DocumentoValido)
            {
                produtor.AtualizarStatus(StatusProdutor.AutorizadoAutomaticamente);
                return new ValidacaoAutomaticaResult
                {
                    Sucesso = true,
                    StatusResultante = StatusProdutor.AutorizadoAutomaticamente,
                    Mensagem = "Produtor autorizado automaticamente"
                };
            }
            else if (resultado.Sucesso && !resultado.DocumentoValido)
            {
                produtor.AtualizarStatus(StatusProdutor.Negado);
                return new ValidacaoAutomaticaResult
                {
                    Sucesso = false,
                    StatusResultante = StatusProdutor.Negado,
                    Mensagem = "Documento inválido no SERPRO"
                };
            }
            else
            {
                // Erro na consulta - deixa para validação manual
                produtor.AtualizarStatus(StatusProdutor.PendenteValidacaoManual);
                return new ValidacaoAutomaticaResult
                {
                    Sucesso = false,
                    StatusResultante = StatusProdutor.PendenteValidacaoManual,
                    Mensagem = "Erro na validação automática. Será necessária validação manual."
                };
            }
        }
        catch (Exception ex)
        {
            // Em caso de erro, deixa para validação manual
            produtor.AtualizarStatus(StatusProdutor.PendenteValidacaoManual);
            return new ValidacaoAutomaticaResult
            {
                Sucesso = false,
                StatusResultante = StatusProdutor.PendenteValidacaoManual,
                Mensagem = $"Erro na validação automática: {ex.Message}"
            };
        }
    }
    
    /// <summary>
    /// Verifica se um produtor pode ser editado
    /// </summary>
    /// <param name="produtor">Produtor a verificar</param>
    /// <returns>True se pode ser editado</returns>
    public bool PodeSerEditado(Produtor produtor)
    {
        if (produtor == null)
            return false;
            
        // Produtores negados não podem ser editados
        return produtor.Status != StatusProdutor.Negado;
    }
    
    /// <summary>
    /// Verifica se um produtor pode fazer pedidos
    /// </summary>
    /// <param name="produtor">Produtor a verificar</param>
    /// <returns>True se pode fazer pedidos</returns>
    public bool PodeFazerPedidos(Produtor produtor)
    {
        if (produtor == null)
            return false;
            
        return produtor.EstaAutorizado();
    }
    
    /// <summary>
    /// Calcula a área total de plantio baseada nas propriedades
    /// </summary>
    /// <param name="produtor">Produtor</param>
    /// <param name="areasPropriedades">Áreas das propriedades</param>
    /// <returns>Área total calculada</returns>
    public decimal CalcularAreaTotalPlantio(Produtor produtor, IEnumerable<decimal> areasPropriedades)
    {
        if (produtor == null || areasPropriedades == null)
            return 0;
            
        var areaTotal = areasPropriedades.Sum();
        return Math.Round(areaTotal, 4);
    }
}

/// <summary>
/// Resultado da validação automática
/// </summary>
public class ValidacaoAutomaticaResult
{
    public bool Sucesso { get; set; }
    public StatusProdutor StatusResultante { get; set; }
    public string Mensagem { get; set; } = string.Empty;
}
</ProdutorDomainService.cs>
<ProdutorConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System.Text.Json;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Produtores.Dominio.Entidades;
using Agriis.Produtores.Dominio.Enums;

namespace Agriis.Produtores.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Produtor
/// </summary>
public class ProdutorConfiguration : IEntityTypeConfiguration<Produtor>
{
    public void Configure(EntityTypeBuilder<Produtor> builder)
    {
        // Tabela
        builder.ToTable("Produtor");

        // Chave primária
        builder.HasKey(p => p.Id);

        // Propriedades básicas
        builder.Property(p => p.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(p => p.Nome)
            .HasColumnName("Nome")
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(p => p.InscricaoEstadual)
            .HasColumnName("InscricaoEstadual")
            .HasMaxLength(50);

        builder.Property(p => p.TipoAtividade)
            .HasColumnName("TipoAtividade")
            .HasMaxLength(100);

        builder.Property(p => p.DataAutorizacao)
            .HasColumnName("DataAutorizacao")
            .IsRequired();

        builder.Property(p => p.Status)
            .HasColumnName("Status")
            .HasConversion<int>()
            .IsRequired();

        builder.Property(p => p.UsuarioAutorizacaoId)
            .HasColumnName("UsuarioAutorizacaoId");

        builder.Property(p => p.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();

        builder.Property(p => p.DataAtualizacao)
            .HasColumnName("DataAtualizacao");

        // Objetos de valor - configuração simplificada
        builder.Property(p => p.Cpf)
            .HasColumnName("Cpf")
            .HasMaxLength(11)
            .HasConversion(
                v => v != null ? v.Valor : null,
                v => v != null ? new Cpf(v) : null);

        builder.Property(p => p.Cnpj)
            .HasColumnName("Cnpj")
            .HasMaxLength(14)
            .HasConversion(
                v => v != null ? v.Valor : null,
                v => v != null ? new Cnpj(v) : null);

        builder.Property(p => p.AreaPlantio)
            .HasColumnName("AreaPlantio")
            .HasColumnType("decimal(18,4)")
            .IsRequired()
            .HasConversion(
                v => v.Valor,
                v => new AreaPlantio(v));

        // Propriedades JSON
        builder.Property(p => p.RetornosApiCheckProdutor)
            .HasColumnName("RetornosApiCheckProdutor")
            .HasColumnType("jsonb");

        builder.Property(p => p.Culturas)
            .HasColumnName("Culturas")
            .HasColumnType("jsonb")
            .HasConversion(
                v => JsonSerializer.Serialize(v, (JsonSerializerOptions?)null),
                v => JsonSerializer.Deserialize<List<int>>(v, (JsonSerializerOptions?)null) ?? new List<int>());

        // Relacionamentos
        builder.HasOne(p => p.UsuarioAutorizacao)
            .WithMany()
            .HasForeignKey(p => p.UsuarioAutorizacaoId)
            .OnDelete(DeleteBehavior.SetNull);

        builder.HasMany(p => p.UsuariosProdutores)
            .WithOne(up => up.Produtor)
            .HasForeignKey(up => up.ProdutorId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex("Cpf")
            .HasDatabaseName("IX_Produtor_Cpf")
            .IsUnique()
            .HasFilter("\"Cpf\" IS NOT NULL");

        builder.HasIndex("Cnpj")
            .HasDatabaseName("IX_Produtor_Cnpj")
            .IsUnique()
            .HasFilter("\"Cnpj\" IS NOT NULL");

        builder.HasIndex(p => p.Status)
            .HasDatabaseName("IX_Produtor_Status");

        builder.HasIndex(p => p.DataCriacao)
            .HasDatabaseName("IX_Produtor_DataCriacao");

        builder.HasIndex("AreaPlantio")
            .HasDatabaseName("IX_Produtor_AreaPlantio");

        // Configurações adicionais
        builder.Navigation(p => p.UsuariosProdutores)
            .EnableLazyLoading(false);
    }
}
</ProdutorConfiguration.cs>
<UsuarioProdutorConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Produtores.Dominio.Entidades;

namespace Agriis.Produtores.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade UsuarioProdutor
/// </summary>
public class UsuarioProdutorConfiguration : IEntityTypeConfiguration<UsuarioProdutor>
{
    public void Configure(EntityTypeBuilder<UsuarioProdutor> builder)
    {
        // Tabela
        builder.ToTable("UsuarioProdutor");

        // Chave primária
        builder.HasKey(up => up.Id);

        // Propriedades
        builder.Property(up => up.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(up => up.UsuarioId)
            .HasColumnName("UsuarioId")
            .IsRequired();

        builder.Property(up => up.ProdutorId)
            .HasColumnName("ProdutorId")
            .IsRequired();

        builder.Property(up => up.EhProprietario)
            .HasColumnName("EhProprietario")
            .IsRequired();

        builder.Property(up => up.Ativo)
            .HasColumnName("Ativo")
            .IsRequired();

        builder.Property(up => up.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();

        builder.Property(up => up.DataAtualizacao)
            .HasColumnName("DataAtualizacao");

        // Relacionamentos
        builder.HasOne(up => up.Usuario)
            .WithMany()
            .HasForeignKey(up => up.UsuarioId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasOne(up => up.Produtor)
            .WithMany(p => p.UsuariosProdutores)
            .HasForeignKey(up => up.ProdutorId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(up => up.UsuarioId)
            .HasDatabaseName("IX_UsuarioProdutor_UsuarioId");

        builder.HasIndex(up => up.ProdutorId)
            .HasDatabaseName("IX_UsuarioProdutor_ProdutorId");

        builder.HasIndex(up => new { up.UsuarioId, up.ProdutorId })
            .HasDatabaseName("IX_UsuarioProdutor_UsuarioId_ProdutorId")
            .IsUnique();

        builder.HasIndex(up => up.EhProprietario)
            .HasDatabaseName("IX_UsuarioProdutor_EhProprietario");

        builder.HasIndex(up => up.Ativo)
            .HasDatabaseName("IX_UsuarioProdutor_Ativo");

        // Configurações adicionais
        builder.Navigation(up => up.Usuario)
            .EnableLazyLoading(false);

        builder.Navigation(up => up.Produtor)
            .EnableLazyLoading(false);
    }
}
</UsuarioProdutorConfiguration.cs>
<ProdutorRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Produtores.Dominio.Entidades;
using Agriis.Produtores.Dominio.Enums;
using Agriis.Produtores.Dominio.Interfaces;

namespace Agriis.Produtores.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de produtores
/// </summary>
public class ProdutorRepository : RepositoryBase<Produtor, DbContext>, IProdutorRepository
{
    public ProdutorRepository(DbContext context) : base(context)
    {
    }

    /// <inheritdoc />
    public async Task<Produtor?> ObterPorCpfAsync(string cpf)
    {
        if (string.IsNullOrWhiteSpace(cpf))
            return null;

        var cpfLimpo = cpf.Replace(".", "").Replace("-", "");
        
        return await Context.Set<Produtor>()
            .Include(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .FirstOrDefaultAsync(p => p.Cpf != null && p.Cpf.Valor == cpfLimpo);
    }

    /// <inheritdoc />
    public async Task<Produtor?> ObterPorCnpjAsync(string cnpj)
    {
        if (string.IsNullOrWhiteSpace(cnpj))
            return null;

        var cnpjLimpo = cnpj.Replace(".", "").Replace("/", "").Replace("-", "");
        
        return await Context.Set<Produtor>()
            .Include(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .FirstOrDefaultAsync(p => p.Cnpj != null && p.Cnpj.Valor == cnpjLimpo);
    }

    /// <inheritdoc />
    public async Task<IEnumerable<Produtor>> ObterPorFornecedorAsync(int fornecedorId)
    {
        // Esta implementação seria mais complexa, envolvendo consultas de território
        // Por enquanto, retorna todos os produtores autorizados
        return await Context.Set<Produtor>()
            .Include(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .Where(p => p.Status == StatusProdutor.AutorizadoAutomaticamente || 
                       p.Status == StatusProdutor.AutorizadoManualmente)
            .ToListAsync();
    }

    /// <inheritdoc />
    public async Task<PagedResult<Produtor>> ObterPaginadoAsync(
        int pagina, 
        int tamanhoPagina, 
        string? filtro = null,
        StatusProdutor? status = null,
        int? culturaId = null)
    {
        var query = Context.Set<Produtor>()
            .Include(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .AsQueryable();

        // Aplicar filtros
        if (!string.IsNullOrWhiteSpace(filtro))
        {
            var filtroLimpo = filtro.Trim().ToLower();
            query = query.Where(p => 
                p.Nome.ToLower().Contains(filtroLimpo) ||
                (p.Cpf != null && p.Cpf.Valor.Contains(filtroLimpo)) ||
                (p.Cnpj != null && p.Cnpj.Valor.Contains(filtroLimpo)));
        }

        if (status.HasValue)
        {
            query = query.Where(p => p.Status == status.Value);
        }

        if (culturaId.HasValue)
        {
            query = query.Where(p => p.Culturas.Contains(culturaId.Value));
        }

        // Ordenação
        query = query.OrderByDescending(p => p.DataCriacao);

        // Paginação
        var totalItems = await query.CountAsync();
        var items = await query
            .Skip((pagina - 1) * tamanhoPagina)
            .Take(tamanhoPagina)
            .ToListAsync();

        return new PagedResult<Produtor>(items, pagina, tamanhoPagina, totalItems);
    }

    /// <inheritdoc />
    public async Task<IEnumerable<Produtor>> ObterPorStatusAsync(StatusProdutor status)
    {
        return await Context.Set<Produtor>()
            .Include(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .Where(p => p.Status == status)
            .OrderByDescending(p => p.DataCriacao)
            .ToListAsync();
    }

    /// <inheritdoc />
    public async Task<IEnumerable<Produtor>> ObterPorCulturaAsync(int culturaId)
    {
        return await Context.Set<Produtor>()
            .Include(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .Where(p => p.Culturas.Contains(culturaId))
            .OrderBy(p => p.Nome)
            .ToListAsync();
    }

    /// <inheritdoc />
    public async Task<IEnumerable<Produtor>> ObterPorFaixaAreaAsync(decimal areaMinima, decimal areaMaxima)
    {
        return await Context.Set<Produtor>()
            .Include(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .Where(p => p.AreaPlantio.Valor >= areaMinima && p.AreaPlantio.Valor <= areaMaxima)
            .OrderByDescending(p => p.AreaPlantio.Valor)
            .ToListAsync();
    }

    /// <inheritdoc />
    public async Task<bool> ExistePorCpfAsync(string cpf, int? produtorIdExcluir = null)
    {
        if (string.IsNullOrWhiteSpace(cpf))
            return false;

        var cpfLimpo = cpf.Replace(".", "").Replace("-", "");
        
        var query = Context.Set<Produtor>()
            .Where(p => p.Cpf != null && p.Cpf.Valor == cpfLimpo);

        if (produtorIdExcluir.HasValue)
        {
            query = query.Where(p => p.Id != produtorIdExcluir.Value);
        }

        return await query.AnyAsync();
    }

    /// <inheritdoc />
    public async Task<bool> ExistePorCnpjAsync(string cnpj, int? produtorIdExcluir = null)
    {
        if (string.IsNullOrWhiteSpace(cnpj))
            return false;

        var cnpjLimpo = cnpj.Replace(".", "").Replace("/", "").Replace("-", "");
        
        var query = Context.Set<Produtor>()
            .Where(p => p.Cnpj != null && p.Cnpj.Valor == cnpjLimpo);

        if (produtorIdExcluir.HasValue)
        {
            query = query.Where(p => p.Id != produtorIdExcluir.Value);
        }

        return await query.AnyAsync();
    }

    /// <inheritdoc />
    public async Task<ProdutorEstatisticas> ObterEstatisticasAsync()
    {
        var produtores = await Context.Set<Produtor>().ToListAsync();

        var totalProdutores = produtores.Count;
        var produtoresAutorizados = produtores.Count(p => 
            p.Status == StatusProdutor.AutorizadoAutomaticamente || 
            p.Status == StatusProdutor.AutorizadoManualmente);
        var produtoresPendentes = produtores.Count(p => 
            p.Status == StatusProdutor.PendenteValidacaoAutomatica || 
            p.Status == StatusProdutor.PendenteValidacaoManual ||
            p.Status == StatusProdutor.PendenteCnpj);
        var produtoresNegados = produtores.Count(p => p.Status == StatusProdutor.Negado);

        var areaTotalPlantio = produtores.Sum(p => p.AreaPlantio.Valor);
        var areaMediaPlantio = totalProdutores > 0 ? areaTotalPlantio / totalProdutores : 0;

        return new ProdutorEstatisticas
        {
            TotalProdutores = totalProdutores,
            ProdutoresAutorizados = produtoresAutorizados,
            ProdutoresPendentes = produtoresPendentes,
            ProdutoresNegados = produtoresNegados,
            AreaTotalPlantio = areaTotalPlantio,
            AreaMediaPlantio = areaMediaPlantio
        };
    }

    /// <inheritdoc />
    public override async Task<Produtor?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await Context.Set<Produtor>()
            .Include(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .FirstOrDefaultAsync(p => p.Id == id, cancellationToken);
    }

    /// <inheritdoc />
    public override async Task<IEnumerable<Produtor>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await Context.Set<Produtor>()
            .Include(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }
}
</ProdutorRepository.cs>
<UsuarioProdutorRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Produtores.Dominio.Entidades;
using Agriis.Produtores.Dominio.Interfaces;

namespace Agriis.Produtores.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de relacionamentos usuário-produtor
/// </summary>
public class UsuarioProdutorRepository : RepositoryBase<UsuarioProdutor, DbContext>, IUsuarioProdutorRepository
{
    public UsuarioProdutorRepository(DbContext context) : base(context)
    {
    }

    /// <inheritdoc />
    public async Task<IEnumerable<UsuarioProdutor>> ObterPorUsuarioAsync(int usuarioId, bool apenasAtivos = true)
    {
        var query = Context.Set<UsuarioProdutor>()
            .Include(up => up.Usuario)
            .Include(up => up.Produtor)
            .Where(up => up.UsuarioId == usuarioId);

        if (apenasAtivos)
        {
            query = query.Where(up => up.Ativo);
        }

        return await query
            .OrderByDescending(up => up.EhProprietario)
            .ThenBy(up => up.Produtor.Nome)
            .ToListAsync();
    }

    /// <inheritdoc />
    public async Task<IEnumerable<UsuarioProdutor>> ObterPorProdutorAsync(int produtorId, bool apenasAtivos = true)
    {
        var query = Context.Set<UsuarioProdutor>()
            .Include(up => up.Usuario)
            .Include(up => up.Produtor)
            .Where(up => up.ProdutorId == produtorId);

        if (apenasAtivos)
        {
            query = query.Where(up => up.Ativo);
        }

        return await query
            .OrderByDescending(up => up.EhProprietario)
            .ThenBy(up => up.Usuario.Nome)
            .ToListAsync();
    }

    /// <inheritdoc />
    public async Task<UsuarioProdutor?> ObterPorUsuarioEProdutorAsync(int usuarioId, int produtorId)
    {
        return await Context.Set<UsuarioProdutor>()
            .Include(up => up.Usuario)
            .Include(up => up.Produtor)
            .FirstOrDefaultAsync(up => up.UsuarioId == usuarioId && up.ProdutorId == produtorId);
    }

    /// <inheritdoc />
    public async Task<UsuarioProdutor?> ObterProprietarioPrincipalAsync(int produtorId)
    {
        return await Context.Set<UsuarioProdutor>()
            .Include(up => up.Usuario)
            .Include(up => up.Produtor)
            .FirstOrDefaultAsync(up => up.ProdutorId == produtorId && up.EhProprietario && up.Ativo);
    }

    /// <inheritdoc />
    public async Task<bool> UsuarioTemAcessoAoProdutorAsync(int usuarioId, int produtorId)
    {
        return await Context.Set<UsuarioProdutor>()
            .AnyAsync(up => up.UsuarioId == usuarioId && up.ProdutorId == produtorId && up.Ativo);
    }

    /// <inheritdoc />
    public async Task<IEnumerable<Produtor>> ObterProdutoresDoUsuarioAsync(int usuarioId)
    {
        return await Context.Set<UsuarioProdutor>()
            .Include(up => up.Produtor)
            .ThenInclude(p => p.UsuariosProdutores)
            .ThenInclude(up => up.Usuario)
            .Where(up => up.UsuarioId == usuarioId && up.Ativo)
            .Select(up => up.Produtor)
            .OrderBy(p => p.Nome)
            .ToListAsync();
    }

    /// <inheritdoc />
    public override async Task<UsuarioProdutor?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await Context.Set<UsuarioProdutor>()
            .Include(up => up.Usuario)
            .Include(up => up.Produtor)
            .FirstOrDefaultAsync(up => up.Id == id, cancellationToken);
    }

    /// <inheritdoc />
    public override async Task<IEnumerable<UsuarioProdutor>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await Context.Set<UsuarioProdutor>()
            .Include(up => up.Usuario)
            .Include(up => up.Produtor)
            .OrderBy(up => up.Usuario.Nome)
            .ThenBy(up => up.Produtor.Nome)
            .ToListAsync(cancellationToken);
    }
}
</UsuarioProdutorRepository.cs>
<SerproService.cs>
using System.Text.Json;
using Microsoft.Extensions.Logging;
using Agriis.Produtores.Dominio.Interfaces;

namespace Agriis.Produtores.Infraestrutura.Servicos;

/// <summary>
/// Implementação do serviço de integração com SERPRO
/// </summary>
public class SerproService : ISerproService
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<SerproService> _logger;

    public SerproService(HttpClient httpClient, ILogger<SerproService> logger)
    {
        _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <inheritdoc />
    public async Task<SerproValidationResult> ValidarCpfAsync(string cpf)
    {
        try
        {
            _logger.LogInformation("Iniciando validação de CPF no SERPRO: {Cpf}", cpf);

            // Por enquanto, implementação simulada
            // Em produção, seria feita a chamada real para a API do SERPRO
            await Task.Delay(1000); // Simula latência da API

            // Simulação de validação baseada em regras simples
            var cpfLimpo = cpf.Replace(".", "").Replace("-", "");
            
            // CPFs de teste que sempre passam
            var cpfsValidos = new[] { "11111111111", "22222222222", "33333333333" };
            var cpfsInvalidos = new[] { "00000000000", "99999999999" };

            if (cpfsInvalidos.Contains(cpfLimpo))
            {
                return new SerproValidationResult
                {
                    Sucesso = true,
                    DocumentoValido = false,
                    MensagemErro = "CPF inválido no SERPRO",
                    DadosRetorno = JsonDocument.Parse(JsonSerializer.Serialize(new { cpf = cpfLimpo, situacao = "INATIVO" }))
                };
            }

            if (cpfsValidos.Contains(cpfLimpo) || ValidarCpfAlgoritmo(cpfLimpo))
            {
                return new SerproValidationResult
                {
                    Sucesso = true,
                    DocumentoValido = true,
                    Nome = "Nome do Produtor Simulado",
                    SituacaoCadastral = "ATIVO",
                    DadosRetorno = JsonDocument.Parse(JsonSerializer.Serialize(new 
                    { 
                        cpf = cpfLimpo, 
                        nome = "Nome do Produtor Simulado",
                        situacao = "ATIVO"
                    }))
                };
            }

            return new SerproValidationResult
            {
                Sucesso = true,
                DocumentoValido = false,
                MensagemErro = "CPF não encontrado no SERPRO",
                DadosRetorno = JsonDocument.Parse(JsonSerializer.Serialize(new { cpf = cpfLimpo, situacao = "NAO_ENCONTRADO" }))
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao validar CPF no SERPRO: {Cpf}", cpf);
            
            return new SerproValidationResult
            {
                Sucesso = false,
                DocumentoValido = false,
                MensagemErro = $"Erro na consulta SERPRO: {ex.Message}"
            };
        }
    }

    /// <inheritdoc />
    public async Task<SerproValidationResult> ValidarCnpjAsync(string cnpj)
    {
        try
        {
            _logger.LogInformation("Iniciando validação de CNPJ no SERPRO: {Cnpj}", cnpj);

            // Por enquanto, implementação simulada
            // Em produção, seria feita a chamada real para a API do SERPRO
            await Task.Delay(1000); // Simula latência da API

            // Simulação de validação baseada em regras simples
            var cnpjLimpo = cnpj.Replace(".", "").Replace("/", "").Replace("-", "");
            
            // CNPJs de teste que sempre passam
            var cnpjsValidos = new[] { "11111111000111", "22222222000122", "33333333000133" };
            var cnpjsInvalidos = new[] { "00000000000000", "99999999000199" };

            if (cnpjsInvalidos.Contains(cnpjLimpo))
            {
                return new SerproValidationResult
                {
                    Sucesso = true,
                    DocumentoValido = false,
                    MensagemErro = "CNPJ inválido no SERPRO",
                    DadosRetorno = JsonDocument.Parse(JsonSerializer.Serialize(new { cnpj = cnpjLimpo, situacao = "INATIVO" }))
                };
            }

            if (cnpjsValidos.Contains(cnpjLimpo) || ValidarCnpjAlgoritmo(cnpjLimpo))
            {
                return new SerproValidationResult
                {
                    Sucesso = true,
                    DocumentoValido = true,
                    Nome = "Empresa Produtora Simulada LTDA",
                    SituacaoCadastral = "ATIVO",
                    DadosRetorno = JsonDocument.Parse(JsonSerializer.Serialize(new 
                    { 
                        cnpj = cnpjLimpo, 
                        razao_social = "Empresa Produtora Simulada LTDA",
                        situacao = "ATIVO"
                    }))
                };
            }

            return new SerproValidationResult
            {
                Sucesso = true,
                DocumentoValido = false,
                MensagemErro = "CNPJ não encontrado no SERPRO",
                DadosRetorno = JsonDocument.Parse(JsonSerializer.Serialize(new { cnpj = cnpjLimpo, situacao = "NAO_ENCONTRADO" }))
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao validar CNPJ no SERPRO: {Cnpj}", cnpj);
            
            return new SerproValidationResult
            {
                Sucesso = false,
                DocumentoValido = false,
                MensagemErro = $"Erro na consulta SERPRO: {ex.Message}"
            };
        }
    }

    /// <summary>
    /// Valida CPF usando o algoritmo oficial (simplificado)
    /// </summary>
    private static bool ValidarCpfAlgoritmo(string cpf)
    {
        if (cpf.Length != 11 || cpf.All(c => c == cpf[0]))
            return false;

        // Implementação simplificada - em produção usaria a validação completa
        return true;
    }

    /// <summary>
    /// Valida CNPJ usando o algoritmo oficial (simplificado)
    /// </summary>
    private static bool ValidarCnpjAlgoritmo(string cnpj)
    {
        if (cnpj.Length != 14 || cnpj.All(c => c == cnpj[0]))
            return false;

        // Implementação simplificada - em produção usaria a validação completa
        return true;
    }
}
</SerproService.cs>
<CategoriaDto.cs>
using Agriis.Produtos.Dominio.Enums;

namespace Agriis.Produtos.Aplicacao.DTOs;

/// <summary>
/// DTO para exibição de categoria
/// </summary>
public class CategoriaDto
{
    public int Id { get; set; }
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public CategoriaProduto Tipo { get; set; }
    public bool Ativo { get; set; }
    public int? CategoriaPaiId { get; set; }
    public string? CategoriaPaiNome { get; set; }
    public int Ordem { get; set; }
    public List<CategoriaDto> SubCategorias { get; set; } = new();
    public int QuantidadeProdutos { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criação de categoria
/// </summary>
public class CriarCategoriaDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public CategoriaProduto Tipo { get; set; }
    public int? CategoriaPaiId { get; set; }
    public int Ordem { get; set; } = 0;
}

/// <summary>
/// DTO para atualização de categoria
/// </summary>
public class AtualizarCategoriaDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public CategoriaProduto Tipo { get; set; }
    public int? CategoriaPaiId { get; set; }
    public int Ordem { get; set; }
}

/// <summary>
/// DTO resumido para listagens
/// </summary>
public class CategoriaResumoDto
{
    public int Id { get; set; }
    public string Nome { get; set; } = string.Empty;
    public CategoriaProduto Tipo { get; set; }
    public bool Ativo { get; set; }
    public int? CategoriaPaiId { get; set; }
    public int Ordem { get; set; }
    public bool TemSubCategorias { get; set; }
    public int QuantidadeProdutos { get; set; }
}
</CategoriaDto.cs>
<ProdutoDto.cs>
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Produtos.Dominio.Enums;

namespace Agriis.Produtos.Aplicacao.DTOs;

/// <summary>
/// DTO para exibição de produto
/// </summary>
public class ProdutoDto
{
    public int Id { get; set; }
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public string Codigo { get; set; } = string.Empty;
    public string? Marca { get; set; }
    public TipoProduto Tipo { get; set; }
    public StatusProduto Status { get; set; }
    public TipoUnidade Unidade { get; set; }
    public TipoCalculoPeso TipoCalculoPeso { get; set; }
    public bool ProdutoRestrito { get; set; }
    public string? ObservacoesRestricao { get; set; }
    public int CategoriaId { get; set; }
    public string? CategoriaNome { get; set; }
    public int FornecedorId { get; set; }
    public string? FornecedorNome { get; set; }
    public int? ProdutoPaiId { get; set; }
    public string? ProdutoPaiNome { get; set; }
    public DimensoesProdutoDto Dimensoes { get; set; } = null!;
    public List<int> CulturasIds { get; set; } = new();
    public List<string> CulturasNomes { get; set; } = new();
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criação de produto
/// </summary>
public class CriarProdutoDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public string Codigo { get; set; } = string.Empty;
    public string? Marca { get; set; }
    public TipoProduto Tipo { get; set; }
    public TipoUnidade Unidade { get; set; }
    public TipoCalculoPeso TipoCalculoPeso { get; set; } = TipoCalculoPeso.PesoNominal;
    public bool ProdutoRestrito { get; set; }
    public string? ObservacoesRestricao { get; set; }
    public int CategoriaId { get; set; }
    public int FornecedorId { get; set; }
    public int? ProdutoPaiId { get; set; }
    public CriarDimensoesProdutoDto Dimensoes { get; set; } = null!;
    public List<int> CulturasIds { get; set; } = new();
}

/// <summary>
/// DTO para atualização de produto
/// </summary>
public class AtualizarProdutoDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Descricao { get; set; }
    public string Codigo { get; set; } = string.Empty;
    public string? Marca { get; set; }
    public TipoUnidade Unidade { get; set; }
    public TipoCalculoPeso TipoCalculoPeso { get; set; }
    public bool ProdutoRestrito { get; set; }
    public string? ObservacoesRestricao { get; set; }
    public int CategoriaId { get; set; }
    public AtualizarDimensoesProdutoDto Dimensoes { get; set; } = null!;
    public List<int> CulturasIds { get; set; } = new();
}

/// <summary>
/// DTO para dimensões do produto
/// </summary>
public class DimensoesProdutoDto
{
    public decimal Altura { get; set; }
    public decimal Largura { get; set; }
    public decimal Comprimento { get; set; }
    public decimal PesoNominal { get; set; }
    public decimal? Densidade { get; set; }
    public decimal Volume { get; set; }
    public decimal? PesoCubado { get; set; }
    public decimal PesoParaFrete { get; set; }
}

/// <summary>
/// DTO para criação de dimensões do produto
/// </summary>
public class CriarDimensoesProdutoDto
{
    public decimal Altura { get; set; }
    public decimal Largura { get; set; }
    public decimal Comprimento { get; set; }
    public decimal PesoNominal { get; set; }
    public decimal? Densidade { get; set; }
}

/// <summary>
/// DTO para atualização de dimensões do produto
/// </summary>
public class AtualizarDimensoesProdutoDto
{
    public decimal Altura { get; set; }
    public decimal Largura { get; set; }
    public decimal Comprimento { get; set; }
    public decimal PesoNominal { get; set; }
    public decimal? Densidade { get; set; }
}

/// <summary>
/// DTO resumido para listagens
/// </summary>
public class ProdutoResumoDto
{
    public int Id { get; set; }
    public string Nome { get; set; } = string.Empty;
    public string Codigo { get; set; } = string.Empty;
    public string? Marca { get; set; }
    public TipoProduto Tipo { get; set; }
    public StatusProduto Status { get; set; }
    public string? CategoriaNome { get; set; }
    public string? FornecedorNome { get; set; }
    public bool ProdutoRestrito { get; set; }
}
</ProdutoDto.cs>
<ICategoriaService.cs>
using Agriis.Produtos.Aplicacao.DTOs;
using Agriis.Produtos.Dominio.Enums;

namespace Agriis.Produtos.Aplicacao.Interfaces;

/// <summary>
/// Interface do serviço de categorias
/// </summary>
public interface ICategoriaService
{
    /// <summary>
    /// Obtém uma categoria por ID
    /// </summary>
    Task<CategoriaDto?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém uma categoria por nome
    /// </summary>
    Task<CategoriaDto?> ObterPorNomeAsync(string nome, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém todas as categorias
    /// </summary>
    Task<IEnumerable<CategoriaDto>> ObterTodosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias ativas
    /// </summary>
    Task<IEnumerable<CategoriaDto>> ObterAtivasAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias por tipo
    /// </summary>
    Task<IEnumerable<CategoriaDto>> ObterPorTipoAsync(CategoriaProduto tipo, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias raiz (sem categoria pai)
    /// </summary>
    Task<IEnumerable<CategoriaDto>> ObterCategoriasRaizAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém subcategorias de uma categoria pai
    /// </summary>
    Task<IEnumerable<CategoriaDto>> ObterSubCategoriasAsync(int categoriaPaiId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias com hierarquia completa
    /// </summary>
    Task<IEnumerable<CategoriaDto>> ObterComHierarquiaAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias ordenadas
    /// </summary>
    Task<IEnumerable<CategoriaDto>> ObterOrdenadasAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Cria uma nova categoria
    /// </summary>
    Task<CategoriaDto> CriarAsync(CriarCategoriaDto dto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Atualiza uma categoria existente
    /// </summary>
    Task<CategoriaDto> AtualizarAsync(int id, AtualizarCategoriaDto dto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Ativa uma categoria
    /// </summary>
    Task AtivarAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Desativa uma categoria
    /// </summary>
    Task DesativarAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove uma categoria
    /// </summary>
    Task RemoverAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe categoria com o nome especificado
    /// </summary>
    Task<bool> ExisteComNomeAsync(string nome, int? idExcluir = null, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se a categoria pode ser removida
    /// </summary>
    Task<bool> PodeRemoverAsync(int id, CancellationToken cancellationToken = default);
}
</ICategoriaService.cs>
<IProdutoService.cs>
using Agriis.Produtos.Aplicacao.DTOs;
using Agriis.Produtos.Dominio.Enums;

namespace Agriis.Produtos.Aplicacao.Interfaces;

/// <summary>
/// Interface do serviço de produtos
/// </summary>
public interface IProdutoService
{
    /// <summary>
    /// Obtém um produto por ID
    /// </summary>
    Task<ProdutoDto?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém um produto por código
    /// </summary>
    Task<ProdutoDto?> ObterPorCodigoAsync(string codigo, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém todos os produtos
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterTodosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos ativos
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterAtivosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos por fornecedor
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterPorFornecedorAsync(int fornecedorId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos por categoria
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterPorCategoriaAsync(int categoriaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos compatíveis com uma cultura
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos por tipo
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterPorTipoAsync(TipoProduto tipo, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos fabricantes
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterFabricantesAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos filhos de um produto pai
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterProdutosFilhosAsync(int produtoPaiId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos restritos
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterRestritosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Busca produtos por nome ou código
    /// </summary>
    Task<IEnumerable<ProdutoDto>> BuscarAsync(string termo, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos compatíveis com múltiplas culturas
    /// </summary>
    Task<IEnumerable<ProdutoDto>> ObterPorCulturasAsync(IEnumerable<int> culturasIds, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Cria um novo produto
    /// </summary>
    Task<ProdutoDto> CriarAsync(CriarProdutoDto dto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Atualiza um produto existente
    /// </summary>
    Task<ProdutoDto> AtualizarAsync(int id, AtualizarProdutoDto dto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Ativa um produto
    /// </summary>
    Task AtivarAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Inativa um produto
    /// </summary>
    Task InativarAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Descontinua um produto
    /// </summary>
    Task DescontinuarAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove um produto
    /// </summary>
    Task RemoverAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Adiciona uma cultura ao produto
    /// </summary>
    Task AdicionarCulturaAsync(int produtoId, int culturaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove uma cultura do produto
    /// </summary>
    Task RemoverCulturaAsync(int produtoId, int culturaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe produto com o código especificado
    /// </summary>
    Task<bool> ExisteComCodigoAsync(string codigo, int? idExcluir = null, CancellationToken cancellationToken = default);
}
</IProdutoService.cs>
<CategoriaMappingProfile.cs>
using AutoMapper;
using Agriis.Produtos.Aplicacao.DTOs;
using Agriis.Produtos.Dominio.Entidades;

namespace Agriis.Produtos.Aplicacao.Mapeamentos;

/// <summary>
/// Perfil de mapeamento para categorias
/// </summary>
public class CategoriaMappingProfile : Profile
{
    public CategoriaMappingProfile()
    {
        // Categoria -> CategoriaDto
        CreateMap<Categoria, CategoriaDto>()
            .ForMember(dest => dest.CategoriaPaiNome, opt => opt.MapFrom(src => src.CategoriaPai != null ? src.CategoriaPai.Nome : null))
            .ForMember(dest => dest.SubCategorias, opt => opt.MapFrom(src => src.SubCategorias.Where(sc => sc.Ativo).OrderBy(sc => sc.Ordem)))
            .ForMember(dest => dest.QuantidadeProdutos, opt => opt.MapFrom(src => src.Produtos.Count(p => p.EstaAtivo())));

        // Categoria -> CategoriaResumoDto
        CreateMap<Categoria, CategoriaResumoDto>()
            .ForMember(dest => dest.TemSubCategorias, opt => opt.MapFrom(src => src.SubCategorias.Any(sc => sc.Ativo)))
            .ForMember(dest => dest.QuantidadeProdutos, opt => opt.MapFrom(src => src.Produtos.Count(p => p.EstaAtivo())));

        // CriarCategoriaDto -> Categoria
        CreateMap<CriarCategoriaDto, Categoria>()
            .ConstructUsing(src => new Categoria(
                src.Nome,
                src.Tipo,
                src.Descricao,
                src.CategoriaPaiId,
                src.Ordem))
            .ForAllMembers(opt => opt.Ignore());
    }
}
</CategoriaMappingProfile.cs>
<ProdutoMappingProfile.cs>
using AutoMapper;
using Agriis.Produtos.Aplicacao.DTOs;
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.ObjetosValor;

namespace Agriis.Produtos.Aplicacao.Mapeamentos;

/// <summary>
/// Perfil de mapeamento para produtos
/// </summary>
public class ProdutoMappingProfile : Profile
{
    public ProdutoMappingProfile()
    {
        // Produto -> ProdutoDto
        CreateMap<Produto, ProdutoDto>()
            .ForMember(dest => dest.CategoriaNome, opt => opt.MapFrom(src => src.Categoria != null ? src.Categoria.Nome : null))
            .ForMember(dest => dest.ProdutoPaiNome, opt => opt.MapFrom(src => src.ProdutoPai != null ? src.ProdutoPai.Nome : null))
            .ForMember(dest => dest.CulturasIds, opt => opt.MapFrom(src => src.ProdutosCulturas.Where(pc => pc.Ativo).Select(pc => pc.CulturaId)))
            .ForMember(dest => dest.CulturasNomes, opt => opt.Ignore()) // Será preenchido no serviço
            .ForMember(dest => dest.FornecedorNome, opt => opt.Ignore()); // Será preenchido no serviço

        // Produto -> ProdutoResumoDto
        CreateMap<Produto, ProdutoResumoDto>()
            .ForMember(dest => dest.CategoriaNome, opt => opt.MapFrom(src => src.Categoria != null ? src.Categoria.Nome : null))
            .ForMember(dest => dest.FornecedorNome, opt => opt.Ignore()); // Será preenchido no serviço

        // CriarProdutoDto -> Produto
        CreateMap<CriarProdutoDto, Produto>()
            .ConstructUsing(src => new Produto(
                src.Nome,
                src.Codigo,
                src.Tipo,
                src.Unidade,
                new DimensoesProduto(
                    src.Dimensoes.Altura,
                    src.Dimensoes.Largura,
                    src.Dimensoes.Comprimento,
                    src.Dimensoes.PesoNominal,
                    src.Dimensoes.Densidade),
                src.CategoriaId,
                src.FornecedorId,
                src.Descricao,
                src.Marca,
                src.TipoCalculoPeso,
                src.ProdutoRestrito,
                src.ObservacoesRestricao,
                src.ProdutoPaiId))
            .ForAllMembers(opt => opt.Ignore());

        // DimensoesProduto -> DimensoesProdutoDto
        CreateMap<DimensoesProduto, DimensoesProdutoDto>()
            .ForMember(dest => dest.Volume, opt => opt.MapFrom(src => src.CalcularVolume()))
            .ForMember(dest => dest.PesoCubado, opt => opt.MapFrom(src => src.CalcularPesoCubado()))
            .ForMember(dest => dest.PesoParaFrete, opt => opt.MapFrom(src => src.ObterPesoParaFrete()));

        // CriarDimensoesProdutoDto -> DimensoesProduto
        CreateMap<CriarDimensoesProdutoDto, DimensoesProduto>()
            .ConstructUsing(src => new DimensoesProduto(
                src.Altura,
                src.Largura,
                src.Comprimento,
                src.PesoNominal,
                src.Densidade))
            .ForAllMembers(opt => opt.Ignore());

        // AtualizarDimensoesProdutoDto -> DimensoesProduto
        CreateMap<AtualizarDimensoesProdutoDto, DimensoesProduto>()
            .ConstructUsing(src => new DimensoesProduto(
                src.Altura,
                src.Largura,
                src.Comprimento,
                src.PesoNominal,
                src.Densidade))
            .ForAllMembers(opt => opt.Ignore());
    }
}
</ProdutoMappingProfile.cs>
<CategoriaService.cs>
using AutoMapper;
using Agriis.Produtos.Aplicacao.DTOs;
using Agriis.Produtos.Aplicacao.Interfaces;
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.Enums;
using Agriis.Produtos.Dominio.Interfaces;

namespace Agriis.Produtos.Aplicacao.Servicos;

/// <summary>
/// Serviço de aplicação para categorias
/// </summary>
public class CategoriaService : ICategoriaService
{
    private readonly ICategoriaRepository _categoriaRepository;
    private readonly IMapper _mapper;

    public CategoriaService(ICategoriaRepository categoriaRepository, IMapper mapper)
    {
        _categoriaRepository = categoriaRepository;
        _mapper = mapper;
    }

    public async Task<CategoriaDto?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        var categoria = await _categoriaRepository.ObterPorIdAsync(id, cancellationToken);
        return categoria != null ? _mapper.Map<CategoriaDto>(categoria) : null;
    }

    public async Task<CategoriaDto?> ObterPorNomeAsync(string nome, CancellationToken cancellationToken = default)
    {
        var categoria = await _categoriaRepository.ObterPorNomeAsync(nome, cancellationToken);
        return categoria != null ? _mapper.Map<CategoriaDto>(categoria) : null;
    }

    public async Task<IEnumerable<CategoriaDto>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        var categorias = await _categoriaRepository.ObterTodosAsync(cancellationToken);
        return _mapper.Map<IEnumerable<CategoriaDto>>(categorias);
    }

    public async Task<IEnumerable<CategoriaDto>> ObterAtivasAsync(CancellationToken cancellationToken = default)
    {
        var categorias = await _categoriaRepository.ObterAtivasAsync(cancellationToken);
        return _mapper.Map<IEnumerable<CategoriaDto>>(categorias);
    }

    public async Task<IEnumerable<CategoriaDto>> ObterPorTipoAsync(CategoriaProduto tipo, CancellationToken cancellationToken = default)
    {
        var categorias = await _categoriaRepository.ObterPorTipoAsync(tipo, cancellationToken);
        return _mapper.Map<IEnumerable<CategoriaDto>>(categorias);
    }

    public async Task<IEnumerable<CategoriaDto>> ObterCategoriasRaizAsync(CancellationToken cancellationToken = default)
    {
        var categorias = await _categoriaRepository.ObterCategoriasRaizAsync(cancellationToken);
        return _mapper.Map<IEnumerable<CategoriaDto>>(categorias);
    }

    public async Task<IEnumerable<CategoriaDto>> ObterSubCategoriasAsync(int categoriaPaiId, CancellationToken cancellationToken = default)
    {
        var categorias = await _categoriaRepository.ObterSubCategoriasAsync(categoriaPaiId, cancellationToken);
        return _mapper.Map<IEnumerable<CategoriaDto>>(categorias);
    }

    public async Task<IEnumerable<CategoriaDto>> ObterComHierarquiaAsync(CancellationToken cancellationToken = default)
    {
        var categorias = await _categoriaRepository.ObterComSubCategoriasAsync(cancellationToken);
        return _mapper.Map<IEnumerable<CategoriaDto>>(categorias);
    }

    public async Task<IEnumerable<CategoriaDto>> ObterOrdenadasAsync(CancellationToken cancellationToken = default)
    {
        var categorias = await _categoriaRepository.ObterOrdenadasAsync(cancellationToken);
        return _mapper.Map<IEnumerable<CategoriaDto>>(categorias);
    }

    public async Task<CategoriaDto> CriarAsync(CriarCategoriaDto dto, CancellationToken cancellationToken = default)
    {
        // Validar se nome já existe
        if (await _categoriaRepository.ExisteComNomeAsync(dto.Nome, cancellationToken: cancellationToken))
            throw new InvalidOperationException("Já existe uma categoria com este nome");

        // Validar categoria pai se especificada
        if (dto.CategoriaPaiId.HasValue)
        {
            var categoriaPai = await _categoriaRepository.ObterPorIdAsync(dto.CategoriaPaiId.Value, cancellationToken);
            if (categoriaPai == null)
                throw new ArgumentException("Categoria pai não encontrada", nameof(dto.CategoriaPaiId));
        }

        var categoria = new Categoria(
            dto.Nome,
            dto.Tipo,
            dto.Descricao,
            dto.CategoriaPaiId,
            dto.Ordem);

        var categoriaSalva = await _categoriaRepository.AdicionarAsync(categoria, cancellationToken);
        return _mapper.Map<CategoriaDto>(categoriaSalva);
    }

    public async Task<CategoriaDto> AtualizarAsync(int id, AtualizarCategoriaDto dto, CancellationToken cancellationToken = default)
    {
        var categoria = await _categoriaRepository.ObterPorIdAsync(id, cancellationToken);
        if (categoria == null)
            throw new ArgumentException("Categoria não encontrada", nameof(id));

        // Validar se nome já existe (excluindo a categoria atual)
        if (await _categoriaRepository.ExisteComNomeAsync(dto.Nome, id, cancellationToken))
            throw new InvalidOperationException("Já existe uma categoria com este nome");

        // Validar categoria pai se especificada
        if (dto.CategoriaPaiId.HasValue)
        {
            if (dto.CategoriaPaiId.Value == id)
                throw new InvalidOperationException("Uma categoria não pode ser pai de si mesma");

            var categoriaPai = await _categoriaRepository.ObterPorIdAsync(dto.CategoriaPaiId.Value, cancellationToken);
            if (categoriaPai == null)
                throw new ArgumentException("Categoria pai não encontrada", nameof(dto.CategoriaPaiId));

            // Verificar se não está criando referência circular
            if (await VerificarReferenciaCircularAsync(id, dto.CategoriaPaiId.Value, cancellationToken))
                throw new InvalidOperationException("A operação criaria uma referência circular");
        }

        categoria.AtualizarNome(dto.Nome);
        categoria.AtualizarDescricao(dto.Descricao);
        categoria.AtualizarTipo(dto.Tipo);
        categoria.AtualizarOrdem(dto.Ordem);
        categoria.DefinirCategoriaPai(dto.CategoriaPaiId);

        await _categoriaRepository.AtualizarAsync(categoria, cancellationToken);
        return _mapper.Map<CategoriaDto>(categoria);
    }

    public async Task AtivarAsync(int id, CancellationToken cancellationToken = default)
    {
        var categoria = await _categoriaRepository.ObterPorIdAsync(id, cancellationToken);
        if (categoria == null)
            throw new ArgumentException("Categoria não encontrada", nameof(id));

        categoria.Ativar();
        await _categoriaRepository.AtualizarAsync(categoria, cancellationToken);
    }

    public async Task DesativarAsync(int id, CancellationToken cancellationToken = default)
    {
        var categoria = await _categoriaRepository.ObterPorIdAsync(id, cancellationToken);
        if (categoria == null)
            throw new ArgumentException("Categoria não encontrada", nameof(id));

        categoria.Desativar();
        await _categoriaRepository.AtualizarAsync(categoria, cancellationToken);
    }

    public async Task RemoverAsync(int id, CancellationToken cancellationToken = default)
    {
        var categoria = await _categoriaRepository.ObterPorIdAsync(id, cancellationToken);
        if (categoria == null)
            throw new ArgumentException("Categoria não encontrada", nameof(id));

        // Verificar se pode ser removida
        if (!await PodeRemoverAsync(id, cancellationToken))
            throw new InvalidOperationException("Não é possível remover uma categoria que possui produtos ou subcategorias");

        await _categoriaRepository.RemoverAsync(categoria, cancellationToken);
    }

    public async Task<bool> ExisteComNomeAsync(string nome, int? idExcluir = null, CancellationToken cancellationToken = default)
    {
        return await _categoriaRepository.ExisteComNomeAsync(nome, idExcluir, cancellationToken);
    }

    public async Task<bool> PodeRemoverAsync(int id, CancellationToken cancellationToken = default)
    {
        var temProdutos = await _categoriaRepository.TemProdutosAsync(id, cancellationToken);
        var temSubCategorias = await _categoriaRepository.TemSubCategoriasAsync(id, cancellationToken);
        
        return !temProdutos && !temSubCategorias;
    }

    private async Task<bool> VerificarReferenciaCircularAsync(int categoriaId, int categoriaPaiId, CancellationToken cancellationToken)
    {
        var categoriaPai = await _categoriaRepository.ObterPorIdAsync(categoriaPaiId, cancellationToken);
        
        while (categoriaPai != null)
        {
            if (categoriaPai.Id == categoriaId)
                return true;
                
            if (!categoriaPai.CategoriaPaiId.HasValue)
                break;
                
            categoriaPai = await _categoriaRepository.ObterPorIdAsync(categoriaPai.CategoriaPaiId.Value, cancellationToken);
        }
        
        return false;
    }
}
</CategoriaService.cs>
<ProdutoService.cs>
using AutoMapper;
using Agriis.Produtos.Aplicacao.DTOs;
using Agriis.Produtos.Aplicacao.Interfaces;
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.Enums;
using Agriis.Produtos.Dominio.Interfaces;
using Agriis.Produtos.Dominio.ObjetosValor;

namespace Agriis.Produtos.Aplicacao.Servicos;

/// <summary>
/// Serviço de aplicação para produtos
/// </summary>
public class ProdutoService : IProdutoService
{
    private readonly IProdutoRepository _produtoRepository;
    private readonly ICategoriaRepository _categoriaRepository;
    private readonly IProdutoCulturaRepository _produtoCulturaRepository;
    private readonly IMapper _mapper;

    public ProdutoService(
        IProdutoRepository produtoRepository,
        ICategoriaRepository categoriaRepository,
        IProdutoCulturaRepository produtoCulturaRepository,
        IMapper mapper)
    {
        _produtoRepository = produtoRepository;
        _categoriaRepository = categoriaRepository;
        _produtoCulturaRepository = produtoCulturaRepository;
        _mapper = mapper;
    }

    public async Task<ProdutoDto?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        var produto = await _produtoRepository.ObterPorIdAsync(id, cancellationToken);
        return produto != null ? _mapper.Map<ProdutoDto>(produto) : null;
    }

    public async Task<ProdutoDto?> ObterPorCodigoAsync(string codigo, CancellationToken cancellationToken = default)
    {
        var produto = await _produtoRepository.ObterPorCodigoAsync(codigo, cancellationToken);
        return produto != null ? _mapper.Map<ProdutoDto>(produto) : null;
    }

    public async Task<IEnumerable<ProdutoDto>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterTodosAsync(cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> ObterAtivosAsync(CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterAtivosAsync(cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> ObterPorFornecedorAsync(int fornecedorId, CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterPorFornecedorAsync(fornecedorId, cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> ObterPorCategoriaAsync(int categoriaId, CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterPorCategoriaAsync(categoriaId, cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> ObterPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterPorCulturaAsync(culturaId, cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> ObterPorTipoAsync(TipoProduto tipo, CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterPorTipoAsync(tipo, cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> ObterFabricantesAsync(CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterFabricantesAsync(cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> ObterProdutosFilhosAsync(int produtoPaiId, CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterProdutosFilhosAsync(produtoPaiId, cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> ObterRestritosAsync(CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterRestritosAsync(cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> BuscarAsync(string termo, CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.BuscarPorNomeOuCodigoAsync(termo, cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<IEnumerable<ProdutoDto>> ObterPorCulturasAsync(IEnumerable<int> culturasIds, CancellationToken cancellationToken = default)
    {
        var produtos = await _produtoRepository.ObterPorCulturasAsync(culturasIds, cancellationToken);
        return _mapper.Map<IEnumerable<ProdutoDto>>(produtos);
    }

    public async Task<ProdutoDto> CriarAsync(CriarProdutoDto dto, CancellationToken cancellationToken = default)
    {
        // Validar se categoria existe
        var categoria = await _categoriaRepository.ObterPorIdAsync(dto.CategoriaId, cancellationToken);
        if (categoria == null)
            throw new ArgumentException("Categoria não encontrada", nameof(dto.CategoriaId));

        // Validar se código já existe
        if (await _produtoRepository.ExisteComCodigoAsync(dto.Codigo, cancellationToken: cancellationToken))
            throw new InvalidOperationException("Já existe um produto com este código");

        // Validar produto pai se especificado
        if (dto.ProdutoPaiId.HasValue)
        {
            var produtoPai = await _produtoRepository.ObterPorIdAsync(dto.ProdutoPaiId.Value, cancellationToken);
            if (produtoPai == null)
                throw new ArgumentException("Produto pai não encontrado", nameof(dto.ProdutoPaiId));
            
            if (produtoPai.Tipo != TipoProduto.Fabricante)
                throw new InvalidOperationException("Produto pai deve ser do tipo Fabricante");
        }

        // Criar dimensões
        var dimensoes = new DimensoesProduto(
            dto.Dimensoes.Altura,
            dto.Dimensoes.Largura,
            dto.Dimensoes.Comprimento,
            dto.Dimensoes.PesoNominal,
            dto.Dimensoes.Densidade);

        // Criar produto
        var produto = new Produto(
            dto.Nome,
            dto.Codigo,
            dto.Tipo,
            dto.Unidade,
            dimensoes,
            dto.CategoriaId,
            dto.FornecedorId,
            dto.Descricao,
            dto.Marca,
            dto.TipoCalculoPeso,
            dto.ProdutoRestrito,
            dto.ObservacoesRestricao,
            dto.ProdutoPaiId);

        // Adicionar culturas
        foreach (var culturaId in dto.CulturasIds)
        {
            produto.AdicionarCultura(culturaId);
        }

        var produtoSalvo = await _produtoRepository.AdicionarAsync(produto, cancellationToken);
        return _mapper.Map<ProdutoDto>(produtoSalvo);
    }

    public async Task<ProdutoDto> AtualizarAsync(int id, AtualizarProdutoDto dto, CancellationToken cancellationToken = default)
    {
        var produto = await _produtoRepository.ObterPorIdAsync(id, cancellationToken);
        if (produto == null)
            throw new ArgumentException("Produto não encontrado", nameof(id));

        // Validar se categoria existe
        var categoria = await _categoriaRepository.ObterPorIdAsync(dto.CategoriaId, cancellationToken);
        if (categoria == null)
            throw new ArgumentException("Categoria não encontrada", nameof(dto.CategoriaId));

        // Validar se código já existe (excluindo o produto atual)
        if (await _produtoRepository.ExisteComCodigoAsync(dto.Codigo, id, cancellationToken))
            throw new InvalidOperationException("Já existe um produto com este código");

        // Atualizar informações básicas
        produto.AtualizarInformacoes(dto.Nome, dto.Descricao, dto.Marca);
        produto.AtualizarCodigo(dto.Codigo);
        produto.AtualizarCategoria(dto.CategoriaId);
        produto.AtualizarTipoCalculoPeso(dto.TipoCalculoPeso);
        produto.DefinirRestricao(dto.ProdutoRestrito, dto.ObservacoesRestricao);

        // Atualizar dimensões
        var novasDimensoes = new DimensoesProduto(
            dto.Dimensoes.Altura,
            dto.Dimensoes.Largura,
            dto.Dimensoes.Comprimento,
            dto.Dimensoes.PesoNominal,
            dto.Dimensoes.Densidade);
        produto.AtualizarDimensoes(novasDimensoes);

        // Atualizar culturas
        var culturasAtuais = produto.ObterCulturasCompativeis().ToList();
        var culturasNovas = dto.CulturasIds;

        // Remover culturas que não estão na nova lista
        foreach (var culturaId in culturasAtuais.Except(culturasNovas))
        {
            produto.RemoverCultura(culturaId);
        }

        // Adicionar novas culturas
        foreach (var culturaId in culturasNovas.Except(culturasAtuais))
        {
            produto.AdicionarCultura(culturaId);
        }

        await _produtoRepository.AtualizarAsync(produto, cancellationToken);
        return _mapper.Map<ProdutoDto>(produto);
    }

    public async Task AtivarAsync(int id, CancellationToken cancellationToken = default)
    {
        var produto = await _produtoRepository.ObterPorIdAsync(id, cancellationToken);
        if (produto == null)
            throw new ArgumentException("Produto não encontrado", nameof(id));

        produto.Ativar();
        await _produtoRepository.AtualizarAsync(produto, cancellationToken);
    }

    public async Task InativarAsync(int id, CancellationToken cancellationToken = default)
    {
        var produto = await _produtoRepository.ObterPorIdAsync(id, cancellationToken);
        if (produto == null)
            throw new ArgumentException("Produto não encontrado", nameof(id));

        produto.Inativar();
        await _produtoRepository.AtualizarAsync(produto, cancellationToken);
    }

    public async Task DescontinuarAsync(int id, CancellationToken cancellationToken = default)
    {
        var produto = await _produtoRepository.ObterPorIdAsync(id, cancellationToken);
        if (produto == null)
            throw new ArgumentException("Produto não encontrado", nameof(id));

        produto.Descontinuar();
        await _produtoRepository.AtualizarAsync(produto, cancellationToken);
    }

    public async Task RemoverAsync(int id, CancellationToken cancellationToken = default)
    {
        var produto = await _produtoRepository.ObterPorIdAsync(id, cancellationToken);
        if (produto == null)
            throw new ArgumentException("Produto não encontrado", nameof(id));

        // Verificar se tem produtos filhos
        if (produto.TemProdutosFilhos())
            throw new InvalidOperationException("Não é possível remover um produto que possui produtos filhos");

        await _produtoRepository.RemoverAsync(produto, cancellationToken);
    }

    public async Task AdicionarCulturaAsync(int produtoId, int culturaId, CancellationToken cancellationToken = default)
    {
        var produto = await _produtoRepository.ObterPorIdAsync(produtoId, cancellationToken);
        if (produto == null)
            throw new ArgumentException("Produto não encontrado", nameof(produtoId));

        produto.AdicionarCultura(culturaId);
        await _produtoRepository.AtualizarAsync(produto, cancellationToken);
    }

    public async Task RemoverCulturaAsync(int produtoId, int culturaId, CancellationToken cancellationToken = default)
    {
        var produto = await _produtoRepository.ObterPorIdAsync(produtoId, cancellationToken);
        if (produto == null)
            throw new ArgumentException("Produto não encontrado", nameof(produtoId));

        produto.RemoverCultura(culturaId);
        await _produtoRepository.AtualizarAsync(produto, cancellationToken);
    }

    public async Task<bool> ExisteComCodigoAsync(string codigo, int? idExcluir = null, CancellationToken cancellationToken = default)
    {
        return await _produtoRepository.ExisteComCodigoAsync(codigo, idExcluir, cancellationToken);
    }
}
</ProdutoService.cs>
<AtualizarCategoriaDtoValidator.cs>
using FluentValidation;
using Agriis.Produtos.Aplicacao.DTOs;

namespace Agriis.Produtos.Aplicacao.Validadores;

/// <summary>
/// Validador para atualização de categoria
/// </summary>
public class AtualizarCategoriaDtoValidator : AbstractValidator<AtualizarCategoriaDto>
{
    public AtualizarCategoriaDtoValidator()
    {
        RuleFor(x => x.Nome)
            .NotEmpty()
            .WithMessage("Nome é obrigatório")
            .MaximumLength(100)
            .WithMessage("Nome deve ter no máximo 100 caracteres");

        RuleFor(x => x.Descricao)
            .MaximumLength(500)
            .WithMessage("Descrição deve ter no máximo 500 caracteres")
            .When(x => !string.IsNullOrEmpty(x.Descricao));

        RuleFor(x => x.Tipo)
            .IsInEnum()
            .WithMessage("Tipo de categoria inválido");

        RuleFor(x => x.CategoriaPaiId)
            .GreaterThan(0)
            .WithMessage("Categoria pai deve ser válida")
            .When(x => x.CategoriaPaiId.HasValue);

        RuleFor(x => x.Ordem)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Ordem deve ser maior ou igual a zero");
    }
}
</AtualizarCategoriaDtoValidator.cs>
<AtualizarProdutoDtoValidator.cs>
using FluentValidation;
using Agriis.Produtos.Aplicacao.DTOs;

namespace Agriis.Produtos.Aplicacao.Validadores;

/// <summary>
/// Validador para atualização de produto
/// </summary>
public class AtualizarProdutoDtoValidator : AbstractValidator<AtualizarProdutoDto>
{
    public AtualizarProdutoDtoValidator()
    {
        RuleFor(x => x.Nome)
            .NotEmpty()
            .WithMessage("Nome é obrigatório")
            .MaximumLength(200)
            .WithMessage("Nome deve ter no máximo 200 caracteres");

        RuleFor(x => x.Codigo)
            .NotEmpty()
            .WithMessage("Código é obrigatório")
            .MaximumLength(50)
            .WithMessage("Código deve ter no máximo 50 caracteres");

        RuleFor(x => x.Marca)
            .MaximumLength(100)
            .WithMessage("Marca deve ter no máximo 100 caracteres")
            .When(x => !string.IsNullOrEmpty(x.Marca));

        RuleFor(x => x.Descricao)
            .MaximumLength(1000)
            .WithMessage("Descrição deve ter no máximo 1000 caracteres")
            .When(x => !string.IsNullOrEmpty(x.Descricao));

        RuleFor(x => x.Unidade)
            .IsInEnum()
            .WithMessage("Unidade inválida");

        RuleFor(x => x.TipoCalculoPeso)
            .IsInEnum()
            .WithMessage("Tipo de cálculo de peso inválido");

        RuleFor(x => x.CategoriaId)
            .GreaterThan(0)
            .WithMessage("Categoria é obrigatória");

        RuleFor(x => x.ObservacoesRestricao)
            .NotEmpty()
            .WithMessage("Observações de restrição são obrigatórias quando o produto é restrito")
            .MaximumLength(500)
            .WithMessage("Observações de restrição devem ter no máximo 500 caracteres")
            .When(x => x.ProdutoRestrito);

        RuleFor(x => x.Dimensoes)
            .NotNull()
            .WithMessage("Dimensões são obrigatórias")
            .SetValidator(new AtualizarDimensoesProdutoDtoValidator());

        RuleFor(x => x.CulturasIds)
            .NotEmpty()
            .WithMessage("Pelo menos uma cultura deve ser associada ao produto");

        RuleForEach(x => x.CulturasIds)
            .GreaterThan(0)
            .WithMessage("IDs de cultura devem ser válidos");
    }
}

/// <summary>
/// Validador para dimensões do produto na atualização
/// </summary>
public class AtualizarDimensoesProdutoDtoValidator : AbstractValidator<AtualizarDimensoesProdutoDto>
{
    public AtualizarDimensoesProdutoDtoValidator()
    {
        RuleFor(x => x.Altura)
            .GreaterThan(0)
            .WithMessage("Altura deve ser maior que zero")
            .LessThanOrEqualTo(1000)
            .WithMessage("Altura deve ser menor ou igual a 1000 cm");

        RuleFor(x => x.Largura)
            .GreaterThan(0)
            .WithMessage("Largura deve ser maior que zero")
            .LessThanOrEqualTo(1000)
            .WithMessage("Largura deve ser menor ou igual a 1000 cm");

        RuleFor(x => x.Comprimento)
            .GreaterThan(0)
            .WithMessage("Comprimento deve ser maior que zero")
            .LessThanOrEqualTo(1000)
            .WithMessage("Comprimento deve ser menor ou igual a 1000 cm");

        RuleFor(x => x.PesoNominal)
            .GreaterThan(0)
            .WithMessage("Peso nominal deve ser maior que zero")
            .LessThanOrEqualTo(10000)
            .WithMessage("Peso nominal deve ser menor ou igual a 10000 kg");

        RuleFor(x => x.Densidade)
            .GreaterThan(0)
            .WithMessage("Densidade deve ser maior que zero")
            .LessThanOrEqualTo(10000)
            .WithMessage("Densidade deve ser menor ou igual a 10000 kg/m³")
            .When(x => x.Densidade.HasValue);
    }
}
</AtualizarProdutoDtoValidator.cs>
<CriarCategoriaDtoValidator.cs>
using FluentValidation;
using Agriis.Produtos.Aplicacao.DTOs;

namespace Agriis.Produtos.Aplicacao.Validadores;

/// <summary>
/// Validador para criação de categoria
/// </summary>
public class CriarCategoriaDtoValidator : AbstractValidator<CriarCategoriaDto>
{
    public CriarCategoriaDtoValidator()
    {
        RuleFor(x => x.Nome)
            .NotEmpty()
            .WithMessage("Nome é obrigatório")
            .MaximumLength(100)
            .WithMessage("Nome deve ter no máximo 100 caracteres");

        RuleFor(x => x.Descricao)
            .MaximumLength(500)
            .WithMessage("Descrição deve ter no máximo 500 caracteres")
            .When(x => !string.IsNullOrEmpty(x.Descricao));

        RuleFor(x => x.Tipo)
            .IsInEnum()
            .WithMessage("Tipo de categoria inválido");

        RuleFor(x => x.CategoriaPaiId)
            .GreaterThan(0)
            .WithMessage("Categoria pai deve ser válida")
            .When(x => x.CategoriaPaiId.HasValue);

        RuleFor(x => x.Ordem)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Ordem deve ser maior ou igual a zero");
    }
}
</CriarCategoriaDtoValidator.cs>
<CriarProdutoDtoValidator.cs>
using FluentValidation;
using Agriis.Produtos.Aplicacao.DTOs;
using Agriis.Produtos.Dominio.Enums;

namespace Agriis.Produtos.Aplicacao.Validadores;

/// <summary>
/// Validador para criação de produto
/// </summary>
public class CriarProdutoDtoValidator : AbstractValidator<CriarProdutoDto>
{
    public CriarProdutoDtoValidator()
    {
        RuleFor(x => x.Nome)
            .NotEmpty()
            .WithMessage("Nome é obrigatório")
            .MaximumLength(200)
            .WithMessage("Nome deve ter no máximo 200 caracteres");

        RuleFor(x => x.Codigo)
            .NotEmpty()
            .WithMessage("Código é obrigatório")
            .MaximumLength(50)
            .WithMessage("Código deve ter no máximo 50 caracteres");

        RuleFor(x => x.Marca)
            .MaximumLength(100)
            .WithMessage("Marca deve ter no máximo 100 caracteres")
            .When(x => !string.IsNullOrEmpty(x.Marca));

        RuleFor(x => x.Descricao)
            .MaximumLength(1000)
            .WithMessage("Descrição deve ter no máximo 1000 caracteres")
            .When(x => !string.IsNullOrEmpty(x.Descricao));

        RuleFor(x => x.Tipo)
            .IsInEnum()
            .WithMessage("Tipo de produto inválido");

        RuleFor(x => x.Unidade)
            .IsInEnum()
            .WithMessage("Unidade inválida");

        RuleFor(x => x.TipoCalculoPeso)
            .IsInEnum()
            .WithMessage("Tipo de cálculo de peso inválido");

        RuleFor(x => x.CategoriaId)
            .GreaterThan(0)
            .WithMessage("Categoria é obrigatória");

        RuleFor(x => x.FornecedorId)
            .GreaterThan(0)
            .WithMessage("Fornecedor é obrigatório");

        RuleFor(x => x.ProdutoPaiId)
            .GreaterThan(0)
            .WithMessage("Produto pai deve ser válido")
            .When(x => x.ProdutoPaiId.HasValue);

        RuleFor(x => x.ObservacoesRestricao)
            .NotEmpty()
            .WithMessage("Observações de restrição são obrigatórias quando o produto é restrito")
            .MaximumLength(500)
            .WithMessage("Observações de restrição devem ter no máximo 500 caracteres")
            .When(x => x.ProdutoRestrito);

        RuleFor(x => x.Dimensoes)
            .NotNull()
            .WithMessage("Dimensões são obrigatórias")
            .SetValidator(new CriarDimensoesProdutoDtoValidator());

        RuleFor(x => x.CulturasIds)
            .NotEmpty()
            .WithMessage("Pelo menos uma cultura deve ser associada ao produto");

        RuleForEach(x => x.CulturasIds)
            .GreaterThan(0)
            .WithMessage("IDs de cultura devem ser válidos");

        // Validação específica para produtos revendedores
        RuleFor(x => x.ProdutoPaiId)
            .NotNull()
            .WithMessage("Produtos revendedores devem ter um produto pai")
            .When(x => x.Tipo == TipoProduto.Revendedor);

        // Validação específica para produtos fabricantes
        RuleFor(x => x.ProdutoPaiId)
            .Null()
            .WithMessage("Produtos fabricantes não podem ter produto pai")
            .When(x => x.Tipo == TipoProduto.Fabricante);
    }
}

/// <summary>
/// Validador para dimensões do produto na criação
/// </summary>
public class CriarDimensoesProdutoDtoValidator : AbstractValidator<CriarDimensoesProdutoDto>
{
    public CriarDimensoesProdutoDtoValidator()
    {
        RuleFor(x => x.Altura)
            .GreaterThan(0)
            .WithMessage("Altura deve ser maior que zero")
            .LessThanOrEqualTo(1000)
            .WithMessage("Altura deve ser menor ou igual a 1000 cm");

        RuleFor(x => x.Largura)
            .GreaterThan(0)
            .WithMessage("Largura deve ser maior que zero")
            .LessThanOrEqualTo(1000)
            .WithMessage("Largura deve ser menor ou igual a 1000 cm");

        RuleFor(x => x.Comprimento)
            .GreaterThan(0)
            .WithMessage("Comprimento deve ser maior que zero")
            .LessThanOrEqualTo(1000)
            .WithMessage("Comprimento deve ser menor ou igual a 1000 cm");

        RuleFor(x => x.PesoNominal)
            .GreaterThan(0)
            .WithMessage("Peso nominal deve ser maior que zero")
            .LessThanOrEqualTo(10000)
            .WithMessage("Peso nominal deve ser menor ou igual a 10000 kg");

        RuleFor(x => x.Densidade)
            .GreaterThan(0)
            .WithMessage("Densidade deve ser maior que zero")
            .LessThanOrEqualTo(10000)
            .WithMessage("Densidade deve ser menor ou igual a 10000 kg/m³")
            .When(x => x.Densidade.HasValue);
    }
}
</CriarProdutoDtoValidator.cs>
<Categoria.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Produtos.Dominio.Enums;

namespace Agriis.Produtos.Dominio.Entidades;

/// <summary>
/// Entidade que representa uma categoria de produtos
/// </summary>
public class Categoria : EntidadeBase
{
    /// <summary>
    /// Nome da categoria
    /// </summary>
    public string Nome { get; private set; } = string.Empty;
    
    /// <summary>
    /// Descrição da categoria
    /// </summary>
    public string? Descricao { get; private set; }
    
    /// <summary>
    /// Tipo da categoria
    /// </summary>
    public CategoriaProduto Tipo { get; private set; }
    
    /// <summary>
    /// Indica se a categoria está ativa
    /// </summary>
    public bool Ativo { get; private set; }
    
    /// <summary>
    /// Categoria pai (para hierarquia)
    /// </summary>
    public int? CategoriaPaiId { get; private set; }
    
    /// <summary>
    /// Ordem de exibição
    /// </summary>
    public int Ordem { get; private set; }

    // Navigation Properties
    public virtual Categoria? CategoriaPai { get; private set; }
    public virtual ICollection<Categoria> SubCategorias { get; private set; } = new List<Categoria>();
    public virtual ICollection<Produto> Produtos { get; private set; } = new List<Produto>();

    protected Categoria() { } // EF Constructor

    public Categoria(string nome, CategoriaProduto tipo, string? descricao = null, int? categoriaPaiId = null, int ordem = 0)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        Tipo = tipo;
        Descricao = descricao;
        CategoriaPaiId = categoriaPaiId;
        Ordem = ordem;
        Ativo = true;
    }

    /// <summary>
    /// Atualiza o nome da categoria
    /// </summary>
    public void AtualizarNome(string nome)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Atualiza a descrição da categoria
    /// </summary>
    public void AtualizarDescricao(string? descricao)
    {
        Descricao = descricao;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Atualiza o tipo da categoria
    /// </summary>
    public void AtualizarTipo(CategoriaProduto tipo)
    {
        Tipo = tipo;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Atualiza a ordem de exibição
    /// </summary>
    public void AtualizarOrdem(int ordem)
    {
        Ordem = ordem;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Ativa a categoria
    /// </summary>
    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            AtualizarDataModificacao();
        }
    }

    /// <summary>
    /// Desativa a categoria
    /// </summary>
    public void Desativar()
    {
        if (Ativo)
        {
            Ativo = false;
            AtualizarDataModificacao();
        }
    }

    /// <summary>
    /// Define a categoria pai
    /// </summary>
    public void DefinirCategoriaPai(int? categoriaPaiId)
    {
        // Validar se não está criando referência circular
        if (categoriaPaiId.HasValue && categoriaPaiId.Value == Id)
            throw new InvalidOperationException("Uma categoria não pode ser pai de si mesma");

        CategoriaPaiId = categoriaPaiId;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Verifica se é uma categoria raiz (sem pai)
    /// </summary>
    public bool EhCategoriaRaiz() => !CategoriaPaiId.HasValue;

    /// <summary>
    /// Verifica se tem subcategorias
    /// </summary>
    public bool TemSubCategorias() => SubCategorias.Any();
}
</Categoria.cs>
<Produto.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Produtos.Dominio.Enums;
using Agriis.Produtos.Dominio.ObjetosValor;
using System.Text.Json;

namespace Agriis.Produtos.Dominio.Entidades;

/// <summary>
/// Entidade que representa um produto agrícola
/// </summary>
public class Produto : EntidadeRaizAgregada
{
    /// <summary>
    /// Nome do produto
    /// </summary>
    public string Nome { get; private set; } = string.Empty;
    
    /// <summary>
    /// Descrição detalhada do produto
    /// </summary>
    public string? Descricao { get; private set; }
    
    /// <summary>
    /// Código/SKU do produto
    /// </summary>
    public string Codigo { get; private set; } = string.Empty;
    
    /// <summary>
    /// Marca do produto
    /// </summary>
    public string? Marca { get; private set; }
    
    /// <summary>
    /// Tipo do produto (Fabricante/Revendedor)
    /// </summary>
    public TipoProduto Tipo { get; private set; }
    
    /// <summary>
    /// Status do produto
    /// </summary>
    public StatusProduto Status { get; private set; }
    
    /// <summary>
    /// Unidade de medida
    /// </summary>
    public TipoUnidade Unidade { get; private set; }
    
    /// <summary>
    /// Dimensões físicas do produto
    /// </summary>
    public DimensoesProduto Dimensoes { get; private set; } = null!;
    
    /// <summary>
    /// Tipo de cálculo de peso para frete
    /// </summary>
    public TipoCalculoPeso TipoCalculoPeso { get; private set; }
    
    /// <summary>
    /// Indica se é um produto restrito (requer validações especiais)
    /// </summary>
    public bool ProdutoRestrito { get; private set; }
    
    /// <summary>
    /// Observações sobre restrições
    /// </summary>
    public string? ObservacoesRestricao { get; private set; }
    
    /// <summary>
    /// ID da categoria do produto
    /// </summary>
    public int CategoriaId { get; private set; }
    
    /// <summary>
    /// ID do fornecedor do produto
    /// </summary>
    public int FornecedorId { get; private set; }
    
    /// <summary>
    /// ID do produto pai (para produtos fabricantes vs revendedores)
    /// </summary>
    public int? ProdutoPaiId { get; private set; }
    
    /// <summary>
    /// Dados adicionais em formato JSON
    /// </summary>
    public JsonDocument? DadosAdicionais { get; private set; }

    // Navigation Properties
    public virtual Categoria Categoria { get; private set; } = null!;
    public virtual Produto? ProdutoPai { get; private set; }
    public virtual ICollection<Produto> ProdutosFilhos { get; private set; } = new List<Produto>();
    public virtual ICollection<ProdutoCultura> ProdutosCulturas { get; private set; } = new List<ProdutoCultura>();

    protected Produto() { } // EF Constructor

    public Produto(
        string nome,
        string codigo,
        TipoProduto tipo,
        TipoUnidade unidade,
        DimensoesProduto dimensoes,
        int categoriaId,
        int fornecedorId,
        string? descricao = null,
        string? marca = null,
        TipoCalculoPeso tipoCalculoPeso = TipoCalculoPeso.PesoNominal,
        bool produtoRestrito = false,
        string? observacoesRestricao = null,
        int? produtoPaiId = null)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        Codigo = codigo ?? throw new ArgumentNullException(nameof(codigo));
        Tipo = tipo;
        Unidade = unidade;
        Dimensoes = dimensoes ?? throw new ArgumentNullException(nameof(dimensoes));
        CategoriaId = categoriaId;
        FornecedorId = fornecedorId;
        Descricao = descricao;
        Marca = marca;
        TipoCalculoPeso = tipoCalculoPeso;
        ProdutoRestrito = produtoRestrito;
        ObservacoesRestricao = observacoesRestricao;
        ProdutoPaiId = produtoPaiId;
        Status = StatusProduto.Ativo;

        ValidarRegrasNegocio();
    }

    /// <summary>
    /// Atualiza informações básicas do produto
    /// </summary>
    public void AtualizarInformacoes(string nome, string? descricao, string? marca)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        Descricao = descricao;
        Marca = marca;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Atualiza o código do produto
    /// </summary>
    public void AtualizarCodigo(string codigo)
    {
        Codigo = codigo ?? throw new ArgumentNullException(nameof(codigo));
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Atualiza as dimensões do produto
    /// </summary>
    public void AtualizarDimensoes(DimensoesProduto dimensoes)
    {
        Dimensoes = dimensoes ?? throw new ArgumentNullException(nameof(dimensoes));
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Atualiza o tipo de cálculo de peso
    /// </summary>
    public void AtualizarTipoCalculoPeso(TipoCalculoPeso tipoCalculoPeso)
    {
        TipoCalculoPeso = tipoCalculoPeso;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Define se o produto é restrito
    /// </summary>
    public void DefinirRestricao(bool produtoRestrito, string? observacoesRestricao = null)
    {
        ProdutoRestrito = produtoRestrito;
        ObservacoesRestricao = produtoRestrito ? observacoesRestricao : null;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Atualiza a categoria do produto
    /// </summary>
    public void AtualizarCategoria(int categoriaId)
    {
        CategoriaId = categoriaId;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Define o produto pai
    /// </summary>
    public void DefinirProdutoPai(int? produtoPaiId)
    {
        if (produtoPaiId.HasValue && produtoPaiId.Value == Id)
            throw new InvalidOperationException("Um produto não pode ser pai de si mesmo");

        ProdutoPaiId = produtoPaiId;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Ativa o produto
    /// </summary>
    public void Ativar()
    {
        if (Status != StatusProduto.Ativo)
        {
            Status = StatusProduto.Ativo;
            AtualizarDataModificacao();
        }
    }

    /// <summary>
    /// Inativa o produto
    /// </summary>
    public void Inativar()
    {
        if (Status != StatusProduto.Inativo)
        {
            Status = StatusProduto.Inativo;
            AtualizarDataModificacao();
        }
    }

    /// <summary>
    /// Descontinua o produto
    /// </summary>
    public void Descontinuar()
    {
        if (Status != StatusProduto.Descontinuado)
        {
            Status = StatusProduto.Descontinuado;
            AtualizarDataModificacao();
        }
    }

    /// <summary>
    /// Adiciona uma cultura compatível com o produto
    /// </summary>
    public void AdicionarCultura(int culturaId)
    {
        if (ProdutosCulturas.Any(pc => pc.CulturaId == culturaId))
            return; // Já existe

        var produtoCultura = new ProdutoCultura(Id, culturaId);
        ProdutosCulturas.Add(produtoCultura);
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Remove uma cultura do produto
    /// </summary>
    public void RemoverCultura(int culturaId)
    {
        var produtoCultura = ProdutosCulturas.FirstOrDefault(pc => pc.CulturaId == culturaId);
        if (produtoCultura != null)
        {
            ProdutosCulturas.Remove(produtoCultura);
            AtualizarDataModificacao();
        }
    }

    /// <summary>
    /// Atualiza dados adicionais em formato JSON
    /// </summary>
    public void AtualizarDadosAdicionais(JsonDocument? dadosAdicionais)
    {
        DadosAdicionais = dadosAdicionais;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Calcula o peso para frete baseado no tipo de cálculo configurado
    /// </summary>
    public decimal CalcularPesoParaFrete()
    {
        return TipoCalculoPeso switch
        {
            TipoCalculoPeso.PesoNominal => Dimensoes.PesoNominal,
            TipoCalculoPeso.PesoCubado => Dimensoes.ObterPesoParaFrete(),
            _ => Dimensoes.PesoNominal
        };
    }

    /// <summary>
    /// Verifica se o produto é fabricante
    /// </summary>
    public bool EhFabricante() => Tipo == TipoProduto.Fabricante;

    /// <summary>
    /// Verifica se o produto é revendedor
    /// </summary>
    public bool EhRevendedor() => Tipo == TipoProduto.Revendedor;

    /// <summary>
    /// Verifica se o produto está ativo
    /// </summary>
    public bool EstaAtivo() => Status == StatusProduto.Ativo;

    /// <summary>
    /// Verifica se o produto tem produto pai
    /// </summary>
    public bool TemProdutoPai() => ProdutoPaiId.HasValue;

    /// <summary>
    /// Verifica se o produto tem produtos filhos
    /// </summary>
    public bool TemProdutosFilhos() => ProdutosFilhos.Any();

    /// <summary>
    /// Obtém as culturas compatíveis
    /// </summary>
    public IEnumerable<int> ObterCulturasCompativeis()
    {
        return ProdutosCulturas.Select(pc => pc.CulturaId);
    }

    /// <summary>
    /// Verifica se o produto é compatível com uma cultura
    /// </summary>
    public bool EhCompativelComCultura(int culturaId)
    {
        return ProdutosCulturas.Any(pc => pc.CulturaId == culturaId);
    }

    private void ValidarRegrasNegocio()
    {
        // Produtos revendedores devem ter produto pai
        if (Tipo == TipoProduto.Revendedor && !ProdutoPaiId.HasValue)
            throw new InvalidOperationException("Produtos revendedores devem ter um produto pai (fabricante)");

        // Produtos fabricantes não podem ter produto pai
        if (Tipo == TipoProduto.Fabricante && ProdutoPaiId.HasValue)
            throw new InvalidOperationException("Produtos fabricantes não podem ter produto pai");
    }
}
</Produto.cs>
<ProdutoCultura.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Produtos.Dominio.Entidades;

/// <summary>
/// Entidade de relacionamento entre Produto e Cultura
/// </summary>
public class ProdutoCultura : EntidadeBase
{
    /// <summary>
    /// ID do produto
    /// </summary>
    public int ProdutoId { get; private set; }
    
    /// <summary>
    /// ID da cultura
    /// </summary>
    public int CulturaId { get; private set; }
    
    /// <summary>
    /// Indica se a associação está ativa
    /// </summary>
    public bool Ativo { get; private set; }
    
    /// <summary>
    /// Observações sobre a compatibilidade
    /// </summary>
    public string? Observacoes { get; private set; }

    // Navigation Properties
    public virtual Produto Produto { get; private set; } = null!;

    protected ProdutoCultura() { } // EF Constructor

    public ProdutoCultura(int produtoId, int culturaId, string? observacoes = null)
    {
        ProdutoId = produtoId;
        CulturaId = culturaId;
        Observacoes = observacoes;
        Ativo = true;
    }

    /// <summary>
    /// Atualiza as observações
    /// </summary>
    public void AtualizarObservacoes(string? observacoes)
    {
        Observacoes = observacoes;
        AtualizarDataModificacao();
    }

    /// <summary>
    /// Ativa a associação
    /// </summary>
    public void Ativar()
    {
        if (!Ativo)
        {
            Ativo = true;
            AtualizarDataModificacao();
        }
    }

    /// <summary>
    /// Desativa a associação
    /// </summary>
    public void Desativar()
    {
        if (Ativo)
        {
            Ativo = false;
            AtualizarDataModificacao();
        }
    }
}
</ProdutoCultura.cs>
<TipoProduto.cs>
namespace Agriis.Produtos.Dominio.Enums;

/// <summary>
/// Tipos de produto no sistema
/// </summary>
public enum TipoProduto
{
    /// <summary>
    /// Produto fabricado pela própria empresa
    /// </summary>
    Fabricante = 1,
    
    /// <summary>
    /// Produto revendido de terceiros
    /// </summary>
    Revendedor = 2
}

/// <summary>
/// Status do produto
/// </summary>
public enum StatusProduto
{
    /// <summary>
    /// Produto ativo e disponível
    /// </summary>
    Ativo = 1,
    
    /// <summary>
    /// Produto inativo
    /// </summary>
    Inativo = 2,
    
    /// <summary>
    /// Produto descontinuado
    /// </summary>
    Descontinuado = 3
}

/// <summary>
/// Tipos de cálculo de peso para frete
/// </summary>
public enum TipoCalculoPeso
{
    /// <summary>
    /// Usar peso nominal do produto
    /// </summary>
    PesoNominal = 1,
    
    /// <summary>
    /// Usar peso cúbico calculado
    /// </summary>
    PesoCubado = 2
}

/// <summary>
/// Categorias de produtos agrícolas
/// </summary>
public enum CategoriaProduto
{
    /// <summary>
    /// Sementes
    /// </summary>
    Sementes = 1,
    
    /// <summary>
    /// Fertilizantes
    /// </summary>
    Fertilizantes = 2,
    
    /// <summary>
    /// Defensivos
    /// </summary>
    Defensivos = 3,
    
    /// <summary>
    /// Inoculantes
    /// </summary>
    Inoculantes = 4,
    
    /// <summary>
    /// Adjuvantes
    /// </summary>
    Adjuvantes = 5,
    
    /// <summary>
    /// Micronutrientes
    /// </summary>
    Micronutrientes = 6,
    
    /// <summary>
    /// Outros produtos
    /// </summary>
    Outros = 99
}
</TipoProduto.cs>
<ICategoriaRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.Enums;

namespace Agriis.Produtos.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de categorias
/// </summary>
public interface ICategoriaRepository : IRepository<Categoria>
{
    /// <summary>
    /// Obtém uma categoria por nome
    /// </summary>
    Task<Categoria?> ObterPorNomeAsync(string nome, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias ativas
    /// </summary>
    Task<IEnumerable<Categoria>> ObterAtivasAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias por tipo
    /// </summary>
    Task<IEnumerable<Categoria>> ObterPorTipoAsync(CategoriaProduto tipo, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias raiz (sem categoria pai)
    /// </summary>
    Task<IEnumerable<Categoria>> ObterCategoriasRaizAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém subcategorias de uma categoria pai
    /// </summary>
    Task<IEnumerable<Categoria>> ObterSubCategoriasAsync(int categoriaPaiId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias com suas subcategorias
    /// </summary>
    Task<IEnumerable<Categoria>> ObterComSubCategoriasAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém categorias ordenadas por ordem de exibição
    /// </summary>
    Task<IEnumerable<Categoria>> ObterOrdenadasAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe categoria com o nome especificado
    /// </summary>
    Task<bool> ExisteComNomeAsync(string nome, int? idExcluir = null, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se a categoria tem produtos associados
    /// </summary>
    Task<bool> TemProdutosAsync(int categoriaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se a categoria tem subcategorias
    /// </summary>
    Task<bool> TemSubCategoriasAsync(int categoriaId, CancellationToken cancellationToken = default);
}
</ICategoriaRepository.cs>
<IProdutoCulturaRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Produtos.Dominio.Entidades;

namespace Agriis.Produtos.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de relacionamento produto-cultura
/// </summary>
public interface IProdutoCulturaRepository : IRepository<ProdutoCultura>
{
    /// <summary>
    /// Obtém relacionamentos por produto
    /// </summary>
    Task<IEnumerable<ProdutoCultura>> ObterPorProdutoAsync(int produtoId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém relacionamentos por cultura
    /// </summary>
    Task<IEnumerable<ProdutoCultura>> ObterPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém relacionamentos ativos por produto
    /// </summary>
    Task<IEnumerable<ProdutoCultura>> ObterAtivosPorProdutoAsync(int produtoId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém relacionamentos ativos por cultura
    /// </summary>
    Task<IEnumerable<ProdutoCultura>> ObterAtivosPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém um relacionamento específico
    /// </summary>
    Task<ProdutoCultura?> ObterPorProdutoECulturaAsync(int produtoId, int culturaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe relacionamento entre produto e cultura
    /// </summary>
    Task<bool> ExisteRelacionamentoAsync(int produtoId, int culturaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove todos os relacionamentos de um produto
    /// </summary>
    Task RemoverPorProdutoAsync(int produtoId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove todos os relacionamentos de uma cultura
    /// </summary>
    Task RemoverPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default);
}
</IProdutoCulturaRepository.cs>
<IProdutoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.Enums;

namespace Agriis.Produtos.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de produtos
/// </summary>
public interface IProdutoRepository : IRepository<Produto>
{
    /// <summary>
    /// Obtém um produto por código
    /// </summary>
    Task<Produto?> ObterPorCodigoAsync(string codigo, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos por fornecedor
    /// </summary>
    Task<IEnumerable<Produto>> ObterPorFornecedorAsync(int fornecedorId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos por categoria
    /// </summary>
    Task<IEnumerable<Produto>> ObterPorCategoriaAsync(int categoriaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos compatíveis com uma cultura
    /// </summary>
    Task<IEnumerable<Produto>> ObterPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos por tipo (Fabricante/Revendedor)
    /// </summary>
    Task<IEnumerable<Produto>> ObterPorTipoAsync(TipoProduto tipo, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos ativos
    /// </summary>
    Task<IEnumerable<Produto>> ObterAtivosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos fabricantes (sem produto pai)
    /// </summary>
    Task<IEnumerable<Produto>> ObterFabricantesAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos filhos de um produto pai
    /// </summary>
    Task<IEnumerable<Produto>> ObterProdutosFilhosAsync(int produtoPaiId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos restritos
    /// </summary>
    Task<IEnumerable<Produto>> ObterRestritosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Busca produtos por nome ou código
    /// </summary>
    Task<IEnumerable<Produto>> BuscarPorNomeOuCodigoAsync(string termo, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe produto com o código especificado
    /// </summary>
    Task<bool> ExisteComCodigoAsync(string codigo, int? idExcluir = null, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos com suas culturas
    /// </summary>
    Task<IEnumerable<Produto>> ObterComCulturasAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém produtos por múltiplas culturas
    /// </summary>
    Task<IEnumerable<Produto>> ObterPorCulturasAsync(IEnumerable<int> culturasIds, CancellationToken cancellationToken = default);
}
</IProdutoRepository.cs>
<DimensoesProduto.cs>
using Agriis.Compartilhado.Dominio.ObjetosValor;

namespace Agriis.Produtos.Dominio.ObjetosValor;

/// <summary>
/// Objeto de valor que representa as dimensões físicas de um produto
/// </summary>
public class DimensoesProduto : ObjetoValorBase
{
    /// <summary>
    /// Altura em centímetros
    /// </summary>
    public decimal Altura { get; private set; }
    
    /// <summary>
    /// Largura em centímetros
    /// </summary>
    public decimal Largura { get; private set; }
    
    /// <summary>
    /// Comprimento em centímetros
    /// </summary>
    public decimal Comprimento { get; private set; }
    
    /// <summary>
    /// Peso nominal em quilogramas
    /// </summary>
    public decimal PesoNominal { get; private set; }
    
    /// <summary>
    /// Densidade do produto (kg/m³)
    /// </summary>
    public decimal? Densidade { get; private set; }

    protected DimensoesProduto() { } // EF Constructor

    public DimensoesProduto(decimal altura, decimal largura, decimal comprimento, decimal pesoNominal, decimal? densidade = null)
    {
        if (altura <= 0)
            throw new ArgumentException("Altura deve ser maior que zero", nameof(altura));
        if (largura <= 0)
            throw new ArgumentException("Largura deve ser maior que zero", nameof(largura));
        if (comprimento <= 0)
            throw new ArgumentException("Comprimento deve ser maior que zero", nameof(comprimento));
        if (pesoNominal <= 0)
            throw new ArgumentException("Peso nominal deve ser maior que zero", nameof(pesoNominal));
        if (densidade.HasValue && densidade <= 0)
            throw new ArgumentException("Densidade deve ser maior que zero", nameof(densidade));

        Altura = altura;
        Largura = largura;
        Comprimento = comprimento;
        PesoNominal = pesoNominal;
        Densidade = densidade;
    }

    /// <summary>
    /// Calcula o volume em metros cúbicos
    /// </summary>
    public decimal CalcularVolume()
    {
        // Converter de cm³ para m³
        return (Altura * Largura * Comprimento) / 1_000_000;
    }

    /// <summary>
    /// Calcula o peso cúbico baseado na densidade
    /// </summary>
    public decimal? CalcularPesoCubado()
    {
        if (!Densidade.HasValue)
            return null;

        return CalcularVolume() * Densidade.Value;
    }

    /// <summary>
    /// Determina qual peso usar para cálculo de frete
    /// </summary>
    public decimal ObterPesoParaFrete()
    {
        var pesoCubado = CalcularPesoCubado();
        
        // Se não tem densidade, usa peso nominal
        if (!pesoCubado.HasValue)
            return PesoNominal;
        
        // Usa o maior entre peso nominal e peso cúbico
        return Math.Max(PesoNominal, pesoCubado.Value);
    }

    protected override IEnumerable<object> ObterComponentesIgualdade()
    {
        yield return Altura;
        yield return Largura;
        yield return Comprimento;
        yield return PesoNominal;
        yield return Densidade ?? 0;
    }
}
</DimensoesProduto.cs>
<CategoriaConfiguration.cs>
using Agriis.Produtos.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Produtos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Categoria
/// </summary>
public class CategoriaConfiguration : IEntityTypeConfiguration<Categoria>
{
    public void Configure(EntityTypeBuilder<Categoria> builder)
    {
        // Tabela
        builder.ToTable("Categorias");

        // Chave primária
        builder.HasKey(c => c.Id);

        // Propriedades básicas
        builder.Property(c => c.Nome)
            .IsRequired()
            .HasMaxLength(100);

        builder.Property(c => c.Descricao)
            .HasMaxLength(500);

        builder.Property(c => c.Tipo)
            .IsRequired()
            .HasConversion<int>();

        builder.Property(c => c.Ativo)
            .IsRequired();

        builder.Property(c => c.CategoriaPaiId);

        builder.Property(c => c.Ordem)
            .IsRequired();

        // Propriedades de auditoria
        builder.Property(c => c.DataCriacao)
            .IsRequired();

        builder.Property(c => c.DataAtualizacao);

        // Relacionamentos
        builder.HasOne(c => c.CategoriaPai)
            .WithMany(c => c.SubCategorias)
            .HasForeignKey(c => c.CategoriaPaiId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.HasMany(c => c.SubCategorias)
            .WithOne(c => c.CategoriaPai)
            .HasForeignKey(c => c.CategoriaPaiId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.HasMany(c => c.Produtos)
            .WithOne(p => p.Categoria)
            .HasForeignKey(p => p.CategoriaId)
            .OnDelete(DeleteBehavior.Restrict);

        // Índices
        builder.HasIndex(c => c.Nome)
            .IsUnique()
            .HasDatabaseName("IX_Categorias_Nome");

        builder.HasIndex(c => c.Tipo)
            .HasDatabaseName("IX_Categorias_Tipo");

        builder.HasIndex(c => c.CategoriaPaiId)
            .HasDatabaseName("IX_Categorias_CategoriaPaiId");

        builder.HasIndex(c => c.Ativo)
            .HasDatabaseName("IX_Categorias_Ativo");

        builder.HasIndex(c => c.Ordem)
            .HasDatabaseName("IX_Categorias_Ordem");
    }
}
</CategoriaConfiguration.cs>
<ProdutoConfiguration.cs>
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.ObjetosValor;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Produtos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Produto
/// </summary>
public class ProdutoConfiguration : IEntityTypeConfiguration<Produto>
{
    public void Configure(EntityTypeBuilder<Produto> builder)
    {
        // Tabela
        builder.ToTable("Produtos");

        // Chave primária
        builder.HasKey(p => p.Id);

        // Propriedades básicas
        builder.Property(p => p.Nome)
            .IsRequired()
            .HasMaxLength(200);

        builder.Property(p => p.Descricao)
            .HasMaxLength(1000);

        builder.Property(p => p.Codigo)
            .IsRequired()
            .HasMaxLength(50);

        builder.Property(p => p.Marca)
            .HasMaxLength(100);

        builder.Property(p => p.Tipo)
            .IsRequired()
            .HasConversion<int>();

        builder.Property(p => p.Status)
            .IsRequired()
            .HasConversion<int>();

        builder.Property(p => p.Unidade)
            .IsRequired()
            .HasConversion<int>();

        builder.Property(p => p.TipoCalculoPeso)
            .IsRequired()
            .HasConversion<int>();

        builder.Property(p => p.ProdutoRestrito)
            .IsRequired();

        builder.Property(p => p.ObservacoesRestricao)
            .HasMaxLength(500);

        builder.Property(p => p.CategoriaId)
            .IsRequired();

        builder.Property(p => p.FornecedorId)
            .IsRequired();

        builder.Property(p => p.ProdutoPaiId);

        // Configuração do objeto de valor DimensoesProduto
        builder.OwnsOne(p => p.Dimensoes, dimensoes =>
        {
            dimensoes.Property(d => d.Altura)
                .IsRequired()
                .HasColumnName("Altura")
                .HasPrecision(10, 2);

            dimensoes.Property(d => d.Largura)
                .IsRequired()
                .HasColumnName("Largura")
                .HasPrecision(10, 2);

            dimensoes.Property(d => d.Comprimento)
                .IsRequired()
                .HasColumnName("Comprimento")
                .HasPrecision(10, 2);

            dimensoes.Property(d => d.PesoNominal)
                .IsRequired()
                .HasColumnName("PesoNominal")
                .HasPrecision(10, 3);

            dimensoes.Property(d => d.Densidade)
                .HasColumnName("Densidade")
                .HasPrecision(10, 3);
        });

        // Configuração de JSON para dados adicionais
        builder.Property(p => p.DadosAdicionais)
            .HasColumnType("jsonb");

        // Propriedades de auditoria
        builder.Property(p => p.DataCriacao)
            .IsRequired();

        builder.Property(p => p.DataAtualizacao);

        // Relacionamentos
        builder.HasOne(p => p.Categoria)
            .WithMany(c => c.Produtos)
            .HasForeignKey(p => p.CategoriaId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.HasOne(p => p.ProdutoPai)
            .WithMany(p => p.ProdutosFilhos)
            .HasForeignKey(p => p.ProdutoPaiId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.HasMany(p => p.ProdutosCulturas)
            .WithOne(pc => pc.Produto)
            .HasForeignKey(pc => pc.ProdutoId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(p => p.Codigo)
            .IsUnique()
            .HasDatabaseName("IX_Produtos_Codigo");

        builder.HasIndex(p => p.Nome)
            .HasDatabaseName("IX_Produtos_Nome");

        builder.HasIndex(p => p.CategoriaId)
            .HasDatabaseName("IX_Produtos_CategoriaId");

        builder.HasIndex(p => p.FornecedorId)
            .HasDatabaseName("IX_Produtos_FornecedorId");

        builder.HasIndex(p => p.ProdutoPaiId)
            .HasDatabaseName("IX_Produtos_ProdutoPaiId");

        builder.HasIndex(p => p.Status)
            .HasDatabaseName("IX_Produtos_Status");

        builder.HasIndex(p => p.Tipo)
            .HasDatabaseName("IX_Produtos_Tipo");

        builder.HasIndex(p => p.ProdutoRestrito)
            .HasDatabaseName("IX_Produtos_ProdutoRestrito");
    }
}
</ProdutoConfiguration.cs>
<ProdutoCulturaConfiguration.cs>
using Agriis.Produtos.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Produtos.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade ProdutoCultura
/// </summary>
public class ProdutoCulturaConfiguration : IEntityTypeConfiguration<ProdutoCultura>
{
    public void Configure(EntityTypeBuilder<ProdutoCultura> builder)
    {
        // Tabela
        builder.ToTable("ProdutosCulturas");

        // Chave primária
        builder.HasKey(pc => pc.Id);

        // Propriedades básicas
        builder.Property(pc => pc.ProdutoId)
            .IsRequired();

        builder.Property(pc => pc.CulturaId)
            .IsRequired();

        builder.Property(pc => pc.Ativo)
            .IsRequired();

        builder.Property(pc => pc.Observacoes)
            .HasMaxLength(500);

        // Propriedades de auditoria
        builder.Property(pc => pc.DataCriacao)
            .IsRequired();

        builder.Property(pc => pc.DataAtualizacao);

        // Relacionamentos
        builder.HasOne(pc => pc.Produto)
            .WithMany(p => p.ProdutosCulturas)
            .HasForeignKey(pc => pc.ProdutoId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(pc => new { pc.ProdutoId, pc.CulturaId })
            .IsUnique()
            .HasDatabaseName("IX_ProdutosCulturas_ProdutoId_CulturaId");

        builder.HasIndex(pc => pc.ProdutoId)
            .HasDatabaseName("IX_ProdutosCulturas_ProdutoId");

        builder.HasIndex(pc => pc.CulturaId)
            .HasDatabaseName("IX_ProdutosCulturas_CulturaId");

        builder.HasIndex(pc => pc.Ativo)
            .HasDatabaseName("IX_ProdutosCulturas_Ativo");
    }
}
</ProdutoCulturaConfiguration.cs>
<CategoriaRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.Enums;
using Agriis.Produtos.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Produtos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de categorias
/// </summary>
public class CategoriaRepository : RepositoryBase<Categoria, DbContext>, ICategoriaRepository
{
    public CategoriaRepository(DbContext context) : base(context)
    {
    }

    public async Task<Categoria?> ObterPorNomeAsync(string nome, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(c => c.CategoriaPai)
            .Include(c => c.SubCategorias.Where(sc => sc.Ativo))
            .FirstOrDefaultAsync(c => c.Nome == nome, cancellationToken);
    }

    public async Task<IEnumerable<Categoria>> ObterAtivasAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(c => c.CategoriaPai)
            .Include(c => c.SubCategorias.Where(sc => sc.Ativo))
            .Where(c => c.Ativo)
            .OrderBy(c => c.Ordem)
            .ThenBy(c => c.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Categoria>> ObterPorTipoAsync(CategoriaProduto tipo, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(c => c.CategoriaPai)
            .Include(c => c.SubCategorias.Where(sc => sc.Ativo))
            .Where(c => c.Tipo == tipo)
            .OrderBy(c => c.Ordem)
            .ThenBy(c => c.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Categoria>> ObterCategoriasRaizAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(c => c.SubCategorias.Where(sc => sc.Ativo))
            .Where(c => c.CategoriaPaiId == null)
            .OrderBy(c => c.Ordem)
            .ThenBy(c => c.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Categoria>> ObterSubCategoriasAsync(int categoriaPaiId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(c => c.CategoriaPai)
            .Include(c => c.SubCategorias.Where(sc => sc.Ativo))
            .Where(c => c.CategoriaPaiId == categoriaPaiId)
            .OrderBy(c => c.Ordem)
            .ThenBy(c => c.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Categoria>> ObterComSubCategoriasAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(c => c.CategoriaPai)
            .Include(c => c.SubCategorias.Where(sc => sc.Ativo))
            .OrderBy(c => c.Ordem)
            .ThenBy(c => c.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Categoria>> ObterOrdenadasAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(c => c.CategoriaPai)
            .OrderBy(c => c.Ordem)
            .ThenBy(c => c.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<bool> ExisteComNomeAsync(string nome, int? idExcluir = null, CancellationToken cancellationToken = default)
    {
        var query = DbSet.Where(c => c.Nome == nome);
        
        if (idExcluir.HasValue)
            query = query.Where(c => c.Id != idExcluir.Value);
            
        return await query.AnyAsync(cancellationToken);
    }

    public async Task<bool> TemProdutosAsync(int categoriaId, CancellationToken cancellationToken = default)
    {
        return await Context.Set<Produto>()
            .AnyAsync(p => p.CategoriaId == categoriaId, cancellationToken);
    }

    public async Task<bool> TemSubCategoriasAsync(int categoriaId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .AnyAsync(c => c.CategoriaPaiId == categoriaId && c.Ativo, cancellationToken);
    }

    public override async Task<Categoria?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(c => c.CategoriaPai)
            .Include(c => c.SubCategorias.Where(sc => sc.Ativo))
            .Include(c => c.Produtos.Where(p => p.EstaAtivo()))
            .FirstOrDefaultAsync(c => c.Id == id, cancellationToken);
    }

    public override async Task<IEnumerable<Categoria>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(c => c.CategoriaPai)
            .Include(c => c.SubCategorias.Where(sc => sc.Ativo))
            .OrderBy(c => c.Ordem)
            .ThenBy(c => c.Nome)
            .ToListAsync(cancellationToken);
    }
}
</CategoriaRepository.cs>
<ProdutoCulturaRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Produtos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de relacionamento produto-cultura
/// </summary>
public class ProdutoCulturaRepository : RepositoryBase<ProdutoCultura, DbContext>, IProdutoCulturaRepository
{
    public ProdutoCulturaRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<ProdutoCultura>> ObterPorProdutoAsync(int produtoId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(pc => pc.Produto)
            .Where(pc => pc.ProdutoId == produtoId)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<ProdutoCultura>> ObterPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(pc => pc.Produto)
            .Where(pc => pc.CulturaId == culturaId)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<ProdutoCultura>> ObterAtivosPorProdutoAsync(int produtoId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(pc => pc.Produto)
            .Where(pc => pc.ProdutoId == produtoId && pc.Ativo)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<ProdutoCultura>> ObterAtivosPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(pc => pc.Produto)
            .Where(pc => pc.CulturaId == culturaId && pc.Ativo)
            .ToListAsync(cancellationToken);
    }

    public async Task<ProdutoCultura?> ObterPorProdutoECulturaAsync(int produtoId, int culturaId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(pc => pc.Produto)
            .FirstOrDefaultAsync(pc => pc.ProdutoId == produtoId && pc.CulturaId == culturaId, cancellationToken);
    }

    public async Task<bool> ExisteRelacionamentoAsync(int produtoId, int culturaId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .AnyAsync(pc => pc.ProdutoId == produtoId && pc.CulturaId == culturaId, cancellationToken);
    }

    public async Task RemoverPorProdutoAsync(int produtoId, CancellationToken cancellationToken = default)
    {
        var relacionamentos = await DbSet
            .Where(pc => pc.ProdutoId == produtoId)
            .ToListAsync(cancellationToken);

        if (relacionamentos.Any())
        {
            DbSet.RemoveRange(relacionamentos);
        }
    }

    public async Task RemoverPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default)
    {
        var relacionamentos = await DbSet
            .Where(pc => pc.CulturaId == culturaId)
            .ToListAsync(cancellationToken);

        if (relacionamentos.Any())
        {
            DbSet.RemoveRange(relacionamentos);
        }
    }
}
</ProdutoCulturaRepository.cs>
<ProdutoRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Produtos.Dominio.Entidades;
using Agriis.Produtos.Dominio.Enums;
using Agriis.Produtos.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Produtos.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de produtos
/// </summary>
public class ProdutoRepository : RepositoryBase<Produto, DbContext>, IProdutoRepository
{
    public ProdutoRepository(DbContext context) : base(context)
    {
    }

    public async Task<Produto?> ObterPorCodigoAsync(string codigo, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutoPai)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .FirstOrDefaultAsync(p => p.Codigo == codigo, cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterPorFornecedorAsync(int fornecedorId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.FornecedorId == fornecedorId)
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterPorCategoriaAsync(int categoriaId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.CategoriaId == categoriaId)
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterPorCulturaAsync(int culturaId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.ProdutosCulturas.Any(pc => pc.CulturaId == culturaId && pc.Ativo))
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterPorTipoAsync(TipoProduto tipo, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.Tipo == tipo)
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterAtivosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.Status == StatusProduto.Ativo)
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterFabricantesAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.Tipo == TipoProduto.Fabricante)
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterProdutosFilhosAsync(int produtoPaiId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.ProdutoPaiId == produtoPaiId)
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterRestritosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.ProdutoRestrito)
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> BuscarPorNomeOuCodigoAsync(string termo, CancellationToken cancellationToken = default)
    {
        var termoLower = termo.ToLower();
        
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.Nome.ToLower().Contains(termoLower) || 
                       p.Codigo.ToLower().Contains(termoLower) ||
                       (p.Marca != null && p.Marca.ToLower().Contains(termoLower)))
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<bool> ExisteComCodigoAsync(string codigo, int? idExcluir = null, CancellationToken cancellationToken = default)
    {
        var query = DbSet.Where(p => p.Codigo == codigo);
        
        if (idExcluir.HasValue)
            query = query.Where(p => p.Id != idExcluir.Value);
            
        return await query.AnyAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterComCulturasAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Produto>> ObterPorCulturasAsync(IEnumerable<int> culturasIds, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .Where(p => p.ProdutosCulturas.Any(pc => culturasIds.Contains(pc.CulturaId) && pc.Ativo))
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }

    public override async Task<Produto?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutoPai)
            .Include(p => p.ProdutosFilhos)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .FirstOrDefaultAsync(p => p.Id == id, cancellationToken);
    }

    public override async Task<IEnumerable<Produto>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Include(p => p.Categoria)
            .Include(p => p.ProdutosCulturas.Where(pc => pc.Ativo))
            .OrderBy(p => p.Nome)
            .ToListAsync(cancellationToken);
    }
}
</ProdutoRepository.cs>
<PropriedadeCulturaDto.cs>
namespace Agriis.Propriedades.Aplicacao.DTOs;

public class PropriedadeCulturaDto
{
    public int Id { get; set; }
    public int PropriedadeId { get; set; }
    public int CulturaId { get; set; }
    public decimal Area { get; set; }
    public int? SafraId { get; set; }
    public DateTime? DataPlantio { get; set; }
    public DateTime? DataColheitaPrevista { get; set; }
    public string? Observacoes { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
    public bool EstaEmPeriodoPlantio { get; set; }
}

public class PropriedadeCulturaCreateDto
{
    public int PropriedadeId { get; set; }
    public int CulturaId { get; set; }
    public decimal Area { get; set; }
    public int? SafraId { get; set; }
    public DateTime? DataPlantio { get; set; }
    public DateTime? DataColheitaPrevista { get; set; }
    public string? Observacoes { get; set; }
}

public class PropriedadeCulturaUpdateDto
{
    public decimal Area { get; set; }
    public int? SafraId { get; set; }
    public DateTime? DataPlantio { get; set; }
    public DateTime? DataColheitaPrevista { get; set; }
    public string? Observacoes { get; set; }
}
</PropriedadeCulturaDto.cs>
<PropriedadeDto.cs>
namespace Agriis.Propriedades.Aplicacao.DTOs;

public class PropriedadeDto
{
    public int Id { get; set; }
    public string Nome { get; set; } = string.Empty;
    public string? Nirf { get; set; }
    public string? InscricaoEstadual { get; set; }
    public decimal AreaTotal { get; set; }
    public int ProdutorId { get; set; }
    public int? EnderecoId { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
    public object? DadosAdicionais { get; set; }

    public List<TalhaoDto> Talhoes { get; set; } = new();
    public List<PropriedadeCulturaDto> Culturas { get; set; } = new();
}

public class PropriedadeCreateDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Nirf { get; set; }
    public string? InscricaoEstadual { get; set; }
    public decimal AreaTotal { get; set; }
    public int ProdutorId { get; set; }
    public int? EnderecoId { get; set; }
    public object? DadosAdicionais { get; set; }
}

public class PropriedadeUpdateDto
{
    public string Nome { get; set; } = string.Empty;
    public string? Nirf { get; set; }
    public string? InscricaoEstadual { get; set; }
    public decimal AreaTotal { get; set; }
    public int? EnderecoId { get; set; }
    public object? DadosAdicionais { get; set; }
}
</PropriedadeDto.cs>
<TalhaoDto.cs>
namespace Agriis.Propriedades.Aplicacao.DTOs;

public class TalhaoDto
{
    public int Id { get; set; }
    public string Nome { get; set; } = string.Empty;
    public decimal Area { get; set; }
    public string? Descricao { get; set; }
    public double? Latitude { get; set; }
    public double? Longitude { get; set; }
    public int PropriedadeId { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

public class TalhaoCreateDto
{
    public string Nome { get; set; } = string.Empty;
    public decimal Area { get; set; }
    public string? Descricao { get; set; }
    public double? Latitude { get; set; }
    public double? Longitude { get; set; }
    public int PropriedadeId { get; set; }
}

public class TalhaoUpdateDto
{
    public string Nome { get; set; } = string.Empty;
    public decimal Area { get; set; }
    public string? Descricao { get; set; }
    public double? Latitude { get; set; }
    public double? Longitude { get; set; }
}
</TalhaoDto.cs>
<IPropriedadeCulturaService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Propriedades.Aplicacao.DTOs;

namespace Agriis.Propriedades.Aplicacao.Interfaces;

public interface IPropriedadeCulturaService
{
    Task<Result<PropriedadeCulturaDto>> ObterPorIdAsync(int id);
    Task<Result<IEnumerable<PropriedadeCulturaDto>>> ObterPorPropriedadeAsync(int propriedadeId);
    Task<Result<IEnumerable<PropriedadeCulturaDto>>> ObterPorCulturaAsync(int culturaId);
    Task<Result<PropriedadeCulturaDto>> CriarAsync(PropriedadeCulturaCreateDto dto);
    Task<Result<PropriedadeCulturaDto>> AtualizarAsync(int id, PropriedadeCulturaUpdateDto dto);
    Task<Result> RemoverAsync(int id);
    Task<Result<decimal>> CalcularAreaTotalPorCulturaAsync(int culturaId);
    Task<Result<IEnumerable<PropriedadeCulturaDto>>> ObterEmPeriodoPlantioAsync();
}
</IPropriedadeCulturaService.cs>
<IPropriedadeService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Propriedades.Aplicacao.DTOs;

namespace Agriis.Propriedades.Aplicacao.Interfaces;

public interface IPropriedadeService
{
    Task<Result<PropriedadeDto>> ObterPorIdAsync(int id);
    Task<Result<IEnumerable<PropriedadeDto>>> ObterPorProdutorAsync(int produtorId);
    Task<Result<IEnumerable<PropriedadeDto>>> ObterPorCulturaAsync(int culturaId);
    Task<Result<PropriedadeDto>> CriarAsync(PropriedadeCreateDto dto);
    Task<Result<PropriedadeDto>> AtualizarAsync(int id, PropriedadeUpdateDto dto);
    Task<Result> RemoverAsync(int id);
    Task<Result<PropriedadeDto>> ObterCompletaAsync(int id);
    Task<Result<decimal>> CalcularAreaTotalPorProdutorAsync(int produtorId);
    Task<Result<IEnumerable<PropriedadeDto>>> BuscarPropriedadesProximasAsync(double latitude, double longitude, double raioKm);
    Task<Result<Dictionary<int, decimal>>> ObterEstatisticasCulturasPorProdutorAsync(int produtorId);
}
</IPropriedadeService.cs>
<ITalhaoService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Propriedades.Aplicacao.DTOs;

namespace Agriis.Propriedades.Aplicacao.Interfaces;

public interface ITalhaoService
{
    Task<Result<TalhaoDto>> ObterPorIdAsync(int id);
    Task<Result<IEnumerable<TalhaoDto>>> ObterPorPropriedadeAsync(int propriedadeId);
    Task<Result<TalhaoDto>> CriarAsync(TalhaoCreateDto dto);
    Task<Result<TalhaoDto>> AtualizarAsync(int id, TalhaoUpdateDto dto);
    Task<Result> RemoverAsync(int id);
    Task<Result<decimal>> CalcularAreaTotalPorPropriedadeAsync(int propriedadeId);
    Task<Result<IEnumerable<TalhaoDto>>> BuscarTalhoesProximosAsync(double latitude, double longitude, double raioKm);
}
</ITalhaoService.cs>
<PropriedadeMappingProfile.cs>
using AutoMapper;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Propriedades.Aplicacao.DTOs;
using Agriis.Propriedades.Dominio.Entidades;
using NetTopologySuite.Geometries;
using System.Text.Json;

namespace Agriis.Propriedades.Aplicacao.Mapeamentos;

public class PropriedadeMappingProfile : Profile
{
    public PropriedadeMappingProfile()
    {
        // Propriedade mappings
        CreateMap<Propriedade, PropriedadeDto>()
            .ForMember(dest => dest.AreaTotal, opt => opt.MapFrom(src => src.AreaTotal.Valor))
            .ForMember(dest => dest.DadosAdicionais, opt => opt.MapFrom(src => 
                src.DadosAdicionais != null ? JsonSerializer.Deserialize<object>(src.DadosAdicionais.RootElement.GetRawText(), (JsonSerializerOptions?)null) : null))
            .ForMember(dest => dest.Talhoes, opt => opt.MapFrom(src => src.Talhoes))
            .ForMember(dest => dest.Culturas, opt => opt.MapFrom(src => src.PropriedadeCulturas));

        CreateMap<PropriedadeCreateDto, Propriedade>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.DataCriacao, opt => opt.Ignore())
            .ForMember(dest => dest.DataAtualizacao, opt => opt.Ignore())
            .ForMember(dest => dest.Talhoes, opt => opt.Ignore())
            .ForMember(dest => dest.PropriedadeCulturas, opt => opt.Ignore())
            .ForMember(dest => dest.DadosAdicionais, opt => opt.Ignore())
            .AfterMap((src, dest) =>
            {
                if (src.DadosAdicionais != null)
                {
                    dest.DefinirDadosAdicionais(src.DadosAdicionais);
                }
            });

        // Talhao mappings
        CreateMap<Talhao, TalhaoDto>()
            .ForMember(dest => dest.Area, opt => opt.MapFrom(src => src.Area.Valor))
            .ForMember(dest => dest.Latitude, opt => opt.MapFrom(src => src.Localizacao != null ? src.Localizacao.Y : (double?)null))
            .ForMember(dest => dest.Longitude, opt => opt.MapFrom(src => src.Localizacao != null ? src.Localizacao.X : (double?)null));

        CreateMap<TalhaoCreateDto, Talhao>()
            .ConstructUsing(src => new Talhao(
                src.Nome,
                new AreaPlantio(src.Area),
                src.PropriedadeId,
                src.Descricao))
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.DataCriacao, opt => opt.Ignore())
            .ForMember(dest => dest.DataAtualizacao, opt => opt.Ignore())
            .ForMember(dest => dest.Localizacao, opt => opt.Ignore())
            .ForMember(dest => dest.Geometria, opt => opt.Ignore())
            .ForMember(dest => dest.Propriedade, opt => opt.Ignore())
            .AfterMap((src, dest) =>
            {
                if (src.Latitude.HasValue && src.Longitude.HasValue)
                {
                    dest.DefinirLocalizacao(src.Latitude.Value, src.Longitude.Value);
                }
            });

        // PropriedadeCultura mappings
        CreateMap<PropriedadeCultura, PropriedadeCulturaDto>()
            .ForMember(dest => dest.Area, opt => opt.MapFrom(src => src.Area.Valor))
            .ForMember(dest => dest.EstaEmPeriodoPlantio, opt => opt.MapFrom(src => src.EstaEmPeriodoPlantio()));

        CreateMap<PropriedadeCulturaCreateDto, PropriedadeCultura>()
            .ConstructUsing(src => new PropriedadeCultura(
                src.PropriedadeId,
                src.CulturaId,
                new AreaPlantio(src.Area),
                src.SafraId))
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.DataCriacao, opt => opt.Ignore())
            .ForMember(dest => dest.DataAtualizacao, opt => opt.Ignore())
            .ForMember(dest => dest.Propriedade, opt => opt.Ignore())
            .AfterMap((src, dest) =>
            {
                if (src.DataPlantio.HasValue || src.DataColheitaPrevista.HasValue)
                {
                    dest.DefinirDatasPlantioColheita(src.DataPlantio, src.DataColheitaPrevista);
                }
                if (!string.IsNullOrEmpty(src.Observacoes))
                {
                    dest.AdicionarObservacoes(src.Observacoes);
                }
            });
    }
}
</PropriedadeMappingProfile.cs>
<PropriedadeCulturaService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Propriedades.Aplicacao.DTOs;
using Agriis.Propriedades.Aplicacao.Interfaces;
using Agriis.Propriedades.Dominio.Entidades;
using Agriis.Propriedades.Dominio.Interfaces;
using Agriis.Propriedades.Dominio.Servicos;

namespace Agriis.Propriedades.Aplicacao.Servicos;

public class PropriedadeCulturaService : IPropriedadeCulturaService
{
    private readonly IPropriedadeCulturaRepository _propriedadeCulturaRepository;
    private readonly PropriedadeDomainService _domainService;
    private readonly IMapper _mapper;

    public PropriedadeCulturaService(
        IPropriedadeCulturaRepository propriedadeCulturaRepository,
        PropriedadeDomainService domainService,
        IMapper mapper)
    {
        _propriedadeCulturaRepository = propriedadeCulturaRepository;
        _domainService = domainService;
        _mapper = mapper;
    }

    public async Task<Result<PropriedadeCulturaDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var propriedadeCultura = await _propriedadeCulturaRepository.ObterPorIdAsync(id);
            if (propriedadeCultura == null)
                return Result<PropriedadeCulturaDto>.Failure("Propriedade cultura não encontrada");

            var dto = _mapper.Map<PropriedadeCulturaDto>(propriedadeCultura);
            return Result<PropriedadeCulturaDto>.Success(dto);
        }
        catch (Exception ex)
        {
            return Result<PropriedadeCulturaDto>.Failure($"Erro ao obter propriedade cultura: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<PropriedadeCulturaDto>>> ObterPorPropriedadeAsync(int propriedadeId)
    {
        try
        {
            var propriedadeCulturas = await _propriedadeCulturaRepository.ObterPorPropriedadeAsync(propriedadeId);
            var dtos = _mapper.Map<IEnumerable<PropriedadeCulturaDto>>(propriedadeCulturas);
            return Result<IEnumerable<PropriedadeCulturaDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<PropriedadeCulturaDto>>.Failure($"Erro ao obter culturas da propriedade: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<PropriedadeCulturaDto>>> ObterPorCulturaAsync(int culturaId)
    {
        try
        {
            var propriedadeCulturas = await _propriedadeCulturaRepository.ObterPorCulturaAsync(culturaId);
            var dtos = _mapper.Map<IEnumerable<PropriedadeCulturaDto>>(propriedadeCulturas);
            return Result<IEnumerable<PropriedadeCulturaDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<PropriedadeCulturaDto>>.Failure($"Erro ao obter propriedades da cultura: {ex.Message}");
        }
    }

    public async Task<Result<PropriedadeCulturaDto>> CriarAsync(PropriedadeCulturaCreateDto dto)
    {
        try
        {
            // Verificar se já existe essa combinação propriedade-cultura
            var existente = await _propriedadeCulturaRepository.ObterPorPropriedadeECulturaAsync(dto.PropriedadeId, dto.CulturaId);
            if (existente != null)
                return Result<PropriedadeCulturaDto>.Failure("Cultura já está associada a esta propriedade");

            // Validar se a área da cultura não excede a área da propriedade
            var areaValida = await _domainService.ValidarAreaCulturaAsync(dto.PropriedadeId, new AreaPlantio(dto.Area));
            if (!areaValida)
                return Result<PropriedadeCulturaDto>.Failure("Área da cultura excede a área disponível da propriedade");

            var propriedadeCultura = new PropriedadeCultura(dto.PropriedadeId, dto.CulturaId, new AreaPlantio(dto.Area), dto.SafraId);
            
            if (dto.DataPlantio.HasValue || dto.DataColheitaPrevista.HasValue)
            {
                propriedadeCultura.DefinirDatasPlantioColheita(dto.DataPlantio, dto.DataColheitaPrevista);
            }

            if (!string.IsNullOrEmpty(dto.Observacoes))
            {
                propriedadeCultura.AdicionarObservacoes(dto.Observacoes);
            }
            var propriedadeCulturaCriada = await _propriedadeCulturaRepository.AdicionarAsync(propriedadeCultura);
            
            var resultado = _mapper.Map<PropriedadeCulturaDto>(propriedadeCulturaCriada);
            return Result<PropriedadeCulturaDto>.Success(resultado);
        }
        catch (Exception ex)
        {
            return Result<PropriedadeCulturaDto>.Failure($"Erro ao criar propriedade cultura: {ex.Message}");
        }
    }

    public async Task<Result<PropriedadeCulturaDto>> AtualizarAsync(int id, PropriedadeCulturaUpdateDto dto)
    {
        try
        {
            var propriedadeCultura = await _propriedadeCulturaRepository.ObterPorIdAsync(id);
            if (propriedadeCultura == null)
                return Result<PropriedadeCulturaDto>.Failure("Propriedade cultura não encontrada");

            // Validar se a nova área não excede a área da propriedade
            var areaValida = await _domainService.ValidarAreaCulturaAsync(propriedadeCultura.PropriedadeId, new AreaPlantio(dto.Area));
            if (!areaValida)
                return Result<PropriedadeCulturaDto>.Failure("Nova área da cultura excede a área disponível da propriedade");

            propriedadeCultura.AtualizarArea(new AreaPlantio(dto.Area));

            if (dto.SafraId.HasValue)
            {
                propriedadeCultura.DefinirSafra(dto.SafraId.Value);
            }

            if (dto.DataPlantio.HasValue || dto.DataColheitaPrevista.HasValue)
            {
                propriedadeCultura.DefinirDatasPlantioColheita(dto.DataPlantio, dto.DataColheitaPrevista);
            }

            if (!string.IsNullOrEmpty(dto.Observacoes))
            {
                propriedadeCultura.AdicionarObservacoes(dto.Observacoes);
            }

            await _propriedadeCulturaRepository.AtualizarAsync(propriedadeCultura);
            
            var resultado = _mapper.Map<PropriedadeCulturaDto>(propriedadeCultura);
            return Result<PropriedadeCulturaDto>.Success(resultado);
        }
        catch (Exception ex)
        {
            return Result<PropriedadeCulturaDto>.Failure($"Erro ao atualizar propriedade cultura: {ex.Message}");
        }
    }

    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            await _propriedadeCulturaRepository.RemoverAsync(id);
            return Result.Success();
        }
        catch (Exception ex)
        {
            return Result.Failure($"Erro ao remover propriedade cultura: {ex.Message}");
        }
    }

    public async Task<Result<decimal>> CalcularAreaTotalPorCulturaAsync(int culturaId)
    {
        try
        {
            var areaTotal = await _domainService.CalcularAreaTotalCulturaAsync(culturaId);
            return Result<decimal>.Success(areaTotal.Valor);
        }
        catch (Exception ex)
        {
            return Result<decimal>.Failure($"Erro ao calcular área total da cultura: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<PropriedadeCulturaDto>>> ObterEmPeriodoPlantioAsync()
    {
        try
        {
            var propriedadeCulturas = await _propriedadeCulturaRepository.ObterEmPeriodoPlantioAsync();
            var dtos = _mapper.Map<IEnumerable<PropriedadeCulturaDto>>(propriedadeCulturas);
            return Result<IEnumerable<PropriedadeCulturaDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<PropriedadeCulturaDto>>.Failure($"Erro ao obter culturas em período de plantio: {ex.Message}");
        }
    }
}
</PropriedadeCulturaService.cs>
<PropriedadeService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Propriedades.Aplicacao.DTOs;
using Agriis.Propriedades.Aplicacao.Interfaces;
using Agriis.Propriedades.Dominio.Entidades;
using Agriis.Propriedades.Dominio.Interfaces;
using Agriis.Propriedades.Dominio.Servicos;
using NetTopologySuite.Geometries;

namespace Agriis.Propriedades.Aplicacao.Servicos;

public class PropriedadeService : IPropriedadeService
{
    private readonly IPropriedadeRepository _propriedadeRepository;
    private readonly PropriedadeDomainService _domainService;
    private readonly IMapper _mapper;

    public PropriedadeService(
        IPropriedadeRepository propriedadeRepository,
        PropriedadeDomainService domainService,
        IMapper mapper)
    {
        _propriedadeRepository = propriedadeRepository;
        _domainService = domainService;
        _mapper = mapper;
    }

    public async Task<Result<PropriedadeDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var propriedade = await _propriedadeRepository.ObterPorIdAsync(id);
            if (propriedade == null)
                return Result<PropriedadeDto>.Failure("Propriedade não encontrada");

            var dto = _mapper.Map<PropriedadeDto>(propriedade);
            return Result<PropriedadeDto>.Success(dto);
        }
        catch (Exception ex)
        {
            return Result<PropriedadeDto>.Failure($"Erro ao obter propriedade: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<PropriedadeDto>>> ObterPorProdutorAsync(int produtorId)
    {
        try
        {
            var propriedades = await _propriedadeRepository.ObterPorProdutorAsync(produtorId);
            var dtos = _mapper.Map<IEnumerable<PropriedadeDto>>(propriedades);
            return Result<IEnumerable<PropriedadeDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<PropriedadeDto>>.Failure($"Erro ao obter propriedades: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<PropriedadeDto>>> ObterPorCulturaAsync(int culturaId)
    {
        try
        {
            var propriedades = await _propriedadeRepository.ObterPorCulturaAsync(culturaId);
            var dtos = _mapper.Map<IEnumerable<PropriedadeDto>>(propriedades);
            return Result<IEnumerable<PropriedadeDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<PropriedadeDto>>.Failure($"Erro ao obter propriedades: {ex.Message}");
        }
    }

    public async Task<Result<PropriedadeDto>> CriarAsync(PropriedadeCreateDto dto)
    {
        try
        {
            var propriedade = new Propriedade(
                dto.Nome,
                dto.ProdutorId,
                new AreaPlantio(dto.AreaTotal),
                dto.Nirf,
                dto.InscricaoEstadual,
                dto.EnderecoId);

            if (dto.DadosAdicionais != null)
            {
                propriedade.DefinirDadosAdicionais(dto.DadosAdicionais);
            }

            var propriedadeCriada = await _propriedadeRepository.AdicionarAsync(propriedade);
            
            var resultado = _mapper.Map<PropriedadeDto>(propriedadeCriada);
            return Result<PropriedadeDto>.Success(resultado);
        }
        catch (Exception ex)
        {
            return Result<PropriedadeDto>.Failure($"Erro ao criar propriedade: {ex.Message}");
        }
    }

    public async Task<Result<PropriedadeDto>> AtualizarAsync(int id, PropriedadeUpdateDto dto)
    {
        try
        {
            var propriedade = await _propriedadeRepository.ObterPorIdAsync(id);
            if (propriedade == null)
                return Result<PropriedadeDto>.Failure("Propriedade não encontrada");

            propriedade.AtualizarDados(
                dto.Nome,
                new AreaPlantio(dto.AreaTotal),
                dto.Nirf,
                dto.InscricaoEstadual,
                dto.EnderecoId);

            if (dto.DadosAdicionais != null)
            {
                propriedade.DefinirDadosAdicionais(dto.DadosAdicionais);
            }

            await _propriedadeRepository.AtualizarAsync(propriedade);
            
            var resultado = _mapper.Map<PropriedadeDto>(propriedade);
            return Result<PropriedadeDto>.Success(resultado);
        }
        catch (Exception ex)
        {
            return Result<PropriedadeDto>.Failure($"Erro ao atualizar propriedade: {ex.Message}");
        }
    }

    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            var podeRemover = await _domainService.PodeRemoverPropriedadeAsync(id);
            if (!podeRemover)
                return Result.Failure("Não é possível remover propriedade com talhões ou culturas ativas");

            await _propriedadeRepository.RemoverAsync(id);
            return Result.Success();
        }
        catch (Exception ex)
        {
            return Result.Failure($"Erro ao remover propriedade: {ex.Message}");
        }
    }

    public async Task<Result<PropriedadeDto>> ObterCompletaAsync(int id)
    {
        try
        {
            var propriedade = await _propriedadeRepository.ObterCompletaAsync(id);
            if (propriedade == null)
                return Result<PropriedadeDto>.Failure("Propriedade não encontrada");

            var dto = _mapper.Map<PropriedadeDto>(propriedade);
            return Result<PropriedadeDto>.Success(dto);
        }
        catch (Exception ex)
        {
            return Result<PropriedadeDto>.Failure($"Erro ao obter propriedade completa: {ex.Message}");
        }
    }

    public async Task<Result<decimal>> CalcularAreaTotalPorProdutorAsync(int produtorId)
    {
        try
        {
            var areaTotal = await _domainService.CalcularAreaTotalProdutorAsync(produtorId);
            return Result<decimal>.Success(areaTotal.Valor);
        }
        catch (Exception ex)
        {
            return Result<decimal>.Failure($"Erro ao calcular área total: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<PropriedadeDto>>> BuscarPropriedadesProximasAsync(
        double latitude, double longitude, double raioKm)
    {
        try
        {
            var geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);
            var ponto = geometryFactory.CreatePoint(new Coordinate(longitude, latitude));
            
            var propriedades = await _domainService.BuscarPropriedadesProximasAsync(ponto, raioKm);
            var dtos = _mapper.Map<IEnumerable<PropriedadeDto>>(propriedades);
            
            return Result<IEnumerable<PropriedadeDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<PropriedadeDto>>.Failure($"Erro ao buscar propriedades próximas: {ex.Message}");
        }
    }

    public async Task<Result<Dictionary<int, decimal>>> ObterEstatisticasCulturasPorProdutorAsync(int produtorId)
    {
        try
        {
            var estatisticas = await _domainService.ObterEstatisticasCulturasPorProdutorAsync(produtorId);
            return Result<Dictionary<int, decimal>>.Success(estatisticas);
        }
        catch (Exception ex)
        {
            return Result<Dictionary<int, decimal>>.Failure($"Erro ao obter estatísticas: {ex.Message}");
        }
    }
}
</PropriedadeService.cs>
<TalhaoService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Propriedades.Aplicacao.DTOs;
using Agriis.Propriedades.Aplicacao.Interfaces;
using Agriis.Propriedades.Dominio.Entidades;
using Agriis.Propriedades.Dominio.Interfaces;
using Agriis.Propriedades.Dominio.Servicos;
using NetTopologySuite.Geometries;

namespace Agriis.Propriedades.Aplicacao.Servicos;

public class TalhaoService : ITalhaoService
{
    private readonly ITalhaoRepository _talhaoRepository;
    private readonly PropriedadeDomainService _domainService;
    private readonly IMapper _mapper;

    public TalhaoService(
        ITalhaoRepository talhaoRepository,
        PropriedadeDomainService domainService,
        IMapper mapper)
    {
        _talhaoRepository = talhaoRepository;
        _domainService = domainService;
        _mapper = mapper;
    }

    public async Task<Result<TalhaoDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var talhao = await _talhaoRepository.ObterPorIdAsync(id);
            if (talhao == null)
                return Result<TalhaoDto>.Failure("Talhão não encontrado");

            var dto = _mapper.Map<TalhaoDto>(talhao);
            return Result<TalhaoDto>.Success(dto);
        }
        catch (Exception ex)
        {
            return Result<TalhaoDto>.Failure($"Erro ao obter talhão: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<TalhaoDto>>> ObterPorPropriedadeAsync(int propriedadeId)
    {
        try
        {
            var talhoes = await _talhaoRepository.ObterPorPropriedadeAsync(propriedadeId);
            var dtos = _mapper.Map<IEnumerable<TalhaoDto>>(talhoes);
            return Result<IEnumerable<TalhaoDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<TalhaoDto>>.Failure($"Erro ao obter talhões: {ex.Message}");
        }
    }

    public async Task<Result<TalhaoDto>> CriarAsync(TalhaoCreateDto dto)
    {
        try
        {
            // Validar se a área do talhão não excede a área da propriedade
            var areaValida = await _domainService.ValidarAreaTalhaoAsync(dto.PropriedadeId, new AreaPlantio(dto.Area));
            if (!areaValida)
                return Result<TalhaoDto>.Failure("Área do talhão excede a área disponível da propriedade");

            var talhao = new Talhao(dto.Nome, new AreaPlantio(dto.Area), dto.PropriedadeId, dto.Descricao);
            
            if (dto.Latitude.HasValue && dto.Longitude.HasValue)
            {
                talhao.DefinirLocalizacao(dto.Latitude.Value, dto.Longitude.Value);
            }
            var talhaoCriado = await _talhaoRepository.AdicionarAsync(talhao);
            
            var resultado = _mapper.Map<TalhaoDto>(talhaoCriado);
            return Result<TalhaoDto>.Success(resultado);
        }
        catch (Exception ex)
        {
            return Result<TalhaoDto>.Failure($"Erro ao criar talhão: {ex.Message}");
        }
    }

    public async Task<Result<TalhaoDto>> AtualizarAsync(int id, TalhaoUpdateDto dto)
    {
        try
        {
            var talhao = await _talhaoRepository.ObterPorIdAsync(id);
            if (talhao == null)
                return Result<TalhaoDto>.Failure("Talhão não encontrado");

            // Validar se a nova área não excede a área da propriedade
            var areaValida = await _domainService.ValidarAreaTalhaoAsync(talhao.PropriedadeId, new AreaPlantio(dto.Area));
            if (!areaValida)
                return Result<TalhaoDto>.Failure("Nova área do talhão excede a área disponível da propriedade");

            talhao.AtualizarDados(dto.Nome, new AreaPlantio(dto.Area), dto.Descricao);

            if (dto.Latitude.HasValue && dto.Longitude.HasValue)
            {
                talhao.DefinirLocalizacao(dto.Latitude.Value, dto.Longitude.Value);
            }

            await _talhaoRepository.AtualizarAsync(talhao);
            
            var resultado = _mapper.Map<TalhaoDto>(talhao);
            return Result<TalhaoDto>.Success(resultado);
        }
        catch (Exception ex)
        {
            return Result<TalhaoDto>.Failure($"Erro ao atualizar talhão: {ex.Message}");
        }
    }

    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            await _talhaoRepository.RemoverAsync(id);
            return Result.Success();
        }
        catch (Exception ex)
        {
            return Result.Failure($"Erro ao remover talhão: {ex.Message}");
        }
    }

    public async Task<Result<decimal>> CalcularAreaTotalPorPropriedadeAsync(int propriedadeId)
    {
        try
        {
            var areaTotal = await _talhaoRepository.CalcularAreaTotalPorPropriedadeAsync(propriedadeId);
            return Result<decimal>.Success(areaTotal);
        }
        catch (Exception ex)
        {
            return Result<decimal>.Failure($"Erro ao calcular área total: {ex.Message}");
        }
    }

    public async Task<Result<IEnumerable<TalhaoDto>>> BuscarTalhoesProximosAsync(
        double latitude, double longitude, double raioKm)
    {
        try
        {
            var geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);
            var ponto = geometryFactory.CreatePoint(new Coordinate(longitude, latitude));
            
            var talhoes = await _domainService.BuscarTalhoesProximosAsync(ponto, raioKm);
            var dtos = _mapper.Map<IEnumerable<TalhaoDto>>(talhoes);
            
            return Result<IEnumerable<TalhaoDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            return Result<IEnumerable<TalhaoDto>>.Failure($"Erro ao buscar talhões próximos: {ex.Message}");
        }
    }
}
</TalhaoService.cs>
<Propriedade.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using System.Text.Json;

namespace Agriis.Propriedades.Dominio.Entidades;

public class Propriedade : EntidadeRaizAgregada
{
    public string Nome { get; private set; } = string.Empty;
    public string? Nirf { get; private set; }
    public string? InscricaoEstadual { get; private set; }
    public AreaPlantio AreaTotal { get; private set; } = new(0);
    public int ProdutorId { get; private set; }
    public int? EnderecoId { get; private set; }
    public JsonDocument? DadosAdicionais { get; private set; }

    // Navigation Properties
    public virtual ICollection<Talhao> Talhoes { get; private set; } = new List<Talhao>();
    public virtual ICollection<PropriedadeCultura> PropriedadeCulturas { get; private set; } = new List<PropriedadeCultura>();

    protected Propriedade() { } // EF Constructor

    public Propriedade(string nome, int produtorId, AreaPlantio areaTotal, string? nirf, 
                      string? inscricaoEstadual, int? enderecoId)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        ProdutorId = produtorId;
        AreaTotal = areaTotal ?? throw new ArgumentNullException(nameof(areaTotal));
        Nirf = nirf;
        InscricaoEstadual = inscricaoEstadual;
        EnderecoId = enderecoId;
    }

    public void AtualizarDados(string nome, AreaPlantio areaTotal, string? nirf = null, 
                              string? inscricaoEstadual = null, int? enderecoId = null)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        AreaTotal = areaTotal ?? throw new ArgumentNullException(nameof(areaTotal));
        Nirf = nirf;
        InscricaoEstadual = inscricaoEstadual;
        EnderecoId = enderecoId;
        AtualizarDataModificacao();
    }

    public void AdicionarTalhao(Talhao talhao)
    {
        if (talhao == null) throw new ArgumentNullException(nameof(talhao));
        
        Talhoes.Add(talhao);
        AtualizarDataModificacao();
    }

    public void AdicionarCultura(int culturaId, AreaPlantio area)
    {
        var propriedadeCultura = new PropriedadeCultura(Id, culturaId, area, null);
        PropriedadeCulturas.Add(propriedadeCultura);
        AtualizarDataModificacao();
    }

    public void RemoverCultura(int culturaId)
    {
        var propriedadeCultura = PropriedadeCulturas.FirstOrDefault(pc => pc.CulturaId == culturaId);
        if (propriedadeCultura != null)
        {
            PropriedadeCulturas.Remove(propriedadeCultura);
            AtualizarDataModificacao();
        }
    }

    public AreaPlantio CalcularAreaTotalCulturas()
    {
        var areaTotal = PropriedadeCulturas.Sum(pc => pc.Area.Valor);
        return new AreaPlantio(areaTotal);
    }

    public void DefinirDadosAdicionais(object dados)
    {
        if (dados != null)
        {
            DadosAdicionais = JsonDocument.Parse(JsonSerializer.Serialize(dados));
            AtualizarDataModificacao();
        }
    }
}
</Propriedade.cs>
<PropriedadeCultura.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.ObjetosValor;

namespace Agriis.Propriedades.Dominio.Entidades;

public class PropriedadeCultura : EntidadeBase
{
    public int PropriedadeId { get; private set; }
    public int CulturaId { get; private set; }
    public AreaPlantio Area { get; private set; } = new(0);
    public int? SafraId { get; private set; }
    public DateTime? DataPlantio { get; private set; }
    public DateTime? DataColheitaPrevista { get; private set; }
    public string? Observacoes { get; private set; }

    // Navigation Properties
    public virtual Propriedade Propriedade { get; private set; } = null!;

    protected PropriedadeCultura() { } // EF Constructor

    public PropriedadeCultura(int propriedadeId, int culturaId, AreaPlantio area, int? safraId)
    {
        PropriedadeId = propriedadeId;
        CulturaId = culturaId;
        Area = area ?? throw new ArgumentNullException(nameof(area));
        SafraId = safraId;
    }

    public void AtualizarArea(AreaPlantio novaArea)
    {
        Area = novaArea ?? throw new ArgumentNullException(nameof(novaArea));
        AtualizarDataModificacao();
    }

    public void DefinirSafra(int safraId)
    {
        SafraId = safraId;
        AtualizarDataModificacao();
    }

    public void DefinirDatasPlantioColheita(DateTime? dataPlantio, DateTime? dataColheitaPrevista)
    {
        DataPlantio = dataPlantio;
        DataColheitaPrevista = dataColheitaPrevista;
        AtualizarDataModificacao();
    }

    public void AdicionarObservacoes(string observacoes)
    {
        Observacoes = observacoes;
        AtualizarDataModificacao();
    }

    public bool EstaEmPeriodoPlantio()
    {
        if (DataPlantio == null) return false;
        
        var agora = DateTime.UtcNow;
        var inicioPlantio = DataPlantio.Value;
        var fimPlantio = DataColheitaPrevista ?? inicioPlantio.AddMonths(6);
        
        return agora >= inicioPlantio && agora <= fimPlantio;
    }
}
</PropriedadeCultura.cs>
<Talhao.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using NetTopologySuite.Geometries;

namespace Agriis.Propriedades.Dominio.Entidades;

public class Talhao : EntidadeBase
{
    public string Nome { get; private set; } = string.Empty;
    public AreaPlantio Area { get; private set; } = new(0);
    public string? Descricao { get; private set; }
    public Point? Localizacao { get; private set; }
    public Polygon? Geometria { get; private set; }
    public int PropriedadeId { get; private set; }

    // Navigation Properties
    public virtual Propriedade Propriedade { get; private set; } = null!;

    protected Talhao() { } // EF Constructor

    public Talhao(string nome, AreaPlantio area, int propriedadeId, string? descricao)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        Area = area ?? throw new ArgumentNullException(nameof(area));
        PropriedadeId = propriedadeId;
        Descricao = descricao;
    }

    public void AtualizarDados(string nome, AreaPlantio area, string? descricao = null)
    {
        Nome = nome ?? throw new ArgumentNullException(nameof(nome));
        Area = area ?? throw new ArgumentNullException(nameof(area));
        Descricao = descricao;
        AtualizarDataModificacao();
    }

    public void DefinirLocalizacao(double latitude, double longitude)
    {
        var geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);
        Localizacao = geometryFactory.CreatePoint(new Coordinate(longitude, latitude));
        AtualizarDataModificacao();
    }

    public void DefinirGeometria(Polygon geometria)
    {
        Geometria = geometria;
        AtualizarDataModificacao();
    }

    public double? CalcularDistancia(Point outroPonto)
    {
        if (Localizacao == null || outroPonto == null)
            return null;

        return Localizacao.Distance(outroPonto);
    }
}
</Talhao.cs>
<IPropriedadeCulturaRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Propriedades.Dominio.Entidades;

namespace Agriis.Propriedades.Dominio.Interfaces;

public interface IPropriedadeCulturaRepository : IRepository<PropriedadeCultura>
{
    Task<IEnumerable<PropriedadeCultura>> ObterPorPropriedadeAsync(int propriedadeId);
    Task<IEnumerable<PropriedadeCultura>> ObterPorCulturaAsync(int culturaId);
    Task<IEnumerable<PropriedadeCultura>> ObterPorSafraAsync(int safraId);
    Task<PropriedadeCultura?> ObterPorPropriedadeECulturaAsync(int propriedadeId, int culturaId);
    Task<decimal> CalcularAreaTotalPorCulturaAsync(int culturaId);
    Task<IEnumerable<PropriedadeCultura>> ObterEmPeriodoPlantioAsync();
}
</IPropriedadeCulturaRepository.cs>
<IPropriedadeRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Propriedades.Dominio.Entidades;
using NetTopologySuite.Geometries;

namespace Agriis.Propriedades.Dominio.Interfaces;

public interface IPropriedadeRepository : IRepository<Propriedade>
{
    Task<IEnumerable<Propriedade>> ObterPorProdutorAsync(int produtorId);
    Task<IEnumerable<Propriedade>> ObterPorCulturaAsync(int culturaId);
    Task<IEnumerable<Propriedade>> ObterPorRegiao(Point centro, double raioKm);
    Task<Propriedade?> ObterComTalhoesAsync(int propriedadeId);
    Task<Propriedade?> ObterComCulturasAsync(int propriedadeId);
    Task<Propriedade?> ObterCompletaAsync(int propriedadeId);
    Task<decimal> CalcularAreaTotalPorProdutorAsync(int produtorId);
    Task<decimal> CalcularAreaTotalPorCulturaAsync(int culturaId);
    Task<IEnumerable<Propriedade>> ObterPropriedadesProximasAsync(Point localizacao, double raioKm);
}
</IPropriedadeRepository.cs>
<ITalhaoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Propriedades.Dominio.Entidades;
using NetTopologySuite.Geometries;

namespace Agriis.Propriedades.Dominio.Interfaces;

public interface ITalhaoRepository : IRepository<Talhao>
{
    Task<IEnumerable<Talhao>> ObterPorPropriedadeAsync(int propriedadeId);
    Task<IEnumerable<Talhao>> ObterPorRegiao(Point centro, double raioKm);
    Task<decimal> CalcularAreaTotalPorPropriedadeAsync(int propriedadeId);
    Task<IEnumerable<Talhao>> ObterTalhoesProximosAsync(Point localizacao, double raioKm);
}
</ITalhaoRepository.cs>
<PropriedadeDomainService.cs>
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Propriedades.Dominio.Entidades;
using Agriis.Propriedades.Dominio.Interfaces;
using NetTopologySuite.Geometries;

namespace Agriis.Propriedades.Dominio.Servicos;

public class PropriedadeDomainService
{
    private readonly IPropriedadeRepository _propriedadeRepository;
    private readonly ITalhaoRepository _talhaoRepository;
    private readonly IPropriedadeCulturaRepository _propriedadeCulturaRepository;

    public PropriedadeDomainService(
        IPropriedadeRepository propriedadeRepository,
        ITalhaoRepository talhaoRepository,
        IPropriedadeCulturaRepository propriedadeCulturaRepository)
    {
        _propriedadeRepository = propriedadeRepository;
        _talhaoRepository = talhaoRepository;
        _propriedadeCulturaRepository = propriedadeCulturaRepository;
    }

    public async Task<AreaPlantio> CalcularAreaTotalProdutorAsync(int produtorId)
    {
        var areaTotal = await _propriedadeRepository.CalcularAreaTotalPorProdutorAsync(produtorId);
        return new AreaPlantio(areaTotal);
    }

    public async Task<AreaPlantio> CalcularAreaTotalCulturaAsync(int culturaId)
    {
        var areaTotal = await _propriedadeCulturaRepository.CalcularAreaTotalPorCulturaAsync(culturaId);
        return new AreaPlantio(areaTotal);
    }

    public async Task<bool> ValidarAreaTalhaoAsync(int propriedadeId, AreaPlantio areaTalhao)
    {
        var propriedade = await _propriedadeRepository.ObterPorIdAsync(propriedadeId);
        if (propriedade == null) return false;

        var areaTotalTalhoes = await _talhaoRepository.CalcularAreaTotalPorPropriedadeAsync(propriedadeId);
        var novaAreaTotal = areaTotalTalhoes + areaTalhao.Valor;

        return novaAreaTotal <= propriedade.AreaTotal.Valor;
    }

    public async Task<bool> ValidarAreaCulturaAsync(int propriedadeId, AreaPlantio areaCultura)
    {
        var propriedade = await _propriedadeRepository.ObterPorIdAsync(propriedadeId);
        if (propriedade == null) return false;

        var areaTotalCulturas = propriedade.CalcularAreaTotalCulturas();
        var novaAreaTotal = areaTotalCulturas.Valor + areaCultura.Valor;

        return novaAreaTotal <= propriedade.AreaTotal.Valor;
    }

    public async Task<IEnumerable<Propriedade>> BuscarPropriedadesProximasAsync(
        Point localizacao, double raioKm)
    {
        return await _propriedadeRepository.ObterPropriedadesProximasAsync(localizacao, raioKm);
    }

    public async Task<IEnumerable<Talhao>> BuscarTalhoesProximosAsync(
        Point localizacao, double raioKm)
    {
        return await _talhaoRepository.ObterTalhoesProximosAsync(localizacao, raioKm);
    }

    public async Task<Dictionary<int, decimal>> ObterEstatisticasCulturasPorProdutorAsync(int produtorId)
    {
        var propriedades = await _propriedadeRepository.ObterPorProdutorAsync(produtorId);
        var estatisticas = new Dictionary<int, decimal>();

        foreach (var propriedade in propriedades)
        {
            foreach (var propriedadeCultura in propriedade.PropriedadeCulturas)
            {
                if (estatisticas.ContainsKey(propriedadeCultura.CulturaId))
                {
                    estatisticas[propriedadeCultura.CulturaId] += propriedadeCultura.Area.Valor;
                }
                else
                {
                    estatisticas[propriedadeCultura.CulturaId] = propriedadeCultura.Area.Valor;
                }
            }
        }

        return estatisticas;
    }

    public async Task<bool> PodeRemoverPropriedadeAsync(int propriedadeId)
    {
        // Verificar se a propriedade tem talhões
        var talhoes = await _talhaoRepository.ObterPorPropriedadeAsync(propriedadeId);
        if (talhoes.Any()) return false;

        // Verificar se a propriedade tem culturas ativas
        var culturas = await _propriedadeCulturaRepository.ObterPorPropriedadeAsync(propriedadeId);
        var culturasAtivas = culturas.Where(c => c.EstaEmPeriodoPlantio());
        
        return !culturasAtivas.Any();
    }
}
</PropriedadeDomainService.cs>
<PropriedadeConfiguration.cs>
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Propriedades.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System.Text.Json;

namespace Agriis.Propriedades.Infraestrutura.Configuracoes;

public class PropriedadeConfiguration : IEntityTypeConfiguration<Propriedade>
{
    public void Configure(EntityTypeBuilder<Propriedade> builder)
    {
        builder.ToTable("Propriedade");

        builder.HasKey(p => p.Id);

        builder.Property(p => p.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(p => p.Nome)
            .HasColumnName("Nome")
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(p => p.Nirf)
            .HasColumnName("Nirf")
            .HasMaxLength(50);

        builder.Property(p => p.InscricaoEstadual)
            .HasColumnName("InscricaoEstadual")
            .HasMaxLength(50);

        builder.Property(p => p.AreaTotal)
            .HasColumnName("AreaTotal")
            .HasColumnType("decimal(18,4)")
            .HasConversion(
                v => v.Valor,
                v => new AreaPlantio(v))
            .IsRequired();

        builder.Property(p => p.ProdutorId)
            .HasColumnName("ProdutorId")
            .IsRequired();

        builder.Property(p => p.EnderecoId)
            .HasColumnName("EnderecoId");

        builder.Property(p => p.DataCriacao)
            .HasColumnName("DataCriacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(p => p.DataAtualizacao)
            .HasColumnName("DataAtualizacao")
            .HasColumnType("timestamp with time zone");

        builder.Property(p => p.DadosAdicionais)
            .HasColumnName("DadosAdicionais")
            .HasColumnType("jsonb");

        // Relacionamentos
        builder.HasMany(p => p.Talhoes)
            .WithOne(t => t.Propriedade)
            .HasForeignKey(t => t.PropriedadeId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasMany(p => p.PropriedadeCulturas)
            .WithOne(pc => pc.Propriedade)
            .HasForeignKey(pc => pc.PropriedadeId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(p => p.ProdutorId)
            .HasDatabaseName("IX_Propriedade_ProdutorId");

        builder.HasIndex(p => p.EnderecoId)
            .HasDatabaseName("IX_Propriedade_EnderecoId");

        builder.HasIndex(p => p.Nome)
            .HasDatabaseName("IX_Propriedade_Nome");
    }
}
</PropriedadeConfiguration.cs>
<PropriedadeCulturaConfiguration.cs>
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Propriedades.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Propriedades.Infraestrutura.Configuracoes;

public class PropriedadeCulturaConfiguration : IEntityTypeConfiguration<PropriedadeCultura>
{
    public void Configure(EntityTypeBuilder<PropriedadeCultura> builder)
    {
        builder.ToTable("PropriedadeCultura");

        builder.HasKey(pc => pc.Id);

        builder.Property(pc => pc.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(pc => pc.PropriedadeId)
            .HasColumnName("PropriedadeId")
            .IsRequired();

        builder.Property(pc => pc.CulturaId)
            .HasColumnName("CulturaId")
            .IsRequired();

        builder.Property(pc => pc.Area)
            .HasColumnName("Area")
            .HasColumnType("decimal(18,4)")
            .HasConversion(
                v => v.Valor,
                v => new AreaPlantio(v))
            .IsRequired();

        builder.Property(pc => pc.SafraId)
            .HasColumnName("SafraId");

        builder.Property(pc => pc.DataPlantio)
            .HasColumnName("DataPlantio")
            .HasColumnType("timestamp with time zone");

        builder.Property(pc => pc.DataColheitaPrevista)
            .HasColumnName("DataColheitaPrevista")
            .HasColumnType("timestamp with time zone");

        builder.Property(pc => pc.Observacoes)
            .HasColumnName("Observacoes")
            .HasMaxLength(1000);

        builder.Property(pc => pc.DataCriacao)
            .HasColumnName("DataCriacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(pc => pc.DataAtualizacao)
            .HasColumnName("DataAtualizacao")
            .HasColumnType("timestamp with time zone");

        // Relacionamentos
        builder.HasOne(pc => pc.Propriedade)
            .WithMany(p => p.PropriedadeCulturas)
            .HasForeignKey(pc => pc.PropriedadeId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(pc => pc.PropriedadeId)
            .HasDatabaseName("IX_PropriedadeCultura_PropriedadeId");

        builder.HasIndex(pc => pc.CulturaId)
            .HasDatabaseName("IX_PropriedadeCultura_CulturaId");

        builder.HasIndex(pc => pc.SafraId)
            .HasDatabaseName("IX_PropriedadeCultura_SafraId");

        // Índice único para evitar duplicação de cultura por propriedade
        builder.HasIndex(pc => new { pc.PropriedadeId, pc.CulturaId })
            .HasDatabaseName("IX_PropriedadeCultura_PropriedadeId_CulturaId")
            .IsUnique();

        // Índice para consultas por período de plantio
        builder.HasIndex(pc => new { pc.DataPlantio, pc.DataColheitaPrevista })
            .HasDatabaseName("IX_PropriedadeCultura_PeriodoPlantio");
    }
}
</PropriedadeCulturaConfiguration.cs>
<TalhaoConfiguration.cs>
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Propriedades.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Propriedades.Infraestrutura.Configuracoes;

public class TalhaoConfiguration : IEntityTypeConfiguration<Talhao>
{
    public void Configure(EntityTypeBuilder<Talhao> builder)
    {
        builder.ToTable("Talhao");

        builder.HasKey(t => t.Id);

        builder.Property(t => t.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(t => t.Nome)
            .HasColumnName("Nome")
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(t => t.Area)
            .HasColumnName("Area")
            .HasColumnType("decimal(18,4)")
            .HasConversion(
                v => v.Valor,
                v => new AreaPlantio(v))
            .IsRequired();

        builder.Property(t => t.Descricao)
            .HasColumnName("Descricao")
            .HasMaxLength(500);

        builder.Property(t => t.Localizacao)
            .HasColumnName("Localizacao")
            .HasColumnType("geography(POINT, 4326)");

        builder.Property(t => t.Geometria)
            .HasColumnName("Geometria")
            .HasColumnType("geography(POLYGON, 4326)");

        builder.Property(t => t.PropriedadeId)
            .HasColumnName("PropriedadeId")
            .IsRequired();

        builder.Property(t => t.DataCriacao)
            .HasColumnName("DataCriacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();

        builder.Property(t => t.DataAtualizacao)
            .HasColumnName("DataAtualizacao")
            .HasColumnType("timestamp with time zone");

        // Relacionamentos
        builder.HasOne(t => t.Propriedade)
            .WithMany(p => p.Talhoes)
            .HasForeignKey(t => t.PropriedadeId)
            .OnDelete(DeleteBehavior.Cascade);

        // Índices
        builder.HasIndex(t => t.PropriedadeId)
            .HasDatabaseName("IX_Talhao_PropriedadeId");

        builder.HasIndex(t => t.Nome)
            .HasDatabaseName("IX_Talhao_Nome");

        // Índice espacial para localização
        builder.HasIndex(t => t.Localizacao)
            .HasDatabaseName("IX_Talhao_Localizacao")
            .HasMethod("gist");

        // Índice espacial para geometria
        builder.HasIndex(t => t.Geometria)
            .HasDatabaseName("IX_Talhao_Geometria")
            .HasMethod("gist");
    }
}
</TalhaoConfiguration.cs>
<PropriedadeCulturaRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Propriedades.Dominio.Entidades;
using Agriis.Propriedades.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Propriedades.Infraestrutura.Repositorios;

public class PropriedadeCulturaRepository : RepositoryBase<PropriedadeCultura, DbContext>, IPropriedadeCulturaRepository
{
    public PropriedadeCulturaRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<PropriedadeCultura>> ObterPorPropriedadeAsync(int propriedadeId)
    {
        return await DbSet
            .Where(pc => pc.PropriedadeId == propriedadeId)
            .Include(pc => pc.Propriedade)
            .OrderBy(pc => pc.CulturaId)
            .ToListAsync();
    }

    public async Task<IEnumerable<PropriedadeCultura>> ObterPorCulturaAsync(int culturaId)
    {
        return await DbSet
            .Where(pc => pc.CulturaId == culturaId)
            .Include(pc => pc.Propriedade)
            .OrderBy(pc => pc.Propriedade.Nome)
            .ToListAsync();
    }

    public async Task<IEnumerable<PropriedadeCultura>> ObterPorSafraAsync(int safraId)
    {
        return await DbSet
            .Where(pc => pc.SafraId == safraId)
            .Include(pc => pc.Propriedade)
            .OrderBy(pc => pc.Propriedade.Nome)
            .ThenBy(pc => pc.CulturaId)
            .ToListAsync();
    }

    public async Task<PropriedadeCultura?> ObterPorPropriedadeECulturaAsync(int propriedadeId, int culturaId)
    {
        return await DbSet
            .Include(pc => pc.Propriedade)
            .FirstOrDefaultAsync(pc => pc.PropriedadeId == propriedadeId && pc.CulturaId == culturaId);
    }

    public async Task<decimal> CalcularAreaTotalPorCulturaAsync(int culturaId)
    {
        var areaTotal = await DbSet
            .Where(pc => pc.CulturaId == culturaId)
            .SumAsync(pc => pc.Area.Valor);

        return areaTotal;
    }

    public async Task<IEnumerable<PropriedadeCultura>> ObterEmPeriodoPlantioAsync()
    {
        var agora = DateTime.UtcNow;

        return await DbSet
            .Where(pc => pc.DataPlantio != null && 
                        pc.DataPlantio <= agora && 
                        (pc.DataColheitaPrevista == null || pc.DataColheitaPrevista >= agora))
            .Include(pc => pc.Propriedade)
            .OrderBy(pc => pc.DataPlantio)
            .ToListAsync();
    }
}
</PropriedadeCulturaRepository.cs>
<PropriedadeRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Propriedades.Dominio.Entidades;
using Agriis.Propriedades.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;

namespace Agriis.Propriedades.Infraestrutura.Repositorios;

public class PropriedadeRepository : RepositoryBase<Propriedade, DbContext>, IPropriedadeRepository
{
    public PropriedadeRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<Propriedade>> ObterPorProdutorAsync(int produtorId)
    {
        return await DbSet
            .Where(p => p.ProdutorId == produtorId)
            .Include(p => p.Talhoes)
            .Include(p => p.PropriedadeCulturas)
            .OrderBy(p => p.Nome)
            .ToListAsync();
    }

    public async Task<IEnumerable<Propriedade>> ObterPorCulturaAsync(int culturaId)
    {
        return await DbSet
            .Where(p => p.PropriedadeCulturas.Any(pc => pc.CulturaId == culturaId))
            .Include(p => p.Talhoes)
            .Include(p => p.PropriedadeCulturas)
            .OrderBy(p => p.Nome)
            .ToListAsync();
    }

    public async Task<IEnumerable<Propriedade>> ObterPorRegiao(Point centro, double raioKm)
    {
        // Converter raio de km para metros
        var raioMetros = raioKm * 1000;

        return await DbSet
            .Where(p => p.Talhoes.Any(t => t.Localizacao != null && t.Localizacao.IsWithinDistance(centro, raioMetros)))
            .Include(p => p.Talhoes)
            .Include(p => p.PropriedadeCulturas)
            .OrderBy(p => p.Nome)
            .ToListAsync();
    }

    public async Task<Propriedade?> ObterComTalhoesAsync(int propriedadeId)
    {
        return await DbSet
            .Include(p => p.Talhoes)
            .FirstOrDefaultAsync(p => p.Id == propriedadeId);
    }

    public async Task<Propriedade?> ObterComCulturasAsync(int propriedadeId)
    {
        return await DbSet
            .Include(p => p.PropriedadeCulturas)
            .FirstOrDefaultAsync(p => p.Id == propriedadeId);
    }

    public async Task<Propriedade?> ObterCompletaAsync(int propriedadeId)
    {
        return await DbSet
            .Include(p => p.Talhoes)
            .Include(p => p.PropriedadeCulturas)
            .FirstOrDefaultAsync(p => p.Id == propriedadeId);
    }

    public async Task<decimal> CalcularAreaTotalPorProdutorAsync(int produtorId)
    {
        var areaTotal = await DbSet
            .Where(p => p.ProdutorId == produtorId)
            .SumAsync(p => p.AreaTotal.Valor);

        return areaTotal;
    }

    public async Task<decimal> CalcularAreaTotalPorCulturaAsync(int culturaId)
    {
        var areaTotal = await Context.Set<PropriedadeCultura>()
            .Where(pc => pc.CulturaId == culturaId)
            .SumAsync(pc => pc.Area.Valor);

        return areaTotal;
    }

    public async Task<IEnumerable<Propriedade>> ObterPropriedadesProximasAsync(Point localizacao, double raioKm)
    {
        // Converter raio de km para metros
        var raioMetros = raioKm * 1000;

        return await DbSet
            .Where(p => p.Talhoes.Any(t => t.Localizacao != null && t.Localizacao.IsWithinDistance(localizacao, raioMetros)))
            .Include(p => p.Talhoes.Where(t => t.Localizacao != null && t.Localizacao.IsWithinDistance(localizacao, raioMetros)))
            .Include(p => p.PropriedadeCulturas)
            .OrderBy(p => p.Talhoes
                .Where(t => t.Localizacao != null)
                .Min(t => t.Localizacao!.Distance(localizacao)))
            .ToListAsync();
    }
}
</PropriedadeRepository.cs>
<TalhaoRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Propriedades.Dominio.Entidades;
using Agriis.Propriedades.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;

namespace Agriis.Propriedades.Infraestrutura.Repositorios;

public class TalhaoRepository : RepositoryBase<Talhao, DbContext>, ITalhaoRepository
{
    public TalhaoRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<Talhao>> ObterPorPropriedadeAsync(int propriedadeId)
    {
        return await DbSet
            .Where(t => t.PropriedadeId == propriedadeId)
            .Include(t => t.Propriedade)
            .OrderBy(t => t.Nome)
            .ToListAsync();
    }

    public async Task<IEnumerable<Talhao>> ObterPorRegiao(Point centro, double raioKm)
    {
        // Converter raio de km para metros
        var raioMetros = raioKm * 1000;

        return await DbSet
            .Where(t => t.Localizacao != null && t.Localizacao.IsWithinDistance(centro, raioMetros))
            .Include(t => t.Propriedade)
            .OrderBy(t => t.Localizacao!.Distance(centro))
            .ToListAsync();
    }

    public async Task<decimal> CalcularAreaTotalPorPropriedadeAsync(int propriedadeId)
    {
        var areaTotal = await DbSet
            .Where(t => t.PropriedadeId == propriedadeId)
            .SumAsync(t => t.Area.Valor);

        return areaTotal;
    }

    public async Task<IEnumerable<Talhao>> ObterTalhoesProximosAsync(Point localizacao, double raioKm)
    {
        // Converter raio de km para metros
        var raioMetros = raioKm * 1000;

        return await DbSet
            .Where(t => t.Localizacao != null && t.Localizacao.IsWithinDistance(localizacao, raioMetros))
            .Include(t => t.Propriedade)
            .OrderBy(t => t.Localizacao!.Distance(localizacao))
            .ToListAsync();
    }
}
</TalhaoRepository.cs>
<SafraDto.cs>
namespace Agriis.Safras.Aplicacao.DTOs;

/// <summary>
/// DTO para retorno de dados de Safra
/// </summary>
public class SafraDto
{
    public int Id { get; set; }
    public DateTime PlantioInicial { get; set; }
    public DateTime PlantioFinal { get; set; }
    public string PlantioNome { get; set; } = string.Empty;
    public string Descricao { get; set; } = string.Empty;
    public int AnoColheita { get; set; }
    public string SafraFormatada { get; set; } = string.Empty;
    public bool Atual { get; set; }
    public DateTime DataCriacao { get; set; }
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criação de nova Safra
/// </summary>
public class CriarSafraDto
{
    public DateTime PlantioInicial { get; set; }
    public DateTime PlantioFinal { get; set; }
    public string PlantioNome { get; set; } = string.Empty;
    public string Descricao { get; set; } = string.Empty;
}

/// <summary>
/// DTO para atualização de Safra
/// </summary>
public class AtualizarSafraDto
{
    public DateTime PlantioInicial { get; set; }
    public DateTime PlantioFinal { get; set; }
    public string PlantioNome { get; set; } = string.Empty;
    public string Descricao { get; set; } = string.Empty;
}

/// <summary>
/// DTO simplificado para retorno da safra atual
/// </summary>
public class SafraAtualDto
{
    public int Id { get; set; }
    public string Descricao { get; set; } = string.Empty;
    public string Safra { get; set; } = string.Empty;
}
</SafraDto.cs>
<ISafraService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Safras.Aplicacao.DTOs;

namespace Agriis.Safras.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de Safra
/// </summary>
public interface ISafraService
{
    /// <summary>
    /// Obtém uma safra por ID
    /// </summary>
    /// <param name="id">ID da safra</param>
    /// <returns>Dados da safra</returns>
    Task<Result<SafraDto>> ObterPorIdAsync(int id);
    
    /// <summary>
    /// Obtém todas as safras ordenadas por data de plantio
    /// </summary>
    /// <returns>Lista de safras</returns>
    Task<Result<IEnumerable<SafraDto>>> ObterTodasAsync();
    
    /// <summary>
    /// Obtém a safra atual (ativa)
    /// </summary>
    /// <returns>Safra atual ou null se não houver</returns>
    Task<Result<SafraAtualDto?>> ObterSafraAtualAsync();
    
    /// <summary>
    /// Obtém safras por ano de colheita
    /// </summary>
    /// <param name="anoColheita">Ano de colheita</param>
    /// <returns>Lista de safras do ano especificado</returns>
    Task<Result<IEnumerable<SafraDto>>> ObterPorAnoColheitaAsync(int anoColheita);
    
    /// <summary>
    /// Cria uma nova safra
    /// </summary>
    /// <param name="dto">Dados para criação</param>
    /// <returns>Safra criada</returns>
    Task<Result<SafraDto>> CriarAsync(CriarSafraDto dto);
    
    /// <summary>
    /// Atualiza uma safra existente
    /// </summary>
    /// <param name="id">ID da safra</param>
    /// <param name="dto">Dados para atualização</param>
    /// <returns>Safra atualizada</returns>
    Task<Result<SafraDto>> AtualizarAsync(int id, AtualizarSafraDto dto);
    
    /// <summary>
    /// Remove uma safra
    /// </summary>
    /// <param name="id">ID da safra</param>
    /// <returns>Resultado da operação</returns>
    Task<Result> RemoverAsync(int id);
}
</ISafraService.cs>
<SafraMappingProfile.cs>
using AutoMapper;
using Agriis.Safras.Aplicacao.DTOs;
using Agriis.Safras.Dominio.Entidades;

namespace Agriis.Safras.Aplicacao.Mapeamentos;

/// <summary>
/// Profile do AutoMapper para mapeamento de Safra
/// </summary>
public class SafraMappingProfile : Profile
{
    public SafraMappingProfile()
    {
        CreateMap<Safra, SafraDto>()
            .ForMember(dest => dest.SafraFormatada, opt => opt.MapFrom(src => src.ObterSafraFormatada()))
            .ForMember(dest => dest.Atual, opt => opt.MapFrom(src => src.EstaAtiva()));
            
        CreateMap<Safra, SafraAtualDto>()
            .ForMember(dest => dest.Safra, opt => opt.MapFrom(src => src.ObterSafraAnosFormatada()));
            
        CreateMap<CriarSafraDto, Safra>()
            .ConstructUsing(src => new Safra(src.PlantioInicial, src.PlantioFinal, src.PlantioNome, src.Descricao));
    }
}
</SafraMappingProfile.cs>
<SafraService.cs>
using AutoMapper;
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Safras.Aplicacao.DTOs;
using Agriis.Safras.Aplicacao.Interfaces;
using Agriis.Safras.Dominio.Entidades;
using Agriis.Safras.Dominio.Interfaces;
using Microsoft.Extensions.Logging;

namespace Agriis.Safras.Aplicacao.Servicos;

/// <summary>
/// Implementação do serviço de Safras
/// </summary>
public class SafraService : ISafraService
{
    private readonly ISafraRepository _safraRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly ILogger<SafraService> _logger;

    public SafraService(
        ISafraRepository safraRepository,
        IUnitOfWork unitOfWork,
        IMapper mapper,
        ILogger<SafraService> logger)
    {
        _safraRepository = safraRepository;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        _logger = logger;
    }

    public async Task<Result<SafraDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var safra = await _safraRepository.ObterPorIdAsync(id);
            if (safra == null)
            {
                return Result<SafraDto>.Failure("Safra não encontrada");
            }

            var dto = _mapper.Map<SafraDto>(safra);
            return Result<SafraDto>.Success(dto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter safra por ID {Id}", id);
            return Result<SafraDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<IEnumerable<SafraDto>>> ObterTodasAsync()
    {
        try
        {
            var safras = await _safraRepository.ObterTodasOrdenadasAsync();
            var dtos = _mapper.Map<IEnumerable<SafraDto>>(safras);
            return Result<IEnumerable<SafraDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter todas as safras");
            return Result<IEnumerable<SafraDto>>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<SafraAtualDto?>> ObterSafraAtualAsync()
    {
        try
        {
            var safraAtual = await _safraRepository.ObterSafraAtualAsync();
            if (safraAtual == null)
            {
                return Result<SafraAtualDto?>.Success(null);
            }

            var dto = _mapper.Map<SafraAtualDto>(safraAtual);
            return Result<SafraAtualDto?>.Success(dto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter safra atual");
            return Result<SafraAtualDto?>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<IEnumerable<SafraDto>>> ObterPorAnoColheitaAsync(int anoColheita)
    {
        try
        {
            var safras = await _safraRepository.ObterPorAnoColheitaAsync(anoColheita);
            var dtos = _mapper.Map<IEnumerable<SafraDto>>(safras);
            return Result<IEnumerable<SafraDto>>.Success(dtos);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter safras por ano de colheita {Ano}", anoColheita);
            return Result<IEnumerable<SafraDto>>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<SafraDto>> CriarAsync(CriarSafraDto dto)
    {
        try
        {
            // Validar se já existe safra com o mesmo período
            var existeConflito = await _safraRepository.ExisteConflitoPeriodoAsync(
                dto.PlantioInicial, dto.PlantioFinal, dto.PlantioNome);
            
            if (existeConflito)
            {
                return Result<SafraDto>.Failure("Já existe uma safra com período conflitante");
            }

            var safra = new Safra(dto.PlantioInicial, dto.PlantioFinal, dto.PlantioNome, dto.Descricao);
            await _safraRepository.AdicionarAsync(safra);
            await _unitOfWork.SalvarAlteracoesAsync();

            var safraDto = _mapper.Map<SafraDto>(safra);
            _logger.LogInformation("Safra criada com sucesso: {Descricao}", safra.Descricao);
            
            return Result<SafraDto>.Success(safraDto);
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Erro de validação ao criar safra: {Descricao}", dto.Descricao);
            return Result<SafraDto>.Failure(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar safra: {Descricao}", dto.Descricao);
            return Result<SafraDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result<SafraDto>> AtualizarAsync(int id, AtualizarSafraDto dto)
    {
        try
        {
            var safra = await _safraRepository.ObterPorIdAsync(id);
            if (safra == null)
            {
                return Result<SafraDto>.Failure("Safra não encontrada");
            }

            // Validar se já existe safra com o mesmo período (excluindo a atual)
            var existeConflito = await _safraRepository.ExisteConflitoPeriodoAsync(
                dto.PlantioInicial, dto.PlantioFinal, dto.PlantioNome, id);
            
            if (existeConflito)
            {
                return Result<SafraDto>.Failure("Já existe uma safra com período conflitante");
            }

            safra.Atualizar(dto.PlantioInicial, dto.PlantioFinal, dto.PlantioNome, dto.Descricao);
            
            await _safraRepository.AtualizarAsync(safra);
            await _unitOfWork.SalvarAlteracoesAsync();

            var safraDto = _mapper.Map<SafraDto>(safra);
            _logger.LogInformation("Safra atualizada com sucesso: {Id} - {Descricao}", id, safra.Descricao);
            
            return Result<SafraDto>.Success(safraDto);
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Erro de validação ao atualizar safra: {Id}", id);
            return Result<SafraDto>.Failure(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar safra: {Id}", id);
            return Result<SafraDto>.Failure("Erro interno do servidor");
        }
    }

    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            var safra = await _safraRepository.ObterPorIdAsync(id);
            if (safra == null)
            {
                return Result.Failure("Safra não encontrada");
            }

            await _safraRepository.RemoverAsync(id);
            await _unitOfWork.SalvarAlteracoesAsync();

            _logger.LogInformation("Safra removida com sucesso: {Id} - {Descricao}", id, safra.Descricao);
            return Result.Success();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover safra: {Id}", id);
            return Result.Failure("Erro interno do servidor");
        }
    }
}
</SafraService.cs>
<AtualizarSafraDtoValidator.cs>
using FluentValidation;
using Agriis.Safras.Aplicacao.DTOs;

namespace Agriis.Safras.Aplicacao.Validadores;

/// <summary>
/// Validador para atualização de Safra
/// </summary>
public class AtualizarSafraDtoValidator : AbstractValidator<AtualizarSafraDto>
{
    public AtualizarSafraDtoValidator()
    {
        RuleFor(x => x.PlantioInicial)
            .NotEmpty()
            .WithMessage("Data inicial do plantio é obrigatória")
            .GreaterThan(new DateTime(1900, 1, 1))
            .WithMessage("Data inicial do plantio deve ser posterior a 1900")
            .LessThan(DateTime.Now.AddYears(10))
            .WithMessage("Data inicial do plantio não pode ser superior a 10 anos no futuro");

        RuleFor(x => x.PlantioFinal)
            .NotEmpty()
            .WithMessage("Data final do plantio é obrigatória")
            .GreaterThan(x => x.PlantioInicial)
            .WithMessage("Data final do plantio deve ser posterior à data inicial")
            .LessThan(DateTime.Now.AddYears(10))
            .WithMessage("Data final do plantio não pode ser superior a 10 anos no futuro");

        RuleFor(x => x.PlantioNome)
            .NotEmpty()
            .WithMessage("Nome do plantio é obrigatório")
            .MaximumLength(256)
            .WithMessage("Nome do plantio deve ter no máximo 256 caracteres");

        RuleFor(x => x.Descricao)
            .NotEmpty()
            .WithMessage("Descrição é obrigatória")
            .MaximumLength(64)
            .WithMessage("Descrição deve ter no máximo 64 caracteres");
    }
}
</AtualizarSafraDtoValidator.cs>
<CriarSafraDtoValidator.cs>
using FluentValidation;
using Agriis.Safras.Aplicacao.DTOs;

namespace Agriis.Safras.Aplicacao.Validadores;

/// <summary>
/// Validador para criação de Safra
/// </summary>
public class CriarSafraDtoValidator : AbstractValidator<CriarSafraDto>
{
    public CriarSafraDtoValidator()
    {
        RuleFor(x => x.PlantioInicial)
            .NotEmpty()
            .WithMessage("Data inicial do plantio é obrigatória")
            .GreaterThan(new DateTime(1900, 1, 1))
            .WithMessage("Data inicial do plantio deve ser posterior a 1900")
            .LessThan(DateTime.Now.AddYears(10))
            .WithMessage("Data inicial do plantio não pode ser superior a 10 anos no futuro");

        RuleFor(x => x.PlantioFinal)
            .NotEmpty()
            .WithMessage("Data final do plantio é obrigatória")
            .GreaterThan(x => x.PlantioInicial)
            .WithMessage("Data final do plantio deve ser posterior à data inicial")
            .LessThan(DateTime.Now.AddYears(10))
            .WithMessage("Data final do plantio não pode ser superior a 10 anos no futuro");

        RuleFor(x => x.PlantioNome)
            .NotEmpty()
            .WithMessage("Nome do plantio é obrigatório")
            .MaximumLength(256)
            .WithMessage("Nome do plantio deve ter no máximo 256 caracteres");

        RuleFor(x => x.Descricao)
            .NotEmpty()
            .WithMessage("Descrição é obrigatória")
            .MaximumLength(64)
            .WithMessage("Descrição deve ter no máximo 64 caracteres");
    }
}
</CriarSafraDtoValidator.cs>
<Safra.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Safras.Dominio.Entidades;

/// <summary>
/// Representa uma safra agrícola com períodos de plantio
/// </summary>
public class Safra : EntidadeBase
{
    /// <summary>
    /// Data inicial do período de plantio
    /// </summary>
    public DateTime PlantioInicial { get; private set; }
    
    /// <summary>
    /// Data final do período de plantio
    /// </summary>
    public DateTime PlantioFinal { get; private set; }
    
    /// <summary>
    /// Nome do período de plantio (ex: S1, S2)
    /// </summary>
    public string PlantioNome { get; private set; } = string.Empty;
    
    /// <summary>
    /// Descrição da safra
    /// </summary>
    public string Descricao { get; private set; } = string.Empty;
    
    /// <summary>
    /// Ano de colheita calculado
    /// </summary>
    public int AnoColheita { get; private set; }
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected Safra() { }
    
    /// <summary>
    /// Construtor para criar uma nova safra
    /// </summary>
    /// <param name="plantioInicial">Data inicial do plantio</param>
    /// <param name="plantioFinal">Data final do plantio</param>
    /// <param name="plantioNome">Nome do período de plantio</param>
    /// <param name="descricao">Descrição da safra</param>
    public Safra(DateTime plantioInicial, DateTime plantioFinal, string plantioNome, string descricao)
    {
        ValidarDatasPlantio(plantioInicial, plantioFinal);
        ValidarPlantioNome(plantioNome);
        ValidarDescricao(descricao);
        
        PlantioInicial = plantioInicial;
        PlantioFinal = plantioFinal;
        PlantioNome = plantioNome.Trim();
        Descricao = descricao.Trim();
        AnoColheita = CalcularAnoColheita(plantioInicial, plantioFinal);
    }
    
    /// <summary>
    /// Atualiza os dados da safra
    /// </summary>
    /// <param name="plantioInicial">Nova data inicial do plantio</param>
    /// <param name="plantioFinal">Nova data final do plantio</param>
    /// <param name="plantioNome">Novo nome do período de plantio</param>
    /// <param name="descricao">Nova descrição da safra</param>
    public void Atualizar(DateTime plantioInicial, DateTime plantioFinal, string plantioNome, string descricao)
    {
        ValidarDatasPlantio(plantioInicial, plantioFinal);
        ValidarPlantioNome(plantioNome);
        ValidarDescricao(descricao);
        
        PlantioInicial = plantioInicial;
        PlantioFinal = plantioFinal;
        PlantioNome = plantioNome.Trim();
        Descricao = descricao.Trim();
        AnoColheita = CalcularAnoColheita(plantioInicial, plantioFinal);
        
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Verifica se a safra está ativa (dentro do período de plantio)
    /// </summary>
    /// <returns>True se a safra está ativa</returns>
    public bool EstaAtiva()
    {
        var agora = DateTime.Now;
        return agora >= PlantioInicial && agora <= PlantioFinal && PlantioNome == "S1";
    }
    
    /// <summary>
    /// Obtém a representação textual da safra no formato "YYYY/YYYY Nome"
    /// </summary>
    /// <returns>String formatada da safra</returns>
    public string ObterSafraFormatada()
    {
        return $"{PlantioInicial.Year}/{PlantioFinal.Year} {PlantioNome}";
    }
    
    /// <summary>
    /// Obtém a representação textual da safra apenas com os anos
    /// </summary>
    /// <returns>String formatada apenas com os anos</returns>
    public string ObterSafraAnosFormatada()
    {
        return $"{PlantioInicial.Year}/{PlantioFinal.Year}";
    }
    
    /// <summary>
    /// Valida as datas de plantio
    /// </summary>
    /// <param name="plantioInicial">Data inicial</param>
    /// <param name="plantioFinal">Data final</param>
    /// <exception cref="ArgumentException">Quando as datas são inválidas</exception>
    private static void ValidarDatasPlantio(DateTime plantioInicial, DateTime plantioFinal)
    {
        if (plantioInicial >= plantioFinal)
            throw new ArgumentException("A data inicial do plantio deve ser anterior à data final");
            
        if (plantioInicial < new DateTime(1900, 1, 1))
            throw new ArgumentException("A data inicial do plantio não pode ser anterior a 1900");
            
        if (plantioFinal > DateTime.Now.AddYears(10))
            throw new ArgumentException("A data final do plantio não pode ser superior a 10 anos no futuro");
    }
    
    /// <summary>
    /// Valida o nome do plantio
    /// </summary>
    /// <param name="plantioNome">Nome do plantio</param>
    /// <exception cref="ArgumentException">Quando o nome é inválido</exception>
    private static void ValidarPlantioNome(string plantioNome)
    {
        if (string.IsNullOrWhiteSpace(plantioNome))
            throw new ArgumentException("O nome do plantio é obrigatório");
            
        if (plantioNome.Trim().Length > 256)
            throw new ArgumentException("O nome do plantio não pode ter mais de 256 caracteres");
    }
    
    /// <summary>
    /// Valida a descrição
    /// </summary>
    /// <param name="descricao">Descrição da safra</param>
    /// <exception cref="ArgumentException">Quando a descrição é inválida</exception>
    private static void ValidarDescricao(string descricao)
    {
        if (string.IsNullOrWhiteSpace(descricao))
            throw new ArgumentException("A descrição é obrigatória");
            
        if (descricao.Trim().Length > 64)
            throw new ArgumentException("A descrição não pode ter mais de 64 caracteres");
    }
    
    /// <summary>
    /// Calcula o ano de colheita baseado nas datas de plantio
    /// </summary>
    /// <param name="plantioInicial">Data inicial do plantio</param>
    /// <param name="plantioFinal">Data final do plantio</param>
    /// <returns>Ano de colheita</returns>
    private static int CalcularAnoColheita(DateTime plantioInicial, DateTime plantioFinal)
    {
        // Se o plantio vai até o ano seguinte, o ano de colheita é o ano final
        // Caso contrário, é o ano inicial
        return plantioFinal.Year > plantioInicial.Year ? plantioFinal.Year : plantioInicial.Year;
    }
}
</Safra.cs>
<ISafraRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Safras.Dominio.Entidades;

namespace Agriis.Safras.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de Safras
/// </summary>
public interface ISafraRepository : IRepository<Safra>
{
    /// <summary>
    /// Obtém a safra atual (ativa no momento)
    /// </summary>
    /// <returns>Safra atual ou null se não houver</returns>
    Task<Safra?> ObterSafraAtualAsync();
    
    /// <summary>
    /// Obtém safras por ano de colheita
    /// </summary>
    /// <param name="anoColheita">Ano de colheita</param>
    /// <returns>Lista de safras do ano especificado</returns>
    Task<IEnumerable<Safra>> ObterPorAnoColheitaAsync(int anoColheita);
    
    /// <summary>
    /// Obtém safras ordenadas por data de plantio inicial
    /// </summary>
    /// <returns>Lista de safras ordenadas</returns>
    Task<IEnumerable<Safra>> ObterTodasOrdenadasAsync();
    
    /// <summary>
    /// Verifica se existe uma safra com o mesmo período de plantio
    /// </summary>
    /// <param name="plantioInicial">Data inicial do plantio</param>
    /// <param name="plantioFinal">Data final do plantio</param>
    /// <param name="plantioNome">Nome do plantio</param>
    /// <param name="idExcluir">ID da safra a excluir da verificação (para atualizações)</param>
    /// <returns>True se existe conflito</returns>
    Task<bool> ExisteConflitoPeriodoAsync(DateTime plantioInicial, DateTime plantioFinal, string plantioNome, int? idExcluir = null);
    
    /// <summary>
    /// Obtém safras ativas (dentro do período de plantio)
    /// </summary>
    /// <returns>Lista de safras ativas</returns>
    Task<IEnumerable<Safra>> ObterSafrasAtivasAsync();
}
</ISafraRepository.cs>
<SafraConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Safras.Dominio.Entidades;

namespace Agriis.Safras.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Safra
/// </summary>
public class SafraConfiguration : IEntityTypeConfiguration<Safra>
{
    public void Configure(EntityTypeBuilder<Safra> builder)
    {
        builder.ToTable("Safra");

        builder.HasKey(s => s.Id);

        builder.Property(s => s.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();

        builder.Property(s => s.PlantioInicial)
            .HasColumnName("PlantioInicial")
            .HasColumnType("date")
            .IsRequired();

        builder.Property(s => s.PlantioFinal)
            .HasColumnName("PlantioFinal")
            .HasColumnType("date")
            .IsRequired();

        builder.Property(s => s.PlantioNome)
            .HasColumnName("PlantioNome")
            .HasMaxLength(256)
            .IsRequired();

        builder.Property(s => s.Descricao)
            .HasColumnName("Descricao")
            .HasMaxLength(64)
            .IsRequired();

        builder.Property(s => s.AnoColheita)
            .HasColumnName("AnoColheita")
            .IsRequired();

        builder.Property(s => s.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();

        builder.Property(s => s.DataAtualizacao)
            .HasColumnName("DataAtualizacao");

        // Índices
        builder.HasIndex(s => s.PlantioInicial)
            .HasDatabaseName("IX_Safra_PlantioInicial");

        builder.HasIndex(s => s.PlantioFinal)
            .HasDatabaseName("IX_Safra_PlantioFinal");

        builder.HasIndex(s => s.AnoColheita)
            .HasDatabaseName("IX_Safra_AnoColheita");

        builder.HasIndex(s => new { s.PlantioNome, s.PlantioInicial, s.PlantioFinal })
            .HasDatabaseName("IX_Safra_Periodo")
            .IsUnique();

        // Índice para consulta de safra atual
        builder.HasIndex(s => new { s.PlantioNome, s.PlantioInicial, s.PlantioFinal })
            .HasDatabaseName("IX_Safra_Atual")
            .HasFilter("PlantioNome = 'S1'");
    }
}
</SafraConfiguration.cs>
<SafraRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Safras.Dominio.Entidades;
using Agriis.Safras.Dominio.Interfaces;

namespace Agriis.Safras.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de Safras
/// </summary>
public class SafraRepository : RepositoryBase<Safra, DbContext>, ISafraRepository
{
    public SafraRepository(DbContext context) : base(context)
    {
    }

    public async Task<Safra?> ObterSafraAtualAsync()
    {
        var agora = DateTime.Now;
        return await DbSet
            .Where(s => agora >= s.PlantioInicial && agora <= s.PlantioFinal && s.PlantioNome == "S1")
            .FirstOrDefaultAsync();
    }

    public async Task<IEnumerable<Safra>> ObterPorAnoColheitaAsync(int anoColheita)
    {
        return await DbSet
            .Where(s => s.AnoColheita == anoColheita)
            .OrderBy(s => s.PlantioInicial)
            .ToListAsync();
    }

    public async Task<IEnumerable<Safra>> ObterTodasOrdenadasAsync()
    {
        return await DbSet
            .OrderBy(s => s.PlantioInicial)
            .ToListAsync();
    }

    public async Task<bool> ExisteConflitoPeriodoAsync(DateTime plantioInicial, DateTime plantioFinal, string plantioNome, int? idExcluir = null)
    {
        var query = DbSet.Where(s => 
            s.PlantioNome == plantioNome &&
            ((plantioInicial >= s.PlantioInicial && plantioInicial <= s.PlantioFinal) ||
             (plantioFinal >= s.PlantioInicial && plantioFinal <= s.PlantioFinal) ||
             (plantioInicial <= s.PlantioInicial && plantioFinal >= s.PlantioFinal)));

        if (idExcluir.HasValue)
        {
            query = query.Where(s => s.Id != idExcluir.Value);
        }

        return await query.AnyAsync();
    }

    public async Task<IEnumerable<Safra>> ObterSafrasAtivasAsync()
    {
        var agora = DateTime.Now;
        return await DbSet
            .Where(s => agora >= s.PlantioInicial && agora <= s.PlantioFinal)
            .OrderBy(s => s.PlantioInicial)
            .ToListAsync();
    }

    public override async Task<IEnumerable<Safra>> ObterTodosAsync(CancellationToken cancellationToken = default)
    {
        return await ObterTodasOrdenadasAsync();
    }
}
</SafraRepository.cs>
<GrupoDto.cs>
namespace Agriis.Segmentacoes.Aplicacao.DTOs;

/// <summary>
/// DTO para grupo de segmentação
/// </summary>
public class GrupoDto
{
    /// <summary>
    /// ID do grupo
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome do grupo
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Descrição do grupo
    /// </summary>
    public string? Descricao { get; set; }
    
    /// <summary>
    /// Área mínima em hectares
    /// </summary>
    public decimal AreaMinima { get; set; }
    
    /// <summary>
    /// Área máxima em hectares
    /// </summary>
    public decimal? AreaMaxima { get; set; }
    
    /// <summary>
    /// Indica se o grupo está ativo
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// ID da segmentação proprietária
    /// </summary>
    public int SegmentacaoId { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data de atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
    
    /// <summary>
    /// Descontos por categoria
    /// </summary>
    public List<GrupoSegmentacaoDto> Descontos { get; set; } = new();
}

/// <summary>
/// DTO para criação de grupo
/// </summary>
public class CriarGrupoDto
{
    /// <summary>
    /// Nome do grupo
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Descrição do grupo
    /// </summary>
    public string? Descricao { get; set; }
    
    /// <summary>
    /// Área mínima em hectares
    /// </summary>
    public decimal AreaMinima { get; set; }
    
    /// <summary>
    /// Área máxima em hectares
    /// </summary>
    public decimal? AreaMaxima { get; set; }
    
    /// <summary>
    /// ID da segmentação proprietária
    /// </summary>
    public int SegmentacaoId { get; set; }
}

/// <summary>
/// DTO para atualização de grupo
/// </summary>
public class AtualizarGrupoDto
{
    /// <summary>
    /// Nome do grupo
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Descrição do grupo
    /// </summary>
    public string? Descricao { get; set; }
    
    /// <summary>
    /// Área mínima em hectares
    /// </summary>
    public decimal AreaMinima { get; set; }
    
    /// <summary>
    /// Área máxima em hectares
    /// </summary>
    public decimal? AreaMaxima { get; set; }
    
    /// <summary>
    /// Indica se o grupo está ativo
    /// </summary>
    public bool Ativo { get; set; }
}
</GrupoDto.cs>
<GrupoSegmentacaoDto.cs>
namespace Agriis.Segmentacoes.Aplicacao.DTOs;

/// <summary>
/// DTO para grupo de segmentação (desconto por categoria)
/// </summary>
public class GrupoSegmentacaoDto
{
    /// <summary>
    /// ID do desconto
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// ID do grupo
    /// </summary>
    public int GrupoId { get; set; }
    
    /// <summary>
    /// ID da categoria
    /// </summary>
    public int CategoriaId { get; set; }
    
    /// <summary>
    /// Percentual de desconto
    /// </summary>
    public decimal PercentualDesconto { get; set; }
    
    /// <summary>
    /// Indica se o desconto está ativo
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// Observações sobre o desconto
    /// </summary>
    public string? Observacoes { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data de atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
}

/// <summary>
/// DTO para criação de desconto por categoria
/// </summary>
public class CriarGrupoSegmentacaoDto
{
    /// <summary>
    /// ID do grupo
    /// </summary>
    public int GrupoId { get; set; }
    
    /// <summary>
    /// ID da categoria
    /// </summary>
    public int CategoriaId { get; set; }
    
    /// <summary>
    /// Percentual de desconto
    /// </summary>
    public decimal PercentualDesconto { get; set; }
    
    /// <summary>
    /// Observações sobre o desconto
    /// </summary>
    public string? Observacoes { get; set; }
}

/// <summary>
/// DTO para atualização de desconto por categoria
/// </summary>
public class AtualizarGrupoSegmentacaoDto
{
    /// <summary>
    /// Percentual de desconto
    /// </summary>
    public decimal PercentualDesconto { get; set; }
    
    /// <summary>
    /// Observações sobre o desconto
    /// </summary>
    public string? Observacoes { get; set; }
    
    /// <summary>
    /// Indica se o desconto está ativo
    /// </summary>
    public bool Ativo { get; set; }
}

/// <summary>
/// DTO para resultado de cálculo de desconto segmentado
/// </summary>
public class ResultadoDescontoSegmentadoDto
{
    /// <summary>
    /// Percentual de desconto aplicado
    /// </summary>
    public decimal PercentualDesconto { get; set; }
    
    /// <summary>
    /// Valor do desconto em moeda
    /// </summary>
    public decimal ValorDesconto { get; set; }
    
    /// <summary>
    /// Valor final após aplicar o desconto
    /// </summary>
    public decimal ValorFinal { get; set; }
    
    /// <summary>
    /// Nome da segmentação aplicada
    /// </summary>
    public string? SegmentacaoAplicada { get; set; }
    
    /// <summary>
    /// Nome do grupo aplicado
    /// </summary>
    public string? GrupoAplicado { get; set; }
    
    /// <summary>
    /// Observações sobre o cálculo
    /// </summary>
    public string? Observacoes { get; set; }
}
</GrupoSegmentacaoDto.cs>
<SegmentacaoDto.cs>
using System.Text.Json;

namespace Agriis.Segmentacoes.Aplicacao.DTOs;

/// <summary>
/// DTO para segmentação
/// </summary>
public class SegmentacaoDto
{
    /// <summary>
    /// ID da segmentação
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome da segmentação
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Descrição da segmentação
    /// </summary>
    public string? Descricao { get; set; }
    
    /// <summary>
    /// Indica se a segmentação está ativa
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// ID do fornecedor proprietário
    /// </summary>
    public int FornecedorId { get; set; }
    
    /// <summary>
    /// Configuração territorial em formato JSON
    /// </summary>
    public JsonDocument? ConfiguracaoTerritorial { get; set; }
    
    /// <summary>
    /// Indica se é a segmentação padrão
    /// </summary>
    public bool EhPadrao { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data de atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
    
    /// <summary>
    /// Grupos associados
    /// </summary>
    public List<GrupoDto> Grupos { get; set; } = new();
}

/// <summary>
/// DTO para criação de segmentação
/// </summary>
public class CriarSegmentacaoDto
{
    /// <summary>
    /// Nome da segmentação
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Descrição da segmentação
    /// </summary>
    public string? Descricao { get; set; }
    
    /// <summary>
    /// ID do fornecedor proprietário
    /// </summary>
    public int FornecedorId { get; set; }
    
    /// <summary>
    /// Configuração territorial em formato JSON
    /// </summary>
    public JsonDocument? ConfiguracaoTerritorial { get; set; }
    
    /// <summary>
    /// Indica se é a segmentação padrão
    /// </summary>
    public bool EhPadrao { get; set; }
}

/// <summary>
/// DTO para atualização de segmentação
/// </summary>
public class AtualizarSegmentacaoDto
{
    /// <summary>
    /// Nome da segmentação
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Descrição da segmentação
    /// </summary>
    public string? Descricao { get; set; }
    
    /// <summary>
    /// Configuração territorial em formato JSON
    /// </summary>
    public JsonDocument? ConfiguracaoTerritorial { get; set; }
    
    /// <summary>
    /// Indica se é a segmentação padrão
    /// </summary>
    public bool EhPadrao { get; set; }
    
    /// <summary>
    /// Indica se a segmentação está ativa
    /// </summary>
    public bool Ativo { get; set; }
}
</SegmentacaoDto.cs>
<ICalculoDescontoService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Segmentacoes.Aplicacao.DTOs;

namespace Agriis.Segmentacoes.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de cálculo de desconto segmentado
/// </summary>
public interface ICalculoDescontoService
{
    /// <summary>
    /// Calcula o desconto segmentado para um produtor, fornecedor e categoria
    /// </summary>
    /// <param name="produtorId">ID do produtor</param>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="categoriaId">ID da categoria</param>
    /// <param name="areaProdutor">Área total do produtor em hectares</param>
    /// <param name="valorBase">Valor base para cálculo do desconto</param>
    /// <returns>Resultado do cálculo de desconto</returns>
    Task<Result<ResultadoDescontoSegmentadoDto>> CalcularDescontoSegmentadoAsync(
        int produtorId, 
        int fornecedorId, 
        int categoriaId, 
        decimal areaProdutor, 
        decimal valorBase);
    
    /// <summary>
    /// Valida se uma área se enquadra em algum grupo de uma segmentação
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <param name="area">Área em hectares</param>
    /// <returns>True se a área se enquadra</returns>
    Task<Result<bool>> ValidarAreaSeEnquadraAsync(int segmentacaoId, decimal area);
    
    /// <summary>
    /// Obtém grupos aplicáveis para uma área específica
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <param name="area">Área em hectares</param>
    /// <returns>Lista de grupos aplicáveis</returns>
    Task<Result<IEnumerable<GrupoDto>>> ObterGruposAplicaveisAsync(int segmentacaoId, decimal area);
}
</ICalculoDescontoService.cs>
<ISegmentacaoService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Segmentacoes.Aplicacao.DTOs;

namespace Agriis.Segmentacoes.Aplicacao.Interfaces;

/// <summary>
/// Interface para serviços de segmentação
/// </summary>
public interface ISegmentacaoService
{
    /// <summary>
    /// Obtém todas as segmentações de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de segmentações</returns>
    Task<Result<IEnumerable<SegmentacaoDto>>> ObterPorFornecedorAsync(int fornecedorId);
    
    /// <summary>
    /// Obtém segmentação por ID
    /// </summary>
    /// <param name="id">ID da segmentação</param>
    /// <returns>Segmentação ou erro</returns>
    Task<Result<SegmentacaoDto>> ObterPorIdAsync(int id);
    
    /// <summary>
    /// Obtém segmentação completa com grupos e descontos
    /// </summary>
    /// <param name="id">ID da segmentação</param>
    /// <returns>Segmentação completa ou erro</returns>
    Task<Result<SegmentacaoDto>> ObterCompletaAsync(int id);
    
    /// <summary>
    /// Obtém a segmentação padrão de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Segmentação padrão ou erro</returns>
    Task<Result<SegmentacaoDto>> ObterPadraoAsync(int fornecedorId);
    
    /// <summary>
    /// Cria uma nova segmentação
    /// </summary>
    /// <param name="dto">Dados da segmentação</param>
    /// <returns>Segmentação criada ou erro</returns>
    Task<Result<SegmentacaoDto>> CriarAsync(CriarSegmentacaoDto dto);
    
    /// <summary>
    /// Atualiza uma segmentação
    /// </summary>
    /// <param name="id">ID da segmentação</param>
    /// <param name="dto">Dados atualizados</param>
    /// <returns>Segmentação atualizada ou erro</returns>
    Task<Result<SegmentacaoDto>> AtualizarAsync(int id, AtualizarSegmentacaoDto dto);
    
    /// <summary>
    /// Remove uma segmentação
    /// </summary>
    /// <param name="id">ID da segmentação</param>
    /// <returns>Resultado da operação</returns>
    Task<Result> RemoverAsync(int id);
    
    /// <summary>
    /// Ativa uma segmentação
    /// </summary>
    /// <param name="id">ID da segmentação</param>
    /// <returns>Resultado da operação</returns>
    Task<Result> AtivarAsync(int id);
    
    /// <summary>
    /// Desativa uma segmentação
    /// </summary>
    /// <param name="id">ID da segmentação</param>
    /// <returns>Resultado da operação</returns>
    Task<Result> DesativarAsync(int id);
    
    /// <summary>
    /// Define uma segmentação como padrão
    /// </summary>
    /// <param name="id">ID da segmentação</param>
    /// <returns>Resultado da operação</returns>
    Task<Result> DefinirComoPadraoAsync(int id);
}
</ISegmentacaoService.cs>
<SegmentacaoMappingProfile.cs>
using Agriis.Segmentacoes.Aplicacao.DTOs;
using Agriis.Segmentacoes.Dominio.Entidades;
using Agriis.Segmentacoes.Dominio.Servicos;
using AutoMapper;

namespace Agriis.Segmentacoes.Aplicacao.Mapeamentos;

/// <summary>
/// Perfil de mapeamento para segmentações
/// </summary>
public class SegmentacaoMappingProfile : Profile
{
    public SegmentacaoMappingProfile()
    {
        // Segmentacao
        CreateMap<Segmentacao, SegmentacaoDto>()
            .ForMember(dest => dest.Grupos, opt => opt.MapFrom(src => src.Grupos));
            
        CreateMap<CriarSegmentacaoDto, Segmentacao>()
            .ConstructUsing(src => new Segmentacao(src.Nome, src.FornecedorId, src.Descricao, src.EhPadrao))
            .ForMember(dest => dest.ConfiguracaoTerritorial, opt => opt.Ignore())
            .AfterMap((src, dest) =>
            {
                if (src.ConfiguracaoTerritorial != null)
                    dest.DefinirConfiguracaoTerritorial(src.ConfiguracaoTerritorial);
            });
        
        // Grupo
        CreateMap<Grupo, GrupoDto>()
            .ForMember(dest => dest.Descontos, opt => opt.MapFrom(src => src.GruposSegmentacao));
            
        CreateMap<CriarGrupoDto, Grupo>()
            .ConstructUsing(src => new Grupo(src.Nome, src.SegmentacaoId, src.AreaMinima, src.AreaMaxima, src.Descricao));
        
        // GrupoSegmentacao
        CreateMap<GrupoSegmentacao, GrupoSegmentacaoDto>();
        
        CreateMap<CriarGrupoSegmentacaoDto, GrupoSegmentacao>()
            .ConstructUsing(src => new GrupoSegmentacao(src.GrupoId, src.CategoriaId, src.PercentualDesconto, src.Observacoes));
        
        // ResultadoDescontoSegmentado
        CreateMap<ResultadoDescontoSegmentado, ResultadoDescontoSegmentadoDto>();
    }
}
</SegmentacaoMappingProfile.cs>
<CalculoDescontoService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Segmentacoes.Aplicacao.DTOs;
using Agriis.Segmentacoes.Aplicacao.Interfaces;
using Agriis.Segmentacoes.Dominio.Servicos;
using AutoMapper;
using Microsoft.Extensions.Logging;

namespace Agriis.Segmentacoes.Aplicacao.Servicos;

/// <summary>
/// Implementação do serviço de cálculo de desconto segmentado
/// </summary>
public class CalculoDescontoService : ICalculoDescontoService
{
    private readonly CalculoDescontoSegmentadoService _calculoDescontoSegmentadoService;
    private readonly IMapper _mapper;
    private readonly ILogger<CalculoDescontoService> _logger;
    
    public CalculoDescontoService(
        CalculoDescontoSegmentadoService calculoDescontoSegmentadoService,
        IMapper mapper,
        ILogger<CalculoDescontoService> logger)
    {
        _calculoDescontoSegmentadoService = calculoDescontoSegmentadoService;
        _mapper = mapper;
        _logger = logger;
    }
    
    /// <summary>
    /// Calcula o desconto segmentado para um produtor, fornecedor e categoria
    /// </summary>
    public async Task<Result<ResultadoDescontoSegmentadoDto>> CalcularDescontoSegmentadoAsync(
        int produtorId, 
        int fornecedorId, 
        int categoriaId, 
        decimal areaProdutor, 
        decimal valorBase)
    {
        try
        {
            if (areaProdutor < 0)
                return Result<ResultadoDescontoSegmentadoDto>.Failure("Área do produtor deve ser positiva");
                
            if (valorBase <= 0)
                return Result<ResultadoDescontoSegmentadoDto>.Failure("Valor base deve ser positivo");
            
            var resultado = await _calculoDescontoSegmentadoService.CalcularDescontoAsync(
                produtorId, fornecedorId, categoriaId, areaProdutor, valorBase);
            
            var resultadoDto = _mapper.Map<ResultadoDescontoSegmentadoDto>(resultado);
            
            _logger.LogInformation(
                "Desconto calculado: Produtor {ProdutorId}, Fornecedor {FornecedorId}, Categoria {CategoriaId}, " +
                "Área {Area}, Valor Base {ValorBase}, Desconto {Desconto}%",
                produtorId, fornecedorId, categoriaId, areaProdutor, valorBase, resultado.PercentualDesconto);
            
            return Result<ResultadoDescontoSegmentadoDto>.Success(resultadoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, 
                "Erro ao calcular desconto segmentado: Produtor {ProdutorId}, Fornecedor {FornecedorId}, " +
                "Categoria {CategoriaId}, Área {Area}, Valor {ValorBase}",
                produtorId, fornecedorId, categoriaId, areaProdutor, valorBase);
            
            return Result<ResultadoDescontoSegmentadoDto>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Valida se uma área se enquadra em algum grupo de uma segmentação
    /// </summary>
    public async Task<Result<bool>> ValidarAreaSeEnquadraAsync(int segmentacaoId, decimal area)
    {
        try
        {
            if (area < 0)
                return Result<bool>.Failure("Área deve ser positiva");
            
            var seEnquadra = await _calculoDescontoSegmentadoService.ValidarAreaSeEnquadraAsync(segmentacaoId, area);
            
            return Result<bool>.Success(seEnquadra);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao validar área {Area} para segmentação {SegmentacaoId}", area, segmentacaoId);
            return Result<bool>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Obtém grupos aplicáveis para uma área específica
    /// </summary>
    public async Task<Result<IEnumerable<GrupoDto>>> ObterGruposAplicaveisAsync(int segmentacaoId, decimal area)
    {
        try
        {
            if (area < 0)
                return Result<IEnumerable<GrupoDto>>.Failure("Área deve ser positiva");
            
            var grupos = await _calculoDescontoSegmentadoService.ObterGruposAplicaveisAsync(segmentacaoId, area);
            var gruposDto = _mapper.Map<IEnumerable<GrupoDto>>(grupos);
            
            return Result<IEnumerable<GrupoDto>>.Success(gruposDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter grupos aplicáveis para área {Area} na segmentação {SegmentacaoId}", 
                area, segmentacaoId);
            return Result<IEnumerable<GrupoDto>>.Failure("Erro interno do servidor");
        }
    }
}
</CalculoDescontoService.cs>
<SegmentacaoService.cs>
using Agriis.Compartilhado.Aplicacao.Resultados;
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Segmentacoes.Aplicacao.DTOs;
using Agriis.Segmentacoes.Aplicacao.Interfaces;
using Agriis.Segmentacoes.Dominio.Entidades;
using Agriis.Segmentacoes.Dominio.Interfaces;
using AutoMapper;
using Microsoft.Extensions.Logging;

namespace Agriis.Segmentacoes.Aplicacao.Servicos;

/// <summary>
/// Implementação do serviço de segmentações
/// </summary>
public class SegmentacaoService : ISegmentacaoService
{
    private readonly ISegmentacaoRepository _segmentacaoRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly ILogger<SegmentacaoService> _logger;
    
    public SegmentacaoService(
        ISegmentacaoRepository segmentacaoRepository,
        IUnitOfWork unitOfWork,
        IMapper mapper,
        ILogger<SegmentacaoService> logger)
    {
        _segmentacaoRepository = segmentacaoRepository;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        _logger = logger;
    }
    
    /// <summary>
    /// Obtém todas as segmentações de um fornecedor
    /// </summary>
    public async Task<Result<IEnumerable<SegmentacaoDto>>> ObterPorFornecedorAsync(int fornecedorId)
    {
        try
        {
            var segmentacoes = await _segmentacaoRepository.ObterPorFornecedorAsync(fornecedorId);
            var segmentacoesDto = _mapper.Map<IEnumerable<SegmentacaoDto>>(segmentacoes);
            
            return Result<IEnumerable<SegmentacaoDto>>.Success(segmentacoesDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter segmentações do fornecedor {FornecedorId}", fornecedorId);
            return Result<IEnumerable<SegmentacaoDto>>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Obtém segmentação por ID
    /// </summary>
    public async Task<Result<SegmentacaoDto>> ObterPorIdAsync(int id)
    {
        try
        {
            var segmentacao = await _segmentacaoRepository.ObterPorIdAsync(id);
            
            if (segmentacao == null)
                return Result<SegmentacaoDto>.Failure("Segmentação não encontrada");
            
            var segmentacaoDto = _mapper.Map<SegmentacaoDto>(segmentacao);
            return Result<SegmentacaoDto>.Success(segmentacaoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter segmentação {Id}", id);
            return Result<SegmentacaoDto>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Obtém segmentação completa com grupos e descontos
    /// </summary>
    public async Task<Result<SegmentacaoDto>> ObterCompletaAsync(int id)
    {
        try
        {
            var segmentacao = await _segmentacaoRepository.ObterCompletaAsync(id);
            
            if (segmentacao == null)
                return Result<SegmentacaoDto>.Failure("Segmentação não encontrada");
            
            var segmentacaoDto = _mapper.Map<SegmentacaoDto>(segmentacao);
            return Result<SegmentacaoDto>.Success(segmentacaoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter segmentação completa {Id}", id);
            return Result<SegmentacaoDto>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Obtém a segmentação padrão de um fornecedor
    /// </summary>
    public async Task<Result<SegmentacaoDto>> ObterPadraoAsync(int fornecedorId)
    {
        try
        {
            var segmentacao = await _segmentacaoRepository.ObterPadraoAsync(fornecedorId);
            
            if (segmentacao == null)
                return Result<SegmentacaoDto>.Failure("Segmentação padrão não encontrada");
            
            var segmentacaoDto = _mapper.Map<SegmentacaoDto>(segmentacao);
            return Result<SegmentacaoDto>.Success(segmentacaoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao obter segmentação padrão do fornecedor {FornecedorId}", fornecedorId);
            return Result<SegmentacaoDto>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Cria uma nova segmentação
    /// </summary>
    public async Task<Result<SegmentacaoDto>> CriarAsync(CriarSegmentacaoDto dto)
    {
        try
        {
            // Validar se já existe segmentação padrão quando está criando uma nova padrão
            if (dto.EhPadrao)
            {
                var existePadrao = await _segmentacaoRepository.ExistePadraoAsync(dto.FornecedorId);
                if (existePadrao)
                    return Result<SegmentacaoDto>.Failure("Já existe uma segmentação padrão para este fornecedor");
            }
            
            var segmentacao = _mapper.Map<Segmentacao>(dto);
            
            await _segmentacaoRepository.AdicionarAsync(segmentacao);
            await _unitOfWork.SalvarAlteracoesAsync();
            
            var segmentacaoDto = _mapper.Map<SegmentacaoDto>(segmentacao);
            
            _logger.LogInformation("Segmentação {Nome} criada com sucesso para fornecedor {FornecedorId}", 
                segmentacao.Nome, segmentacao.FornecedorId);
            
            return Result<SegmentacaoDto>.Success(segmentacaoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar segmentação {Nome}", dto.Nome);
            return Result<SegmentacaoDto>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Atualiza uma segmentação
    /// </summary>
    public async Task<Result<SegmentacaoDto>> AtualizarAsync(int id, AtualizarSegmentacaoDto dto)
    {
        try
        {
            var segmentacao = await _segmentacaoRepository.ObterPorIdAsync(id);
            
            if (segmentacao == null)
                return Result<SegmentacaoDto>.Failure("Segmentação não encontrada");
            
            // Validar se já existe segmentação padrão quando está definindo como padrão
            if (dto.EhPadrao && !segmentacao.EhPadrao)
            {
                var existePadrao = await _segmentacaoRepository.ExistePadraoAsync(segmentacao.FornecedorId, id);
                if (existePadrao)
                    return Result<SegmentacaoDto>.Failure("Já existe uma segmentação padrão para este fornecedor");
            }
            
            segmentacao.AtualizarInformacoes(dto.Nome, dto.Descricao);
            
            if (dto.ConfiguracaoTerritorial != null)
                segmentacao.DefinirConfiguracaoTerritorial(dto.ConfiguracaoTerritorial);
            
            if (dto.EhPadrao && !segmentacao.EhPadrao)
                segmentacao.DefinirComoPadrao();
            else if (!dto.EhPadrao && segmentacao.EhPadrao)
                segmentacao.RemoverComoPadrao();
            
            if (dto.Ativo && !segmentacao.Ativo)
                segmentacao.Ativar();
            else if (!dto.Ativo && segmentacao.Ativo)
                segmentacao.Desativar();
            
            await _segmentacaoRepository.AtualizarAsync(segmentacao);
            await _unitOfWork.SalvarAlteracoesAsync();
            
            var segmentacaoDto = _mapper.Map<SegmentacaoDto>(segmentacao);
            
            _logger.LogInformation("Segmentação {Id} atualizada com sucesso", id);
            
            return Result<SegmentacaoDto>.Success(segmentacaoDto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao atualizar segmentação {Id}", id);
            return Result<SegmentacaoDto>.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Remove uma segmentação
    /// </summary>
    public async Task<Result> RemoverAsync(int id)
    {
        try
        {
            var segmentacao = await _segmentacaoRepository.ObterPorIdAsync(id);
            
            if (segmentacao == null)
                return Result.Failure("Segmentação não encontrada");
            
            await _segmentacaoRepository.RemoverAsync(id);
            await _unitOfWork.SalvarAlteracoesAsync();
            
            _logger.LogInformation("Segmentação {Id} removida com sucesso", id);
            
            return Result.Success();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao remover segmentação {Id}", id);
            return Result.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Ativa uma segmentação
    /// </summary>
    public async Task<Result> AtivarAsync(int id)
    {
        try
        {
            var segmentacao = await _segmentacaoRepository.ObterPorIdAsync(id);
            
            if (segmentacao == null)
                return Result.Failure("Segmentação não encontrada");
            
            segmentacao.Ativar();
            
            await _segmentacaoRepository.AtualizarAsync(segmentacao);
            await _unitOfWork.SalvarAlteracoesAsync();
            
            _logger.LogInformation("Segmentação {Id} ativada com sucesso", id);
            
            return Result.Success();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao ativar segmentação {Id}", id);
            return Result.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Desativa uma segmentação
    /// </summary>
    public async Task<Result> DesativarAsync(int id)
    {
        try
        {
            var segmentacao = await _segmentacaoRepository.ObterPorIdAsync(id);
            
            if (segmentacao == null)
                return Result.Failure("Segmentação não encontrada");
            
            segmentacao.Desativar();
            
            await _segmentacaoRepository.AtualizarAsync(segmentacao);
            await _unitOfWork.SalvarAlteracoesAsync();
            
            _logger.LogInformation("Segmentação {Id} desativada com sucesso", id);
            
            return Result.Success();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao desativar segmentação {Id}", id);
            return Result.Failure("Erro interno do servidor");
        }
    }
    
    /// <summary>
    /// Define uma segmentação como padrão
    /// </summary>
    public async Task<Result> DefinirComoPadraoAsync(int id)
    {
        try
        {
            var segmentacao = await _segmentacaoRepository.ObterPorIdAsync(id);
            
            if (segmentacao == null)
                return Result.Failure("Segmentação não encontrada");
            
            if (segmentacao.EhPadrao)
                return Result.Failure("Segmentação já é padrão");
            
            segmentacao.DefinirComoPadrao();
            
            await _segmentacaoRepository.AtualizarAsync(segmentacao);
            await _unitOfWork.SalvarAlteracoesAsync();
            
            _logger.LogInformation("Segmentação {Id} definida como padrão", id);
            
            return Result.Success();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao definir segmentação {Id} como padrão", id);
            return Result.Failure("Erro interno do servidor");
        }
    }
}
</SegmentacaoService.cs>
<Grupo.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Segmentacoes.Dominio.Entidades;

/// <summary>
/// Representa um grupo de segmentação com faixas de área
/// </summary>
public class Grupo : EntidadeBase
{
    /// <summary>
    /// Nome do grupo
    /// </summary>
    public string Nome { get; private set; } = string.Empty;
    
    /// <summary>
    /// Descrição do grupo
    /// </summary>
    public string? Descricao { get; private set; }
    
    /// <summary>
    /// Área mínima em hectares para este grupo
    /// </summary>
    public decimal AreaMinima { get; private set; }
    
    /// <summary>
    /// Área máxima em hectares para este grupo (null = sem limite)
    /// </summary>
    public decimal? AreaMaxima { get; private set; }
    
    /// <summary>
    /// Indica se o grupo está ativo
    /// </summary>
    public bool Ativo { get; private set; }
    
    /// <summary>
    /// ID da segmentação proprietária
    /// </summary>
    public int SegmentacaoId { get; private set; }
    
    /// <summary>
    /// Segmentação proprietária
    /// </summary>
    public virtual Segmentacao Segmentacao { get; private set; } = null!;
    
    /// <summary>
    /// Grupos de segmentação (descontos por categoria) associados
    /// </summary>
    public virtual ICollection<GrupoSegmentacao> GruposSegmentacao { get; private set; } = new List<GrupoSegmentacao>();
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected Grupo() { }
    
    /// <summary>
    /// Construtor para criar um novo grupo
    /// </summary>
    /// <param name="nome">Nome do grupo</param>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <param name="areaMinima">Área mínima em hectares</param>
    /// <param name="areaMaxima">Área máxima em hectares (opcional)</param>
    /// <param name="descricao">Descrição opcional</param>
    public Grupo(string nome, int segmentacaoId, decimal areaMinima, decimal? areaMaxima = null, string? descricao = null)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome do grupo é obrigatório", nameof(nome));
            
        if (segmentacaoId <= 0)
            throw new ArgumentException("ID da segmentação deve ser válido", nameof(segmentacaoId));
            
        if (areaMinima < 0)
            throw new ArgumentException("Área mínima não pode ser negativa", nameof(areaMinima));
            
        if (areaMaxima.HasValue && areaMaxima.Value < areaMinima)
            throw new ArgumentException("Área máxima deve ser maior que a área mínima", nameof(areaMaxima));
            
        Nome = nome.Trim();
        SegmentacaoId = segmentacaoId;
        AreaMinima = areaMinima;
        AreaMaxima = areaMaxima;
        Descricao = descricao?.Trim();
        Ativo = true;
    }
    
    /// <summary>
    /// Atualiza as informações básicas do grupo
    /// </summary>
    /// <param name="nome">Novo nome</param>
    /// <param name="descricao">Nova descrição</param>
    public void AtualizarInformacoes(string nome, string? descricao = null)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome do grupo é obrigatório", nameof(nome));
            
        Nome = nome.Trim();
        Descricao = descricao?.Trim();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza as faixas de área do grupo
    /// </summary>
    /// <param name="areaMinima">Nova área mínima</param>
    /// <param name="areaMaxima">Nova área máxima</param>
    public void AtualizarFaixasArea(decimal areaMinima, decimal? areaMaxima = null)
    {
        if (areaMinima < 0)
            throw new ArgumentException("Área mínima não pode ser negativa", nameof(areaMinima));
            
        if (areaMaxima.HasValue && areaMaxima.Value < areaMinima)
            throw new ArgumentException("Área máxima deve ser maior que a área mínima", nameof(areaMaxima));
            
        AreaMinima = areaMinima;
        AreaMaxima = areaMaxima;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Ativa o grupo
    /// </summary>
    public void Ativar()
    {
        Ativo = true;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Desativa o grupo
    /// </summary>
    public void Desativar()
    {
        Ativo = false;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Verifica se uma área se enquadra neste grupo
    /// </summary>
    /// <param name="area">Área em hectares</param>
    /// <returns>True se a área se enquadra no grupo</returns>
    public bool AreaSeEnquadra(decimal area)
    {
        if (!Ativo)
            return false;
            
        if (area < AreaMinima)
            return false;
            
        if (AreaMaxima.HasValue && area > AreaMaxima.Value)
            return false;
            
        return true;
    }
    
    /// <summary>
    /// Adiciona um grupo de segmentação (desconto por categoria)
    /// </summary>
    /// <param name="grupoSegmentacao">Grupo de segmentação a ser adicionado</param>
    public void AdicionarGrupoSegmentacao(GrupoSegmentacao grupoSegmentacao)
    {
        if (grupoSegmentacao == null)
            throw new ArgumentNullException(nameof(grupoSegmentacao));
            
        if (!GruposSegmentacao.Contains(grupoSegmentacao))
        {
            GruposSegmentacao.Add(grupoSegmentacao);
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Remove um grupo de segmentação
    /// </summary>
    /// <param name="grupoSegmentacao">Grupo de segmentação a ser removido</param>
    public void RemoverGrupoSegmentacao(GrupoSegmentacao grupoSegmentacao)
    {
        if (grupoSegmentacao != null && GruposSegmentacao.Contains(grupoSegmentacao))
        {
            GruposSegmentacao.Remove(grupoSegmentacao);
            AtualizarDataModificacao();
        }
    }
}
</Grupo.cs>
<GrupoSegmentacao.cs>
using Agriis.Compartilhado.Dominio.Entidades;

namespace Agriis.Segmentacoes.Dominio.Entidades;

/// <summary>
/// Representa os descontos por categoria para um grupo de segmentação
/// </summary>
public class GrupoSegmentacao : EntidadeBase
{
    /// <summary>
    /// ID do grupo proprietário
    /// </summary>
    public int GrupoId { get; private set; }
    
    /// <summary>
    /// ID da categoria de produto
    /// </summary>
    public int CategoriaId { get; private set; }
    
    /// <summary>
    /// Percentual de desconto aplicado (0-100)
    /// </summary>
    public decimal PercentualDesconto { get; private set; }
    
    /// <summary>
    /// Indica se o desconto está ativo
    /// </summary>
    public bool Ativo { get; private set; }
    
    /// <summary>
    /// Observações sobre o desconto
    /// </summary>
    public string? Observacoes { get; private set; }
    
    /// <summary>
    /// Grupo proprietário
    /// </summary>
    public virtual Grupo Grupo { get; private set; } = null!;
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected GrupoSegmentacao() { }
    
    /// <summary>
    /// Construtor para criar um novo grupo de segmentação
    /// </summary>
    /// <param name="grupoId">ID do grupo</param>
    /// <param name="categoriaId">ID da categoria</param>
    /// <param name="percentualDesconto">Percentual de desconto (0-100)</param>
    /// <param name="observacoes">Observações opcionais</param>
    public GrupoSegmentacao(int grupoId, int categoriaId, decimal percentualDesconto, string? observacoes = null)
    {
        if (grupoId <= 0)
            throw new ArgumentException("ID do grupo deve ser válido", nameof(grupoId));
            
        if (categoriaId <= 0)
            throw new ArgumentException("ID da categoria deve ser válido", nameof(categoriaId));
            
        if (percentualDesconto < 0 || percentualDesconto > 100)
            throw new ArgumentException("Percentual de desconto deve estar entre 0 e 100", nameof(percentualDesconto));
            
        GrupoId = grupoId;
        CategoriaId = categoriaId;
        PercentualDesconto = percentualDesconto;
        Observacoes = observacoes?.Trim();
        Ativo = true;
    }
    
    /// <summary>
    /// Atualiza o percentual de desconto
    /// </summary>
    /// <param name="novoPercentual">Novo percentual de desconto</param>
    public void AtualizarPercentualDesconto(decimal novoPercentual)
    {
        if (novoPercentual < 0 || novoPercentual > 100)
            throw new ArgumentException("Percentual de desconto deve estar entre 0 e 100", nameof(novoPercentual));
            
        PercentualDesconto = novoPercentual;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza as observações
    /// </summary>
    /// <param name="observacoes">Novas observações</param>
    public void AtualizarObservacoes(string? observacoes)
    {
        Observacoes = observacoes?.Trim();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Ativa o desconto
    /// </summary>
    public void Ativar()
    {
        Ativo = true;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Desativa o desconto
    /// </summary>
    public void Desativar()
    {
        Ativo = false;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Calcula o valor do desconto para um valor base
    /// </summary>
    /// <param name="valorBase">Valor base para cálculo</param>
    /// <returns>Valor do desconto</returns>
    public decimal CalcularValorDesconto(decimal valorBase)
    {
        if (!Ativo || valorBase <= 0)
            return 0;
            
        return valorBase * (PercentualDesconto / 100);
    }
    
    /// <summary>
    /// Calcula o valor final após aplicar o desconto
    /// </summary>
    /// <param name="valorBase">Valor base</param>
    /// <returns>Valor final com desconto aplicado</returns>
    public decimal CalcularValorComDesconto(decimal valorBase)
    {
        if (!Ativo || valorBase <= 0)
            return valorBase;
            
        var valorDesconto = CalcularValorDesconto(valorBase);
        return valorBase - valorDesconto;
    }
}
</GrupoSegmentacao.cs>
<Segmentacao.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using System.Text.Json;

namespace Agriis.Segmentacoes.Dominio.Entidades;

/// <summary>
/// Representa uma segmentação territorial para aplicação de descontos
/// </summary>
public class Segmentacao : EntidadeBase
{
    /// <summary>
    /// Nome da segmentação
    /// </summary>
    public string Nome { get; private set; } = string.Empty;
    
    /// <summary>
    /// Descrição da segmentação
    /// </summary>
    public string? Descricao { get; private set; }
    
    /// <summary>
    /// Indica se a segmentação está ativa
    /// </summary>
    public bool Ativo { get; private set; }
    
    /// <summary>
    /// ID do fornecedor proprietário da segmentação
    /// </summary>
    public int FornecedorId { get; private set; }
    
    /// <summary>
    /// Configuração territorial em formato JSON
    /// Contém estados e municípios cobertos pela segmentação
    /// </summary>
    public JsonDocument? ConfiguracaoTerritorial { get; private set; }
    
    /// <summary>
    /// Indica se esta é a segmentação padrão para o fornecedor
    /// </summary>
    public bool EhPadrao { get; private set; }
    
    /// <summary>
    /// Grupos de segmentação associados
    /// </summary>
    public virtual ICollection<Grupo> Grupos { get; private set; } = new List<Grupo>();
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected Segmentacao() { }
    
    /// <summary>
    /// Construtor para criar uma nova segmentação
    /// </summary>
    /// <param name="nome">Nome da segmentação</param>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="descricao">Descrição opcional</param>
    /// <param name="ehPadrao">Se é a segmentação padrão</param>
    public Segmentacao(string nome, int fornecedorId, string? descricao = null, bool ehPadrao = false)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome da segmentação é obrigatório", nameof(nome));
            
        if (fornecedorId <= 0)
            throw new ArgumentException("ID do fornecedor deve ser válido", nameof(fornecedorId));
            
        Nome = nome.Trim();
        FornecedorId = fornecedorId;
        Descricao = descricao?.Trim();
        EhPadrao = ehPadrao;
        Ativo = true;
    }
    
    /// <summary>
    /// Atualiza as informações básicas da segmentação
    /// </summary>
    /// <param name="nome">Novo nome</param>
    /// <param name="descricao">Nova descrição</param>
    public void AtualizarInformacoes(string nome, string? descricao = null)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome da segmentação é obrigatório", nameof(nome));
            
        Nome = nome.Trim();
        Descricao = descricao?.Trim();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define a configuração territorial da segmentação
    /// </summary>
    /// <param name="configuracao">Configuração em formato JSON</param>
    public void DefinirConfiguracaoTerritorial(JsonDocument configuracao)
    {
        ConfiguracaoTerritorial = configuracao;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Ativa a segmentação
    /// </summary>
    public void Ativar()
    {
        Ativo = true;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Desativa a segmentação
    /// </summary>
    public void Desativar()
    {
        Ativo = false;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define como segmentação padrão
    /// </summary>
    public void DefinirComoPadrao()
    {
        EhPadrao = true;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Remove como segmentação padrão
    /// </summary>
    public void RemoverComoPadrao()
    {
        EhPadrao = false;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Adiciona um grupo à segmentação
    /// </summary>
    /// <param name="grupo">Grupo a ser adicionado</param>
    public void AdicionarGrupo(Grupo grupo)
    {
        if (grupo == null)
            throw new ArgumentNullException(nameof(grupo));
            
        if (!Grupos.Contains(grupo))
        {
            Grupos.Add(grupo);
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Remove um grupo da segmentação
    /// </summary>
    /// <param name="grupo">Grupo a ser removido</param>
    public void RemoverGrupo(Grupo grupo)
    {
        if (grupo != null && Grupos.Contains(grupo))
        {
            Grupos.Remove(grupo);
            AtualizarDataModificacao();
        }
    }
}
</Segmentacao.cs>
<IGrupoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Segmentacoes.Dominio.Entidades;

namespace Agriis.Segmentacoes.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de grupos de segmentação
/// </summary>
public interface IGrupoRepository : IRepository<Grupo>
{
    /// <summary>
    /// Obtém todos os grupos de uma segmentação
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <returns>Lista de grupos</returns>
    Task<IEnumerable<Grupo>> ObterPorSegmentacaoAsync(int segmentacaoId);
    
    /// <summary>
    /// Obtém grupos ativos de uma segmentação
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <returns>Lista de grupos ativos</returns>
    Task<IEnumerable<Grupo>> ObterAtivosPorSegmentacaoAsync(int segmentacaoId);
    
    /// <summary>
    /// Obtém grupo que se enquadra para uma área específica
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <param name="area">Área em hectares</param>
    /// <returns>Grupo que se enquadra ou null</returns>
    Task<Grupo?> ObterPorAreaAsync(int segmentacaoId, decimal area);
    
    /// <summary>
    /// Obtém grupo com descontos carregados
    /// </summary>
    /// <param name="id">ID do grupo</param>
    /// <returns>Grupo completo</returns>
    Task<Grupo?> ObterComDescontosAsync(int id);
    
    /// <summary>
    /// Verifica se existe sobreposição de faixas de área
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <param name="areaMinima">Área mínima</param>
    /// <param name="areaMaxima">Área máxima</param>
    /// <param name="excluirId">ID do grupo a excluir da verificação</param>
    /// <returns>True se existe sobreposição</returns>
    Task<bool> ExisteSobreposicaoAsync(int segmentacaoId, decimal areaMinima, decimal? areaMaxima, int? excluirId = null);
}
</IGrupoRepository.cs>
<IGrupoSegmentacaoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Segmentacoes.Dominio.Entidades;

namespace Agriis.Segmentacoes.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de grupos de segmentação (descontos por categoria)
/// </summary>
public interface IGrupoSegmentacaoRepository : IRepository<GrupoSegmentacao>
{
    /// <summary>
    /// Obtém todos os descontos de um grupo
    /// </summary>
    /// <param name="grupoId">ID do grupo</param>
    /// <returns>Lista de descontos</returns>
    Task<IEnumerable<GrupoSegmentacao>> ObterPorGrupoAsync(int grupoId);
    
    /// <summary>
    /// Obtém descontos ativos de um grupo
    /// </summary>
    /// <param name="grupoId">ID do grupo</param>
    /// <returns>Lista de descontos ativos</returns>
    Task<IEnumerable<GrupoSegmentacao>> ObterAtivosPorGrupoAsync(int grupoId);
    
    /// <summary>
    /// Obtém desconto específico por grupo e categoria
    /// </summary>
    /// <param name="grupoId">ID do grupo</param>
    /// <param name="categoriaId">ID da categoria</param>
    /// <returns>Desconto ou null</returns>
    Task<GrupoSegmentacao?> ObterPorGrupoECategoriaAsync(int grupoId, int categoriaId);
    
    /// <summary>
    /// Obtém todos os descontos de uma categoria
    /// </summary>
    /// <param name="categoriaId">ID da categoria</param>
    /// <returns>Lista de descontos</returns>
    Task<IEnumerable<GrupoSegmentacao>> ObterPorCategoriaAsync(int categoriaId);
    
    /// <summary>
    /// Verifica se já existe desconto para a combinação grupo/categoria
    /// </summary>
    /// <param name="grupoId">ID do grupo</param>
    /// <param name="categoriaId">ID da categoria</param>
    /// <param name="excluirId">ID do desconto a excluir da verificação</param>
    /// <returns>True se já existe</returns>
    Task<bool> ExisteAsync(int grupoId, int categoriaId, int? excluirId = null);
}
</IGrupoSegmentacaoRepository.cs>
<ISegmentacaoRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Segmentacoes.Dominio.Entidades;

namespace Agriis.Segmentacoes.Dominio.Interfaces;

/// <summary>
/// Interface para repositório de segmentações
/// </summary>
public interface ISegmentacaoRepository : IRepository<Segmentacao>
{
    /// <summary>
    /// Obtém todas as segmentações de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de segmentações</returns>
    Task<IEnumerable<Segmentacao>> ObterPorFornecedorAsync(int fornecedorId);
    
    /// <summary>
    /// Obtém a segmentação padrão de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Segmentação padrão ou null</returns>
    Task<Segmentacao?> ObterPadraoAsync(int fornecedorId);
    
    /// <summary>
    /// Obtém segmentações ativas de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de segmentações ativas</returns>
    Task<IEnumerable<Segmentacao>> ObterAtivasPorFornecedorAsync(int fornecedorId);
    
    /// <summary>
    /// Verifica se existe uma segmentação padrão para o fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="excluirId">ID da segmentação a excluir da verificação</param>
    /// <returns>True se existe segmentação padrão</returns>
    Task<bool> ExistePadraoAsync(int fornecedorId, int? excluirId = null);
    
    /// <summary>
    /// Obtém segmentação com grupos e descontos carregados
    /// </summary>
    /// <param name="id">ID da segmentação</param>
    /// <returns>Segmentação completa</returns>
    Task<Segmentacao?> ObterCompletaAsync(int id);
}
</ISegmentacaoRepository.cs>
<CalculoDescontoSegmentadoService.cs>
using Agriis.Segmentacoes.Dominio.Entidades;
using Agriis.Segmentacoes.Dominio.Interfaces;

namespace Agriis.Segmentacoes.Dominio.Servicos;

/// <summary>
/// Serviço de domínio para cálculo de descontos segmentados
/// Replica a função desconto_segmentado_por_produtor_fornecedor_categoria do sistema Python
/// </summary>
public class CalculoDescontoSegmentadoService
{
    private readonly ISegmentacaoRepository _segmentacaoRepository;
    private readonly IGrupoRepository _grupoRepository;
    private readonly IGrupoSegmentacaoRepository _grupoSegmentacaoRepository;
    
    public CalculoDescontoSegmentadoService(
        ISegmentacaoRepository segmentacaoRepository,
        IGrupoRepository grupoRepository,
        IGrupoSegmentacaoRepository grupoSegmentacaoRepository)
    {
        _segmentacaoRepository = segmentacaoRepository;
        _grupoRepository = grupoRepository;
        _grupoSegmentacaoRepository = grupoSegmentacaoRepository;
    }
    
    /// <summary>
    /// Calcula o desconto segmentado para um produtor, fornecedor e categoria
    /// </summary>
    /// <param name="produtorId">ID do produtor</param>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="categoriaId">ID da categoria</param>
    /// <param name="areaProdutor">Área total do produtor em hectares</param>
    /// <param name="valorBase">Valor base para cálculo do desconto</param>
    /// <returns>Resultado do cálculo de desconto</returns>
    public async Task<ResultadoDescontoSegmentado> CalcularDescontoAsync(
        int produtorId, 
        int fornecedorId, 
        int categoriaId, 
        decimal areaProdutor, 
        decimal valorBase)
    {
        // 1. Buscar segmentação ativa para o fornecedor
        var segmentacao = await ObterSegmentacaoAplicavelAsync(fornecedorId, produtorId);
        
        if (segmentacao == null)
        {
            return new ResultadoDescontoSegmentado
            {
                PercentualDesconto = 0,
                ValorDesconto = 0,
                ValorFinal = valorBase,
                SegmentacaoAplicada = null,
                GrupoAplicado = null,
                Observacoes = "Nenhuma segmentação encontrada para o fornecedor"
            };
        }
        
        // 2. Buscar grupo que se enquadra na área do produtor
        var grupo = await _grupoRepository.ObterPorAreaAsync(segmentacao.Id, areaProdutor);
        
        if (grupo == null)
        {
            return new ResultadoDescontoSegmentado
            {
                PercentualDesconto = 0,
                ValorDesconto = 0,
                ValorFinal = valorBase,
                SegmentacaoAplicada = segmentacao.Nome,
                GrupoAplicado = null,
                Observacoes = $"Nenhum grupo encontrado para área de {areaProdutor} hectares"
            };
        }
        
        // 3. Buscar desconto específico para a categoria
        var grupoSegmentacao = await _grupoSegmentacaoRepository.ObterPorGrupoECategoriaAsync(grupo.Id, categoriaId);
        
        if (grupoSegmentacao == null || !grupoSegmentacao.Ativo)
        {
            return new ResultadoDescontoSegmentado
            {
                PercentualDesconto = 0,
                ValorDesconto = 0,
                ValorFinal = valorBase,
                SegmentacaoAplicada = segmentacao.Nome,
                GrupoAplicado = grupo.Nome,
                Observacoes = "Nenhum desconto configurado para esta categoria"
            };
        }
        
        // 4. Calcular desconto
        var valorDesconto = grupoSegmentacao.CalcularValorDesconto(valorBase);
        var valorFinal = grupoSegmentacao.CalcularValorComDesconto(valorBase);
        
        return new ResultadoDescontoSegmentado
        {
            PercentualDesconto = grupoSegmentacao.PercentualDesconto,
            ValorDesconto = valorDesconto,
            ValorFinal = valorFinal,
            SegmentacaoAplicada = segmentacao.Nome,
            GrupoAplicado = grupo.Nome,
            Observacoes = $"Desconto aplicado: {grupoSegmentacao.PercentualDesconto}% para área de {areaProdutor} hectares"
        };
    }
    
    /// <summary>
    /// Obtém a segmentação aplicável para um fornecedor e produtor
    /// Considera primeiro segmentações específicas, depois a padrão
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="produtorId">ID do produtor</param>
    /// <returns>Segmentação aplicável ou null</returns>
    private async Task<Segmentacao?> ObterSegmentacaoAplicavelAsync(int fornecedorId, int produtorId)
    {
        // Buscar segmentações ativas do fornecedor
        var segmentacoes = await _segmentacaoRepository.ObterAtivasPorFornecedorAsync(fornecedorId);
        
        // TODO: Implementar lógica de verificação territorial quando necessário
        // Por enquanto, usar a segmentação padrão ou a primeira ativa
        
        // Primeiro, tentar encontrar a segmentação padrão
        var segmentacaoPadrao = segmentacoes.FirstOrDefault(s => s.EhPadrao);
        if (segmentacaoPadrao != null)
            return segmentacaoPadrao;
        
        // Se não houver padrão, usar a primeira ativa
        return segmentacoes.FirstOrDefault();
    }
    
    /// <summary>
    /// Valida se uma área se enquadra em algum grupo de uma segmentação
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <param name="area">Área em hectares</param>
    /// <returns>True se a área se enquadra</returns>
    public async Task<bool> ValidarAreaSeEnquadraAsync(int segmentacaoId, decimal area)
    {
        var grupo = await _grupoRepository.ObterPorAreaAsync(segmentacaoId, area);
        return grupo != null;
    }
    
    /// <summary>
    /// Obtém todos os grupos aplicáveis para uma área
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <param name="area">Área em hectares</param>
    /// <returns>Lista de grupos aplicáveis</returns>
    public async Task<IEnumerable<Grupo>> ObterGruposAplicaveisAsync(int segmentacaoId, decimal area)
    {
        var grupos = await _grupoRepository.ObterAtivosPorSegmentacaoAsync(segmentacaoId);
        return grupos.Where(g => g.AreaSeEnquadra(area));
    }
}

/// <summary>
/// Resultado do cálculo de desconto segmentado
/// </summary>
public class ResultadoDescontoSegmentado
{
    /// <summary>
    /// Percentual de desconto aplicado
    /// </summary>
    public decimal PercentualDesconto { get; set; }
    
    /// <summary>
    /// Valor do desconto em moeda
    /// </summary>
    public decimal ValorDesconto { get; set; }
    
    /// <summary>
    /// Valor final após aplicar o desconto
    /// </summary>
    public decimal ValorFinal { get; set; }
    
    /// <summary>
    /// Nome da segmentação aplicada
    /// </summary>
    public string? SegmentacaoAplicada { get; set; }
    
    /// <summary>
    /// Nome do grupo aplicado
    /// </summary>
    public string? GrupoAplicado { get; set; }
    
    /// <summary>
    /// Observações sobre o cálculo
    /// </summary>
    public string? Observacoes { get; set; }
}
</CalculoDescontoSegmentadoService.cs>
<GrupoConfiguration.cs>
using Agriis.Segmentacoes.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Segmentacoes.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Grupo
/// </summary>
public class GrupoConfiguration : IEntityTypeConfiguration<Grupo>
{
    public void Configure(EntityTypeBuilder<Grupo> builder)
    {
        // Configuração da tabela
        builder.ToTable("Grupo");
        
        // Chave primária
        builder.HasKey(g => g.Id);
        
        // Configuração das propriedades
        builder.Property(g => g.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();
            
        builder.Property(g => g.Nome)
            .HasColumnName("Nome")
            .HasMaxLength(100)
            .IsRequired();
            
        builder.Property(g => g.Descricao)
            .HasColumnName("Descricao")
            .HasMaxLength(500);
            
        builder.Property(g => g.AreaMinima)
            .HasColumnName("AreaMinima")
            .HasColumnType("decimal(18,4)")
            .IsRequired();
            
        builder.Property(g => g.AreaMaxima)
            .HasColumnName("AreaMaxima")
            .HasColumnType("decimal(18,4)");
            
        builder.Property(g => g.Ativo)
            .HasColumnName("Ativo")
            .IsRequired();
            
        builder.Property(g => g.SegmentacaoId)
            .HasColumnName("SegmentacaoId")
            .IsRequired();
            
        builder.Property(g => g.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();
            
        builder.Property(g => g.DataAtualizacao)
            .HasColumnName("DataAtualizacao");
        
        // Relacionamentos
        builder.HasOne(g => g.Segmentacao)
            .WithMany(s => s.Grupos)
            .HasForeignKey(g => g.SegmentacaoId)
            .OnDelete(DeleteBehavior.Cascade);
            
        builder.HasMany(g => g.GruposSegmentacao)
            .WithOne(gs => gs.Grupo)
            .HasForeignKey(gs => gs.GrupoId)
            .OnDelete(DeleteBehavior.Cascade);
        
        // Índices
        builder.HasIndex(g => g.SegmentacaoId)
            .HasDatabaseName("IX_Grupo_SegmentacaoId");
            
        builder.HasIndex(g => new { g.SegmentacaoId, g.Ativo })
            .HasDatabaseName("IX_Grupo_SegmentacaoId_Ativo");
            
        builder.HasIndex(g => new { g.SegmentacaoId, g.AreaMinima, g.AreaMaxima })
            .HasDatabaseName("IX_Grupo_SegmentacaoId_Areas");
            
        builder.HasIndex(g => g.Nome)
            .HasDatabaseName("IX_Grupo_Nome");
        
        // Constraints
        builder.HasCheckConstraint("CK_Grupo_AreaMinima_Positiva", "\"AreaMinima\" >= 0");
        builder.HasCheckConstraint("CK_Grupo_AreaMaxima_MaiorQueMinima", "\"AreaMaxima\" IS NULL OR \"AreaMaxima\" >= \"AreaMinima\"");
    }
}
</GrupoConfiguration.cs>
<GrupoSegmentacaoConfiguration.cs>
using Agriis.Segmentacoes.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Segmentacoes.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade GrupoSegmentacao
/// </summary>
public class GrupoSegmentacaoConfiguration : IEntityTypeConfiguration<GrupoSegmentacao>
{
    public void Configure(EntityTypeBuilder<GrupoSegmentacao> builder)
    {
        // Configuração da tabela
        builder.ToTable("GrupoSegmentacao");
        
        // Chave primária
        builder.HasKey(gs => gs.Id);
        
        // Configuração das propriedades
        builder.Property(gs => gs.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();
            
        builder.Property(gs => gs.GrupoId)
            .HasColumnName("GrupoId")
            .IsRequired();
            
        builder.Property(gs => gs.CategoriaId)
            .HasColumnName("CategoriaId")
            .IsRequired();
            
        builder.Property(gs => gs.PercentualDesconto)
            .HasColumnName("PercentualDesconto")
            .HasColumnType("decimal(5,2)")
            .IsRequired();
            
        builder.Property(gs => gs.Ativo)
            .HasColumnName("Ativo")
            .IsRequired();
            
        builder.Property(gs => gs.Observacoes)
            .HasColumnName("Observacoes")
            .HasMaxLength(1000);
            
        builder.Property(gs => gs.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();
            
        builder.Property(gs => gs.DataAtualizacao)
            .HasColumnName("DataAtualizacao");
        
        // Relacionamentos
        builder.HasOne(gs => gs.Grupo)
            .WithMany(g => g.GruposSegmentacao)
            .HasForeignKey(gs => gs.GrupoId)
            .OnDelete(DeleteBehavior.Cascade);
        
        // Índices
        builder.HasIndex(gs => gs.GrupoId)
            .HasDatabaseName("IX_GrupoSegmentacao_GrupoId");
            
        builder.HasIndex(gs => gs.CategoriaId)
            .HasDatabaseName("IX_GrupoSegmentacao_CategoriaId");
            
        builder.HasIndex(gs => new { gs.GrupoId, gs.CategoriaId })
            .IsUnique()
            .HasDatabaseName("IX_GrupoSegmentacao_GrupoId_CategoriaId_Unique");
            
        builder.HasIndex(gs => new { gs.GrupoId, gs.Ativo })
            .HasDatabaseName("IX_GrupoSegmentacao_GrupoId_Ativo");
        
        // Constraints
        builder.HasCheckConstraint("CK_GrupoSegmentacao_PercentualDesconto_Valido", "\"PercentualDesconto\" >= 0 AND \"PercentualDesconto\" <= 100");
    }
}
</GrupoSegmentacaoConfiguration.cs>
<SegmentacaoConfiguration.cs>
using Agriis.Segmentacoes.Dominio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Agriis.Segmentacoes.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Segmentacao
/// </summary>
public class SegmentacaoConfiguration : IEntityTypeConfiguration<Segmentacao>
{
    public void Configure(EntityTypeBuilder<Segmentacao> builder)
    {
        // Configuração da tabela
        builder.ToTable("Segmentacao");
        
        // Chave primária
        builder.HasKey(s => s.Id);
        
        // Configuração das propriedades
        builder.Property(s => s.Id)
            .HasColumnName("Id")
            .ValueGeneratedOnAdd();
            
        builder.Property(s => s.Nome)
            .HasColumnName("Nome")
            .HasMaxLength(100)
            .IsRequired();
            
        builder.Property(s => s.Descricao)
            .HasColumnName("Descricao")
            .HasMaxLength(500);
            
        builder.Property(s => s.Ativo)
            .HasColumnName("Ativo")
            .IsRequired();
            
        builder.Property(s => s.FornecedorId)
            .HasColumnName("FornecedorId")
            .IsRequired();
            
        builder.Property(s => s.ConfiguracaoTerritorial)
            .HasColumnName("ConfiguracaoTerritorial")
            .HasColumnType("jsonb");
            
        builder.Property(s => s.EhPadrao)
            .HasColumnName("EhPadrao")
            .IsRequired();
            
        builder.Property(s => s.DataCriacao)
            .HasColumnName("DataCriacao")
            .IsRequired();
            
        builder.Property(s => s.DataAtualizacao)
            .HasColumnName("DataAtualizacao");
        
        // Relacionamentos
        builder.HasMany(s => s.Grupos)
            .WithOne(g => g.Segmentacao)
            .HasForeignKey(g => g.SegmentacaoId)
            .OnDelete(DeleteBehavior.Cascade);
        
        // Índices
        builder.HasIndex(s => s.FornecedorId)
            .HasDatabaseName("IX_Segmentacao_FornecedorId");
            
        builder.HasIndex(s => new { s.FornecedorId, s.EhPadrao })
            .HasDatabaseName("IX_Segmentacao_FornecedorId_EhPadrao");
            
        builder.HasIndex(s => new { s.FornecedorId, s.Ativo })
            .HasDatabaseName("IX_Segmentacao_FornecedorId_Ativo");
            
        builder.HasIndex(s => s.Nome)
            .HasDatabaseName("IX_Segmentacao_Nome");
    }
}
</SegmentacaoConfiguration.cs>
<GrupoRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Segmentacoes.Dominio.Entidades;
using Agriis.Segmentacoes.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Segmentacoes.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de grupos de segmentação
/// </summary>
public class GrupoRepository : RepositoryBase<Grupo, DbContext>, IGrupoRepository
{
    public GrupoRepository(DbContext context) : base(context)
    {
    }
    
    /// <summary>
    /// Obtém todos os grupos de uma segmentação
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <returns>Lista de grupos</returns>
    public async Task<IEnumerable<Grupo>> ObterPorSegmentacaoAsync(int segmentacaoId)
    {
        return await DbSet
            .Where(g => g.SegmentacaoId == segmentacaoId)
            .OrderBy(g => g.AreaMinima)
            .ToListAsync();
    }
    
    /// <summary>
    /// Obtém grupos ativos de uma segmentação
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <returns>Lista de grupos ativos</returns>
    public async Task<IEnumerable<Grupo>> ObterAtivosPorSegmentacaoAsync(int segmentacaoId)
    {
        return await DbSet
            .Where(g => g.SegmentacaoId == segmentacaoId && g.Ativo)
            .OrderBy(g => g.AreaMinima)
            .ToListAsync();
    }
    
    /// <summary>
    /// Obtém grupo que se enquadra para uma área específica
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <param name="area">Área em hectares</param>
    /// <returns>Grupo que se enquadra ou null</returns>
    public async Task<Grupo?> ObterPorAreaAsync(int segmentacaoId, decimal area)
    {
        return await DbSet
            .Where(g => g.SegmentacaoId == segmentacaoId && 
                       g.Ativo && 
                       g.AreaMinima <= area && 
                       (g.AreaMaxima == null || g.AreaMaxima >= area))
            .OrderBy(g => g.AreaMinima)
            .FirstOrDefaultAsync();
    }
    
    /// <summary>
    /// Obtém grupo com descontos carregados
    /// </summary>
    /// <param name="id">ID do grupo</param>
    /// <returns>Grupo completo</returns>
    public async Task<Grupo?> ObterComDescontosAsync(int id)
    {
        return await DbSet
            .Include(g => g.GruposSegmentacao)
            .Where(g => g.Id == id)
            .FirstOrDefaultAsync();
    }
    
    /// <summary>
    /// Verifica se existe sobreposição de faixas de área
    /// </summary>
    /// <param name="segmentacaoId">ID da segmentação</param>
    /// <param name="areaMinima">Área mínima</param>
    /// <param name="areaMaxima">Área máxima</param>
    /// <param name="excluirId">ID do grupo a excluir da verificação</param>
    /// <returns>True se existe sobreposição</returns>
    public async Task<bool> ExisteSobreposicaoAsync(int segmentacaoId, decimal areaMinima, decimal? areaMaxima, int? excluirId = null)
    {
        var query = DbSet.Where(g => g.SegmentacaoId == segmentacaoId && g.Ativo);
        
        if (excluirId.HasValue)
            query = query.Where(g => g.Id != excluirId.Value);
        
        // Verifica sobreposição:
        // 1. Área mínima do novo grupo está dentro de um grupo existente
        // 2. Área máxima do novo grupo está dentro de um grupo existente
        // 3. Novo grupo engloba completamente um grupo existente
        var sobreposicao = await query.AnyAsync(g =>
            // Caso 1: Nova área mínima está dentro de grupo existente
            (g.AreaMinima <= areaMinima && (g.AreaMaxima == null || g.AreaMaxima >= areaMinima)) ||
            // Caso 2: Nova área máxima está dentro de grupo existente (se definida)
            (areaMaxima.HasValue && g.AreaMinima <= areaMaxima && (g.AreaMaxima == null || g.AreaMaxima >= areaMaxima)) ||
            // Caso 3: Novo grupo engloba grupo existente
            (areaMinima <= g.AreaMinima && (areaMaxima == null || (g.AreaMaxima.HasValue && areaMaxima >= g.AreaMaxima)))
        );
        
        return sobreposicao;
    }
    
    /// <summary>
    /// Sobrescreve o método base para incluir validações específicas
    /// </summary>
    public override async Task<Grupo> AdicionarAsync(Grupo entidade, CancellationToken cancellationToken = default)
    {
        // Validar sobreposição de faixas
        var existeSobreposicao = await ExisteSobreposicaoAsync(
            entidade.SegmentacaoId, 
            entidade.AreaMinima, 
            entidade.AreaMaxima);
            
        if (existeSobreposicao)
        {
            throw new InvalidOperationException(
                $"Existe sobreposição de faixas de área para o grupo '{entidade.Nome}'. " +
                $"Área: {entidade.AreaMinima} - {entidade.AreaMaxima?.ToString() ?? "∞"} hectares.");
        }
        
        return await base.AdicionarAsync(entidade, cancellationToken);
    }
    
    /// <summary>
    /// Sobrescreve o método base para incluir validações específicas
    /// </summary>
    public override async Task AtualizarAsync(Grupo entidade, CancellationToken cancellationToken = default)
    {
        // Validar sobreposição de faixas
        var existeSobreposicao = await ExisteSobreposicaoAsync(
            entidade.SegmentacaoId, 
            entidade.AreaMinima, 
            entidade.AreaMaxima, 
            entidade.Id);
            
        if (existeSobreposicao)
        {
            throw new InvalidOperationException(
                $"Existe sobreposição de faixas de área para o grupo '{entidade.Nome}'. " +
                $"Área: {entidade.AreaMinima} - {entidade.AreaMaxima?.ToString() ?? "∞"} hectares.");
        }
        
        await base.AtualizarAsync(entidade, cancellationToken);
    }
}
</GrupoRepository.cs>
<GrupoSegmentacaoRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Segmentacoes.Dominio.Entidades;
using Agriis.Segmentacoes.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Segmentacoes.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de grupos de segmentação (descontos por categoria)
/// </summary>
public class GrupoSegmentacaoRepository : RepositoryBase<GrupoSegmentacao, DbContext>, IGrupoSegmentacaoRepository
{
    public GrupoSegmentacaoRepository(DbContext context) : base(context)
    {
    }
    
    /// <summary>
    /// Obtém todos os descontos de um grupo
    /// </summary>
    /// <param name="grupoId">ID do grupo</param>
    /// <returns>Lista de descontos</returns>
    public async Task<IEnumerable<GrupoSegmentacao>> ObterPorGrupoAsync(int grupoId)
    {
        return await DbSet
            .Where(gs => gs.GrupoId == grupoId)
            .OrderBy(gs => gs.CategoriaId)
            .ToListAsync();
    }
    
    /// <summary>
    /// Obtém descontos ativos de um grupo
    /// </summary>
    /// <param name="grupoId">ID do grupo</param>
    /// <returns>Lista de descontos ativos</returns>
    public async Task<IEnumerable<GrupoSegmentacao>> ObterAtivosPorGrupoAsync(int grupoId)
    {
        return await DbSet
            .Where(gs => gs.GrupoId == grupoId && gs.Ativo)
            .OrderBy(gs => gs.CategoriaId)
            .ToListAsync();
    }
    
    /// <summary>
    /// Obtém desconto específico por grupo e categoria
    /// </summary>
    /// <param name="grupoId">ID do grupo</param>
    /// <param name="categoriaId">ID da categoria</param>
    /// <returns>Desconto ou null</returns>
    public async Task<GrupoSegmentacao?> ObterPorGrupoECategoriaAsync(int grupoId, int categoriaId)
    {
        return await DbSet
            .Where(gs => gs.GrupoId == grupoId && gs.CategoriaId == categoriaId)
            .FirstOrDefaultAsync();
    }
    
    /// <summary>
    /// Obtém todos os descontos de uma categoria
    /// </summary>
    /// <param name="categoriaId">ID da categoria</param>
    /// <returns>Lista de descontos</returns>
    public async Task<IEnumerable<GrupoSegmentacao>> ObterPorCategoriaAsync(int categoriaId)
    {
        return await DbSet
            .Include(gs => gs.Grupo)
                .ThenInclude(g => g.Segmentacao)
            .Where(gs => gs.CategoriaId == categoriaId)
            .OrderBy(gs => gs.Grupo.Segmentacao.Nome)
            .ThenBy(gs => gs.Grupo.Nome)
            .ToListAsync();
    }
    
    /// <summary>
    /// Verifica se já existe desconto para a combinação grupo/categoria
    /// </summary>
    /// <param name="grupoId">ID do grupo</param>
    /// <param name="categoriaId">ID da categoria</param>
    /// <param name="excluirId">ID do desconto a excluir da verificação</param>
    /// <returns>True se já existe</returns>
    public async Task<bool> ExisteAsync(int grupoId, int categoriaId, int? excluirId = null)
    {
        var query = DbSet.Where(gs => gs.GrupoId == grupoId && gs.CategoriaId == categoriaId);
        
        if (excluirId.HasValue)
            query = query.Where(gs => gs.Id != excluirId.Value);
            
        return await query.AnyAsync();
    }
    
    /// <summary>
    /// Sobrescreve o método base para incluir validações específicas
    /// </summary>
    public override async Task<GrupoSegmentacao> AdicionarAsync(GrupoSegmentacao entidade, CancellationToken cancellationToken = default)
    {
        // Validar se já existe desconto para esta combinação
        var jaExiste = await ExisteAsync(entidade.GrupoId, entidade.CategoriaId);
        
        if (jaExiste)
        {
            throw new InvalidOperationException(
                $"Já existe um desconto configurado para o grupo {entidade.GrupoId} e categoria {entidade.CategoriaId}.");
        }
        
        return await base.AdicionarAsync(entidade, cancellationToken);
    }
    
    /// <summary>
    /// Sobrescreve o método base para incluir validações específicas
    /// </summary>
    public override async Task AtualizarAsync(GrupoSegmentacao entidade, CancellationToken cancellationToken = default)
    {
        // Validar se já existe desconto para esta combinação (excluindo o atual)
        var jaExiste = await ExisteAsync(entidade.GrupoId, entidade.CategoriaId, entidade.Id);
        
        if (jaExiste)
        {
            throw new InvalidOperationException(
                $"Já existe um desconto configurado para o grupo {entidade.GrupoId} e categoria {entidade.CategoriaId}.");
        }
        
        await base.AtualizarAsync(entidade, cancellationToken);
    }
}
</GrupoSegmentacaoRepository.cs>
<SegmentacaoRepository.cs>
using Agriis.Compartilhado.Infraestrutura.Persistencia;
using Agriis.Segmentacoes.Dominio.Entidades;
using Agriis.Segmentacoes.Dominio.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Agriis.Segmentacoes.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de segmentações
/// </summary>
public class SegmentacaoRepository : RepositoryBase<Segmentacao, DbContext>, ISegmentacaoRepository
{
    public SegmentacaoRepository(DbContext context) : base(context)
    {
    }
    
    /// <summary>
    /// Obtém todas as segmentações de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de segmentações</returns>
    public async Task<IEnumerable<Segmentacao>> ObterPorFornecedorAsync(int fornecedorId)
    {
        return await DbSet
            .Where(s => s.FornecedorId == fornecedorId)
            .OrderBy(s => s.Nome)
            .ToListAsync();
    }
    
    /// <summary>
    /// Obtém a segmentação padrão de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Segmentação padrão ou null</returns>
    public async Task<Segmentacao?> ObterPadraoAsync(int fornecedorId)
    {
        return await DbSet
            .Where(s => s.FornecedorId == fornecedorId && s.EhPadrao && s.Ativo)
            .FirstOrDefaultAsync();
    }
    
    /// <summary>
    /// Obtém segmentações ativas de um fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <returns>Lista de segmentações ativas</returns>
    public async Task<IEnumerable<Segmentacao>> ObterAtivasPorFornecedorAsync(int fornecedorId)
    {
        return await DbSet
            .Where(s => s.FornecedorId == fornecedorId && s.Ativo)
            .OrderByDescending(s => s.EhPadrao)
            .ThenBy(s => s.Nome)
            .ToListAsync();
    }
    
    /// <summary>
    /// Verifica se existe uma segmentação padrão para o fornecedor
    /// </summary>
    /// <param name="fornecedorId">ID do fornecedor</param>
    /// <param name="excluirId">ID da segmentação a excluir da verificação</param>
    /// <returns>True se existe segmentação padrão</returns>
    public async Task<bool> ExistePadraoAsync(int fornecedorId, int? excluirId = null)
    {
        var query = DbSet.Where(s => s.FornecedorId == fornecedorId && s.EhPadrao && s.Ativo);
        
        if (excluirId.HasValue)
            query = query.Where(s => s.Id != excluirId.Value);
            
        return await query.AnyAsync();
    }
    
    /// <summary>
    /// Obtém segmentação com grupos e descontos carregados
    /// </summary>
    /// <param name="id">ID da segmentação</param>
    /// <returns>Segmentação completa</returns>
    public async Task<Segmentacao?> ObterCompletaAsync(int id)
    {
        return await DbSet
            .Include(s => s.Grupos)
                .ThenInclude(g => g.GruposSegmentacao)
            .Where(s => s.Id == id)
            .FirstOrDefaultAsync();
    }
    
    /// <summary>
    /// Sobrescreve o método base para incluir validações específicas
    /// </summary>
    public override async Task<Segmentacao> AdicionarAsync(Segmentacao entidade, CancellationToken cancellationToken = default)
    {
        // Se está marcando como padrão, desmarcar outras
        if (entidade.EhPadrao)
        {
            var segmentacoesPadrao = await DbSet
                .Where(s => s.FornecedorId == entidade.FornecedorId && s.EhPadrao && s.Ativo)
                .ToListAsync(cancellationToken);
                
            foreach (var segmentacao in segmentacoesPadrao)
            {
                segmentacao.RemoverComoPadrao();
            }
        }
        
        return await base.AdicionarAsync(entidade, cancellationToken);
    }
    
    /// <summary>
    /// Sobrescreve o método base para incluir validações específicas
    /// </summary>
    public override async Task AtualizarAsync(Segmentacao entidade, CancellationToken cancellationToken = default)
    {
        // Se está marcando como padrão, desmarcar outras
        if (entidade.EhPadrao)
        {
            var segmentacoesPadrao = await DbSet
                .Where(s => s.FornecedorId == entidade.FornecedorId && s.EhPadrao && s.Ativo && s.Id != entidade.Id)
                .ToListAsync(cancellationToken);
                
            foreach (var segmentacao in segmentacoesPadrao)
            {
                segmentacao.RemoverComoPadrao();
            }
        }
        
        await base.AtualizarAsync(entidade, cancellationToken);
    }
}
</SegmentacaoRepository.cs>
<UsuarioDto.cs>
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Usuarios.Aplicacao.DTOs;

/// <summary>
/// DTO para representar um usuário
/// </summary>
public class UsuarioDto
{
    /// <summary>
    /// ID do usuário
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// Nome completo do usuário
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Email do usuário
    /// </summary>
    public string Email { get; set; } = string.Empty;
    
    /// <summary>
    /// Número de celular do usuário
    /// </summary>
    public string? Celular { get; set; }
    
    /// <summary>
    /// CPF do usuário
    /// </summary>
    public string? Cpf { get; set; }
    
    /// <summary>
    /// Indica se o usuário está ativo
    /// </summary>
    public bool Ativo { get; set; }
    
    /// <summary>
    /// Data do último login
    /// </summary>
    public DateTime? UltimoLogin { get; set; }
    
    /// <summary>
    /// URL da logo/avatar do usuário
    /// </summary>
    public string? LogoUrl { get; set; }
    
    /// <summary>
    /// Data de criação
    /// </summary>
    public DateTime DataCriacao { get; set; }
    
    /// <summary>
    /// Data da última atualização
    /// </summary>
    public DateTime? DataAtualizacao { get; set; }
    
    /// <summary>
    /// Roles do usuário
    /// </summary>
    public List<Roles> Roles { get; set; } = new();
}

/// <summary>
/// DTO para criar um novo usuário
/// </summary>
public class CriarUsuarioDto
{
    /// <summary>
    /// Nome completo do usuário
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Email do usuário
    /// </summary>
    public string Email { get; set; } = string.Empty;
    
    /// <summary>
    /// Número de celular do usuário
    /// </summary>
    public string? Celular { get; set; }
    
    /// <summary>
    /// CPF do usuário
    /// </summary>
    public string? Cpf { get; set; }
    
    /// <summary>
    /// Senha do usuário
    /// </summary>
    public string? Senha { get; set; }
    
    /// <summary>
    /// Roles iniciais do usuário
    /// </summary>
    public List<Roles> Roles { get; set; } = new();
}

/// <summary>
/// DTO para atualizar um usuário
/// </summary>
public class AtualizarUsuarioDto
{
    /// <summary>
    /// Nome completo do usuário
    /// </summary>
    public string Nome { get; set; } = string.Empty;
    
    /// <summary>
    /// Número de celular do usuário
    /// </summary>
    public string? Celular { get; set; }
    
    /// <summary>
    /// CPF do usuário
    /// </summary>
    public string? Cpf { get; set; }
    
    /// <summary>
    /// URL da logo/avatar do usuário
    /// </summary>
    public string? LogoUrl { get; set; }
}

/// <summary>
/// DTO para alterar email do usuário
/// </summary>
public class AlterarEmailDto
{
    /// <summary>
    /// Novo email do usuário
    /// </summary>
    public string NovoEmail { get; set; } = string.Empty;
}

/// <summary>
/// DTO para alterar senha do usuário
/// </summary>
public class AlterarSenhaDto
{
    /// <summary>
    /// Senha atual
    /// </summary>
    public string SenhaAtual { get; set; } = string.Empty;
    
    /// <summary>
    /// Nova senha
    /// </summary>
    public string NovaSenha { get; set; } = string.Empty;
}

/// <summary>
/// DTO para gerenciar roles do usuário
/// </summary>
public class GerenciarRolesDto
{
    /// <summary>
    /// Roles a serem atribuídas ao usuário
    /// </summary>
    public List<Roles> Roles { get; set; } = new();
}

/// <summary>
/// DTO para resultado paginado de usuários
/// </summary>
public class UsuariosPaginadosDto
{
    /// <summary>
    /// Lista de usuários
    /// </summary>
    public List<UsuarioDto> Usuarios { get; set; } = new();
    
    /// <summary>
    /// Total de registros
    /// </summary>
    public int Total { get; set; }
    
    /// <summary>
    /// Página atual
    /// </summary>
    public int Pagina { get; set; }
    
    /// <summary>
    /// Tamanho da página
    /// </summary>
    public int TamanhoPagina { get; set; }
    
    /// <summary>
    /// Total de páginas
    /// </summary>
    public int TotalPaginas => (int)Math.Ceiling((double)Total / TamanhoPagina);
}
</UsuarioDto.cs>
<IUsuarioService.cs>
using Agriis.Usuarios.Aplicacao.DTOs;
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Usuarios.Aplicacao.Interfaces;

/// <summary>
/// Interface do serviço de aplicação de usuários
/// </summary>
public interface IUsuarioService
{
    /// <summary>
    /// Obtém um usuário por ID
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do usuário ou null</returns>
    Task<UsuarioDto?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém um usuário por email
    /// </summary>
    /// <param name="email">Email do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do usuário ou null</returns>
    Task<UsuarioDto?> ObterPorEmailAsync(string email, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuários com paginação
    /// </summary>
    /// <param name="pagina">Número da página</param>
    /// <param name="tamanhoPagina">Tamanho da página</param>
    /// <param name="filtro">Filtro de busca</param>
    /// <param name="apenasAtivos">Se deve filtrar apenas usuários ativos</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Resultado paginado</returns>
    Task<UsuariosPaginadosDto> ObterPaginadoAsync(
        int pagina, 
        int tamanhoPagina, 
        string? filtro = null, 
        bool apenasAtivos = true, 
        CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuários por role
    /// </summary>
    /// <param name="role">Role a ser filtrada</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de usuários</returns>
    Task<IEnumerable<UsuarioDto>> ObterPorRoleAsync(Roles role, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Cria um novo usuário
    /// </summary>
    /// <param name="criarUsuarioDto">Dados do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do usuário criado</returns>
    Task<UsuarioDto> CriarAsync(CriarUsuarioDto criarUsuarioDto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Atualiza um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="atualizarUsuarioDto">Dados de atualização</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do usuário atualizado</returns>
    Task<UsuarioDto> AtualizarAsync(int id, AtualizarUsuarioDto atualizarUsuarioDto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Altera o email de um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="alterarEmailDto">Dados do novo email</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do usuário atualizado</returns>
    Task<UsuarioDto> AlterarEmailAsync(int id, AlterarEmailDto alterarEmailDto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Altera a senha de um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="alterarSenhaDto">Dados da nova senha</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task AlterarSenhaAsync(int id, AlterarSenhaDto alterarSenhaDto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Gerencia as roles de um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="gerenciarRolesDto">Roles a serem atribuídas</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do usuário atualizado</returns>
    Task<UsuarioDto> GerenciarRolesAsync(int id, GerenciarRolesDto gerenciarRolesDto, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Ativa um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do usuário atualizado</returns>
    Task<UsuarioDto> AtivarAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Desativa um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>DTO do usuário atualizado</returns>
    Task<UsuarioDto> DesativarAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Remove um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task RemoverAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Registra o login de um usuário
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    Task RegistrarLoginAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se um email já está em uso
    /// </summary>
    /// <param name="email">Email a ser verificado</param>
    /// <param name="usuarioIdExcluir">ID do usuário a ser excluído da verificação</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se o email já está em uso</returns>
    Task<bool> EmailJaExisteAsync(string email, int? usuarioIdExcluir = null, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se um CPF já está em uso
    /// </summary>
    /// <param name="cpf">CPF a ser verificado</param>
    /// <param name="usuarioIdExcluir">ID do usuário a ser excluído da verificação</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se o CPF já está em uso</returns>
    Task<bool> CpfJaExisteAsync(string cpf, int? usuarioIdExcluir = null, CancellationToken cancellationToken = default);
}
</IUsuarioService.cs>
<UsuarioMappingProfile.cs>
using AutoMapper;
using Agriis.Usuarios.Dominio.Entidades;
using Agriis.Usuarios.Aplicacao.DTOs;
using Agriis.Compartilhado.Dominio.ObjetosValor;

namespace Agriis.Usuarios.Aplicacao.Mapeamentos;

/// <summary>
/// Profile do AutoMapper para mapeamento de usuários
/// </summary>
public class UsuarioMappingProfile : Profile
{
    public UsuarioMappingProfile()
    {
        // Mapeamento de Usuario para UsuarioDto
        CreateMap<Usuario, UsuarioDto>()
            .ForMember(dest => dest.Cpf, opt => opt.MapFrom(src => src.Cpf != null ? src.Cpf.Valor : null))
            .ForMember(dest => dest.Roles, opt => opt.MapFrom(src => src.UsuarioRoles.Select(ur => ur.Role).ToList()));
        
        // Mapeamento de CriarUsuarioDto para Usuario
        CreateMap<CriarUsuarioDto, Usuario>()
            .ForMember(dest => dest.Cpf, opt => opt.MapFrom(src => !string.IsNullOrWhiteSpace(src.Cpf) ? new Cpf(src.Cpf) : null))
            .ForMember(dest => dest.UsuarioRoles, opt => opt.Ignore()) // Será tratado separadamente
            .ConstructUsing(src => new Usuario(src.Nome, src.Email, src.Celular, 
                !string.IsNullOrWhiteSpace(src.Cpf) ? new Cpf(src.Cpf) : null));
        
        // Mapeamento de AtualizarUsuarioDto (não cria instância, apenas para referência)
        CreateMap<AtualizarUsuarioDto, Usuario>()
            .ForMember(dest => dest.Cpf, opt => opt.MapFrom(src => !string.IsNullOrWhiteSpace(src.Cpf) ? new Cpf(src.Cpf) : null))
            .ForAllMembers(opt => opt.Ignore()); // Será aplicado manualmente no serviço
    }
}
</UsuarioMappingProfile.cs>
<UsuarioService.cs>
using AutoMapper;
using FluentValidation;
using Agriis.Usuarios.Aplicacao.DTOs;
using Agriis.Usuarios.Aplicacao.Interfaces;
using Agriis.Usuarios.Dominio.Entidades;
using Agriis.Usuarios.Dominio.Interfaces;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Compartilhado.Dominio.ObjetosValor;
using Agriis.Compartilhado.Dominio.Interfaces;

namespace Agriis.Usuarios.Aplicacao.Servicos;

/// <summary>
/// Serviço de aplicação para usuários
/// </summary>
public class UsuarioService : IUsuarioService
{
    private readonly IUsuarioRepository _usuarioRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly IValidator<CriarUsuarioDto> _criarUsuarioValidator;
    private readonly IValidator<AtualizarUsuarioDto> _atualizarUsuarioValidator;
    private readonly IValidator<AlterarEmailDto> _alterarEmailValidator;
    private readonly IValidator<AlterarSenhaDto> _alterarSenhaValidator;
    
    public UsuarioService(
        IUsuarioRepository usuarioRepository,
        IUnitOfWork unitOfWork,
        IMapper mapper,
        IValidator<CriarUsuarioDto> criarUsuarioValidator,
        IValidator<AtualizarUsuarioDto> atualizarUsuarioValidator,
        IValidator<AlterarEmailDto> alterarEmailValidator,
        IValidator<AlterarSenhaDto> alterarSenhaValidator)
    {
        _usuarioRepository = usuarioRepository;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        _criarUsuarioValidator = criarUsuarioValidator;
        _atualizarUsuarioValidator = atualizarUsuarioValidator;
        _alterarEmailValidator = alterarEmailValidator;
        _alterarSenhaValidator = alterarSenhaValidator;
    }
    
    public async Task<UsuarioDto?> ObterPorIdAsync(int id, CancellationToken cancellationToken = default)
    {
        var usuario = await _usuarioRepository.ObterComRolesAsync(id, cancellationToken);
        return usuario != null ? _mapper.Map<UsuarioDto>(usuario) : null;
    }
    
    public async Task<UsuarioDto?> ObterPorEmailAsync(string email, CancellationToken cancellationToken = default)
    {
        var usuario = await _usuarioRepository.ObterPorEmailComRolesAsync(email, cancellationToken);
        return usuario != null ? _mapper.Map<UsuarioDto>(usuario) : null;
    }
    
    public async Task<UsuariosPaginadosDto> ObterPaginadoAsync(
        int pagina, 
        int tamanhoPagina, 
        string? filtro = null, 
        bool apenasAtivos = true, 
        CancellationToken cancellationToken = default)
    {
        var (usuarios, total) = await _usuarioRepository.ObterPaginadoAsync(
            pagina, tamanhoPagina, filtro, apenasAtivos, cancellationToken);
        
        return new UsuariosPaginadosDto
        {
            Usuarios = _mapper.Map<List<UsuarioDto>>(usuarios),
            Total = total,
            Pagina = pagina,
            TamanhoPagina = tamanhoPagina
        };
    }
    
    public async Task<IEnumerable<UsuarioDto>> ObterPorRoleAsync(Roles role, CancellationToken cancellationToken = default)
    {
        var usuarios = await _usuarioRepository.ObterPorRoleAsync(role, cancellationToken);
        return _mapper.Map<IEnumerable<UsuarioDto>>(usuarios);
    }
    
    public async Task<UsuarioDto> CriarAsync(CriarUsuarioDto criarUsuarioDto, CancellationToken cancellationToken = default)
    {
        // Validar DTO
        await _criarUsuarioValidator.ValidateAndThrowAsync(criarUsuarioDto, cancellationToken);
        
        // Verificar se email já existe
        if (await _usuarioRepository.ExisteEmailAsync(criarUsuarioDto.Email, cancellationToken: cancellationToken))
        {
            throw new InvalidOperationException("Email já está em uso");
        }
        
        // Verificar se CPF já existe (se fornecido)
        if (!string.IsNullOrWhiteSpace(criarUsuarioDto.Cpf) && 
            await _usuarioRepository.ExisteCpfAsync(criarUsuarioDto.Cpf, cancellationToken: cancellationToken))
        {
            throw new InvalidOperationException("CPF já está em uso");
        }
        
        // Criar usuário
        var usuario = new Usuario(
            criarUsuarioDto.Nome,
            criarUsuarioDto.Email,
            criarUsuarioDto.Celular,
            !string.IsNullOrWhiteSpace(criarUsuarioDto.Cpf) ? new Cpf(criarUsuarioDto.Cpf) : null);
        
        // Definir senha se fornecida
        if (!string.IsNullOrWhiteSpace(criarUsuarioDto.Senha))
        {
            var senhaHash = BCrypt.Net.BCrypt.HashPassword(criarUsuarioDto.Senha);
            usuario.DefinirSenha(senhaHash);
        }
        
        // Adicionar roles
        foreach (var role in criarUsuarioDto.Roles)
        {
            usuario.AdicionarRole(role);
        }
        
        // Salvar
        await _usuarioRepository.AdicionarAsync(usuario, cancellationToken);
        await _unitOfWork.SalvarAlteracoesAsync();
        
        return _mapper.Map<UsuarioDto>(usuario);
    }
    
    public async Task<UsuarioDto> AtualizarAsync(int id, AtualizarUsuarioDto atualizarUsuarioDto, CancellationToken cancellationToken = default)
    {
        // Validar DTO
        await _atualizarUsuarioValidator.ValidateAndThrowAsync(atualizarUsuarioDto, cancellationToken);
        
        // Obter usuário
        var usuario = await _usuarioRepository.ObterPorIdAsync(id, cancellationToken);
        if (usuario == null)
        {
            throw new InvalidOperationException("Usuário não encontrado");
        }
        
        // Verificar se CPF já existe (se fornecido e diferente do atual)
        if (!string.IsNullOrWhiteSpace(atualizarUsuarioDto.Cpf) && 
            await _usuarioRepository.ExisteCpfAsync(atualizarUsuarioDto.Cpf, id, cancellationToken))
        {
            throw new InvalidOperationException("CPF já está em uso");
        }
        
        // Atualizar dados
        var cpf = !string.IsNullOrWhiteSpace(atualizarUsuarioDto.Cpf) ? new Cpf(atualizarUsuarioDto.Cpf) : null;
        usuario.AtualizarDados(atualizarUsuarioDto.Nome, atualizarUsuarioDto.Celular, cpf);
        
        // Atualizar logo se fornecida
        if (atualizarUsuarioDto.LogoUrl != null)
        {
            usuario.AtualizarLogo(atualizarUsuarioDto.LogoUrl);
        }
        
        // Salvar
        await _usuarioRepository.AtualizarAsync(usuario, cancellationToken);
        await _unitOfWork.SalvarAlteracoesAsync();
        
        return _mapper.Map<UsuarioDto>(usuario);
    }
    
    public async Task<UsuarioDto> AlterarEmailAsync(int id, AlterarEmailDto alterarEmailDto, CancellationToken cancellationToken = default)
    {
        // Validar DTO
        await _alterarEmailValidator.ValidateAndThrowAsync(alterarEmailDto, cancellationToken);
        
        // Obter usuário
        var usuario = await _usuarioRepository.ObterPorIdAsync(id, cancellationToken);
        if (usuario == null)
        {
            throw new InvalidOperationException("Usuário não encontrado");
        }
        
        // Verificar se email já existe
        if (await _usuarioRepository.ExisteEmailAsync(alterarEmailDto.NovoEmail, id, cancellationToken))
        {
            throw new InvalidOperationException("Email já está em uso");
        }
        
        // Atualizar email
        usuario.AtualizarEmail(alterarEmailDto.NovoEmail);
        
        // Salvar
        await _usuarioRepository.AtualizarAsync(usuario, cancellationToken);
        await _unitOfWork.SalvarAlteracoesAsync();
        
        return _mapper.Map<UsuarioDto>(usuario);
    }
    
    public async Task AlterarSenhaAsync(int id, AlterarSenhaDto alterarSenhaDto, CancellationToken cancellationToken = default)
    {
        // Validar DTO
        await _alterarSenhaValidator.ValidateAndThrowAsync(alterarSenhaDto, cancellationToken);
        
        // Obter usuário
        var usuario = await _usuarioRepository.ObterPorIdAsync(id, cancellationToken);
        if (usuario == null)
        {
            throw new InvalidOperationException("Usuário não encontrado");
        }
        
        // Verificar senha atual
        if (usuario.SenhaHash == null || !BCrypt.Net.BCrypt.Verify(alterarSenhaDto.SenhaAtual, usuario.SenhaHash))
        {
            throw new InvalidOperationException("Senha atual incorreta");
        }
        
        // Definir nova senha
        var novaSenhaHash = BCrypt.Net.BCrypt.HashPassword(alterarSenhaDto.NovaSenha);
        usuario.DefinirSenha(novaSenhaHash);
        
        // Salvar
        await _usuarioRepository.AtualizarAsync(usuario, cancellationToken);
        await _unitOfWork.SalvarAlteracoesAsync();
    }
    
    public async Task<UsuarioDto> GerenciarRolesAsync(int id, GerenciarRolesDto gerenciarRolesDto, CancellationToken cancellationToken = default)
    {
        // Obter usuário
        var usuario = await _usuarioRepository.ObterComRolesAsync(id, cancellationToken);
        if (usuario == null)
        {
            throw new InvalidOperationException("Usuário não encontrado");
        }
        
        // Remover todas as roles atuais
        var rolesAtuais = usuario.ObterRoles().ToList();
        foreach (var role in rolesAtuais)
        {
            usuario.RemoverRole(role);
        }
        
        // Adicionar novas roles
        foreach (var role in gerenciarRolesDto.Roles)
        {
            usuario.AdicionarRole(role);
        }
        
        // Salvar
        await _usuarioRepository.AtualizarAsync(usuario, cancellationToken);
        await _unitOfWork.SalvarAlteracoesAsync();
        
        return _mapper.Map<UsuarioDto>(usuario);
    }
    
    public async Task<UsuarioDto> AtivarAsync(int id, CancellationToken cancellationToken = default)
    {
        var usuario = await _usuarioRepository.ObterPorIdAsync(id, cancellationToken);
        if (usuario == null)
        {
            throw new InvalidOperationException("Usuário não encontrado");
        }
        
        usuario.Ativar();
        
        await _usuarioRepository.AtualizarAsync(usuario, cancellationToken);
        await _unitOfWork.SalvarAlteracoesAsync();
        
        return _mapper.Map<UsuarioDto>(usuario);
    }
    
    public async Task<UsuarioDto> DesativarAsync(int id, CancellationToken cancellationToken = default)
    {
        var usuario = await _usuarioRepository.ObterPorIdAsync(id, cancellationToken);
        if (usuario == null)
        {
            throw new InvalidOperationException("Usuário não encontrado");
        }
        
        usuario.Desativar();
        
        await _usuarioRepository.AtualizarAsync(usuario, cancellationToken);
        await _unitOfWork.SalvarAlteracoesAsync();
        
        return _mapper.Map<UsuarioDto>(usuario);
    }
    
    public async Task RemoverAsync(int id, CancellationToken cancellationToken = default)
    {
        var usuario = await _usuarioRepository.ObterPorIdAsync(id, cancellationToken);
        if (usuario == null)
        {
            throw new InvalidOperationException("Usuário não encontrado");
        }
        
        await _usuarioRepository.RemoverAsync(usuario, cancellationToken);
        await _unitOfWork.SalvarAlteracoesAsync();
    }
    
    public async Task RegistrarLoginAsync(int id, CancellationToken cancellationToken = default)
    {
        var usuario = await _usuarioRepository.ObterPorIdAsync(id, cancellationToken);
        if (usuario == null)
        {
            throw new InvalidOperationException("Usuário não encontrado");
        }
        
        usuario.RegistrarLogin();
        
        await _usuarioRepository.AtualizarAsync(usuario, cancellationToken);
        await _unitOfWork.SalvarAlteracoesAsync();
    }
    
    public async Task<bool> EmailJaExisteAsync(string email, int? usuarioIdExcluir = null, CancellationToken cancellationToken = default)
    {
        return await _usuarioRepository.ExisteEmailAsync(email, usuarioIdExcluir, cancellationToken);
    }
    
    public async Task<bool> CpfJaExisteAsync(string cpf, int? usuarioIdExcluir = null, CancellationToken cancellationToken = default)
    {
        return await _usuarioRepository.ExisteCpfAsync(cpf, usuarioIdExcluir, cancellationToken);
    }
}
</UsuarioService.cs>
<AlterarEmailDtoValidator.cs>
using FluentValidation;
using Agriis.Usuarios.Aplicacao.DTOs;

namespace Agriis.Usuarios.Aplicacao.Validadores;

/// <summary>
/// Validador para o DTO de alteração de email
/// </summary>
public class AlterarEmailDtoValidator : AbstractValidator<AlterarEmailDto>
{
    public AlterarEmailDtoValidator()
    {
        RuleFor(x => x.NovoEmail)
            .NotEmpty()
            .WithMessage("Novo email é obrigatório")
            .EmailAddress()
            .WithMessage("Novo email deve ter um formato válido")
            .MaximumLength(255)
            .WithMessage("Novo email deve ter no máximo 255 caracteres");
    }
}
</AlterarEmailDtoValidator.cs>
<AlterarSenhaDtoValidator.cs>
using FluentValidation;
using Agriis.Usuarios.Aplicacao.DTOs;

namespace Agriis.Usuarios.Aplicacao.Validadores;

/// <summary>
/// Validador para o DTO de alteração de senha
/// </summary>
public class AlterarSenhaDtoValidator : AbstractValidator<AlterarSenhaDto>
{
    public AlterarSenhaDtoValidator()
    {
        RuleFor(x => x.SenhaAtual)
            .NotEmpty()
            .WithMessage("Senha atual é obrigatória");
            
        RuleFor(x => x.NovaSenha)
            .NotEmpty()
            .WithMessage("Nova senha é obrigatória")
            .MinimumLength(6)
            .WithMessage("Nova senha deve ter no mínimo 6 caracteres");
    }
}
</AlterarSenhaDtoValidator.cs>
<AtualizarUsuarioDtoValidator.cs>
using FluentValidation;
using Agriis.Usuarios.Aplicacao.DTOs;
using Agriis.Compartilhado.Dominio.Validadores;

namespace Agriis.Usuarios.Aplicacao.Validadores;

/// <summary>
/// Validador para o DTO de atualização de usuário
/// </summary>
public class AtualizarUsuarioDtoValidator : AbstractValidator<AtualizarUsuarioDto>
{
    public AtualizarUsuarioDtoValidator()
    {
        RuleFor(x => x.Nome)
            .NotEmpty()
            .WithMessage("Nome é obrigatório")
            .MaximumLength(200)
            .WithMessage("Nome deve ter no máximo 200 caracteres");
            
        RuleFor(x => x.Celular)
            .Must(ValidarTelefone)
            .When(x => !string.IsNullOrWhiteSpace(x.Celular))
            .WithMessage("Celular deve ter um formato válido");
            
        RuleFor(x => x.Cpf)
            .Must(ValidarCpf)
            .When(x => !string.IsNullOrWhiteSpace(x.Cpf))
            .WithMessage("CPF deve ter um formato válido");
    }
    
    private static bool ValidarTelefone(string? telefone)
    {
        if (string.IsNullOrWhiteSpace(telefone))
            return true;
            
        // Remove caracteres não numéricos
        var numeroLimpo = new string(telefone.Where(char.IsDigit).ToArray());
        
        // Valida se tem 10 ou 11 dígitos (telefone fixo ou celular)
        return numeroLimpo.Length is 10 or 11;
    }
    
    private static bool ValidarCpf(string? cpf)
    {
        if (string.IsNullOrWhiteSpace(cpf))
            return true;
            
        return ValidadorDocumentosBrasileiros.ValidarCpf(cpf);
    }
}
</AtualizarUsuarioDtoValidator.cs>
<CriarUsuarioDtoValidator.cs>
using FluentValidation;
using Agriis.Usuarios.Aplicacao.DTOs;
using Agriis.Compartilhado.Dominio.Validadores;

namespace Agriis.Usuarios.Aplicacao.Validadores;

/// <summary>
/// Validador para o DTO de criação de usuário
/// </summary>
public class CriarUsuarioDtoValidator : AbstractValidator<CriarUsuarioDto>
{
    public CriarUsuarioDtoValidator()
    {
        RuleFor(x => x.Nome)
            .NotEmpty()
            .WithMessage("Nome é obrigatório")
            .MaximumLength(200)
            .WithMessage("Nome deve ter no máximo 200 caracteres");
            
        RuleFor(x => x.Email)
            .NotEmpty()
            .WithMessage("Email é obrigatório")
            .EmailAddress()
            .WithMessage("Email deve ter um formato válido")
            .MaximumLength(255)
            .WithMessage("Email deve ter no máximo 255 caracteres");
            
        RuleFor(x => x.Celular)
            .Must(ValidarTelefone)
            .When(x => !string.IsNullOrWhiteSpace(x.Celular))
            .WithMessage("Celular deve ter um formato válido");
            
        RuleFor(x => x.Cpf)
            .Must(ValidarCpf)
            .When(x => !string.IsNullOrWhiteSpace(x.Cpf))
            .WithMessage("CPF deve ter um formato válido");
            
        RuleFor(x => x.Senha)
            .MinimumLength(6)
            .WithMessage("Senha deve ter no mínimo 6 caracteres")
            .When(x => !string.IsNullOrWhiteSpace(x.Senha));
    }
    
    private static bool ValidarTelefone(string? telefone)
    {
        if (string.IsNullOrWhiteSpace(telefone))
            return true;
            
        // Remove caracteres não numéricos
        var numeroLimpo = new string(telefone.Where(char.IsDigit).ToArray());
        
        // Valida se tem 10 ou 11 dígitos (telefone fixo ou celular)
        return numeroLimpo.Length is 10 or 11;
    }
    
    private static bool ValidarCpf(string? cpf)
    {
        if (string.IsNullOrWhiteSpace(cpf))
            return true;
            
        return ValidadorDocumentosBrasileiros.ValidarCpf(cpf);
    }
}
</CriarUsuarioDtoValidator.cs>
<Usuario.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Compartilhado.Dominio.ObjetosValor;

namespace Agriis.Usuarios.Dominio.Entidades;

/// <summary>
/// Entidade que representa um usuário do sistema
/// </summary>
public class Usuario : EntidadeRaizAgregada
{
    /// <summary>
    /// Nome completo do usuário
    /// </summary>
    public string Nome { get; private set; }
    
    /// <summary>
    /// Email do usuário (único no sistema)
    /// </summary>
    public string Email { get; private set; }
    
    /// <summary>
    /// Número de celular do usuário
    /// </summary>
    public string? Celular { get; private set; }
    
    /// <summary>
    /// CPF do usuário
    /// </summary>
    public Cpf? Cpf { get; private set; }
    
    /// <summary>
    /// Hash da senha do usuário
    /// </summary>
    public string? SenhaHash { get; private set; }
    
    /// <summary>
    /// Indica se o usuário está ativo
    /// </summary>
    public bool Ativo { get; private set; }
    
    /// <summary>
    /// Data do último login
    /// </summary>
    public DateTime? UltimoLogin { get; private set; }
    
    /// <summary>
    /// URL da logo/avatar do usuário (AWS S3)
    /// </summary>
    public string? LogoUrl { get; private set; }
    
    /// <summary>
    /// Roles/perfis associados ao usuário
    /// </summary>
    public virtual ICollection<UsuarioRole> UsuarioRoles { get; private set; }
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected Usuario()
    {
        Nome = string.Empty;
        Email = string.Empty;
        UsuarioRoles = new List<UsuarioRole>();
    }
    
    /// <summary>
    /// Construtor para criar um novo usuário
    /// </summary>
    /// <param name="nome">Nome completo do usuário</param>
    /// <param name="email">Email do usuário</param>
    /// <param name="celular">Número de celular (opcional)</param>
    /// <param name="cpf">CPF do usuário (opcional)</param>
    public Usuario(string nome, string email, string? celular = null, Cpf? cpf = null)
    {
        ValidarDadosObrigatorios(nome, email);
        
        Nome = nome.Trim();
        Email = email.Trim().ToLowerInvariant();
        Celular = celular?.Trim();
        Cpf = cpf;
        Ativo = true;
        UsuarioRoles = new List<UsuarioRole>();
    }
    
    /// <summary>
    /// Atualiza os dados básicos do usuário
    /// </summary>
    /// <param name="nome">Novo nome</param>
    /// <param name="celular">Novo celular</param>
    /// <param name="cpf">Novo CPF</param>
    public void AtualizarDados(string nome, string? celular = null, Cpf? cpf = null)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome é obrigatório", nameof(nome));
            
        Nome = nome.Trim();
        Celular = celular?.Trim();
        Cpf = cpf;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza o email do usuário
    /// </summary>
    /// <param name="novoEmail">Novo email</param>
    public void AtualizarEmail(string novoEmail)
    {
        if (string.IsNullOrWhiteSpace(novoEmail))
            throw new ArgumentException("Email é obrigatório", nameof(novoEmail));
            
        if (!ValidarEmail(novoEmail))
            throw new ArgumentException("Email inválido", nameof(novoEmail));
            
        Email = novoEmail.Trim().ToLowerInvariant();
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Define a senha do usuário
    /// </summary>
    /// <param name="senhaHash">Hash da senha</param>
    public void DefinirSenha(string senhaHash)
    {
        if (string.IsNullOrWhiteSpace(senhaHash))
            throw new ArgumentException("Hash da senha é obrigatório", nameof(senhaHash));
            
        SenhaHash = senhaHash;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Ativa o usuário
    /// </summary>
    public void Ativar()
    {
        Ativo = true;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Desativa o usuário
    /// </summary>
    public void Desativar()
    {
        Ativo = false;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Registra o último login do usuário
    /// </summary>
    public void RegistrarLogin()
    {
        UltimoLogin = DateTime.UtcNow;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Atualiza a URL da logo do usuário
    /// </summary>
    /// <param name="logoUrl">Nova URL da logo</param>
    public void AtualizarLogo(string? logoUrl)
    {
        LogoUrl = logoUrl;
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Adiciona uma role ao usuário
    /// </summary>
    /// <param name="role">Role a ser adicionada</param>
    public void AdicionarRole(Roles role)
    {
        if (UsuarioRoles.Any(ur => ur.Role == role))
            return; // Role já existe
            
        var usuarioRole = new UsuarioRole(Id, role);
        UsuarioRoles.Add(usuarioRole);
        AtualizarDataModificacao();
    }
    
    /// <summary>
    /// Remove uma role do usuário
    /// </summary>
    /// <param name="role">Role a ser removida</param>
    public void RemoverRole(Roles role)
    {
        var usuarioRole = UsuarioRoles.FirstOrDefault(ur => ur.Role == role);
        if (usuarioRole != null)
        {
            UsuarioRoles.Remove(usuarioRole);
            AtualizarDataModificacao();
        }
    }
    
    /// <summary>
    /// Verifica se o usuário possui uma role específica
    /// </summary>
    /// <param name="role">Role a ser verificada</param>
    /// <returns>True se o usuário possui a role</returns>
    public bool PossuiRole(Roles role)
    {
        return UsuarioRoles.Any(ur => ur.Role == role);
    }
    
    /// <summary>
    /// Obtém todas as roles do usuário
    /// </summary>
    /// <returns>Lista de roles</returns>
    public IEnumerable<Roles> ObterRoles()
    {
        return UsuarioRoles.Select(ur => ur.Role);
    }
    
    /// <summary>
    /// Valida os dados obrigatórios
    /// </summary>
    private static void ValidarDadosObrigatorios(string nome, string email)
    {
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("Nome é obrigatório", nameof(nome));
            
        if (string.IsNullOrWhiteSpace(email))
            throw new ArgumentException("Email é obrigatório", nameof(email));
            
        if (!ValidarEmail(email))
            throw new ArgumentException("Email inválido", nameof(email));
    }
    
    /// <summary>
    /// Valida o formato do email
    /// </summary>
    /// <param name="email">Email a ser validado</param>
    /// <returns>True se o email é válido</returns>
    private static bool ValidarEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}
</Usuario.cs>
<UsuarioRole.cs>
using Agriis.Compartilhado.Dominio.Entidades;
using Agriis.Compartilhado.Dominio.Enums;

namespace Agriis.Usuarios.Dominio.Entidades;

/// <summary>
/// Entidade que representa a associação entre usuário e role
/// </summary>
public class UsuarioRole : EntidadeBase
{
    /// <summary>
    /// ID do usuário
    /// </summary>
    public int UsuarioId { get; private set; }
    
    /// <summary>
    /// Role associada ao usuário
    /// </summary>
    public Roles Role { get; private set; }
    
    /// <summary>
    /// Data de atribuição da role
    /// </summary>
    public DateTime DataAtribuicao { get; private set; }
    
    /// <summary>
    /// Usuário associado
    /// </summary>
    public virtual Usuario Usuario { get; private set; } = null!;
    
    /// <summary>
    /// Construtor protegido para o Entity Framework
    /// </summary>
    protected UsuarioRole()
    {
    }
    
    /// <summary>
    /// Construtor para criar uma nova associação usuário-role
    /// </summary>
    /// <param name="usuarioId">ID do usuário</param>
    /// <param name="role">Role a ser associada</param>
    public UsuarioRole(int usuarioId, Roles role)
    {
        UsuarioId = usuarioId;
        Role = role;
        DataAtribuicao = DateTime.UtcNow;
    }
    
    /// <summary>
    /// Verifica se a role é de administrador
    /// </summary>
    /// <returns>True se é role de admin</returns>
    public bool EhRoleAdmin()
    {
        return Role == Roles.RoleAdmin;
    }
    
    /// <summary>
    /// Verifica se a role é de fornecedor
    /// </summary>
    /// <returns>True se é role de fornecedor</returns>
    public bool EhRoleFornecedor()
    {
        return Role == Roles.RoleFornecedorWebAdmin || 
               Role == Roles.RoleFornecedorWebRepresentante;
    }
    
    /// <summary>
    /// Verifica se a role é de comprador/produtor
    /// </summary>
    /// <returns>True se é role de comprador</returns>
    public bool EhRoleComprador()
    {
        return Role == Roles.RoleComprador;
    }
}
</UsuarioRole.cs>
<IUsuarioRepository.cs>
using Agriis.Compartilhado.Dominio.Interfaces;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Usuarios.Dominio.Entidades;

namespace Agriis.Usuarios.Dominio.Interfaces;

/// <summary>
/// Interface do repositório de usuários
/// </summary>
public interface IUsuarioRepository : IRepository<Usuario>
{
    /// <summary>
    /// Obtém um usuário por email
    /// </summary>
    /// <param name="email">Email do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Usuário encontrado ou null</returns>
    Task<Usuario?> ObterPorEmailAsync(string email, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém um usuário por CPF
    /// </summary>
    /// <param name="cpf">CPF do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Usuário encontrado ou null</returns>
    Task<Usuario?> ObterPorCpfAsync(string cpf, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuários por role
    /// </summary>
    /// <param name="role">Role a ser filtrada</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de usuários com a role especificada</returns>
    Task<IEnumerable<Usuario>> ObterPorRoleAsync(Roles role, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuários ativos
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Lista de usuários ativos</returns>
    Task<IEnumerable<Usuario>> ObterAtivosAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe um usuário com o email especificado
    /// </summary>
    /// <param name="email">Email a ser verificado</param>
    /// <param name="usuarioIdExcluir">ID do usuário a ser excluído da verificação (para updates)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se existe</returns>
    Task<bool> ExisteEmailAsync(string email, int? usuarioIdExcluir = null, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Verifica se existe um usuário com o CPF especificado
    /// </summary>
    /// <param name="cpf">CPF a ser verificado</param>
    /// <param name="usuarioIdExcluir">ID do usuário a ser excluído da verificação (para updates)</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>True se existe</returns>
    Task<bool> ExisteCpfAsync(string cpf, int? usuarioIdExcluir = null, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuários com paginação
    /// </summary>
    /// <param name="pagina">Número da página (base 1)</param>
    /// <param name="tamanhoPagina">Tamanho da página</param>
    /// <param name="filtro">Filtro de busca (nome ou email)</param>
    /// <param name="apenasAtivos">Se deve filtrar apenas usuários ativos</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Resultado paginado de usuários</returns>
    Task<(IEnumerable<Usuario> Usuarios, int Total)> ObterPaginadoAsync(
        int pagina, 
        int tamanhoPagina, 
        string? filtro = null, 
        bool apenasAtivos = true, 
        CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuário com suas roles carregadas
    /// </summary>
    /// <param name="id">ID do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Usuário com roles ou null</returns>
    Task<Usuario?> ObterComRolesAsync(int id, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Obtém usuário por email com suas roles carregadas
    /// </summary>
    /// <param name="email">Email do usuário</param>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>Usuário com roles ou null</returns>
    Task<Usuario?> ObterPorEmailComRolesAsync(string email, CancellationToken cancellationToken = default);
}
</IUsuarioRepository.cs>
<UsuarioConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Usuarios.Dominio.Entidades;
using Agriis.Compartilhado.Infraestrutura.Persistencia.Conversores;

namespace Agriis.Usuarios.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade Usuario
/// </summary>
public class UsuarioConfiguration : IEntityTypeConfiguration<Usuario>
{
    public void Configure(EntityTypeBuilder<Usuario> builder)
    {
        // Tabela
        builder.ToTable("usuarios");
        
        // Chave primária
        builder.HasKey(u => u.Id);
        builder.Property(u => u.Id)
            .HasColumnName("id")
            .ValueGeneratedOnAdd();
        
        // Propriedades básicas
        builder.Property(u => u.Nome)
            .HasColumnName("nome")
            .HasMaxLength(200)
            .IsRequired();
        
        builder.Property(u => u.Email)
            .HasColumnName("email")
            .HasMaxLength(255)
            .IsRequired();
        
        builder.Property(u => u.Celular)
            .HasColumnName("celular")
            .HasMaxLength(20);
        
        // CPF como objeto de valor
        builder.Property(u => u.Cpf)
            .HasColumnName("cpf")
            .HasMaxLength(11)
            .HasConversion(ValueObjectConverters.CpfNullableConverter);
        
        builder.Property(u => u.SenhaHash)
            .HasColumnName("senha_hash")
            .HasMaxLength(255);
        
        builder.Property(u => u.Ativo)
            .HasColumnName("ativo")
            .HasDefaultValue(true);
        
        builder.Property(u => u.UltimoLogin)
            .HasColumnName("ultimo_login")
            .HasColumnType("timestamp with time zone");
        
        builder.Property(u => u.LogoUrl)
            .HasColumnName("logo_url")
            .HasMaxLength(500);
        
        // Auditoria
        builder.Property(u => u.DataCriacao)
            .HasColumnName("data_criacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();
        
        builder.Property(u => u.DataAtualizacao)
            .HasColumnName("data_atualizacao")
            .HasColumnType("timestamp with time zone");
        
        // Índices
        builder.HasIndex(u => u.Email)
            .IsUnique()
            .HasDatabaseName("ix_usuarios_email");
        
        builder.HasIndex(u => u.Cpf)
            .IsUnique()
            .HasDatabaseName("ix_usuarios_cpf")
            .HasFilter("cpf IS NOT NULL");
        
        builder.HasIndex(u => u.Ativo)
            .HasDatabaseName("ix_usuarios_ativo");
        
        // Relacionamentos
        builder.HasMany(u => u.UsuarioRoles)
            .WithOne(ur => ur.Usuario)
            .HasForeignKey(ur => ur.UsuarioId)
            .OnDelete(DeleteBehavior.Cascade);
    }
}
</UsuarioConfiguration.cs>
<UsuarioRoleConfiguration.cs>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Agriis.Usuarios.Dominio.Entidades;
using Agriis.Compartilhado.Infraestrutura.Persistencia.Conversores;

namespace Agriis.Usuarios.Infraestrutura.Configuracoes;

/// <summary>
/// Configuração do Entity Framework para a entidade UsuarioRole
/// </summary>
public class UsuarioRoleConfiguration : IEntityTypeConfiguration<UsuarioRole>
{
    public void Configure(EntityTypeBuilder<UsuarioRole> builder)
    {
        // Tabela
        builder.ToTable("usuario_roles");
        
        // Chave primária
        builder.HasKey(ur => ur.Id);
        builder.Property(ur => ur.Id)
            .HasColumnName("id")
            .ValueGeneratedOnAdd();
        
        // Propriedades
        builder.Property(ur => ur.UsuarioId)
            .HasColumnName("usuario_id")
            .IsRequired();
        
        builder.Property(ur => ur.Role)
            .HasColumnName("role")
            .HasConversion(EnumConverters.RolesConverter)
            .IsRequired();
        
        builder.Property(ur => ur.DataAtribuicao)
            .HasColumnName("data_atribuicao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();
        
        // Auditoria
        builder.Property(ur => ur.DataCriacao)
            .HasColumnName("data_criacao")
            .HasColumnType("timestamp with time zone")
            .IsRequired();
        
        builder.Property(ur => ur.DataAtualizacao)
            .HasColumnName("data_atualizacao")
            .HasColumnType("timestamp with time zone");
        
        // Índices
        builder.HasIndex(ur => ur.UsuarioId)
            .HasDatabaseName("ix_usuario_roles_usuario_id");
        
        builder.HasIndex(ur => ur.Role)
            .HasDatabaseName("ix_usuario_roles_role");
        
        // Índice único para evitar roles duplicadas por usuário
        builder.HasIndex(ur => new { ur.UsuarioId, ur.Role })
            .IsUnique()
            .HasDatabaseName("ix_usuario_roles_usuario_role_unique");
        
        // Relacionamentos
        builder.HasOne(ur => ur.Usuario)
            .WithMany(u => u.UsuarioRoles)
            .HasForeignKey(ur => ur.UsuarioId)
            .OnDelete(DeleteBehavior.Cascade);
    }
}
</UsuarioRoleConfiguration.cs>
<UsuarioRepository.cs>
using Microsoft.EntityFrameworkCore;
using Agriis.Usuarios.Dominio.Entidades;
using Agriis.Usuarios.Dominio.Interfaces;
using Agriis.Compartilhado.Dominio.Enums;
using Agriis.Compartilhado.Infraestrutura.Persistencia;

namespace Agriis.Usuarios.Infraestrutura.Repositorios;

/// <summary>
/// Implementação do repositório de usuários
/// </summary>
public class UsuarioRepository : RepositoryBase<Usuario, DbContext>, IUsuarioRepository
{
    public UsuarioRepository(DbContext context) : base(context)
    {
    }
    
    public async Task<Usuario?> ObterPorEmailAsync(string email, CancellationToken cancellationToken = default)
    {
        return await Context.Set<Usuario>()
            .FirstOrDefaultAsync(u => u.Email == email.ToLowerInvariant(), cancellationToken);
    }
    
    public async Task<Usuario?> ObterPorCpfAsync(string cpf, CancellationToken cancellationToken = default)
    {
        return await Context.Set<Usuario>()
            .FirstOrDefaultAsync(u => u.Cpf != null && u.Cpf.Valor == cpf, cancellationToken);
    }
    
    public async Task<IEnumerable<Usuario>> ObterPorRoleAsync(Roles role, CancellationToken cancellationToken = default)
    {
        return await Context.Set<Usuario>()
            .Include(u => u.UsuarioRoles)
            .Where(u => u.UsuarioRoles.Any(ur => ur.Role == role))
            .ToListAsync(cancellationToken);
    }
    
    public async Task<IEnumerable<Usuario>> ObterAtivosAsync(CancellationToken cancellationToken = default)
    {
        return await Context.Set<Usuario>()
            .Include(u => u.UsuarioRoles)
            .Where(u => u.Ativo)
            .ToListAsync(cancellationToken);
    }
    
    public async Task<bool> ExisteEmailAsync(string email, int? usuarioIdExcluir = null, CancellationToken cancellationToken = default)
    {
        var query = Context.Set<Usuario>()
            .Where(u => u.Email == email.ToLowerInvariant());
        
        if (usuarioIdExcluir.HasValue)
        {
            query = query.Where(u => u.Id != usuarioIdExcluir.Value);
        }
        
        return await query.AnyAsync(cancellationToken);
    }
    
    public async Task<bool> ExisteCpfAsync(string cpf, int? usuarioIdExcluir = null, CancellationToken cancellationToken = default)
    {
        var query = Context.Set<Usuario>()
            .Where(u => u.Cpf != null && u.Cpf.Valor == cpf);
        
        if (usuarioIdExcluir.HasValue)
        {
            query = query.Where(u => u.Id != usuarioIdExcluir.Value);
        }
        
        return await query.AnyAsync(cancellationToken);
    }
    
    public async Task<(IEnumerable<Usuario> Usuarios, int Total)> ObterPaginadoAsync(
        int pagina, 
        int tamanhoPagina, 
        string? filtro = null, 
        bool apenasAtivos = true, 
        CancellationToken cancellationToken = default)
    {
        var query = Context.Set<Usuario>()
            .Include(u => u.UsuarioRoles)
            .AsQueryable();
        
        // Filtrar apenas ativos se solicitado
        if (apenasAtivos)
        {
            query = query.Where(u => u.Ativo);
        }
        
        // Aplicar filtro de busca
        if (!string.IsNullOrWhiteSpace(filtro))
        {
            var filtroLower = filtro.ToLowerInvariant();
            query = query.Where(u => 
                u.Nome.ToLower().Contains(filtroLower) ||
                u.Email.ToLower().Contains(filtroLower));
        }
        
        // Contar total
        var total = await query.CountAsync(cancellationToken);
        
        // Aplicar paginação
        var usuarios = await query
            .OrderBy(u => u.Nome)
            .Skip((pagina - 1) * tamanhoPagina)
            .Take(tamanhoPagina)
            .ToListAsync(cancellationToken);
        
        return (usuarios, total);
    }
    
    public async Task<Usuario?> ObterComRolesAsync(int id, CancellationToken cancellationToken = default)
    {
        return await Context.Set<Usuario>()
            .Include(u => u.UsuarioRoles)
            .FirstOrDefaultAsync(u => u.Id == id, cancellationToken);
    }
    
    public async Task<Usuario?> ObterPorEmailComRolesAsync(string email, CancellationToken cancellationToken = default)
    {
        return await Context.Set<Usuario>()
            .Include(u => u.UsuarioRoles)
            .FirstOrDefaultAsync(u => u.Email == email.ToLowerInvariant(), cancellationToken);
    }
}
</UsuarioRepository.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Compartilhado.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Compartilhado.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Compartilhado.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Compartilhado.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Compartilhado.Aplicacao.AssemblyInfo.cs>
<Agriis.Compartilhado.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Compartilhado.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Compartilhado.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Compartilhado.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Compartilhado.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Compartilhado.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Compartilhado.Aplicacao.AssemblyInfo.cs>
<Agriis.Compartilhado.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Compartilhado.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Compartilhado.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Compartilhado.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Compartilhado.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Compartilhado.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Compartilhado.Dominio.AssemblyInfo.cs>
<Agriis.Compartilhado.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Compartilhado.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Compartilhado.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Compartilhado.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Compartilhado.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Compartilhado.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Compartilhado.Dominio.AssemblyInfo.cs>
<Agriis.Compartilhado.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Compartilhado.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Compartilhado.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Compartilhado.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Compartilhado.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Compartilhado.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Compartilhado.Infraestrutura.AssemblyInfo.cs>
<Agriis.Compartilhado.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Compartilhado.Infraestrutura.GlobalUsings.g.cs>
<EFCoreNpgsqlNetTopologySuite.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesig" +
    "nTimeServices, Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite", "Npgsql.EntityFrameworkCore.PostgreSQL")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</EFCoreNpgsqlNetTopologySuite.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Compartilhado.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Compartilhado.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Compartilhado.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Compartilhado.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Compartilhado.Infraestrutura.AssemblyInfo.cs>
<Agriis.Compartilhado.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Compartilhado.Infraestrutura.GlobalUsings.g.cs>
<EFCoreNpgsqlNetTopologySuite.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute(("Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesig" +
    "nTimeServices, Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite"), "Npgsql.EntityFrameworkCore.PostgreSQL")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</EFCoreNpgsqlNetTopologySuite.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Autenticacao.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Autenticacao.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Autenticacao.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Autenticacao.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Autenticacao.Aplicacao.AssemblyInfo.cs>
<Agriis.Autenticacao.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Autenticacao.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Autenticacao.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Autenticacao.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Autenticacao.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Autenticacao.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Autenticacao.Dominio.AssemblyInfo.cs>
<Agriis.Autenticacao.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Autenticacao.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Autenticacao.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Autenticacao.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Autenticacao.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Autenticacao.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Autenticacao.Dominio.AssemblyInfo.cs>
<Agriis.Autenticacao.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Autenticacao.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Autenticacao.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Autenticacao.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Autenticacao.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Autenticacao.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Autenticacao.Infraestrutura.AssemblyInfo.cs>
<Agriis.Autenticacao.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Autenticacao.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Catalogos.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Catalogos.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Catalogos.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Catalogos.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Catalogos.Aplicacao.AssemblyInfo.cs>
<Agriis.Catalogos.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Catalogos.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Catalogos.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Catalogos.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Catalogos.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Catalogos.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Catalogos.Dominio.AssemblyInfo.cs>
<Agriis.Catalogos.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Catalogos.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Catalogos.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Catalogos.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Catalogos.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Catalogos.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Catalogos.Infraestrutura.AssemblyInfo.cs>
<Agriis.Catalogos.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Catalogos.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Combos.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Combos.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Combos.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Combos.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Combos.Aplicacao.AssemblyInfo.cs>
<Agriis.Combos.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Combos.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Combos.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Combos.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Combos.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Combos.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Combos.Dominio.AssemblyInfo.cs>
<Agriis.Combos.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Combos.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Combos.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Combos.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Combos.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Combos.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Combos.Infraestrutura.AssemblyInfo.cs>
<Agriis.Combos.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Combos.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Culturas.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Culturas.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Culturas.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Culturas.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Culturas.Aplicacao.AssemblyInfo.cs>
<Agriis.Culturas.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Culturas.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Culturas.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Culturas.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Culturas.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Culturas.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Culturas.Dominio.AssemblyInfo.cs>
<Agriis.Culturas.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Culturas.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Culturas.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Culturas.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Culturas.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Culturas.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Culturas.Infraestrutura.AssemblyInfo.cs>
<Agriis.Culturas.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Culturas.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Enderecos.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Enderecos.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Enderecos.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Enderecos.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Enderecos.Aplicacao.AssemblyInfo.cs>
<Agriis.Enderecos.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Enderecos.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Enderecos.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Enderecos.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Enderecos.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Enderecos.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Enderecos.Dominio.AssemblyInfo.cs>
<Agriis.Enderecos.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Enderecos.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Enderecos.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Enderecos.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Enderecos.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Enderecos.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Enderecos.Infraestrutura.AssemblyInfo.cs>
<Agriis.Enderecos.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Enderecos.Infraestrutura.GlobalUsings.g.cs>
<EFCoreNpgsqlNetTopologySuite.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesig" +
    "nTimeServices, Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite", "Npgsql.EntityFrameworkCore.PostgreSQL")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</EFCoreNpgsqlNetTopologySuite.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Fornecedores.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Fornecedores.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Fornecedores.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Fornecedores.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Fornecedores.Aplicacao.AssemblyInfo.cs>
<Agriis.Fornecedores.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Fornecedores.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Fornecedores.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Fornecedores.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Fornecedores.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Fornecedores.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Fornecedores.Dominio.AssemblyInfo.cs>
<Agriis.Fornecedores.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Fornecedores.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Fornecedores.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Fornecedores.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Fornecedores.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Fornecedores.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Fornecedores.Dominio.AssemblyInfo.cs>
<Agriis.Fornecedores.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Fornecedores.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Fornecedores.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Fornecedores.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Fornecedores.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Fornecedores.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Fornecedores.Infraestrutura.AssemblyInfo.cs>
<Agriis.Fornecedores.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Fornecedores.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Pagamentos.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Pagamentos.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Pagamentos.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Pagamentos.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Pagamentos.Aplicacao.AssemblyInfo.cs>
<Agriis.Pagamentos.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Pagamentos.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Pagamentos.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Pagamentos.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Pagamentos.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Pagamentos.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Pagamentos.Dominio.AssemblyInfo.cs>
<Agriis.Pagamentos.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Pagamentos.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Pagamentos.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Pagamentos.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Pagamentos.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Pagamentos.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Pagamentos.Infraestrutura.AssemblyInfo.cs>
<Agriis.Pagamentos.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Pagamentos.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Pedidos.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Pedidos.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Pedidos.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Pedidos.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Pedidos.Aplicacao.AssemblyInfo.cs>
<Agriis.Pedidos.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Pedidos.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Pedidos.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Pedidos.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Pedidos.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Pedidos.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Pedidos.Dominio.AssemblyInfo.cs>
<Agriis.Pedidos.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Pedidos.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Pedidos.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Pedidos.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Pedidos.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Pedidos.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Pedidos.Dominio.AssemblyInfo.cs>
<Agriis.Pedidos.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Pedidos.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Pedidos.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Pedidos.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Pedidos.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Pedidos.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Pedidos.Infraestrutura.AssemblyInfo.cs>
<Agriis.Pedidos.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Pedidos.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.PontosDistribuicao.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.PontosDistribuicao.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.PontosDistribuicao.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.PontosDistribuicao.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.PontosDistribuicao.Aplicacao.AssemblyInfo.cs>
<Agriis.PontosDistribuicao.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.PontosDistribuicao.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.PontosDistribuicao.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.PontosDistribuicao.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.PontosDistribuicao.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.PontosDistribuicao.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.PontosDistribuicao.Dominio.AssemblyInfo.cs>
<Agriis.PontosDistribuicao.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.PontosDistribuicao.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.PontosDistribuicao.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.PontosDistribuicao.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.PontosDistribuicao.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.PontosDistribuicao.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.PontosDistribuicao.Infraestrutura.AssemblyInfo.cs>
<Agriis.PontosDistribuicao.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.PontosDistribuicao.Infraestrutura.GlobalUsings.g.cs>
<EFCoreNpgsqlNetTopologySuite.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesig" +
    "nTimeServices, Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite", "Npgsql.EntityFrameworkCore.PostgreSQL")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</EFCoreNpgsqlNetTopologySuite.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Produtores.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Produtores.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Produtores.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Produtores.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Produtores.Aplicacao.AssemblyInfo.cs>
<Agriis.Produtores.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Produtores.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Produtores.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Produtores.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Produtores.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Produtores.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Produtores.Dominio.AssemblyInfo.cs>
<Agriis.Produtores.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Produtores.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Produtores.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Produtores.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Produtores.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Produtores.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Produtores.Dominio.AssemblyInfo.cs>
<Agriis.Produtores.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Produtores.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Produtores.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Produtores.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Produtores.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Produtores.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Produtores.Infraestrutura.AssemblyInfo.cs>
<Agriis.Produtores.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Produtores.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Produtos.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Produtos.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Produtos.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Produtos.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Produtos.Aplicacao.AssemblyInfo.cs>
<Agriis.Produtos.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Produtos.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Produtos.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Produtos.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Produtos.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Produtos.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Produtos.Dominio.AssemblyInfo.cs>
<Agriis.Produtos.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Produtos.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Produtos.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Produtos.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Produtos.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Produtos.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Produtos.Infraestrutura.AssemblyInfo.cs>
<Agriis.Produtos.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Produtos.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Propriedades.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Propriedades.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Propriedades.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Propriedades.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Propriedades.Aplicacao.AssemblyInfo.cs>
<Agriis.Propriedades.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Propriedades.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Propriedades.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Propriedades.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Propriedades.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Propriedades.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Propriedades.Dominio.AssemblyInfo.cs>
<Agriis.Propriedades.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Propriedades.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Propriedades.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Propriedades.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Propriedades.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Propriedades.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Propriedades.Infraestrutura.AssemblyInfo.cs>
<Agriis.Propriedades.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Propriedades.Infraestrutura.GlobalUsings.g.cs>
<EFCoreNpgsqlNetTopologySuite.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesig" +
    "nTimeServices, Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite", "Npgsql.EntityFrameworkCore.PostgreSQL")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</EFCoreNpgsqlNetTopologySuite.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Safras.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Safras.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Safras.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Safras.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Safras.Aplicacao.AssemblyInfo.cs>
<Agriis.Safras.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Safras.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Safras.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Safras.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Safras.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Safras.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Safras.Dominio.AssemblyInfo.cs>
<Agriis.Safras.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Safras.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Safras.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Safras.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Safras.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Safras.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Safras.Infraestrutura.AssemblyInfo.cs>
<Agriis.Safras.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Safras.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Segmentacoes.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Segmentacoes.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Segmentacoes.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Segmentacoes.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Segmentacoes.Aplicacao.AssemblyInfo.cs>
<Agriis.Segmentacoes.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Segmentacoes.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Segmentacoes.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Segmentacoes.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Segmentacoes.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Segmentacoes.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Segmentacoes.Dominio.AssemblyInfo.cs>
<Agriis.Segmentacoes.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Segmentacoes.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Segmentacoes.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Segmentacoes.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Segmentacoes.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Segmentacoes.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Segmentacoes.Infraestrutura.AssemblyInfo.cs>
<Agriis.Segmentacoes.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Segmentacoes.Infraestrutura.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Usuarios.Aplicacao.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Usuarios.Aplicacao")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Usuarios.Aplicacao")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Usuarios.Aplicacao")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Usuarios.Aplicacao.AssemblyInfo.cs>
<Agriis.Usuarios.Aplicacao.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Usuarios.Aplicacao.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Usuarios.Dominio.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Usuarios.Dominio")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Usuarios.Dominio")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Usuarios.Dominio")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Usuarios.Dominio.AssemblyInfo.cs>
<Agriis.Usuarios.Dominio.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Usuarios.Dominio.GlobalUsings.g.cs>
<.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

</.NETCoreApp,Version=v9.0.AssemblyAttributes.cs>
<Agriis.Usuarios.Infraestrutura.AssemblyInfo.cs>
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Agriis.Usuarios.Infraestrutura")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Agriis.Usuarios.Infraestrutura")]
[assembly: System.Reflection.AssemblyTitleAttribute("Agriis.Usuarios.Infraestrutura")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Gerado pela classe WriteCodeFragment do MSBuild.


</Agriis.Usuarios.Infraestrutura.AssemblyInfo.cs>
<Agriis.Usuarios.Infraestrutura.GlobalUsings.g.cs>
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

</Agriis.Usuarios.Infraestrutura.GlobalUsings.g.cs>
